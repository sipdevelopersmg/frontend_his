(self["webpackChunkdashboard_template"] = self["webpackChunkdashboard_template"] || []).push([[528],{

/***/ 31868:
/*!********************************************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-angular-richtexteditor/__ivy_ngcc__/@syncfusion/ej2-angular-richtexteditor.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RichTextEditorComponent": () => (/* binding */ RichTextEditorComponent),
/* harmony export */   "RichTextEditorModule": () => (/* binding */ RichTextEditorModule),
/* harmony export */   "RichTextEditorAllModule": () => (/* binding */ RichTextEditorAllModule),
/* harmony export */   "ToolbarService": () => (/* binding */ ToolbarService),
/* harmony export */   "LinkService": () => (/* binding */ LinkService),
/* harmony export */   "ImageService": () => (/* binding */ ImageService),
/* harmony export */   "CountService": () => (/* binding */ CountService),
/* harmony export */   "QuickToolbarService": () => (/* binding */ QuickToolbarService),
/* harmony export */   "HtmlEditorService": () => (/* binding */ HtmlEditorService),
/* harmony export */   "MarkdownEditorService": () => (/* binding */ MarkdownEditorService),
/* harmony export */   "TableService": () => (/* binding */ TableService),
/* harmony export */   "PasteCleanupService": () => (/* binding */ PasteCleanupService),
/* harmony export */   "ResizeService": () => (/* binding */ ResizeService),
/* harmony export */   "FileManagerService": () => (/* binding */ FileManagerService),
/* harmony export */   "ɵa": () => (/* binding */ inputs),
/* harmony export */   "ɵb": () => (/* binding */ outputs),
/* harmony export */   "Toolbar": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.Toolbar),
/* harmony export */   "KeyboardEvents": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.KeyboardEvents),
/* harmony export */   "BaseToolbar": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.BaseToolbar),
/* harmony export */   "BaseQuickToolbar": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.BaseQuickToolbar),
/* harmony export */   "QuickToolbar": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.QuickToolbar),
/* harmony export */   "Count": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.Count),
/* harmony export */   "ColorPickerInput": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.ColorPickerInput),
/* harmony export */   "MarkdownToolbarStatus": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.MarkdownToolbarStatus),
/* harmony export */   "ExecCommandCallBack": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.ExecCommandCallBack),
/* harmony export */   "ToolbarAction": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.ToolbarAction),
/* harmony export */   "MarkdownEditor": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.MarkdownEditor),
/* harmony export */   "HtmlEditor": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.HtmlEditor),
/* harmony export */   "PasteCleanup": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.PasteCleanup),
/* harmony export */   "Resize": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.Resize),
/* harmony export */   "DropDownButtons": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.DropDownButtons),
/* harmony export */   "FileManager": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.FileManager),
/* harmony export */   "FullScreen": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.FullScreen),
/* harmony export */   "setAttributes": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.setAttributes),
/* harmony export */   "HtmlToolbarStatus": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.HtmlToolbarStatus),
/* harmony export */   "XhtmlValidation": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.XhtmlValidation),
/* harmony export */   "HTMLFormatter": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.HTMLFormatter),
/* harmony export */   "Formatter": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.Formatter),
/* harmony export */   "MarkdownFormatter": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.MarkdownFormatter),
/* harmony export */   "ContentRender": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.ContentRender),
/* harmony export */   "Render": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.Render),
/* harmony export */   "ToolbarRenderer": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.ToolbarRenderer),
/* harmony export */   "Link": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.Link),
/* harmony export */   "Image": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.Image),
/* harmony export */   "ViewSource": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.ViewSource),
/* harmony export */   "Table": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.Table),
/* harmony export */   "DialogRenderer": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.DialogRenderer),
/* harmony export */   "IframeContentRender": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.IframeContentRender),
/* harmony export */   "MarkdownRender": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.MarkdownRender),
/* harmony export */   "PopupRenderer": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.PopupRenderer),
/* harmony export */   "RichTextEditor": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.RichTextEditor),
/* harmony export */   "RenderType": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.RenderType),
/* harmony export */   "ToolbarType": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.ToolbarType),
/* harmony export */   "DialogType": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.DialogType),
/* harmony export */   "executeGroup": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.executeGroup),
/* harmony export */   "created": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.created),
/* harmony export */   "destroyed": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.destroyed),
/* harmony export */   "load": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.load),
/* harmony export */   "initialLoad": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.initialLoad),
/* harmony export */   "contentChanged": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.contentChanged),
/* harmony export */   "initialEnd": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.initialEnd),
/* harmony export */   "iframeMouseDown": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.iframeMouseDown),
/* harmony export */   "destroy": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.destroy),
/* harmony export */   "toolbarClick": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.toolbarClick),
/* harmony export */   "toolbarRefresh": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.toolbarRefresh),
/* harmony export */   "refreshBegin": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.refreshBegin),
/* harmony export */   "toolbarUpdated": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.toolbarUpdated),
/* harmony export */   "bindOnEnd": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.bindOnEnd),
/* harmony export */   "renderColorPicker": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.renderColorPicker),
/* harmony export */   "htmlToolbarClick": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.htmlToolbarClick),
/* harmony export */   "markdownToolbarClick": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.markdownToolbarClick),
/* harmony export */   "destroyColorPicker": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.destroyColorPicker),
/* harmony export */   "modelChanged": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.modelChanged),
/* harmony export */   "keyUp": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.keyUp),
/* harmony export */   "keyDown": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.keyDown),
/* harmony export */   "mouseUp": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.mouseUp),
/* harmony export */   "toolbarCreated": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.toolbarCreated),
/* harmony export */   "toolbarRenderComplete": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.toolbarRenderComplete),
/* harmony export */   "enableFullScreen": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.enableFullScreen),
/* harmony export */   "disableFullScreen": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.disableFullScreen),
/* harmony export */   "dropDownSelect": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.dropDownSelect),
/* harmony export */   "beforeDropDownItemRender": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.beforeDropDownItemRender),
/* harmony export */   "execCommandCallBack": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.execCommandCallBack),
/* harmony export */   "imageToolbarAction": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.imageToolbarAction),
/* harmony export */   "linkToolbarAction": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.linkToolbarAction),
/* harmony export */   "windowResize": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.windowResize),
/* harmony export */   "resizeStart": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.resizeStart),
/* harmony export */   "onResize": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.onResize),
/* harmony export */   "resizeStop": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.resizeStop),
/* harmony export */   "undo": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.undo),
/* harmony export */   "redo": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.redo),
/* harmony export */   "insertLink": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.insertLink),
/* harmony export */   "unLink": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.unLink),
/* harmony export */   "editLink": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.editLink),
/* harmony export */   "openLink": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.openLink),
/* harmony export */   "actionBegin": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.actionBegin),
/* harmony export */   "actionComplete": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.actionComplete),
/* harmony export */   "updatedToolbarStatus": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.updatedToolbarStatus),
/* harmony export */   "actionSuccess": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.actionSuccess),
/* harmony export */   "updateToolbarItem": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.updateToolbarItem),
/* harmony export */   "insertImage": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.insertImage),
/* harmony export */   "insertCompleted": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.insertCompleted),
/* harmony export */   "imageLeft": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.imageLeft),
/* harmony export */   "imageRight": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.imageRight),
/* harmony export */   "imageCenter": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.imageCenter),
/* harmony export */   "imageBreak": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.imageBreak),
/* harmony export */   "imageInline": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.imageInline),
/* harmony export */   "imageLink": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.imageLink),
/* harmony export */   "imageAlt": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.imageAlt),
/* harmony export */   "imageDelete": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.imageDelete),
/* harmony export */   "imageCaption": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.imageCaption),
/* harmony export */   "imageSize": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.imageSize),
/* harmony export */   "sourceCode": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.sourceCode),
/* harmony export */   "updateSource": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.updateSource),
/* harmony export */   "toolbarOpen": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.toolbarOpen),
/* harmony export */   "beforeDropDownOpen": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.beforeDropDownOpen),
/* harmony export */   "selectionSave": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.selectionSave),
/* harmony export */   "selectionRestore": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.selectionRestore),
/* harmony export */   "expandPopupClick": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.expandPopupClick),
/* harmony export */   "count": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.count),
/* harmony export */   "contentFocus": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.contentFocus),
/* harmony export */   "contentBlur": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.contentBlur),
/* harmony export */   "mouseDown": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.mouseDown),
/* harmony export */   "sourceCodeMouseDown": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.sourceCodeMouseDown),
/* harmony export */   "editAreaClick": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.editAreaClick),
/* harmony export */   "scroll": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.scroll),
/* harmony export */   "contentscroll": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.contentscroll),
/* harmony export */   "colorPickerChanged": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.colorPickerChanged),
/* harmony export */   "tableColorPickerChanged": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.tableColorPickerChanged),
/* harmony export */   "focusChange": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.focusChange),
/* harmony export */   "selectAll": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.selectAll),
/* harmony export */   "selectRange": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.selectRange),
/* harmony export */   "getSelectedHtml": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.getSelectedHtml),
/* harmony export */   "renderInlineToolbar": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.renderInlineToolbar),
/* harmony export */   "paste": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.paste),
/* harmony export */   "imgModule": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.imgModule),
/* harmony export */   "rtlMode": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.rtlMode),
/* harmony export */   "createTable": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.createTable),
/* harmony export */   "docClick": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.docClick),
/* harmony export */   "tableToolbarAction": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.tableToolbarAction),
/* harmony export */   "checkUndo": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.checkUndo),
/* harmony export */   "readOnlyMode": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.readOnlyMode),
/* harmony export */   "pasteClean": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.pasteClean),
/* harmony export */   "enterHandler": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.enterHandler),
/* harmony export */   "beforeDialogOpen": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.beforeDialogOpen),
/* harmony export */   "clearDialogObj": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.clearDialogObj),
/* harmony export */   "dialogOpen": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.dialogOpen),
/* harmony export */   "beforeDialogClose": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.beforeDialogClose),
/* harmony export */   "dialogClose": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.dialogClose),
/* harmony export */   "beforeQuickToolbarOpen": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.beforeQuickToolbarOpen),
/* harmony export */   "quickToolbarOpen": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.quickToolbarOpen),
/* harmony export */   "quickToolbarClose": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.quickToolbarClose),
/* harmony export */   "popupHide": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.popupHide),
/* harmony export */   "imageSelected": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.imageSelected),
/* harmony export */   "imageUploading": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.imageUploading),
/* harmony export */   "imageUploadSuccess": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.imageUploadSuccess),
/* harmony export */   "imageUploadFailed": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.imageUploadFailed),
/* harmony export */   "imageRemoving": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.imageRemoving),
/* harmony export */   "afterImageDelete": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.afterImageDelete),
/* harmony export */   "drop": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.drop),
/* harmony export */   "xhtmlValidation": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.xhtmlValidation),
/* harmony export */   "beforeImageUpload": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.beforeImageUpload),
/* harmony export */   "resizeInitialized": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.resizeInitialized),
/* harmony export */   "renderFileManager": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.renderFileManager),
/* harmony export */   "beforeImageDrop": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.beforeImageDrop),
/* harmony export */   "dynamicModule": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.dynamicModule),
/* harmony export */   "beforePasteCleanup": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.beforePasteCleanup),
/* harmony export */   "afterPasteCleanup": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.afterPasteCleanup),
/* harmony export */   "updateTbItemsStatus": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.updateTbItemsStatus),
/* harmony export */   "showLinkDialog": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.showLinkDialog),
/* harmony export */   "closeLinkDialog": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.closeLinkDialog),
/* harmony export */   "showImageDialog": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.showImageDialog),
/* harmony export */   "closeImageDialog": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.closeImageDialog),
/* harmony export */   "showTableDialog": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.showTableDialog),
/* harmony export */   "closeTableDialog": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.closeTableDialog),
/* harmony export */   "CLS_RTE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_RTE),
/* harmony export */   "CLS_RTL": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_RTL),
/* harmony export */   "CLS_CONTENT": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_CONTENT),
/* harmony export */   "CLS_DISABLED": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_DISABLED),
/* harmony export */   "CLS_SCRIPT_SHEET": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_SCRIPT_SHEET),
/* harmony export */   "CLS_STYLE_SHEET": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_STYLE_SHEET),
/* harmony export */   "CLS_TOOLBAR": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_TOOLBAR),
/* harmony export */   "CLS_TB_FIXED": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_TB_FIXED),
/* harmony export */   "CLS_TB_FLOAT": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_TB_FLOAT),
/* harmony export */   "CLS_TB_ABS_FLOAT": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_TB_ABS_FLOAT),
/* harmony export */   "CLS_INLINE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_INLINE),
/* harmony export */   "CLS_TB_INLINE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_TB_INLINE),
/* harmony export */   "CLS_RTE_EXPAND_TB": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_RTE_EXPAND_TB),
/* harmony export */   "CLS_FULL_SCREEN": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_FULL_SCREEN),
/* harmony export */   "CLS_QUICK_TB": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_QUICK_TB),
/* harmony export */   "CLS_POP": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_POP),
/* harmony export */   "CLS_TB_STATIC": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_TB_STATIC),
/* harmony export */   "CLS_QUICK_POP": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_QUICK_POP),
/* harmony export */   "CLS_QUICK_DROPDOWN": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_QUICK_DROPDOWN),
/* harmony export */   "CLS_IMAGE_POP": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_IMAGE_POP),
/* harmony export */   "CLS_INLINE_POP": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_INLINE_POP),
/* harmony export */   "CLS_INLINE_DROPDOWN": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_INLINE_DROPDOWN),
/* harmony export */   "CLS_DROPDOWN_POPUP": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_DROPDOWN_POPUP),
/* harmony export */   "CLS_DROPDOWN_ICONS": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_DROPDOWN_ICONS),
/* harmony export */   "CLS_DROPDOWN_ITEMS": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_DROPDOWN_ITEMS),
/* harmony export */   "CLS_DROPDOWN_BTN": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_DROPDOWN_BTN),
/* harmony export */   "CLS_RTE_CONTENT": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_RTE_CONTENT),
/* harmony export */   "CLS_TB_ITEM": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_TB_ITEM),
/* harmony export */   "CLS_TB_EXTENDED": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_TB_EXTENDED),
/* harmony export */   "CLS_TB_WRAP": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_TB_WRAP),
/* harmony export */   "CLS_POPUP": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_POPUP),
/* harmony export */   "CLS_SEPARATOR": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_SEPARATOR),
/* harmony export */   "CLS_MINIMIZE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_MINIMIZE),
/* harmony export */   "CLS_MAXIMIZE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_MAXIMIZE),
/* harmony export */   "CLS_BACK": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_BACK),
/* harmony export */   "CLS_SHOW": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_SHOW),
/* harmony export */   "CLS_HIDE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_HIDE),
/* harmony export */   "CLS_VISIBLE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_VISIBLE),
/* harmony export */   "CLS_FOCUS": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_FOCUS),
/* harmony export */   "CLS_RM_WHITE_SPACE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_RM_WHITE_SPACE),
/* harmony export */   "CLS_IMGRIGHT": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_IMGRIGHT),
/* harmony export */   "CLS_IMGLEFT": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_IMGLEFT),
/* harmony export */   "CLS_IMGCENTER": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_IMGCENTER),
/* harmony export */   "CLS_IMGBREAK": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_IMGBREAK),
/* harmony export */   "CLS_CAPTION": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_CAPTION),
/* harmony export */   "CLS_RTE_CAPTION": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_RTE_CAPTION),
/* harmony export */   "CLS_CAPINLINE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_CAPINLINE),
/* harmony export */   "CLS_IMGINLINE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_IMGINLINE),
/* harmony export */   "CLS_COUNT": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_COUNT),
/* harmony export */   "CLS_WARNING": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_WARNING),
/* harmony export */   "CLS_ERROR": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_ERROR),
/* harmony export */   "CLS_ICONS": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_ICONS),
/* harmony export */   "CLS_ACTIVE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_ACTIVE),
/* harmony export */   "CLS_EXPAND_OPEN": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_EXPAND_OPEN),
/* harmony export */   "CLS_RTE_ELEMENTS": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_RTE_ELEMENTS),
/* harmony export */   "CLS_TB_BTN": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_TB_BTN),
/* harmony export */   "CLS_HR_SEPARATOR": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_HR_SEPARATOR),
/* harmony export */   "CLS_TB_IOS_FIX": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_TB_IOS_FIX),
/* harmony export */   "CLS_LIST_PRIMARY_CONTENT": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_LIST_PRIMARY_CONTENT),
/* harmony export */   "CLS_NUMBERFORMATLIST_TB_BTN": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_NUMBERFORMATLIST_TB_BTN),
/* harmony export */   "CLS_BULLETFORMATLIST_TB_BTN": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_BULLETFORMATLIST_TB_BTN),
/* harmony export */   "CLS_FORMATS_TB_BTN": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_FORMATS_TB_BTN),
/* harmony export */   "CLS_FONT_NAME_TB_BTN": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_FONT_NAME_TB_BTN),
/* harmony export */   "CLS_FONT_SIZE_TB_BTN": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_FONT_SIZE_TB_BTN),
/* harmony export */   "CLS_FONT_COLOR_TARGET": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_FONT_COLOR_TARGET),
/* harmony export */   "CLS_BACKGROUND_COLOR_TARGET": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_BACKGROUND_COLOR_TARGET),
/* harmony export */   "CLS_COLOR_CONTENT": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_COLOR_CONTENT),
/* harmony export */   "CLS_FONT_COLOR_DROPDOWN": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_FONT_COLOR_DROPDOWN),
/* harmony export */   "CLS_BACKGROUND_COLOR_DROPDOWN": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_BACKGROUND_COLOR_DROPDOWN),
/* harmony export */   "CLS_COLOR_PALETTE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_COLOR_PALETTE),
/* harmony export */   "CLS_FONT_COLOR_PICKER": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_FONT_COLOR_PICKER),
/* harmony export */   "CLS_BACKGROUND_COLOR_PICKER": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_BACKGROUND_COLOR_PICKER),
/* harmony export */   "CLS_RTE_READONLY": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_RTE_READONLY),
/* harmony export */   "CLS_TABLE_SEL": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_TABLE_SEL),
/* harmony export */   "CLS_TB_DASH_BOR": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_TB_DASH_BOR),
/* harmony export */   "CLS_TB_ALT_BOR": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_TB_ALT_BOR),
/* harmony export */   "CLS_TB_COL_RES": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_TB_COL_RES),
/* harmony export */   "CLS_TB_ROW_RES": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_TB_ROW_RES),
/* harmony export */   "CLS_TB_BOX_RES": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_TB_BOX_RES),
/* harmony export */   "CLS_RTE_HIDDEN": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_RTE_HIDDEN),
/* harmony export */   "CLS_RTE_PASTE_KEEP_FORMAT": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_RTE_PASTE_KEEP_FORMAT),
/* harmony export */   "CLS_RTE_PASTE_REMOVE_FORMAT": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_RTE_PASTE_REMOVE_FORMAT),
/* harmony export */   "CLS_RTE_PASTE_PLAIN_FORMAT": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_RTE_PASTE_PLAIN_FORMAT),
/* harmony export */   "CLS_RTE_PASTE_OK": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_RTE_PASTE_OK),
/* harmony export */   "CLS_RTE_PASTE_CANCEL": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_RTE_PASTE_CANCEL),
/* harmony export */   "CLS_RTE_DIALOG_MIN_HEIGHT": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_RTE_DIALOG_MIN_HEIGHT),
/* harmony export */   "CLS_RTE_RES_HANDLE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_RTE_RES_HANDLE),
/* harmony export */   "CLS_RTE_RES_EAST": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_RTE_RES_EAST),
/* harmony export */   "CLS_RTE_IMAGE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_RTE_IMAGE),
/* harmony export */   "CLS_RESIZE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_RESIZE),
/* harmony export */   "CLS_IMG_FOCUS": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_IMG_FOCUS),
/* harmony export */   "CLS_RTE_DRAG_IMAGE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_RTE_DRAG_IMAGE),
/* harmony export */   "CLS_RTE_UPLOAD_POPUP": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_RTE_UPLOAD_POPUP),
/* harmony export */   "CLS_POPUP_OPEN": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_POPUP_OPEN),
/* harmony export */   "CLS_IMG_RESIZE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_IMG_RESIZE),
/* harmony export */   "CLS_DROPAREA": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_DROPAREA),
/* harmony export */   "CLS_IMG_INNER": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_IMG_INNER),
/* harmony export */   "CLS_UPLOAD_FILES": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_UPLOAD_FILES),
/* harmony export */   "CLS_RTE_DIALOG_UPLOAD": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_RTE_DIALOG_UPLOAD),
/* harmony export */   "CLS_RTE_RES_CNT": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_RTE_RES_CNT),
/* harmony export */   "CLS_CUSTOM_TILE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_CUSTOM_TILE),
/* harmony export */   "CLS_NOCOLOR_ITEM": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_NOCOLOR_ITEM),
/* harmony export */   "CLS_TABLE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_TABLE),
/* harmony export */   "CLS_TABLE_BORDER": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_TABLE_BORDER),
/* harmony export */   "CLS_RTE_TABLE_RESIZE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_RTE_TABLE_RESIZE),
/* harmony export */   "CLS_RTE_FIXED_TB_EXPAND": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_RTE_FIXED_TB_EXPAND),
/* harmony export */   "CLS_RTE_TB_ENABLED": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLS_RTE_TB_ENABLED),
/* harmony export */   "getIndex": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.getIndex),
/* harmony export */   "hasClass": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.hasClass),
/* harmony export */   "getDropDownValue": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.getDropDownValue),
/* harmony export */   "isIDevice": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.isIDevice),
/* harmony export */   "getFormattedFontSize": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.getFormattedFontSize),
/* harmony export */   "pageYOffset": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.pageYOffset),
/* harmony export */   "getTooltipText": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.getTooltipText),
/* harmony export */   "setToolbarStatus": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.setToolbarStatus),
/* harmony export */   "getCollection": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.getCollection),
/* harmony export */   "getTBarItemsIndex": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.getTBarItemsIndex),
/* harmony export */   "updateUndoRedoStatus": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.updateUndoRedoStatus),
/* harmony export */   "dispatchEvent": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.dispatchEvent),
/* harmony export */   "parseHtml": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.parseHtml),
/* harmony export */   "getTextNodesUnder": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.getTextNodesUnder),
/* harmony export */   "toObjectLowerCase": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.toObjectLowerCase),
/* harmony export */   "getEditValue": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.getEditValue),
/* harmony export */   "updateTextNode": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.updateTextNode),
/* harmony export */   "getDefaultValue": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.getDefaultValue),
/* harmony export */   "isEditableValueEmpty": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.isEditableValueEmpty),
/* harmony export */   "decode": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.decode),
/* harmony export */   "sanitizeHelper": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.sanitizeHelper),
/* harmony export */   "convertToBlob": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.convertToBlob),
/* harmony export */   "getLocaleFontFormat": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.getLocaleFontFormat),
/* harmony export */   "updateDropDownFontFormatLocale": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.updateDropDownFontFormatLocale),
/* harmony export */   "ServiceLocator": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.ServiceLocator),
/* harmony export */   "RendererFactory": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.RendererFactory),
/* harmony export */   "EditorManager": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.EditorManager),
/* harmony export */   "IMAGE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.IMAGE),
/* harmony export */   "TABLE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.TABLE),
/* harmony export */   "LINK": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.LINK),
/* harmony export */   "INSERT_ROW": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.INSERT_ROW),
/* harmony export */   "INSERT_COLUMN": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.INSERT_COLUMN),
/* harmony export */   "DELETEROW": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.DELETEROW),
/* harmony export */   "DELETECOLUMN": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.DELETECOLUMN),
/* harmony export */   "REMOVETABLE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.REMOVETABLE),
/* harmony export */   "TABLEHEADER": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.TABLEHEADER),
/* harmony export */   "TABLE_VERTICAL_ALIGN": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.TABLE_VERTICAL_ALIGN),
/* harmony export */   "TABLE_MERGE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.TABLE_MERGE),
/* harmony export */   "TABLE_VERTICAL_SPLIT": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.TABLE_VERTICAL_SPLIT),
/* harmony export */   "TABLE_HORIZONTAL_SPLIT": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.TABLE_HORIZONTAL_SPLIT),
/* harmony export */   "TABLE_MOVE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.TABLE_MOVE),
/* harmony export */   "ALIGNMENT_TYPE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.ALIGNMENT_TYPE),
/* harmony export */   "INDENT_TYPE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.INDENT_TYPE),
/* harmony export */   "DEFAULT_TAG": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_TAG),
/* harmony export */   "BLOCK_TAGS": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.BLOCK_TAGS),
/* harmony export */   "IGNORE_BLOCK_TAGS": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.IGNORE_BLOCK_TAGS),
/* harmony export */   "TABLE_BLOCK_TAGS": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.TABLE_BLOCK_TAGS),
/* harmony export */   "SELECTION_TYPE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.SELECTION_TYPE),
/* harmony export */   "INSERTHTML_TYPE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.INSERTHTML_TYPE),
/* harmony export */   "INSERT_TEXT_TYPE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.INSERT_TEXT_TYPE),
/* harmony export */   "CLEAR_TYPE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLEAR_TYPE),
/* harmony export */   "CLASS_IMAGE_RIGHT": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLASS_IMAGE_RIGHT),
/* harmony export */   "CLASS_IMAGE_LEFT": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLASS_IMAGE_LEFT),
/* harmony export */   "CLASS_IMAGE_CENTER": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLASS_IMAGE_CENTER),
/* harmony export */   "CLASS_IMAGE_BREAK": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLASS_IMAGE_BREAK),
/* harmony export */   "CLASS_CAPTION": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLASS_CAPTION),
/* harmony export */   "CLASS_RTE_CAPTION": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLASS_RTE_CAPTION),
/* harmony export */   "CLASS_CAPTION_INLINE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLASS_CAPTION_INLINE),
/* harmony export */   "CLASS_IMAGE_INLINE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLASS_IMAGE_INLINE),
/* harmony export */   "Lists": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.Lists),
/* harmony export */   "markerClassName": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.markerClassName),
/* harmony export */   "DOMNode": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.DOMNode),
/* harmony export */   "Alignments": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.Alignments),
/* harmony export */   "Indents": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.Indents),
/* harmony export */   "Formats": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.Formats),
/* harmony export */   "LinkCommand": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.LinkCommand),
/* harmony export */   "InsertMethods": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.InsertMethods),
/* harmony export */   "InsertTextExec": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.InsertTextExec),
/* harmony export */   "InsertHtmlExec": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.InsertHtmlExec),
/* harmony export */   "InsertHtml": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.InsertHtml),
/* harmony export */   "IsFormatted": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.IsFormatted),
/* harmony export */   "MsWordPaste": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.MsWordPaste),
/* harmony export */   "NodeCutter": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.NodeCutter),
/* harmony export */   "ImageCommand": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.ImageCommand),
/* harmony export */   "SelectionCommands": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.SelectionCommands),
/* harmony export */   "SelectionBasedExec": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.SelectionBasedExec),
/* harmony export */   "ClearFormatExec": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.ClearFormatExec),
/* harmony export */   "UndoRedoManager": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.UndoRedoManager),
/* harmony export */   "TableCommand": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.TableCommand),
/* harmony export */   "statusCollection": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.statusCollection),
/* harmony export */   "ToolbarStatus": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.ToolbarStatus),
/* harmony export */   "NodeSelection": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.NodeSelection),
/* harmony export */   "MarkdownParser": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.MarkdownParser),
/* harmony export */   "LISTS_COMMAND": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.LISTS_COMMAND),
/* harmony export */   "selectionCommand": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.selectionCommand),
/* harmony export */   "LINK_COMMAND": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.LINK_COMMAND),
/* harmony export */   "CLEAR_COMMAND": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.CLEAR_COMMAND),
/* harmony export */   "MD_TABLE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.MD_TABLE),
/* harmony export */   "ClearFormat": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.ClearFormat),
/* harmony export */   "MDLists": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.MDLists),
/* harmony export */   "MDFormats": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.MDFormats),
/* harmony export */   "MarkdownSelection": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.MarkdownSelection),
/* harmony export */   "UndoRedoCommands": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.UndoRedoCommands),
/* harmony export */   "MDSelectionFormats": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.MDSelectionFormats),
/* harmony export */   "MDLink": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.MDLink),
/* harmony export */   "MDTable": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.MDTable),
/* harmony export */   "markdownFormatTags": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.markdownFormatTags),
/* harmony export */   "markdownSelectionTags": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.markdownSelectionTags),
/* harmony export */   "markdownListsTags": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.markdownListsTags),
/* harmony export */   "htmlKeyConfig": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.htmlKeyConfig),
/* harmony export */   "markdownKeyConfig": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.markdownKeyConfig),
/* harmony export */   "pasteCleanupGroupingTags": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.pasteCleanupGroupingTags),
/* harmony export */   "listConversionFilters": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.listConversionFilters),
/* harmony export */   "selfClosingTags": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.selfClosingTags),
/* harmony export */   "KEY_DOWN": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.KEY_DOWN),
/* harmony export */   "ACTION": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.ACTION),
/* harmony export */   "FORMAT_TYPE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.FORMAT_TYPE),
/* harmony export */   "KEY_DOWN_HANDLER": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.KEY_DOWN_HANDLER),
/* harmony export */   "LIST_TYPE": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.LIST_TYPE),
/* harmony export */   "KEY_UP_HANDLER": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.KEY_UP_HANDLER),
/* harmony export */   "KEY_UP": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.KEY_UP),
/* harmony export */   "MODEL_CHANGED_PLUGIN": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.MODEL_CHANGED_PLUGIN),
/* harmony export */   "MODEL_CHANGED": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.MODEL_CHANGED),
/* harmony export */   "MS_WORD_CLEANUP_PLUGIN": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.MS_WORD_CLEANUP_PLUGIN),
/* harmony export */   "MS_WORD_CLEANUP": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.MS_WORD_CLEANUP),
/* harmony export */   "ON_BEGIN": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.ON_BEGIN),
/* harmony export */   "SPACE_ACTION": () => (/* reexport safe */ _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.SPACE_ACTION)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ 3679);
/* harmony import */ var _syncfusion_ej2_angular_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-angular-base */ 25623);
/* harmony import */ var _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-richtexteditor */ 38842);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ 38583);








const _c0 = ["valueTemplate"];
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
const inputs = ['autoSaveOnIdle', 'backgroundColor', 'bulletFormatList', 'cssClass', 'editorMode', 'enableAutoUrl', 'enableHtmlEncode', 'enableHtmlSanitizer', 'enablePersistence', 'enableResize', 'enableRtl', 'enableTabKey', 'enableXhtml', 'enabled', 'enterKey', 'fileManagerSettings', 'floatingToolbarOffset', 'fontColor', 'fontFamily', 'fontSize', 'format', 'formatter', 'height', 'htmlAttributes', 'iframeSettings', 'inlineMode', 'insertImageSettings', 'keyConfig', 'locale', 'maxLength', 'numberFormatList', 'pasteCleanupSettings', 'placeholder', 'quickToolbarSettings', 'readonly', 'saveInterval', 'shiftEnterKey', 'showCharCount', 'tableSettings', 'toolbarSettings', 'undoRedoSteps', 'undoRedoTimer', 'value', 'valueTemplate', 'width'];
const outputs = ['actionBegin', 'actionComplete', 'afterImageDelete', 'afterPasteCleanup', 'beforeDialogClose', 'beforeDialogOpen', 'beforeImageDrop', 'beforeImageUpload', 'beforePasteCleanup', 'beforeQuickToolbarOpen', 'beforeSanitizeHtml', 'blur', 'change', 'created', 'destroyed', 'dialogClose', 'dialogOpen', 'focus', 'imageRemoving', 'imageSelected', 'imageUploadFailed', 'imageUploadSuccess', 'imageUploading', 'quickToolbarClose', 'quickToolbarOpen', 'resizeStart', 'resizeStop', 'resizing', 'toolbarClick', 'toolbarStatusUpdate', 'updatedToolbarStatus', 'valueChange'];
const twoWays = ['value'];
/**
 * `ejs-richtexteditor` represents the Angular richtexteditor Component.
 * ```html
 * <ejs-richtexteditor></ejs-richtexteditor>
 * ```
 */
let RichTextEditorComponent = RichTextEditorComponent_1 = class RichTextEditorComponent extends _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.RichTextEditor {
    /**
     * @param {?} ngEle
     * @param {?} srenderer
     * @param {?} viewContainerRef
     * @param {?} injector
     */
    constructor(ngEle, srenderer, viewContainerRef, injector) {
        super();
        this.ngEle = ngEle;
        this.srenderer = srenderer;
        this.viewContainerRef = viewContainerRef;
        this.injector = injector;
        this.skipFromEvent = true;
        this.element = this.ngEle.nativeElement;
        this.injectedModules = this.injectedModules || [];
        try {
            let mod = this.injector.get('RichTextEditorToolbar');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_a) { }
        try {
            let mod = this.injector.get('RichTextEditorLink');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_b) { }
        try {
            let mod = this.injector.get('RichTextEditorImage');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_c) { }
        try {
            let mod = this.injector.get('RichTextEditorCount');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_d) { }
        try {
            let mod = this.injector.get('RichTextEditorQuickToolbar');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_e) { }
        try {
            let mod = this.injector.get('RichTextEditorHtmlEditor');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_f) { }
        try {
            let mod = this.injector.get('RichTextEditorMarkdownEditor');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_g) { }
        try {
            let mod = this.injector.get('RichTextEditorTable');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_h) { }
        try {
            let mod = this.injector.get('RichTextEditorPasteCleanup');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_j) { }
        try {
            let mod = this.injector.get('RichTextEditorResize');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_k) { }
        try {
            let mod = this.injector.get('RichTextEditorFileManager');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_l) { }
        this.registerEvents(outputs);
        this.addTwoWay.call(this, twoWays);
        (0,_syncfusion_ej2_angular_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('currentInstance', this, this.viewContainerRef);
        this.formContext = new _syncfusion_ej2_angular_base__WEBPACK_IMPORTED_MODULE_0__.FormBase();
        this.formCompContext = new _syncfusion_ej2_angular_base__WEBPACK_IMPORTED_MODULE_0__.ComponentBase();
    }
    /**
     * @param {?} registerFunction
     * @return {?}
     */
    registerOnChange(registerFunction) {
    }
    /**
     * @param {?} registerFunction
     * @return {?}
     */
    registerOnTouched(registerFunction) {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    setDisabledState(disabled) {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.formCompContext.ngOnInit(this);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.formContext.ngAfterViewInit(this);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.formCompContext.ngOnDestroy(this);
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        this.formCompContext.ngAfterContentChecked(this);
    }
};
RichTextEditorComponent.ɵfac = function RichTextEditorComponent_Factory(t) { return new (t || RichTextEditorComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_2__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_2__.Renderer2), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_2__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_2__.Injector)); };
RichTextEditorComponent.ɵcmp = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineComponent"]({ type: RichTextEditorComponent, selectors: [["ejs-richtexteditor"]], contentQueries: function RichTextEditorComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵcontentQuery"](dirIndex, _c0, 5);
    } if (rf & 2) {
        let _t;
        _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵloadQuery"]()) && (ctx.valueTemplate = _t.first);
    } }, inputs: { autoSaveOnIdle: "autoSaveOnIdle", backgroundColor: "backgroundColor", bulletFormatList: "bulletFormatList", cssClass: "cssClass", editorMode: "editorMode", enableAutoUrl: "enableAutoUrl", enableHtmlEncode: "enableHtmlEncode", enableHtmlSanitizer: "enableHtmlSanitizer", enablePersistence: "enablePersistence", enableResize: "enableResize", enableRtl: "enableRtl", enableTabKey: "enableTabKey", enableXhtml: "enableXhtml", enabled: "enabled", enterKey: "enterKey", fileManagerSettings: "fileManagerSettings", floatingToolbarOffset: "floatingToolbarOffset", fontColor: "fontColor", fontFamily: "fontFamily", fontSize: "fontSize", format: "format", formatter: "formatter", height: "height", htmlAttributes: "htmlAttributes", iframeSettings: "iframeSettings", inlineMode: "inlineMode", insertImageSettings: "insertImageSettings", keyConfig: "keyConfig", locale: "locale", maxLength: "maxLength", numberFormatList: "numberFormatList", pasteCleanupSettings: "pasteCleanupSettings", placeholder: "placeholder", quickToolbarSettings: "quickToolbarSettings", readonly: "readonly", saveInterval: "saveInterval", shiftEnterKey: "shiftEnterKey", showCharCount: "showCharCount", tableSettings: "tableSettings", toolbarSettings: "toolbarSettings", undoRedoSteps: "undoRedoSteps", undoRedoTimer: "undoRedoTimer", value: "value", valueTemplate: "valueTemplate", width: "width" }, outputs: { actionBegin: "actionBegin", actionComplete: "actionComplete", afterImageDelete: "afterImageDelete", afterPasteCleanup: "afterPasteCleanup", beforeDialogClose: "beforeDialogClose", beforeDialogOpen: "beforeDialogOpen", beforeImageDrop: "beforeImageDrop", beforeImageUpload: "beforeImageUpload", beforePasteCleanup: "beforePasteCleanup", beforeQuickToolbarOpen: "beforeQuickToolbarOpen", beforeSanitizeHtml: "beforeSanitizeHtml", blur: "blur", change: "change", created: "created", destroyed: "destroyed", dialogClose: "dialogClose", dialogOpen: "dialogOpen", focus: "focus", imageRemoving: "imageRemoving", imageSelected: "imageSelected", imageUploadFailed: "imageUploadFailed", imageUploadSuccess: "imageUploadSuccess", imageUploading: "imageUploading", quickToolbarClose: "quickToolbarClose", quickToolbarOpen: "quickToolbarOpen", resizeStart: "resizeStart", resizeStop: "resizeStop", resizing: "resizing", toolbarClick: "toolbarClick", toolbarStatusUpdate: "toolbarStatusUpdate", updatedToolbarStatus: "updatedToolbarStatus", valueChange: "valueChange" }, features: [_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵProvidersFeature"]([
            {
                provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__.NG_VALUE_ACCESSOR,
                useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.forwardRef)(() => RichTextEditorComponent_1),
                multi: true
            }
        ]), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵInheritDefinitionFeature"]], decls: 0, vars: 0, template: function RichTextEditorComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
/**
 * @nocollapse
 */
RichTextEditorComponent.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.ElementRef, },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Renderer2, },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.ViewContainerRef, },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Injector, },
];
RichTextEditorComponent.propDecorators = {
    'valueTemplate': [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.ContentChild, args: ['valueTemplate',] },],
};
__decorate([
    (0,_syncfusion_ej2_angular_base__WEBPACK_IMPORTED_MODULE_0__.Template)(),
    __metadata("design:type", Object)
], RichTextEditorComponent.prototype, "valueTemplate", void 0);
RichTextEditorComponent = RichTextEditorComponent_1 = __decorate([
    (0,_syncfusion_ej2_angular_base__WEBPACK_IMPORTED_MODULE_0__.ComponentMixins)([_syncfusion_ej2_angular_base__WEBPACK_IMPORTED_MODULE_0__.ComponentBase, _syncfusion_ej2_angular_base__WEBPACK_IMPORTED_MODULE_0__.FormBase]),
    __metadata("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_2__.ElementRef,
        _angular_core__WEBPACK_IMPORTED_MODULE_2__.Renderer2,
        _angular_core__WEBPACK_IMPORTED_MODULE_2__.ViewContainerRef,
        _angular_core__WEBPACK_IMPORTED_MODULE_2__.Injector])
], RichTextEditorComponent);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](RichTextEditorComponent, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Component,
        args: [{
                selector: 'ejs-richtexteditor',
                inputs: inputs,
                outputs: outputs,
                template: '',
                changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__.ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_3__.NG_VALUE_ACCESSOR,
                        useExisting: (0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.forwardRef)(() => RichTextEditorComponent_1),
                        multi: true
                    }
                ],
                queries: {}
            }]
    }], function () { return [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.ElementRef }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Renderer2 }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.ViewContainerRef }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Injector }]; }, { valueTemplate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.ContentChild,
            args: ['valueTemplate']
        }] }); })();
var RichTextEditorComponent_1;

/**
 * NgModule definition for the RichTextEditor component.
 */
class RichTextEditorModule {
}
RichTextEditorModule.ɵfac = function RichTextEditorModule_Factory(t) { return new (t || RichTextEditorModule)(); };
RichTextEditorModule.ɵmod = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineNgModule"]({ type: RichTextEditorModule });
RichTextEditorModule.ɵinj = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjector"]({ imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_4__.CommonModule]] });
/**
 * @nocollapse
 */
RichTextEditorModule.ctorParameters = () => [];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](RichTextEditorModule, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.NgModule,
        args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_4__.CommonModule],
                declarations: [
                    RichTextEditorComponent
                ],
                exports: [
                    RichTextEditorComponent
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵsetNgModuleScope"](RichTextEditorModule, { declarations: function () { return [RichTextEditorComponent]; }, imports: function () { return [_angular_common__WEBPACK_IMPORTED_MODULE_4__.CommonModule]; }, exports: function () { return [RichTextEditorComponent]; } }); })();

const ToolbarService = { provide: 'RichTextEditorToolbar', useValue: _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.Toolbar };
const LinkService = { provide: 'RichTextEditorLink', useValue: _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.Link };
const ImageService = { provide: 'RichTextEditorImage', useValue: _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.Image };
const CountService = { provide: 'RichTextEditorCount', useValue: _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.Count };
const QuickToolbarService = { provide: 'RichTextEditorQuickToolbar', useValue: _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.QuickToolbar };
const HtmlEditorService = { provide: 'RichTextEditorHtmlEditor', useValue: _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.HtmlEditor };
const MarkdownEditorService = { provide: 'RichTextEditorMarkdownEditor', useValue: _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.MarkdownEditor };
const TableService = { provide: 'RichTextEditorTable', useValue: _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.Table };
const PasteCleanupService = { provide: 'RichTextEditorPasteCleanup', useValue: _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.PasteCleanup };
const ResizeService = { provide: 'RichTextEditorResize', useValue: _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.Resize };
const FileManagerService = { provide: 'RichTextEditorFileManager', useValue: _syncfusion_ej2_richtexteditor__WEBPACK_IMPORTED_MODULE_1__.FileManager };
/**
 * NgModule definition for the RichTextEditor component with providers.
 */
class RichTextEditorAllModule {
}
RichTextEditorAllModule.ɵfac = function RichTextEditorAllModule_Factory(t) { return new (t || RichTextEditorAllModule)(); };
RichTextEditorAllModule.ɵmod = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineNgModule"]({ type: RichTextEditorAllModule });
RichTextEditorAllModule.ɵinj = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjector"]({ providers: [
        ToolbarService,
        LinkService,
        ImageService,
        CountService,
        QuickToolbarService,
        HtmlEditorService,
        MarkdownEditorService,
        TableService,
        PasteCleanupService,
        ResizeService,
        FileManagerService
    ], imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_4__.CommonModule, RichTextEditorModule], RichTextEditorModule] });
/**
 * @nocollapse
 */
RichTextEditorAllModule.ctorParameters = () => [];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](RichTextEditorAllModule, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.NgModule,
        args: [{
                imports: [_angular_common__WEBPACK_IMPORTED_MODULE_4__.CommonModule, RichTextEditorModule],
                exports: [
                    RichTextEditorModule
                ],
                providers: [
                    ToolbarService,
                    LinkService,
                    ImageService,
                    CountService,
                    QuickToolbarService,
                    HtmlEditorService,
                    MarkdownEditorService,
                    TableService,
                    PasteCleanupService,
                    ResizeService,
                    FileManagerService
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵsetNgModuleScope"](RichTextEditorAllModule, { imports: function () { return [_angular_common__WEBPACK_IMPORTED_MODULE_4__.CommonModule, RichTextEditorModule]; }, exports: function () { return [RichTextEditorModule]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */




//# sourceMappingURL=ej2-angular-richtexteditor.js.map

/***/ }),

/***/ 95719:
/*!*************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-filemanager/dist/es6/ej2-filemanager.es2015.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AjaxSettings": () => (/* binding */ AjaxSettings),
/* harmony export */   "toolbarItems": () => (/* binding */ toolbarItems),
/* harmony export */   "ToolbarSettings": () => (/* binding */ ToolbarSettings),
/* harmony export */   "SearchSettings": () => (/* binding */ SearchSettings),
/* harmony export */   "columnArray": () => (/* binding */ columnArray),
/* harmony export */   "DetailsViewSettings": () => (/* binding */ DetailsViewSettings),
/* harmony export */   "fileItems": () => (/* binding */ fileItems),
/* harmony export */   "folderItems": () => (/* binding */ folderItems),
/* harmony export */   "layoutItems": () => (/* binding */ layoutItems),
/* harmony export */   "ContextMenuSettings": () => (/* binding */ ContextMenuSettings),
/* harmony export */   "NavigationPaneSettings": () => (/* binding */ NavigationPaneSettings),
/* harmony export */   "UploadSettings": () => (/* binding */ UploadSettings),
/* harmony export */   "Column": () => (/* binding */ Column),
/* harmony export */   "TOOLBAR_ID": () => (/* binding */ TOOLBAR_ID),
/* harmony export */   "LAYOUT_ID": () => (/* binding */ LAYOUT_ID),
/* harmony export */   "NAVIGATION_ID": () => (/* binding */ NAVIGATION_ID),
/* harmony export */   "TREE_ID": () => (/* binding */ TREE_ID),
/* harmony export */   "GRID_ID": () => (/* binding */ GRID_ID),
/* harmony export */   "LARGEICON_ID": () => (/* binding */ LARGEICON_ID),
/* harmony export */   "DIALOG_ID": () => (/* binding */ DIALOG_ID),
/* harmony export */   "ALT_DIALOG_ID": () => (/* binding */ ALT_DIALOG_ID),
/* harmony export */   "IMG_DIALOG_ID": () => (/* binding */ IMG_DIALOG_ID),
/* harmony export */   "EXTN_DIALOG_ID": () => (/* binding */ EXTN_DIALOG_ID),
/* harmony export */   "UPLOAD_DIALOG_ID": () => (/* binding */ UPLOAD_DIALOG_ID),
/* harmony export */   "RETRY_DIALOG_ID": () => (/* binding */ RETRY_DIALOG_ID),
/* harmony export */   "CONTEXT_MENU_ID": () => (/* binding */ CONTEXT_MENU_ID),
/* harmony export */   "SORTBY_ID": () => (/* binding */ SORTBY_ID),
/* harmony export */   "VIEW_ID": () => (/* binding */ VIEW_ID),
/* harmony export */   "SPLITTER_ID": () => (/* binding */ SPLITTER_ID),
/* harmony export */   "CONTENT_ID": () => (/* binding */ CONTENT_ID),
/* harmony export */   "BREADCRUMBBAR_ID": () => (/* binding */ BREADCRUMBBAR_ID),
/* harmony export */   "UPLOAD_ID": () => (/* binding */ UPLOAD_ID),
/* harmony export */   "RETRY_ID": () => (/* binding */ RETRY_ID),
/* harmony export */   "SEARCH_ID": () => (/* binding */ SEARCH_ID),
/* harmony export */   "ROOT": () => (/* binding */ ROOT),
/* harmony export */   "CONTROL": () => (/* binding */ CONTROL),
/* harmony export */   "CHECK_SELECT": () => (/* binding */ CHECK_SELECT),
/* harmony export */   "ROOT_POPUP": () => (/* binding */ ROOT_POPUP),
/* harmony export */   "MOBILE": () => (/* binding */ MOBILE),
/* harmony export */   "MOB_POPUP": () => (/* binding */ MOB_POPUP),
/* harmony export */   "MULTI_SELECT": () => (/* binding */ MULTI_SELECT),
/* harmony export */   "FILTER": () => (/* binding */ FILTER),
/* harmony export */   "LAYOUT": () => (/* binding */ LAYOUT),
/* harmony export */   "NAVIGATION": () => (/* binding */ NAVIGATION),
/* harmony export */   "LAYOUT_CONTENT": () => (/* binding */ LAYOUT_CONTENT),
/* harmony export */   "LARGE_ICONS": () => (/* binding */ LARGE_ICONS),
/* harmony export */   "TB_ITEM": () => (/* binding */ TB_ITEM),
/* harmony export */   "LIST_ITEM": () => (/* binding */ LIST_ITEM),
/* harmony export */   "LIST_TEXT": () => (/* binding */ LIST_TEXT),
/* harmony export */   "LIST_PARENT": () => (/* binding */ LIST_PARENT),
/* harmony export */   "TB_OPTION_TICK": () => (/* binding */ TB_OPTION_TICK),
/* harmony export */   "TB_OPTION_DOT": () => (/* binding */ TB_OPTION_DOT),
/* harmony export */   "BLUR": () => (/* binding */ BLUR),
/* harmony export */   "ACTIVE": () => (/* binding */ ACTIVE),
/* harmony export */   "HOVER": () => (/* binding */ HOVER),
/* harmony export */   "FOCUS": () => (/* binding */ FOCUS),
/* harmony export */   "FOCUSED": () => (/* binding */ FOCUSED),
/* harmony export */   "CHECK": () => (/* binding */ CHECK),
/* harmony export */   "FRAME": () => (/* binding */ FRAME),
/* harmony export */   "CB_WRAP": () => (/* binding */ CB_WRAP),
/* harmony export */   "ROW": () => (/* binding */ ROW),
/* harmony export */   "ROWCELL": () => (/* binding */ ROWCELL),
/* harmony export */   "EMPTY": () => (/* binding */ EMPTY),
/* harmony export */   "EMPTY_CONTENT": () => (/* binding */ EMPTY_CONTENT),
/* harmony export */   "EMPTY_INNER_CONTENT": () => (/* binding */ EMPTY_INNER_CONTENT),
/* harmony export */   "CLONE": () => (/* binding */ CLONE),
/* harmony export */   "DROP_FOLDER": () => (/* binding */ DROP_FOLDER),
/* harmony export */   "DROP_FILE": () => (/* binding */ DROP_FILE),
/* harmony export */   "FOLDER": () => (/* binding */ FOLDER),
/* harmony export */   "ICON_IMAGE": () => (/* binding */ ICON_IMAGE),
/* harmony export */   "ICON_MUSIC": () => (/* binding */ ICON_MUSIC),
/* harmony export */   "ICON_VIDEO": () => (/* binding */ ICON_VIDEO),
/* harmony export */   "LARGE_ICON": () => (/* binding */ LARGE_ICON),
/* harmony export */   "LARGE_EMPTY_FOLDER": () => (/* binding */ LARGE_EMPTY_FOLDER),
/* harmony export */   "LARGE_EMPTY_FOLDER_TWO": () => (/* binding */ LARGE_EMPTY_FOLDER_TWO),
/* harmony export */   "LARGE_ICON_FOLDER": () => (/* binding */ LARGE_ICON_FOLDER),
/* harmony export */   "SELECTED_ITEMS": () => (/* binding */ SELECTED_ITEMS),
/* harmony export */   "TEXT_CONTENT": () => (/* binding */ TEXT_CONTENT),
/* harmony export */   "GRID_HEADER": () => (/* binding */ GRID_HEADER),
/* harmony export */   "TEMPLATE_CELL": () => (/* binding */ TEMPLATE_CELL),
/* harmony export */   "TREE_VIEW": () => (/* binding */ TREE_VIEW),
/* harmony export */   "MENU_ITEM": () => (/* binding */ MENU_ITEM),
/* harmony export */   "MENU_ICON": () => (/* binding */ MENU_ICON),
/* harmony export */   "SUBMENU_ICON": () => (/* binding */ SUBMENU_ICON),
/* harmony export */   "GRID_VIEW": () => (/* binding */ GRID_VIEW),
/* harmony export */   "GRID_CONTENT": () => (/* binding */ GRID_CONTENT),
/* harmony export */   "ICON_VIEW": () => (/* binding */ ICON_VIEW),
/* harmony export */   "ICON_OPEN": () => (/* binding */ ICON_OPEN),
/* harmony export */   "ICON_UPLOAD": () => (/* binding */ ICON_UPLOAD),
/* harmony export */   "ICON_CUT": () => (/* binding */ ICON_CUT),
/* harmony export */   "ICON_COPY": () => (/* binding */ ICON_COPY),
/* harmony export */   "ICON_PASTE": () => (/* binding */ ICON_PASTE),
/* harmony export */   "ICON_DELETE": () => (/* binding */ ICON_DELETE),
/* harmony export */   "ICON_RENAME": () => (/* binding */ ICON_RENAME),
/* harmony export */   "ICON_NEWFOLDER": () => (/* binding */ ICON_NEWFOLDER),
/* harmony export */   "ICON_DETAILS": () => (/* binding */ ICON_DETAILS),
/* harmony export */   "ICON_SHORTBY": () => (/* binding */ ICON_SHORTBY),
/* harmony export */   "ICON_REFRESH": () => (/* binding */ ICON_REFRESH),
/* harmony export */   "ICON_SELECTALL": () => (/* binding */ ICON_SELECTALL),
/* harmony export */   "ICON_DOWNLOAD": () => (/* binding */ ICON_DOWNLOAD),
/* harmony export */   "ICON_OPTIONS": () => (/* binding */ ICON_OPTIONS),
/* harmony export */   "ICON_GRID": () => (/* binding */ ICON_GRID),
/* harmony export */   "ICON_LARGE": () => (/* binding */ ICON_LARGE),
/* harmony export */   "ICON_BREADCRUMB": () => (/* binding */ ICON_BREADCRUMB),
/* harmony export */   "ICON_CLEAR": () => (/* binding */ ICON_CLEAR),
/* harmony export */   "ICON_DROP_IN": () => (/* binding */ ICON_DROP_IN),
/* harmony export */   "ICON_DROP_OUT": () => (/* binding */ ICON_DROP_OUT),
/* harmony export */   "ICON_NO_DROP": () => (/* binding */ ICON_NO_DROP),
/* harmony export */   "ICONS": () => (/* binding */ ICONS),
/* harmony export */   "DETAILS_LABEL": () => (/* binding */ DETAILS_LABEL),
/* harmony export */   "ERROR_CONTENT": () => (/* binding */ ERROR_CONTENT),
/* harmony export */   "STATUS": () => (/* binding */ STATUS),
/* harmony export */   "BREADCRUMBS": () => (/* binding */ BREADCRUMBS),
/* harmony export */   "RTL": () => (/* binding */ RTL),
/* harmony export */   "DISPLAY_NONE": () => (/* binding */ DISPLAY_NONE),
/* harmony export */   "COLLAPSED": () => (/* binding */ COLLAPSED),
/* harmony export */   "FULLROW": () => (/* binding */ FULLROW),
/* harmony export */   "ICON_COLLAPSIBLE": () => (/* binding */ ICON_COLLAPSIBLE),
/* harmony export */   "SPLIT_BAR": () => (/* binding */ SPLIT_BAR),
/* harmony export */   "HEADER_CHECK": () => (/* binding */ HEADER_CHECK),
/* harmony export */   "OVERLAY": () => (/* binding */ OVERLAY),
/* harmony export */   "VALUE": () => (/* binding */ VALUE),
/* harmony export */   "isFile": () => (/* binding */ isFile),
/* harmony export */   "modelChanged": () => (/* binding */ modelChanged),
/* harmony export */   "initialEnd": () => (/* binding */ initialEnd),
/* harmony export */   "finalizeEnd": () => (/* binding */ finalizeEnd),
/* harmony export */   "createEnd": () => (/* binding */ createEnd),
/* harmony export */   "filterEnd": () => (/* binding */ filterEnd),
/* harmony export */   "beforeDelete": () => (/* binding */ beforeDelete),
/* harmony export */   "pathDrag": () => (/* binding */ pathDrag),
/* harmony export */   "deleteInit": () => (/* binding */ deleteInit),
/* harmony export */   "deleteEnd": () => (/* binding */ deleteEnd),
/* harmony export */   "refreshEnd": () => (/* binding */ refreshEnd),
/* harmony export */   "resizeEnd": () => (/* binding */ resizeEnd),
/* harmony export */   "splitterResize": () => (/* binding */ splitterResize),
/* harmony export */   "pathChanged": () => (/* binding */ pathChanged),
/* harmony export */   "destroy": () => (/* binding */ destroy),
/* harmony export */   "beforeRequest": () => (/* binding */ beforeRequest),
/* harmony export */   "upload": () => (/* binding */ upload),
/* harmony export */   "skipUpload": () => (/* binding */ skipUpload),
/* harmony export */   "afterRequest": () => (/* binding */ afterRequest),
/* harmony export */   "download": () => (/* binding */ download),
/* harmony export */   "layoutRefresh": () => (/* binding */ layoutRefresh),
/* harmony export */   "actionFailure": () => (/* binding */ actionFailure),
/* harmony export */   "search": () => (/* binding */ search),
/* harmony export */   "openInit": () => (/* binding */ openInit),
/* harmony export */   "openEnd": () => (/* binding */ openEnd),
/* harmony export */   "selectionChanged": () => (/* binding */ selectionChanged),
/* harmony export */   "selectAllInit": () => (/* binding */ selectAllInit),
/* harmony export */   "clearAllInit": () => (/* binding */ clearAllInit),
/* harmony export */   "clearPathInit": () => (/* binding */ clearPathInit),
/* harmony export */   "layoutChange": () => (/* binding */ layoutChange),
/* harmony export */   "sortByChange": () => (/* binding */ sortByChange),
/* harmony export */   "nodeExpand": () => (/* binding */ nodeExpand),
/* harmony export */   "detailsInit": () => (/* binding */ detailsInit),
/* harmony export */   "menuItemData": () => (/* binding */ menuItemData),
/* harmony export */   "renameInit": () => (/* binding */ renameInit),
/* harmony export */   "renameEndParent": () => (/* binding */ renameEndParent),
/* harmony export */   "renameEnd": () => (/* binding */ renameEnd),
/* harmony export */   "showPaste": () => (/* binding */ showPaste),
/* harmony export */   "hidePaste": () => (/* binding */ hidePaste),
/* harmony export */   "selectedData": () => (/* binding */ selectedData),
/* harmony export */   "cutCopyInit": () => (/* binding */ cutCopyInit),
/* harmony export */   "pasteInit": () => (/* binding */ pasteInit),
/* harmony export */   "pasteEnd": () => (/* binding */ pasteEnd),
/* harmony export */   "cutEnd": () => (/* binding */ cutEnd),
/* harmony export */   "hideLayout": () => (/* binding */ hideLayout),
/* harmony export */   "updateTreeSelection": () => (/* binding */ updateTreeSelection),
/* harmony export */   "treeSelect": () => (/* binding */ treeSelect),
/* harmony export */   "sortColumn": () => (/* binding */ sortColumn),
/* harmony export */   "pathColumn": () => (/* binding */ pathColumn),
/* harmony export */   "searchTextChange": () => (/* binding */ searchTextChange),
/* harmony export */   "beforeDownload": () => (/* binding */ beforeDownload),
/* harmony export */   "downloadInit": () => (/* binding */ downloadInit),
/* harmony export */   "dropInit": () => (/* binding */ dropInit),
/* harmony export */   "dragEnd": () => (/* binding */ dragEnd),
/* harmony export */   "dropPath": () => (/* binding */ dropPath),
/* harmony export */   "dragHelper": () => (/* binding */ dragHelper),
/* harmony export */   "dragging": () => (/* binding */ dragging),
/* harmony export */   "updateSelectionData": () => (/* binding */ updateSelectionData),
/* harmony export */   "methodCall": () => (/* binding */ methodCall),
/* harmony export */   "permissionRead": () => (/* binding */ permissionRead),
/* harmony export */   "permissionEdit": () => (/* binding */ permissionEdit),
/* harmony export */   "permissionEditContents": () => (/* binding */ permissionEditContents),
/* harmony export */   "permissionCopy": () => (/* binding */ permissionCopy),
/* harmony export */   "permissionUpload": () => (/* binding */ permissionUpload),
/* harmony export */   "permissionDownload": () => (/* binding */ permissionDownload),
/* harmony export */   "FileManager": () => (/* binding */ FileManager),
/* harmony export */   "Toolbar": () => (/* binding */ Toolbar$1),
/* harmony export */   "BreadCrumbBar": () => (/* binding */ BreadCrumbBar),
/* harmony export */   "NavigationPane": () => (/* binding */ NavigationPane),
/* harmony export */   "DetailsView": () => (/* binding */ DetailsView),
/* harmony export */   "LargeIconsView": () => (/* binding */ LargeIconsView),
/* harmony export */   "createDialog": () => (/* binding */ createDialog),
/* harmony export */   "createExtDialog": () => (/* binding */ createExtDialog),
/* harmony export */   "createImageDialog": () => (/* binding */ createImageDialog),
/* harmony export */   "ContextMenu": () => (/* binding */ ContextMenu$2)
/* harmony export */ });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ 39232);
/* harmony import */ var _syncfusion_ej2_layouts__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @syncfusion/ej2-layouts */ 60537);
/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-popups */ 67417);
/* harmony import */ var _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-data */ 78865);
/* harmony import */ var _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @syncfusion/ej2-inputs */ 70052);
/* harmony import */ var _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-buttons */ 75760);
/* harmony import */ var _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @syncfusion/ej2-lists */ 87793);
/* harmony import */ var _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @syncfusion/ej2-splitbuttons */ 87889);
/* harmony import */ var _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @syncfusion/ej2-navigations */ 92664);
/* harmony import */ var _syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @syncfusion/ej2-grids */ 97538);











var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Specifies the Ajax settings of the File Manager.
 */
class AjaxSettings extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty {
}
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], AjaxSettings.prototype, "downloadUrl", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], AjaxSettings.prototype, "getImageUrl", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], AjaxSettings.prototype, "uploadUrl", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], AjaxSettings.prototype, "url", void 0);

var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const toolbarItems = ['NewFolder', 'Upload', 'Cut', 'Copy', 'Paste', 'Delete', 'Download', 'Rename',
    'SortBy', 'Refresh', 'Selection', 'View', 'Details'];
/**
 * Specifies the Toolbar settings of the FileManager.
 */
class ToolbarSettings extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty {
}
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(toolbarItems)
], ToolbarSettings.prototype, "items", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], ToolbarSettings.prototype, "visible", void 0);

var __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Specifies the Search settings of the File Manager.
 */
class SearchSettings extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty {
}
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], SearchSettings.prototype, "allowSearchOnTyping", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('contains')
], SearchSettings.prototype, "filterType", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], SearchSettings.prototype, "ignoreCase", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], SearchSettings.prototype, "placeholder", void 0);

var __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Specifies the columns in the details view of the file manager.
 */
const columnArray = [
    {
        field: 'name', headerText: 'Name', minWidth: 120,
        template: '<span class="e-fe-text">${name}</span>', customAttributes: { class: 'e-fe-grid-name' }
    },
    {
        field: '_fm_modified', headerText: 'DateModified', type: 'dateTime',
        format: 'MMMM dd, yyyy HH:mm', minWidth: 120, width: '190'
    },
    {
        field: 'size', headerText: 'Size', minWidth: 90, width: '110', template: '<span class="e-fe-size">${size}</span>'
    }
];
/**
 * Specifies the grid settings of the File Manager.
 */
class DetailsViewSettings extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty {
}
__decorate$3([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], DetailsViewSettings.prototype, "columnResizing", void 0);
__decorate$3([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(columnArray)
], DetailsViewSettings.prototype, "columns", void 0);

var __decorate$4 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const fileItems = ['Open', '|', 'Cut', 'Copy', '|', 'Delete', 'Download', 'Rename', '|', 'Details'];
const folderItems = ['Open', '|', 'Cut', 'Copy', 'Paste', '|', 'Delete', 'Rename', 'Download', '|', 'Details'];
const layoutItems = [
    'SortBy', 'View', 'Refresh', '|', 'Paste', '|', 'NewFolder', 'Upload', '|', 'Details', '|', 'SelectAll'
];
/**
 * Specifies the ContextMenu settings of the File Manager.
 */
class ContextMenuSettings extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty {
}
__decorate$4([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(fileItems)
], ContextMenuSettings.prototype, "file", void 0);
__decorate$4([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(folderItems)
], ContextMenuSettings.prototype, "folder", void 0);
__decorate$4([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(layoutItems)
], ContextMenuSettings.prototype, "layout", void 0);
__decorate$4([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], ContextMenuSettings.prototype, "visible", void 0);

var __decorate$5 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Specifies the navigationpane settings of the File Manager.
 */
class NavigationPaneSettings extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty {
}
__decorate$5([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('650px')
], NavigationPaneSettings.prototype, "maxWidth", void 0);
__decorate$5([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('240px')
], NavigationPaneSettings.prototype, "minWidth", void 0);
__decorate$5([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], NavigationPaneSettings.prototype, "visible", void 0);
__decorate$5([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('None')
], NavigationPaneSettings.prototype, "sortOrder", void 0);

var __decorate$6 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Specifies the Ajax settings of the File Manager.
 */
class UploadSettings extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty {
}
__decorate$6([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')
], UploadSettings.prototype, "allowedExtensions", void 0);
__decorate$6([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], UploadSettings.prototype, "autoUpload", void 0);
__decorate$6([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], UploadSettings.prototype, "autoClose", void 0);
__decorate$6([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)
], UploadSettings.prototype, "minFileSize", void 0);
__decorate$6([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(30000000)
], UploadSettings.prototype, "maxFileSize", void 0);

var __decorate$7 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Interface for a class Column
 */
/* istanbul ignore next */
class Column extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty {
}
__decorate$7([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')
], Column.prototype, "field", void 0);
__decorate$7([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')
], Column.prototype, "headerText", void 0);
__decorate$7([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')
], Column.prototype, "width", void 0);
__decorate$7([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')
], Column.prototype, "minWidth", void 0);
__decorate$7([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')
], Column.prototype, "maxWidth", void 0);
__decorate$7([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Left')
], Column.prototype, "textAlign", void 0);
__decorate$7([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], Column.prototype, "headerTextAlign", void 0);
__decorate$7([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], Column.prototype, "type", void 0);
__decorate$7([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], Column.prototype, "format", void 0);
__decorate$7([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], Column.prototype, "template", void 0);
__decorate$7([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], Column.prototype, "headerTemplate", void 0);
__decorate$7([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], Column.prototype, "allowSorting", void 0);
__decorate$7([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], Column.prototype, "allowResizing", void 0);
__decorate$7([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], Column.prototype, "customAttributes", void 0);
__decorate$7([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')
], Column.prototype, "hideAtMedia", void 0);
__decorate$7([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], Column.prototype, "customFormat", void 0);

/**
 * FileExplorer common modules
 */

/**
 * Specifies the File Manager internal ID's
 */
/** @hidden */
const TOOLBAR_ID = '_toolbar';
/** @hidden */
const LAYOUT_ID = '_layout';
/** @hidden */
const NAVIGATION_ID = '_navigation';
/** @hidden */
const TREE_ID = '_tree';
/** @hidden */
const GRID_ID = '_grid';
/** @hidden */
const LARGEICON_ID = '_largeicons';
/** @hidden */
const DIALOG_ID = '_dialog';
/** @hidden */
const ALT_DIALOG_ID = '_alt_dialog';
/** @hidden */
const IMG_DIALOG_ID = '_img_dialog';
/** @hidden */
const EXTN_DIALOG_ID = '_extn_dialog';
/** @hidden */
const UPLOAD_DIALOG_ID = '_upload_dialog';
/** @hidden */
const RETRY_DIALOG_ID = '_retry_dialog';
/** @hidden */
const CONTEXT_MENU_ID = '_contextmenu';
/** @hidden */
const SORTBY_ID = '_sortby';
/** @hidden */
const VIEW_ID = '_view';
/** @hidden */
const SPLITTER_ID = '_splitter';
/** @hidden */
const CONTENT_ID = '_content';
/** @hidden */
const BREADCRUMBBAR_ID = '_breadcrumbbar';
/** @hidden */
const UPLOAD_ID = '_upload';
/** @hidden */
const RETRY_ID = '_retry';
/** @hidden */
const SEARCH_ID = '_search';
/**
 * Specifies the File Manager internal class names
 */
/** @hidden */
const ROOT = 'e-filemanager';
/** @hidden */
const CONTROL = 'e-control';
/** @hidden */
const CHECK_SELECT = 'e-fe-cb-select';
/** @hidden */
const ROOT_POPUP = 'e-fe-popup';
/** @hidden */
const MOBILE = 'e-fe-mobile';
/** @hidden */
const MOB_POPUP = 'e-fe-popup e-fe-mobile';
/** @hidden */
const MULTI_SELECT = 'e-fe-m-select';
/** @hidden */
const FILTER = 'e-fe-m-filter';
/** @hidden */
const LAYOUT = 'e-layout';
/** @hidden */
const NAVIGATION = 'e-navigation';
/** @hidden */
const LAYOUT_CONTENT = 'e-layout-content';
/** @hidden */
const LARGE_ICONS = 'e-large-icons';
/** @hidden */
const TB_ITEM = 'e-toolbar-item';
/** @hidden */
const LIST_ITEM = 'e-list-item';
/** @hidden */
const LIST_TEXT = 'e-list-text';
/** @hidden */
const LIST_PARENT = 'e-list-parent';
/** @hidden */
const TB_OPTION_TICK = 'e-icons e-fe-tick';
/** @hidden */
const TB_OPTION_DOT = 'e-icons e-fe-dot';
/** @hidden */
const BLUR = 'e-blur';
/** @hidden */
const ACTIVE = 'e-active';
/** @hidden */
const HOVER = 'e-hover';
/** @hidden */
const FOCUS = 'e-focus';
/** @hidden */
const FOCUSED = 'e-focused';
/** @hidden */
const CHECK = 'e-check';
/** @hidden */
const FRAME = 'e-frame';
/** @hidden */
const CB_WRAP = 'e-checkbox-wrapper';
/** @hidden */
const ROW = 'e-row';
/** @hidden */
const ROWCELL = 'e-rowcell';
/** @hidden */
const EMPTY = 'e-empty';
/** @hidden */
const EMPTY_CONTENT = 'e-empty-content';
/** @hidden */
const EMPTY_INNER_CONTENT = 'e-empty-inner-content';
/** @hidden */
const CLONE = 'e-fe-clone';
/** @hidden */
const DROP_FOLDER = 'e-fe-drop-folder';
/** @hidden */
const DROP_FILE = 'e-fe-drop-file';
/** @hidden */
const FOLDER = 'e-fe-folder';
/** @hidden */
const ICON_IMAGE = 'e-fe-image';
/** @hidden */
const ICON_MUSIC = 'e-fe-music';
/** @hidden */
const ICON_VIDEO = 'e-fe-video';
/** @hidden */
const LARGE_ICON = 'e-large-icon';
/** @hidden */
const LARGE_EMPTY_FOLDER = 'e-empty-icon e-fe-folder';
/** @hidden */
const LARGE_EMPTY_FOLDER_TWO = 'e-empty-icon.e-fe-folder';
/** @hidden */
const LARGE_ICON_FOLDER = 'e-fe-folder';
/** @hidden */
const SELECTED_ITEMS = 'e-items';
/** @hidden */
const TEXT_CONTENT = 'e-text-content';
/** @hidden */
const GRID_HEADER = 'e-gridheader';
/** @hidden */
const TEMPLATE_CELL = 'e-templatecell';
/** @hidden */
const TREE_VIEW = 'e-treeview';
/** @hidden */
const MENU_ITEM = 'e-menu-item';
/** @hidden */
const MENU_ICON = 'e-menu-icon';
/** @hidden */
const SUBMENU_ICON = 'e-caret';
/** @hidden */
const GRID_VIEW = 'e-content';
/** @hidden */
const GRID_CONTENT = 'e-gridcontent';
/** @hidden */
const ICON_VIEW = 'e-list-parent';
/** @hidden */
const ICON_OPEN = 'e-icons e-fe-open';
/** @hidden */
const ICON_UPLOAD = 'e-icons e-fe-upload';
/** @hidden */
const ICON_CUT = 'e-icons e-fe-cut';
/** @hidden */
const ICON_COPY = 'e-icons e-fe-copy';
/** @hidden */
const ICON_PASTE = 'e-icons e-fe-paste';
/** @hidden */
const ICON_DELETE = 'e-icons e-fe-delete';
/** @hidden */
const ICON_RENAME = 'e-icons e-fe-rename';
/** @hidden */
const ICON_NEWFOLDER = 'e-icons e-fe-newfolder';
/** @hidden */
const ICON_DETAILS = 'e-icons e-fe-details';
/** @hidden */
const ICON_SHORTBY = 'e-icons e-fe-sort';
/** @hidden */
const ICON_REFRESH = 'e-icons e-fe-refresh';
/** @hidden */
const ICON_SELECTALL = 'e-icons e-fe-select';
/** @hidden */
const ICON_DOWNLOAD = 'e-icons e-fe-download';
/** @hidden */
const ICON_OPTIONS = 'e-icons e-fe-options';
/** @hidden */
const ICON_GRID = 'e-icons e-fe-grid';
/** @hidden */
const ICON_LARGE = 'e-icons e-fe-large';
/** @hidden */
const ICON_BREADCRUMB = 'e-icons e-fe-breadcrumb';
/** @hidden */
const ICON_CLEAR = 'e-icons e-fe-clear';
/** @hidden */
const ICON_DROP_IN = 'e-icons e-fe-drop-in';
/** @hidden */
const ICON_DROP_OUT = 'e-icons e-fe-drop-out';
/** @hidden */
const ICON_NO_DROP = 'e-icons e-fe-no-drop';
/** @hidden */
const ICONS = 'e-icons';
/** @hidden */
const DETAILS_LABEL = 'e-detailslabel';
/** @hidden */
const ERROR_CONTENT = 'e-fe-errorcontent';
/** @hidden */
const STATUS = 'e-status';
/** @hidden */
const BREADCRUMBS = 'e-address';
/** @hidden */
const RTL = 'e-rtl';
/** @hidden */
const DISPLAY_NONE = 'e-display-none';
/** @hidden */
const COLLAPSED = 'e-node-collapsed';
/** @hidden */
const FULLROW = 'e-fullrow';
/** @hidden */
const ICON_COLLAPSIBLE = 'e-icon-collapsible';
/** @hidden */
const SPLIT_BAR = 'e-split-bar';
/** @hidden */
const HEADER_CHECK = 'e-headercheck';
/** @hidden */
const OVERLAY = 'e-fe-overlay';
/** @hidden */
const VALUE = 'e-fe-value';

/**
 * Specifies the File Manager internal variables
 */
/** @hidden */
const isFile = 'isFile';
/**
 * Specifies the File Manager internal events
 */
/** @hidden */
const modelChanged = 'model-changed';
/** @hidden */
const initialEnd = 'initial-end';
/** @hidden */
const finalizeEnd = 'finalize-end';
/** @hidden */
const createEnd = 'create-end';
/** @hidden */
const filterEnd = 'filter-end';
/** @hidden */
const beforeDelete = 'before-delete';
/** @hidden */
const pathDrag = 'path-drag';
/** @hidden */
const deleteInit = 'delete-init';
/** @hidden */
const deleteEnd = 'delete-end';
/** @hidden */
const refreshEnd = 'refresh-end';
/** @hidden */
const resizeEnd = 'resize-end';
/** @hidden */
const splitterResize = 'splitter-resize';
/** @hidden */
const pathChanged = 'path-changed';
/** @hidden */
const destroy = 'destroy';
/** @hidden */
const beforeRequest = 'before-request';
/** @hidden */
const upload = 'upload';
/** @hidden */
const skipUpload = 'skip-upload';
/** @hidden */
const afterRequest = 'after-request';
/** @hidden */
const download = 'download';
/** @hidden */
const layoutRefresh = 'layout-refresh';
/** @hidden */
const actionFailure = 'actionFailure';
/** @hidden */
const search = 'search';
/** @hidden */
const openInit = 'open-init';
/** @hidden */
const openEnd = 'open-end';
/** @hidden */
const selectionChanged = 'selection-changed';
/** @hidden */
const selectAllInit = 'select-all-init';
/** @hidden */
const clearAllInit = 'clear-all-init';
/** @hidden */
const clearPathInit = 'clear-path-init';
/** @hidden */
const layoutChange = 'layout-change';
/** @hidden */
const sortByChange = 'sort-by-change';
/** @hidden */
const nodeExpand = 'node-expand';
/** @hidden */
const detailsInit = 'details-init';
/** @hidden */
const menuItemData = 'menu-item-data';
/** @hidden */
const renameInit = 'rename-init';
/** @hidden */
const renameEndParent = 'rename-end-parent';
/** @hidden */
const renameEnd = 'rename-end';
/** @hidden */
const showPaste = 'show-paste';
/** @hidden */
const hidePaste = 'hide-paste';
/** @hidden */
const selectedData = 'selected-data';
/** @hidden */
const cutCopyInit = 'cut-copy-init';
/** @hidden */
const pasteInit = 'paste-init';
/** @hidden */
const pasteEnd = 'paste-end';
/** @hidden */
const cutEnd = 'cut-end';
/** @hidden */
const hideLayout = 'hide-layout';
/** @hidden */
const updateTreeSelection = 'update-tree-selection';
/** @hidden */
const treeSelect = 'select-node';
/** @hidden */
const sortColumn = 'sort-column';
/** @hidden */
const pathColumn = 'path-column';
/** @hidden */
const searchTextChange = 'search-change';
/** @hidden */
const beforeDownload = 'before-download';
/** @hidden */
const downloadInit = 'download-init';
/** @hidden */
const dropInit = 'drop-init';
/** @hidden */
const dragEnd = 'drag-end';
/** @hidden */
const dropPath = 'drop-path';
/** @hidden */
const dragHelper = 'drag-helper';
/** @hidden */
const dragging = 'dragging';
/** @hidden */
const updateSelectionData = 'update-selection-data';
/** @hidden */
const methodCall = 'method-call';
/** @hidden */
const permissionRead = 'read';
/** @hidden */
const permissionEdit = 'write';
/** @hidden */
const permissionEditContents = 'writeContents';
/** @hidden */
const permissionCopy = 'copy';
/** @hidden */
const permissionUpload = 'upload';
/** @hidden */
const permissionDownload = 'download';

/**
 * Utility file for common actions
 *
 * @param {HTMLLIElement} node - specifies the node.
 * @param {Object} data - specifies the data.
 * @param {IFileManager} instance - specifies the control instance.
 * @returns {void}
 * @private
 */
// eslint-disable-next-line
function updatePath(node, data, instance) {
    const text = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('name', data);
    const id = node.getAttribute('data-id');
    const newText = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(id) ? text : id;
    instance.setProperties({ path: getPath(node, newText, instance.hasId) }, true);
    instance.pathId = getPathId(node);
    instance.pathNames = getPathNames(node, text);
}
/**
 * Functions for get path in FileManager
 *
 * @param {Element | Node} element - specifies the element.
 * @param {string} text - specifies the text.
 * @param {boolean} hasId - specifies the id.
 * @returns {string} returns the path.
 * @private
 */
function getPath(element, text, hasId) {
    const matched = getParents(element, text, false, hasId);
    let path = hasId ? '' : '/';
    const len = matched.length - (hasId ? 1 : 2);
    for (let i = len; i >= 0; i--) {
        path += matched[i] + '/';
    }
    return path;
}
/**
 * Functions for get path id in FileManager
 *
 * @param {Element} node - specifies the node element.
 * @returns {string[]} returns the path ids.
 * @private
 */
function getPathId(node) {
    const matched = getParents(node, node.getAttribute('data-uid'), true);
    const ids = [];
    for (let i = matched.length - 1; i >= 0; i--) {
        ids.push(matched[i]);
    }
    return ids;
}
/**
 * Functions for get path names in FileManager
 *
 * @param {Element} element - specifies the node element.
 * @param {string} text - specifies the text.
 * @returns {string[]} returns the path names.
 * @private
 */
function getPathNames(element, text) {
    const matched = getParents(element, text, false);
    const names = [];
    for (let i = matched.length - 1; i >= 0; i--) {
        names.push(matched[i]);
    }
    return names;
}
/**
 * Functions for get path id in FileManager
 *
 * @param {Element} element - specifies the node element.
 * @param {string} text - specifies the text.
 * @param {boolean} isId - specifies the id.
 * @param {boolean} hasId - checks the id exists.
 * @returns {string[]} returns parent element.
 * @private
 */
function getParents(element, text, isId, hasId) {
    const matched = [text];
    let el = element.parentNode;
    while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(el)) {
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.matches)(el, '.' + LIST_ITEM)) {
            const parentText = isId ? el.getAttribute('data-uid') : (hasId ? el.getAttribute('data-id') :
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + LIST_TEXT, el).textContent);
            matched.push(parentText);
        }
        el = el.parentNode;
        if (el.classList.contains(TREE_VIEW)) {
            break;
        }
    }
    return matched;
}
/**
 * Functions for generate path
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @returns {void}
 * @private
 */
function generatePath(parent) {
    const key = parent.hasId ? 'id' : 'name';
    let newPath = parent.hasId ? '' : '/';
    let i = parent.hasId ? 0 : 1;
    for (i; i < parent.pathId.length; i++) {
        // eslint-disable-next-line
        const data = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(parent.pathId[i], parent.feParent);
        newPath += (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(key, data) + '/';
    }
    parent.setProperties({ path: newPath }, true);
}
/**
 * Functions for remove active element
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @returns {void}
 * @private
 */
function removeActive(parent) {
    if (parent.isCut) {
        removeBlur(parent);
        parent.selectedNodes = [];
        parent.actionRecords = [];
        parent.enablePaste = false;
        parent.notify(hidePaste, {});
    }
}
/**
 * Selects active element in File Manager
 *
 * @param {string} action - specifies the action.
 * @param {IFileManager} parent - specifies the parent element.
 * @returns {boolean} - returns active element.
 * @private
 */
function activeElement(action, parent) {
    parent.isSearchCut = false;
    parent.actionRecords = [];
    parent.activeElements = [];
    parent.notify(cutCopyInit, {});
    if (parent.activeElements.length === 0) {
        return false;
    }
    removeBlur(parent);
    const blurEle = parent.activeElements;
    if (parent.activeModule !== 'navigationpane') {
        parent.targetPath = parent.path;
    }
    else {
        parent.targetPath = getParentPath(parent.path);
    }
    let i = 0;
    if (blurEle) {
        getModule(parent, blurEle[0]);
        if (action === 'cut') {
            while (i < blurEle.length) {
                addBlur(blurEle[i]);
                i++;
            }
        }
    }
    i = 0;
    parent.selectedNodes = [];
    parent.enablePaste = true;
    parent.notify(showPaste, {});
    while (i < parent.activeRecords.length) {
        parent.actionRecords.push(parent.activeRecords[i]);
        parent.selectedNodes.push((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('name', parent.activeRecords[i]));
        i++;
    }
    if ((parent.breadcrumbbarModule.searchObj.element.value !== '' || parent.isFiltered) &&
        parent.activeModule !== 'navigationpane') {
        parent.selectedNodes = [];
        parent.isSearchCut = true;
        let i = 0;
        while (i < parent.selectedItems.length) {
            parent.selectedNodes.push(parent.selectedItems[i]);
            i++;
        }
    }
    return true;
}
/**
 * Adds blur to the elements
 *
 * @param {Element} nodes - specifies the nodes.
 * @returns {void}
 * @private
 */
function addBlur(nodes) {
    nodes.classList.add(BLUR);
}
/**
 * Removes blur from elements
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {string} hover - specifies the hover string.
 * @returns {void}
 * @private
 */
function removeBlur(parent, hover) {
    const blurEle = (!hover) ? parent.element.querySelectorAll('.' + BLUR) :
        parent.element.querySelectorAll('.' + HOVER);
    let i = 0;
    while (i < blurEle.length) {
        blurEle[i].classList.remove((!hover) ? BLUR : HOVER);
        i++;
    }
}
/**
 * Gets module name
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {Element} element - specifies the element.
 * @returns {void}
 * @private
 */
function getModule(parent, element) {
    if (element) {
        if (element.classList.contains(ROW)) {
            parent.activeModule = 'detailsview';
        }
        else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(element, '.' + LARGE_ICON)) {
            parent.activeModule = 'largeiconsview';
        }
        else {
            parent.activeModule = 'navigationpane';
        }
    }
}
/**
 * Gets module name
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {string} value - specifies the value.
 * @param {boolean} isLayoutChange - specifies the layout change.
 * @returns {void}
 * @private
 */
function searchWordHandler(parent, value, isLayoutChange) {
    let searchWord;
    if (value.length === 0 && !parent.isFiltered) {
        parent.notify(pathColumn, { args: parent });
    }
    if (parent.searchSettings.filterType === 'startsWith') {
        searchWord = value + '*';
    }
    else if (parent.searchSettings.filterType === 'endsWith') {
        searchWord = '*' + value;
    }
    else {
        searchWord = '*' + value + '*';
    }
    parent.searchWord = searchWord;
    parent.itemData = [getPathObject(parent)];
    if (value.length > 0) {
        const caseSensitive = parent.searchSettings.ignoreCase;
        const hiddenItems = parent.showHiddenItems;
        Search(parent, isLayoutChange ? layoutChange : search, parent.path, searchWord, hiddenItems, !caseSensitive);
    }
    else {
        if (!parent.isFiltered) {
            if (parent.isSortByClicked) {
                parent.notify(layoutChange, { files: parent.largeiconsviewModule.items });
                parent.isSortByClicked = false;
            }
            else {
                read(parent, isLayoutChange ? layoutChange : search, parent.path);
            }
        }
        else {
            filter(parent, layoutChange);
        }
    }
}
/**
 * Gets updated layout
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {string} view - specifies the view.
 * @returns {void}
 * @private
 */
function updateLayout(parent, view) {
    parent.setProperties({ view: view }, true);
    if (parent.breadcrumbbarModule.searchObj.element.value !== '' || parent.isFiltered) {
        parent.layoutSelectedItems = parent.selectedItems;
    }
    let searchWord = '';
    if (parent.breadcrumbbarModule.searchObj.element.value) {
        searchWord = parent.breadcrumbbarModule.searchObj.element.value;
    }
    parent.isLayoutChange = true;
    searchWordHandler(parent, searchWord, true);
}
/* istanbul ignore next */
/**
 * Gets updated layout
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {Element} element - specifies the element.
 * @returns {void}
 * @private
 */
function getTargetModule(parent, element) {
    let tartgetModule = '';
    if (element) {
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(element, '.' + ROOT + '.' + CONTROL + ' .' + GRID_CONTENT)) {
            tartgetModule = 'detailsview';
        }
        else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(element, '.' + LARGE_ICONS)) {
            tartgetModule = 'largeiconsview';
        }
        else if (element.classList.contains('e-fullrow') ||
            element.classList.contains('e-icon-expandable')) {
            tartgetModule = 'navigationpane';
        }
        else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(element, '.e-address-list-item')) {
            tartgetModule = 'breadcrumbbar';
        }
        else {
            tartgetModule = '';
        }
    }
    parent.targetModule = tartgetModule;
}
/* istanbul ignore next */
/**
 * refresh the layout
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @returns {void}
 * @private
 */
function refresh(parent) {
    parent.itemData = [getPathObject(parent)];
    if (!hasReadAccess(parent.itemData[0])) {
        createDeniedDialog(parent, parent.itemData[0], permissionRead);
    }
    else {
        read(parent, refreshEnd, parent.path);
    }
}
/**
 * open action in the layout
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @returns {void}
 * @private
 */
function openAction(parent) {
    read(parent, openEnd, parent.path);
}
/**
 * open action in the layout
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @returns {Object} - returns the path data.
 * @private
 */
// eslint-disable-next-line
function getPathObject(parent) {
    return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(parent.pathId[parent.pathId.length - 1], parent.feParent);
}
/**
 * Copy files
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @returns {void}
 * @private
 */
function copyFiles(parent) {
    if (!activeElement('copy', parent)) {
        return;
    }
    else {
        parent.fileAction = 'copy';
    }
}
/**
 * Cut files
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @returns {void}
 * @private
 */
function cutFiles(parent) {
    if (!activeElement('cut', parent)) {
        return;
    }
    else {
        parent.isCut = true;
        parent.fileAction = 'move';
    }
}
/**
 * To add class for fileType
 *
 * @param {Object} file - specifies the file.
 * @returns {string} - returns the file type.
 * @private
 */
// eslint-disable-next-line
function fileType(file) {
    const isFile$$1 = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('isFile', file);
    if (!isFile$$1) {
        return FOLDER;
    }
    const imageFormat = ['bmp', 'dib', 'jpg', 'jpeg', 'jpe', 'jfif', 'gif', 'tif', 'tiff', 'png', 'ico'];
    const audioFormat = ['mp3', 'wav', 'aac', 'ogg', 'wma', 'aif', 'fla', 'm4a'];
    const videoFormat = ['webm', 'mkv', 'flv', 'vob', 'ogv', 'ogg', 'avi', 'wmv', 'mp4', '3gp'];
    const knownFormat = ['css', 'exe', 'html', 'js', 'msi', 'pdf', 'pptx', 'ppt', 'rar', 'zip', 'txt', 'docx', 'doc',
        'xlsx', 'xls', 'xml', 'rtf', 'php'];
    let filetype = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('type', file);
    filetype = filetype.toLowerCase();
    if (filetype.indexOf('.') !== -1) {
        filetype = filetype.split('.').join('');
    }
    let iconType;
    if (imageFormat.indexOf(filetype) !== -1) {
        iconType = ICON_IMAGE;
    }
    else if (audioFormat.indexOf(filetype) !== -1) {
        iconType = ICON_MUSIC;
    }
    else if (videoFormat.indexOf(filetype) !== -1) {
        iconType = ICON_VIDEO;
    }
    else if (knownFormat.indexOf(filetype) !== -1) {
        iconType = 'e-fe-' + filetype;
    }
    else {
        iconType = 'e-fe-unknown e-fe-' + filetype;
    }
    return iconType;
}
/* istanbul ignore next */
/**
 * To get the image URL
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {Object} item - specifies the item.
 * @returns {string} - returns the image url.
 * @private
 */
// eslint-disable-next-line
function getImageUrl(parent, item) {
    const baseUrl = parent.ajaxSettings.getImageUrl ? parent.ajaxSettings.getImageUrl : parent.ajaxSettings.url;
    let imgUrl;
    const fileName = encodeURIComponent((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('name', item));
    const fPath = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('filterPath', item);
    if (parent.hasId) {
        const imgId = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('id', item);
        imgUrl = baseUrl + '?path=' + parent.path + '&id=' + imgId;
    }
    else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fPath)) {
        imgUrl = baseUrl + '?path=' + fPath.replace(/\\/g, '/') + fileName;
    }
    else {
        imgUrl = baseUrl + '?path=' + parent.path + fileName;
    }
    imgUrl = imgUrl + '&time=' + (new Date().getTime()).toString();
    const eventArgs = {
        fileDetails: [item],
        imageUrl: imgUrl
    };
    parent.trigger('beforeImageLoad', eventArgs);
    return eventArgs.imageUrl;
}
/* istanbul ignore next */
/**
 * Gets the full path
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {Object} data - specifies the data.
 * @param {string} path - specifies the path.
 * @returns {string} - returns the image url.
 * @private
 */
// eslint-disable-next-line
function getFullPath(parent, data, path) {
    const filePath = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(parent.hasId ? 'id' : 'name', data) + '/';
    const fPath = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(parent.hasId ? 'filterId' : 'filterPath', data);
    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fPath)) {
        return fPath.replace(/\\/g, '/') + filePath;
    }
    else {
        return path + filePath;
    }
}
/**
 * Gets the name
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {Object} data - specifies the data.
 * @returns {string} - returns the name.
 * @private
 */
// eslint-disable-next-line
function getName(parent, data) {
    let name = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('name', data);
    let fPath = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('filterPath', data);
    if ((parent.breadcrumbbarModule.searchObj.element.value !== '' || parent.isFiltered) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fPath)) {
        fPath = fPath.replace(/\\/g, '/');
        name = fPath.replace(parent.path, '') + name;
    }
    return name;
}
/**
 * Gets the name
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {Object[]} items - specifies the item elements.
 * @returns {Object[]} - returns the sorted data.
 * @private
 */
// eslint-disable-next-line
function getSortedData(parent, items) {
    if (items.length === 0) {
        return items;
    }
    let query;
    if (parent.sortOrder !== 'None') {
        query = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().sortBy(parent.sortBy, parent.sortOrder.toLowerCase(), true).group('isFile');
    }
    else {
        query = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().group('isFile');
    }
    // eslint-disable-next-line
    const lists = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(items).executeLocal(query);
    return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('records', lists);
}
/**
 * Gets the data object
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {string} key - specifies the key.
 * @param {string} value - specifies the value.
 * @returns {Object} - returns the sorted data.
 * @private
 */
// eslint-disable-next-line
function getObject(parent, key, value) {
    // eslint-disable-next-line
    const currFiles = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(parent.pathId[parent.pathId.length - 1], parent.feFiles);
    const query = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where(key, 'equal', value);
    // eslint-disable-next-line
    const lists = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(currFiles).executeLocal(query);
    return lists[0];
}
/**
 * Creates empty element
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {HTMLElement} element - specifies the element.
 * @param {ReadArgs | SearchArgs} args - specifies the args.
 * @returns {void}
 * @private
 */
function createEmptyElement(parent, element, args) {
    let top;
    const layoutElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + parent.element.id + LAYOUT_ID, parent.element);
    const addressBarHeight = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + parent.element.id + BREADCRUMBBAR_ID, layoutElement).offsetHeight;
    top = layoutElement.offsetHeight - addressBarHeight;
    if (parent.view === 'Details') {
        top = top - (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + GRID_HEADER, layoutElement).offsetHeight;
    }
    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element.querySelector('.' + EMPTY))) {
        const emptyDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: EMPTY });
        const emptyFolder = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: LARGE_EMPTY_FOLDER });
        const emptyEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: EMPTY_CONTENT });
        const dragFile = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: EMPTY_INNER_CONTENT });
        if (parent.view === 'Details') {
            element.querySelector('.' + GRID_VIEW).appendChild(emptyDiv);
        }
        else {
            element.appendChild(emptyDiv);
        }
        emptyDiv.appendChild(emptyFolder);
        emptyDiv.appendChild(emptyEle);
        emptyDiv.appendChild(dragFile);
    }
    if (element.querySelector('.' + EMPTY)) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.error)) {
            element.querySelector('.' + EMPTY_CONTENT).innerHTML = getLocaleText(parent, 'Access-Denied');
            element.querySelector('.' + EMPTY_INNER_CONTENT).innerHTML = getLocaleText(parent, 'Access-Details');
        }
        else if (parent.isFiltered) {
            element.querySelector('.' + EMPTY_CONTENT).innerHTML = getLocaleText(parent, 'Filter-Empty');
            element.querySelector('.' + EMPTY_INNER_CONTENT).innerHTML = getLocaleText(parent, 'Filter-Key');
        }
        else if (parent.breadcrumbbarModule.searchObj.element.value !== '') {
            element.querySelector('.' + EMPTY_CONTENT).innerHTML = getLocaleText(parent, 'Search-Empty');
            element.querySelector('.' + EMPTY_INNER_CONTENT).innerHTML = getLocaleText(parent, 'Search-Key');
        }
        else {
            element.querySelector('.' + EMPTY_CONTENT).innerHTML = getLocaleText(parent, 'Folder-Empty');
            element.querySelector('.' + EMPTY_INNER_CONTENT).innerHTML = getLocaleText(parent, 'File-Upload');
        }
    }
    const eDiv = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + EMPTY, element);
    top = (top - eDiv.offsetHeight) / 2;
    eDiv.style.marginTop = top + 'px';
}
/**
 * Gets the directories
 *
 * @param {Object[]} files - specifies the file object.
 * @returns {Object[]} - returns the sorted data.
 * @private
 */
// eslint-disable-next-line
function getDirectories(files) {
    return new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(files).executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where(isFile, 'equal', false, false));
}
/**
 * set the Node ID
 *
 * @param {ReadArgs} result - specifies the result.
 * @param {string} rootId - specifies the rootId.
 * @returns {void}
 * @private
 */
function setNodeId(result, rootId) {
    // eslint-disable-next-line
    const dirs = getDirectories(result.files);
    for (let i = 0, len = dirs.length; i < len; i++) {
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('_fm_id', rootId + '_' + i, dirs[i]);
    }
}
/**
 * set the date object
 *
 * @param {Object[]} args - specifies the file object.
 * @returns {void}
 * @private
 */
// eslint-disable-next-line
function setDateObject(args) {
    for (let i = 0; i < args.length; i++) {
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('_fm_created', new Date((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('dateCreated', args[i])), args[i]);
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('_fm_modified', new Date((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('dateModified', args[i])), args[i]);
    }
}
/**
 * get the locale text
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {string} text - specifies the text.
 * @returns {string} - returns the locale text.
 * @private
 */
function getLocaleText(parent, text) {
    const locale = parent.localeObj.getConstant(text);
    return (locale === '') ? text : locale;
}
/**
 * get the CSS class
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {string} css - specifies the css.
 * @returns {string} - returns the css classes.
 * @private
 */
function getCssClass(parent, css) {
    let cssClass = parent.cssClass;
    cssClass = ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cssClass) || cssClass === '') ? css : (cssClass + ' ' + css);
    return cssClass;
}
/**
 * sort on click
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {MenuEventArgs} args - specifies the menu event arguements.
 * @returns {void}
 * @private
 */
function sortbyClickHandler(parent, args) {
    let tick;
    parent.isSortByClicked = true;
    if (args.item.id.indexOf('ascending') !== -1 || args.item.id.indexOf('descending') !== -1 || args.item.id.indexOf('none') !== -1) {
        tick = true;
    }
    else {
        tick = false;
    }
    if (!tick) {
        parent.sortBy = getSortField(args.item.id);
    }
    else {
        parent.sortOrder = getSortField(args.item.id);
    }
    parent.itemData = [getPathObject(parent)];
    if (parent.view === 'Details') {
        if (parent.isMobile) {
            updateLayout(parent, 'Details');
        }
        else {
            parent.notify(sortColumn, { module: 'detailsview' });
        }
    }
    if (parent.view === 'LargeIcons') {
        updateLayout(parent, 'LargeIcons');
    }
    parent.notify(sortByChange, {});
}
/**
 * Gets the sorted fields
 *
 * @param {string} id - specifies the id.
 * @returns {string} - returns the sorted fields
 * @private
 */
function getSortField(id) {
    const text = id.substring(id.lastIndexOf('_') + 1);
    let field = text;
    switch (text) {
        case 'date':
            field = '_fm_modified';
            break;
        case 'ascending':
            field = 'Ascending';
            break;
        case 'descending':
            field = 'Descending';
            break;
        case 'none':
            field = 'None';
            break;
    }
    return field;
}
/**
 * Sets the next path
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {string} path - specifies the path.
 * @returns {void}
 * @private
 */
function setNextPath(parent, path) {
    const currfolders = path.split('/');
    const folders = parent.originalPath.split('/');
    // eslint-disable-next-line
    const root = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(parent.pathId[0], parent.feParent);
    const key = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('id', root)) ? 'name' : 'id';
    for (let i = currfolders.length - 1, len = folders.length - 1; i < len; i++) {
        const eventName = (folders[i + 1] === '') ? finalizeEnd : initialEnd;
        const newPath = (folders[i] === '') ? '/' : (parent.path + folders[i] + '/');
        // eslint-disable-next-line
        const data = getObject(parent, key, folders[i]);
        const id = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('_fm_id', data);
        parent.setProperties({ path: newPath }, true);
        parent.pathId.push(id);
        parent.itemData = [data];
        parent.pathNames.push((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('name', data));
        read(parent, eventName, parent.path);
        break;
    }
}
/**
 * Opens the searched folder
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {Object} data - specifies the data
 * @returns {void}
 * @private
 */
// eslint-disable-next-line
function openSearchFolder(parent, data) {
    parent.notify(clearPathInit, { selectedNode: parent.pathId[parent.pathId.length - 1] });
    parent.originalPath = getFullPath(parent, data, parent.path);
    read(parent, (parent.path !== parent.originalPath) ? initialEnd : finalizeEnd, parent.path);
}
/**
 * Paste handling function
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @returns {void}
 * @private
 */
function pasteHandler(parent) {
    parent.isDragDrop = false;
    if (parent.selectedNodes.length !== 0 && parent.enablePaste) {
        const path = (parent.folderPath === '') ? parent.path : parent.folderPath;
        // eslint-disable-next-line
        const subFolder = validateSubFolder(parent, parent.actionRecords, path, parent.path);
        if (!subFolder) {
            if ((parent.fileAction === 'move' && parent.targetPath !== path) || parent.fileAction === 'copy') {
                parent.notify(pasteInit, {});
                paste(parent, parent.targetPath, parent.selectedNodes, path, parent.fileAction, [], parent.actionRecords);
            }
            else {
                parent.enablePaste = false;
                parent.notify(hidePaste, {});
                removeBlur(parent);
            }
        }
    }
}
/**
 * Validates the sub folders
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {'{ [key: string]: Object; }[]'} data - specifies the data.
 * @param {string} dropPath - specifies the drop path.
 * @param {string} dragPath - specifies the drag path.
 * @returns {boolean} - returns the validated sub folder.
 * @private
 */
// eslint-disable-next-line
function validateSubFolder(parent, data, dropPath$$1, dragPath) {
    let subFolder = false;
    for (let i = 0; i < data.length; i++) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('isFile', data[i])) {
            const tempTarget = getFullPath(parent, data[i], dragPath);
            if (dropPath$$1.indexOf(tempTarget) === 0) {
                const result = {
                    files: null,
                    error: {
                        code: '402',
                        message: getLocaleText(parent, 'Sub-Folder-Error'),
                        fileExists: null
                    }
                };
                createDialog(parent, 'Error', result);
                subFolder = true;
                break;
            }
        }
        else {
            const srcData = parent.dragNodes[i];
            let len = 0;
            if (srcData) {
                len = srcData.lastIndexOf('/');
            }
            let path = '';
            if (len > 0) {
                path = dragPath + srcData.substring(0, len + 1);
            }
            if (path === dropPath$$1) {
                const result = {
                    files: null,
                    error: {
                        code: '402',
                        message: getLocaleText(parent, 'Same-Folder-Error'),
                        fileExists: null
                    }
                };
                createDialog(parent, 'Error', result);
                subFolder = true;
                break;
            }
        }
    }
    return subFolder;
}
/**
 * Validates the drop handler
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @returns {void}
 * @private
 */
function dropHandler(parent) {
    parent.isDragDrop = true;
    if (parent.dragData.length !== 0) {
        parent.dragPath = parent.dragPath.replace(/\\/g, '/');
        parent.dropPath = parent.dropPath.replace(/\\/g, '/');
        const subFolder = validateSubFolder(parent, parent.dragData, parent.dropPath, parent.dragPath);
        if (!subFolder && (parent.dragPath !== parent.dropPath)) {
            parent.itemData = [parent.dropData];
            paste(parent, parent.dragPath, parent.dragNodes, parent.dropPath, 'move', [], parent.dragData);
            parent.notify(pasteInit, {});
        }
    }
}
/**
 * Gets the parent path
 *
 * @param {string} oldPath - specifies the old path.
 * @returns {string} - returns the parent path.
 * @private
 */
function getParentPath(oldPath) {
    const path = oldPath.split('/');
    let newPath = path[0] + '/';
    for (let i = 1; i < path.length - 2; i++) {
        newPath += path[i] + '/';
    }
    return newPath;
}
/**
 * Gets the directory path
 *
 * @param {IFileManager} parent - specifies the parent.
 * @param {ReadArgs} args - returns the read arguements.
 * @returns {string} - returns the directory path
 * @private
 */
function getDirectoryPath(parent, args) {
    const filePath = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(parent.hasId ? 'id' : 'name', args.cwd) + '/';
    const fPath = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(parent.hasId ? 'filterId' : 'filterPath', args.cwd);
    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fPath)) {
        if (fPath === '') {
            return parent.hasId ? filePath : '/';
        }
        return fPath.replace(/\\/g, '/') + filePath;
    }
    else {
        return parent.path + filePath;
    }
}
/**
 * Gets the do paste path
 *
 * @param {IFileManager} parent - specifies the parent.
 * @param {string} operation - specifies the operations.
 * @param {ReadArgs} result - returns the result.
 * @returns {void}
 * @private
 */
function doPasteUpdate(parent, operation, result) {
    if (operation === 'move') {
        if (!parent.isDragDrop) {
            parent.enablePaste = false;
            parent.notify(hidePaste, {});
            parent.notify(cutEnd, result);
        }
        else {
            parent.notify(dragEnd, result);
        }
    }
    if (parent.duplicateItems.length === 0) {
        parent.pasteNodes = [];
    }
    const flag = false;
    for (let count = 0; (count < result.files.length) && !flag; count++) {
        parent.pasteNodes.push(result.files[count][parent.hasId ? 'id' : 'name']);
        if (parent.isDragDrop) {
            parent.droppedObjects.push(result.files[count]);
        }
    }
    parent.duplicateItems = [];
    parent.duplicateRecords = [];
    if (parent.isDragDrop && !parent.isPasteError) {
        parent.isDropEnd = true;
    }
    else {
        parent.isDropEnd = false;
    }
    if (!parent.isDragDrop || (parent.path === parent.dragPath) || (parent.path === parent.dropPath)
        || parent.isSearchDrag) {
        parent.isPathDrag = false;
        read(parent, pasteEnd, parent.path);
    }
    else {
        readDropPath(parent);
    }
    parent.trigger('success', { action: operation, result: result });
}
/**
 * Reads the drop path
 *
 * @param {IFileManager} parent - specifies the parent.
 * @returns {void}
 * @private
 */
function readDropPath(parent) {
    const pathId = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('_fm_id', parent.dropData);
    parent.expandedId = pathId;
    parent.itemData = [parent.dropData];
    if (parent.isPathDrag) {
        parent.notify(pathDrag, parent.itemData);
    }
    else {
        if (parent.navigationpaneModule) {
            const node = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('[data-uid="' + pathId + '"]', parent.navigationpaneModule.treeObj.element);
            updatePath(node, parent.dropData, parent);
        }
        read(parent, dropPath, parent.dropPath);
    }
}
/**
 * Gets the duplicated path
 *
 * @param {IFileManager} parent - specifies the parent.
 * @param {string} name - specifies the name.
 * @returns {object} - returns the duplicated path.
 * @private
 */
// eslint-disable-next-line
function getDuplicateData(parent, name) {
    // eslint-disable-next-line
    let data = null;
    // eslint-disable-next-line
    const records = parent.isDragDrop ? parent.dragData : parent.actionRecords;
    for (let i = 0; i < records.length; i++) {
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('name', records[i]) === name) {
            data = records[i];
            break;
        }
    }
    return data;
}
/**
 * Gets the create the virtual drag element
 *
 * @param {IFileManager} parent - specifies the parent.
 * @returns {void}
 * @private
 */
function createVirtualDragElement(parent) {
    parent.isSearchDrag = false;
    if (parent.breadcrumbbarModule.searchObj.element.value !== '') {
        parent.isSearchDrag = true;
    }
    if (parent.activeModule !== 'navigationpane') {
        parent.dragNodes = [];
        let i = 0;
        while (i < parent.selectedItems.length) {
            parent.dragNodes.push(parent.selectedItems[i]);
            i++;
        }
        if (parent.selectedItems.length === 0 && parent.dragData && parent.dragData.length === 1) {
            parent.dragNodes.push(getItemName(parent, parent.dragData[0]));
        }
    }
    const cloneIcon = parent.createElement('div', {
        className: 'e-fe-icon ' + fileType(parent.dragData[0])
    });
    const cloneName = parent.createElement('div', {
        className: 'e-fe-name',
        innerHTML: parent.dragData[0].name
    });
    const virtualEle = parent.createElement('div', {
        className: 'e-fe-content'
    });
    virtualEle.appendChild(cloneIcon);
    virtualEle.appendChild(cloneName);
    const ele = parent.createElement('div', {
        className: CLONE
    });
    ele.appendChild(virtualEle);
    if (parent.dragNodes.length > 1) {
        const badge = parent.createElement('span', {
            className: 'e-fe-count',
            innerHTML: (parent.dragNodes.length).toString(10)
        });
        ele.appendChild(badge);
    }
    parent.virtualDragElement = ele;
    parent.element.appendChild(parent.virtualDragElement);
}
/**
 * Drops the stop handler
 *
 * @param {IFileManager} parent - specifies the parent.
 * @param {DragEventArgs} args - specifies the drag event arguements.
 * @returns {void}
 * @private
 */
function dragStopHandler(parent, args) {
    const dragArgs = args;
    dragArgs.cancel = false;
    if (parent.treeExpandTimer != null) {
        window.clearTimeout(parent.treeExpandTimer);
        parent.treeExpandTimer = null;
    }
    removeDropTarget(parent);
    parent.element.classList.remove('e-fe-drop', 'e-no-drop');
    removeBlur(parent);
    parent.uploadObj.dropArea = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + parent.element.id + CONTENT_ID, parent.element);
    const virtualEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + CLONE, parent.element);
    if (virtualEle) {
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(virtualEle);
    }
    getTargetModule(parent, args.target);
    parent.notify(dropInit, args);
    removeBlur(parent, 'hover');
    dragArgs.fileDetails = parent.dragData;
    parent.trigger('fileDragStop', dragArgs, (dragArgs) => {
        if (!dragArgs.cancel && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parent.targetModule) && parent.targetModule !== '' && parent.dragCount > 2) {
            dropHandler(parent);
        }
        parent.dragCount = 0;
    });
}
/**
 * Drag the start handler
 *
 * @param {IFileManager} parent - specifies the parent.
 * @param {'DragEventArgs'} args - specifies the drag event arguements.
 * @param {Draggable} dragObj - specifies the drag event arguements.
 * @returns {void}
 * @private
 */
function dragStartHandler(parent, args, dragObj) {
    const dragArgs = args;
    dragArgs.cancel = false;
    dragArgs.fileDetails = parent.dragData;
    parent.dragCount = 0;
    parent.droppedObjects = [];
    if (!parent.allowDragAndDrop || ((parent.activeModule === 'navigationpane') &&
        ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.element, 'li').getAttribute('data-uid') === parent.pathId[0]))) {
        dragArgs.cancel = true;
    }
    if ((parent.activeModule === 'navigationpane') &&
        (parent.pathId.indexOf((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.element, 'li').getAttribute('data-uid')) !== -1)) {
        parent.isPathDrag = true;
    }
    else {
        parent.isPathDrag = false;
    }
    removeBlur(parent);
    if (dragArgs.cancel) {
        dragObj.intDestroy(args.event);
        dragCancel(parent);
    }
    else if (!dragArgs.cancel) {
        let i = 0;
        while (i < parent.activeElements.length) {
            addBlur(parent.activeElements[i]);
            i++;
        }
        parent.trigger('fileDragStart', dragArgs, (dragArgs) => {
            if (dragArgs.cancel) {
                dragObj.intDestroy(args.event);
                dragCancel(parent);
            }
            else {
                parent.uploadObj.dropArea = null;
            }
        });
    }
}
/**
 * Drag the cancel handler
 *
 * @param {IFileManager} parent - specifies the parent.
 * @returns {void}
 * @private
 */
function dragCancel(parent) {
    removeBlur(parent);
    const virtualEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + CLONE, parent.element);
    if (virtualEle) {
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(virtualEle);
    }
}
/**
 * Remove drop target handler
 *
 * @param {IFileManager} parent - specifies the parent.
 * @returns {void}
 * @private
 */
function removeDropTarget(parent) {
    removeItemClass(parent, DROP_FOLDER);
    removeItemClass(parent, DROP_FILE);
}
/**
 * Remove item class handler
 *
 * @param {IFileManager} parent - specifies the parent.
 * @param {string} value - specifies the value.
 * @returns {void}
 * @private
 */
function removeItemClass(parent, value) {
    const ele = parent.element.querySelectorAll('.' + value);
    for (let i = 0; i < ele.length; i++) {
        ele[i].classList.remove(value);
    }
}
/**
 * Dragging handler
 *
 * @param {IFileManager} parent - specifies the parent.
 * @param {DragEventArgs} args - specifies the arguements.
 * @returns {void}
 * @private
 */
function draggingHandler(parent, args) {
    const dragArgs = args;
    dragArgs.fileDetails = parent.dragData;
    let canDrop = false;
    getTargetModule(parent, args.target);
    removeDropTarget(parent);
    if (parent.treeExpandTimer != null) {
        window.clearTimeout(parent.treeExpandTimer);
        parent.treeExpandTimer = null;
    }
    removeBlur(parent, 'hover');
    let node = null;
    if (parent.targetModule === 'navigationpane') {
        node = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.target, 'li');
        node.classList.add(HOVER, DROP_FOLDER);
        canDrop = true;
        /* istanbul ignore next */
        parent.treeExpandTimer = window.setTimeout(() => { parent.notify(dragging, args); }, 800);
    }
    else if (parent.targetModule === 'detailsview') {
        node = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.target, 'tr');
        if (node && node.querySelector('.' + FOLDER) && !node.classList.contains(BLUR)) {
            node.classList.add(DROP_FOLDER);
        }
        else if (node && !node.querySelector('.' + FOLDER) && !node.classList.contains(BLUR)) {
            node.classList.add(DROP_FILE);
        }
        canDrop = true;
    }
    else if (parent.targetModule === 'largeiconsview') {
        node = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.target, 'li');
        if (node && node.querySelector('.' + FOLDER) && !node.classList.contains(BLUR)) {
            node.classList.add(HOVER, DROP_FOLDER);
        }
        canDrop = true;
        /* istanbul ignore next */
    }
    else if (parent.targetModule === 'breadcrumbbar') {
        canDrop = true;
    }
    parent.element.classList.remove('e-fe-drop', 'e-no-drop');
    parent.element.classList.add(canDrop ? 'e-fe-drop' : 'e-no-drop');
    parent.dragCount = parent.dragCount + 1;
    parent.trigger('fileDragging', dragArgs);
}
/**
 * Object to string handler
 *
 * @param {Object} data - specifies the data.
 * @returns {string} returns string converted from Object.
 * @private
 */
// Ignored the message key value in permission object
// eslint-disable-next-line
function objectToString(data) {
    let str = '';
    const keys = Object.keys(data);
    for (let i = 0; i < keys.length; i++) {
        if (keys[i] !== 'message') {
            str += (i === 0 ? '' : ', ') + keys[i] + ': ' + (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(keys[i], data);
        }
    }
    return str;
}
/**
 * Get item name handler
 *
 * @param {IFileManager} parent - specifies the parent.
 * @param {Object} data - specifies the data.
 * @returns {string} returns the item name.
 * @private
 */
// eslint-disable-next-line
function getItemName(parent, data) {
    if (parent.hasId) {
        return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('id', data);
    }
    return getName(parent, data);
}
/**
 * Get item name handler
 *
 * @param {IFileManager} parent - specifies the parent.
 * @param {Object} data - specifies the data.
 * @returns {void}
 * @private
 */
// eslint-disable-next-line
function updateRenamingData(parent, data) {
    parent.itemData = [data];
    parent.currentItemText = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('name', data);
    parent.isFile = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('isFile', data);
    parent.filterPath = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('filterPath', data);
}
/**
 * Get item name handler
 *
 * @param {IFileManager} parent - specifies the parent.
 * @returns {void}
 * @private
 */
function doRename(parent) {
    if (!hasEditAccess(parent.itemData[0])) {
        createDeniedDialog(parent, parent.itemData[0], permissionEdit);
    }
    else {
        createDialog(parent, 'Rename');
    }
}
/* istanbul ignore next */
/**
 * Download handler
 *
 * @param {IFileManager} parent - specifies the parent.
 * @returns {void}
 * @private
 */
function doDownload(parent) {
    // eslint-disable-next-line
    const items = parent.itemData;
    for (let i = 0; i < items.length; i++) {
        if (!hasDownloadAccess(items[i])) {
            createDeniedDialog(parent, items[i], permissionDownload);
            return;
        }
    }
    if (parent.selectedItems.length > 0) {
        Download(parent, parent.path, parent.selectedItems);
    }
}
/**
 * Delete Files handler
 *
 * @param {IFileManager} parent - specifies the parent.
 * @param {Object[]} data - specifies the data.
 * @param {string[]} newIds - specifies the new Ids.
 * @returns {void}
 * @private
 */
// eslint-disable-next-line
function doDeleteFiles(parent, data, newIds) {
    for (let i = 0; i < data.length; i++) {
        if (!hasEditAccess(data[i])) {
            createDeniedDialog(parent, data[i], permissionEdit);
            return;
        }
    }
    parent.itemData = data;
    Delete(parent, newIds, parent.path, 'delete');
}
/* istanbul ignore next */
/**
 * Download files handler
 *
 * @param {IFileManager} parent - specifies the parent.
 * @param {Object[]} data - specifies the data.
 * @param {string[]} newIds - specifies the new Ids.
 * @returns {void}
 * @private
 */
// eslint-disable-next-line
function doDownloadFiles(parent, data, newIds) {
    for (let i = 0; i < data.length; i++) {
        if (!hasDownloadAccess(data[i])) {
            createDeniedDialog(parent, data[i], permissionDownload);
            return;
        }
    }
    parent.itemData = data;
    if (newIds.length > 0) {
        Download(parent, parent.path, newIds);
    }
}
/**
 * Download files handler
 *
 * @param {IFileManager} parent - specifies the parent.
 * @param {Object} data - specifies the data.
 * @param {string} action - specifies the actions.
 * @returns {void}
 * @private
 */
// eslint-disable-next-line
function createDeniedDialog(parent, data, action) {
    let message = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('message', (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('permission', data));
    if (message === '') {
        message = getLocaleText(parent, 'Access-Message').replace('{0}', (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('name', data)).replace('{1}', action);
    }
    const response = {
        error: {
            code: '401',
            fileExists: null,
            message: message
        }
    };
    createDialog(parent, 'Error', response);
}
/**
 * Get Access Classes
 *
 * @param {Object} data - specifies the data.
 * @returns {string} - returns accesses classes.
 * @private
 */
// eslint-disable-next-line
function getAccessClass(data) {
    return !hasReadAccess(data) ? 'e-fe-locked e-fe-hidden' : 'e-fe-locked';
}
/**
 * Check read access handler
 *
 * @param {Object} data - specifies the data.
 * @returns {boolean} - returns read access.
 * @private
 */
// eslint-disable-next-line
function hasReadAccess(data) {
    // eslint-disable-next-line
    const permission = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('permission', data);
    return (permission && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('read', permission)) ? false : true;
}
/**
 * Check edit access handler
 *
 * @param {Object} data - specifies the data.
 * @returns {boolean} - returns edit access.
 * @private
 */
// eslint-disable-next-line
function hasEditAccess(data) {
    // eslint-disable-next-line
    const permission = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('permission', data);
    return permission ? (((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('read', permission) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('write', permission))) : true;
}
/**
 * Check content access handler
 *
 * @param {Object} data - specifies the data.
 * @returns {boolean} - returns content access.
 * @private
 */
// eslint-disable-next-line
function hasContentAccess(data) {
    // eslint-disable-next-line
    const permission = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('permission', data);
    return permission ? (((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('read', permission) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('writeContents', permission))) : true;
}
/**
 * Check upload access handler
 *
 * @param {Object} data - specifies the data.
 * @returns {boolean} - returns upload access.
 * @private
 */
// eslint-disable-next-line
function hasUploadAccess(data) {
    // eslint-disable-next-line
    const permission = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('permission', data);
    return permission ? (((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('read', permission) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('upload', permission))) : true;
}
/**
 * Check download access handler
 *
 * @param {Object} data - specifies the data.
 * @returns {boolean} - returns download access.
 * @private
 */
// eslint-disable-next-line
function hasDownloadAccess(data) {
    // eslint-disable-next-line
    const permission = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('permission', data);
    return permission ? (((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('read', permission) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('download', permission))) : true;
}
/**
 * Create new folder handler
 *
 * @param {IFileManager} parent - specifies the parent.
 * @returns {void}
 * @private
 */
function createNewFolder(parent) {
    // eslint-disable-next-line
    const details = parent.itemData[0];
    if (!hasContentAccess(details)) {
        createDeniedDialog(parent, details, permissionEditContents);
    }
    else {
        createDialog(parent, 'NewFolder');
    }
}
/**
 * Upload item handler
 *
 * @param {IFileManager} parent - specifies the parent.
 * @returns {void}
 * @private
 */
function uploadItem(parent) {
    // eslint-disable-next-line
    const details = parent.itemData[0];
    if (!hasUploadAccess(details)) {
        createDeniedDialog(parent, details, permissionUpload);
    }
    else {
        const eleId = '#' + parent.element.id + UPLOAD_ID;
        const uploadEle = document.querySelector(eleId);
        uploadEle.click();
    }
}

/**
 * Function to read the content from given path in File Manager.
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {string} event - specifies the event.
 * @param {string} path - specifies the path.
 * @returns {void}
 * @private
 */
function read(parent, event, path) {
    // eslint-disable-next-line
    const itemData = parent.itemData;
    for (let i = 0; i < itemData.length; i++) {
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('hasChild', itemData[i]))) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('hasChild', false, itemData[i]);
        }
    }
    // eslint-disable-next-line
    const data = { action: 'read', path: path, showHiddenItems: parent.showHiddenItems, data: itemData };
    createAjax(parent, data, readSuccess, event);
}
/**
 * Function to create new folder in File Manager.
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {string} itemName - specifies the item name.
 * @returns {void}
 * @private
 */
function createFolder(parent, itemName) {
    // eslint-disable-next-line
    const data = { action: 'create', path: parent.path, name: itemName, data: parent.itemData };
    createAjax(parent, data, createSuccess, itemName);
}
/**
 * Function to filter the files in File Manager.
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {string}  event - specifies the event.
 * @returns {void}
 * @private
 */
function filter(parent, event) {
    // eslint-disable-next-line
    const data = { action: 'filter', path: parent.path, showHiddenItems: parent.showHiddenItems, data: [getPathObject(parent)] };
    // eslint-disable-next-line
    let filterData;
    // eslint-disable-next-line
    const filterDataVal = parent.filterData ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(filterData, data, parent.filterData) : data;
    createAjax(parent, filterDataVal, filterSuccess, event, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('action', filterDataVal));
}
/**
 * Function to rename the folder/file in File Manager.
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {string} path - specifies the path.
 * @param {string} itemNewName - specifies the item's new name.
 * @returns {void}
 * @private
 */
function rename(parent, path, itemNewName) {
    let name;
    let newName;
    if (parent.breadcrumbbarModule.searchObj.element.value === '' && !parent.isFiltered) {
        name = parent.currentItemText;
        newName = itemNewName;
    }
    else {
        let fPath = parent.filterPath;
        if (parent.hasId) {
            name = parent.currentItemText;
            newName = itemNewName;
        }
        else {
            fPath = fPath.replace(/\\/g, '/');
            name = fPath.replace(path, '') + parent.currentItemText;
            newName = fPath.replace(path, '') + itemNewName;
        }
    }
    // eslint-disable-next-line
    const data = {
        action: 'rename', path: path, name: name, newName: newName, data: parent.itemData
    };
    createAjax(parent, data, renameSuccess, path);
}
/**
 * Function to paste file's and folder's in File Manager.
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {string} path - specifies the path.
 * @param {string[]} names - specifies the names.
 * @param {string} targetPath - specifies the target path.
 * @param {string} pasteOperation - specifies the paste operation.
 * @param {string[]} renameItems - specifies the rename items.
 * @param {Object[]} actionRecords - specifies the action records.
 * @returns {void}
 * @private
 */
function paste(parent, path, names, targetPath, pasteOperation, 
// eslint-disable-next-line
renameItems, actionRecords) {
    // eslint-disable-next-line
    const data = {
        action: pasteOperation, path: path, targetData: parent.itemData[0],
        targetPath: targetPath, names: names, renameFiles: renameItems, data: actionRecords
    };
    parent.destinationPath = targetPath;
    createAjax(parent, data, pasteSuccess, path, pasteOperation, targetPath);
}
/**
 * Function to delete file's and folder's in File Manager.
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {string[]} items - specifies the items.
 * @param {string} path - specifies the path.
 * @param {string} operation - specifies the operation.
 * @returns {void}
 * @private
 */
function Delete(parent, items, path, operation) {
    // eslint-disable-next-line
    const data = { action: operation, path: path, names: items, data: parent.itemData };
    createAjax(parent, data, deleteSuccess, path);
}
/* istanbul ignore next */
/**
 * Function to get details of file's and folder's in File Manager.
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {string[]} names - specifies the names.
 * @param {string} path - specifies the path.
 * @param {string} operation - specifies the operation data.
 * @returns {void}
 * @private
 */
function GetDetails(parent, names, path, operation) {
    // eslint-disable-next-line
    const data = { action: operation, path: path, names: names, data: parent.itemData };
    createAjax(parent, data, detailsSuccess, path, operation);
}
/**
 * Function for createAjax in File Manager.
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {Object} data - specifies the data.
 * @param {Function} fn - specifies the fn.
 * @param {string} event - specifies the event.
 * @param {string} operation - specifies the operation.
 * @param {string} targetPath - specifies the target path.
 * @returns {void}
 * @private
 */
function createAjax(
// eslint-disable-next-line
parent, data, fn, event, operation, targetPath) {
    // eslint-disable-next-line
    const ajaxSettings = {
        url: parent.ajaxSettings.url,
        type: 'POST',
        mode: true,
        dataType: 'json',
        contentType: 'application/json',
        data: JSON.stringify(data),
        onSuccess: null,
        onFailure: null,
        beforeSend: null
    };
    const eventArgs = { action: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('action', data), ajaxSettings: ajaxSettings, cancel: false };
    parent.trigger('beforeSend', eventArgs, (beforeSendArgs) => {
        if (!beforeSendArgs.cancel) {
            parent.notify(beforeRequest, {});
            const ajax = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Ajax({
                url: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('url', beforeSendArgs.ajaxSettings),
                type: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('type', beforeSendArgs.ajaxSettings),
                mode: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('mode', beforeSendArgs.ajaxSettings),
                dataType: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('dataType', beforeSendArgs.ajaxSettings),
                contentType: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('contentType', beforeSendArgs.ajaxSettings),
                data: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('data', beforeSendArgs.ajaxSettings),
                beforeSend: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('beforeSend', beforeSendArgs.ajaxSettings),
                onSuccess: (result) => {
                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(result)) {
                        const result = {
                            error: {
                                fileExists: null,
                                message: getLocaleText(parent, 'Server-Error') + ' ' + parent.ajaxSettings.url,
                                code: '406'
                            },
                            files: null
                        };
                        triggerAjaxFailure(parent, beforeSendArgs, fn, result, event, operation, targetPath);
                        return;
                    }
                    if (typeof (result) === 'string') {
                        result = JSON.parse(result);
                    }
                    parent.notify(afterRequest, { action: 'success' });
                    const id = parent.expandedId ? parent.expandedId : parent.pathId[parent.pathId.length - 1];
                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(result.cwd) && ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('action', data) === 'read')) {
                        result.cwd.name = (parent.pathId.length === 1) ? (parent.rootAliasName || result.cwd.name) : result.cwd.name;
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('_fm_id', id, result.cwd);
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)(id, result.cwd, parent.feParent);
                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(result.files) || result.error.code === '401') {
                            if ((event === 'finalize-end' || event === 'initial-end') && parent.pathNames.length === 0) {
                                // eslint-disable-next-line
                                const root = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(parent.pathId[0], parent.feParent);
                                parent.pathNames[0] = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('name', root);
                                parent.hasId = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('id', root));
                            }
                            if (event === 'finalize-end') {
                                generatePath(parent);
                            }
                        }
                    }
                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(result.files)) {
                        setDateObject(result.files);
                        for (let i = 0, len = result.files.length; i < len; i++) {
                            // eslint-disable-next-line
                            const item = result.files[i];
                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('_fm_iconClass', fileType(item), item);
                        }
                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('action', data) === 'read') {
                            setNodeId(result, id);
                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)(id, result.files, parent.feFiles);
                        }
                    }
                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(result.details) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parent.rootAliasName)) {
                        const rootName = parent.rootAliasName || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('name', result.details);
                        let location = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('location', result.details).replace(new RegExp('/', 'g'), '\\');
                        if (((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('path', data) === '/') || (parent.hasId && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('path', data).match(/[/]/g).length === 1)) {
                            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('names', data).length === 0) {
                                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('name', rootName, result.details);
                                location = rootName;
                            }
                            else {
                                location = location.replace(location.substring(0, location.indexOf('\\')), rootName);
                            }
                        }
                        else {
                            location = location.replace(location.substring(0, location.indexOf('\\')), rootName);
                        }
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('location', location, result.details);
                    }
                    fn(parent, result, event, operation, targetPath);
                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(result.files) && (event === 'path-changed' || event === 'finalize-end' || event === 'open-end')) {
                        parent.notify(searchTextChange, result);
                    }
                    if (typeof (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('onSuccess', beforeSendArgs.ajaxSettings) === 'function') {
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('onSuccess', beforeSendArgs.ajaxSettings)();
                    }
                },
                onFailure: () => {
                    const result = {
                        files: null,
                        error: {
                            code: '404',
                            message: getLocaleText(parent, 'Network-Error') + ' ' + parent.ajaxSettings.url,
                            fileExists: null
                        }
                    };
                    triggerAjaxFailure(parent, beforeSendArgs, fn, result, event, operation, targetPath);
                }
            });
            ajax.send();
        }
    });
}
/**
 * Function for trigger Ajax failure in File Manager.
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {BeforeSendEventArgs} beforeSendArgs - specifies the beforeSendArgs.
 * @param {Function} fn - specifies the function.
 * @param {ReadArgs} result - specifies the result.
 * @param {string} event - specifies the event.
 * @param {string} operation - specifies the operation.
 * @param {string} targetPath - specifies the targetPath.
 * @returns {void}
 * @private
 */
function triggerAjaxFailure(
// eslint-disable-next-line
parent, beforeSendArgs, fn, result, event, operation, targetPath) {
    parent.notify(afterRequest, { action: 'failure' });
    fn(parent, result, event, operation, targetPath);
    if (typeof (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('onFailure', beforeSendArgs.ajaxSettings) === 'function') {
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('onFailure', beforeSendArgs.ajaxSettings)();
    }
}
/**
 * Function for read success in File Manager.
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {ReadArgs} result - specifies the result.
 * @param {string} event - specifies the event.
 * @returns {void}
 * @private
 */
function readSuccess(parent, result, event) {
    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(result.files)) {
        parent.notify(event, result);
        parent.notify(selectionChanged, {});
        const args = { action: 'read', result: result };
        parent.trigger('success', args);
    }
    else {
        if (result.error.code === '401') {
            result.files = [];
            parent.notify(event, result);
            parent.notify(selectionChanged, {});
        }
        onFailure(parent, result, 'read');
    }
    if (parent.isDragDrop && parent.isDropEnd) {
        if (parent.droppedObjects.length !== 0) {
            const args = { fileDetails: parent.droppedObjects };
            parent.trigger('fileDropped', args);
        }
        parent.isDropEnd = parent.isDragDrop = false;
    }
}
/**
 * Function for filter success in File Manager.
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {ReadArgs} result - specifies the result.
 * @param {string} event - specifies the event.
 * @param {string} action - specifies the action.
 * @returns {void}
 * @private
 */
function filterSuccess(parent, result, event, action) {
    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(result.files)) {
        parent.notify(event, result);
        const args = { action: action, result: result };
        parent.trigger('success', args);
    }
    else {
        onFailure(parent, result, action);
    }
}
/* istanbul ignore next */
/**
 * Function for create success in File Manager.
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {ReadArgs} result - specifies the result.
 * @param {string} itemName - specifies the item name.
 * @returns {void}
 * @private
 */
function createSuccess(parent, result, itemName) {
    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(result.files)) {
        if (parent.dialogObj && parent.dialogObj.visible) {
            parent.dialogObj.hide();
        }
        parent.createdItem = result.files[0];
        parent.breadcrumbbarModule.searchObj.value = '';
        const args = { action: 'create', result: result };
        parent.trigger('success', args);
        parent.itemData = [getPathObject(parent)];
        read(parent, createEnd, parent.path);
    }
    else {
        if (result.error.code === '400') {
            if (parent.dialogObj && parent.dialogObj.visible) {
                const ele = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#newname', parent.dialogObj.element);
                const error = getLocaleText(parent, 'Validation-NewFolder-Exists').replace('{0}', '"' + ele.value + '"');
                ele.parentElement.nextElementSibling.innerHTML = error;
            }
            else {
                const result = {
                    files: null,
                    error: {
                        code: '400',
                        message: getLocaleText(parent, 'Validation-NewFolder-Exists').replace('{0}', '"' + itemName + '"'),
                        fileExists: null
                    }
                };
                createDialog(parent, 'Error', result);
            }
            const args = { action: 'create', error: result.error };
            parent.trigger('failure', args);
        }
        else {
            if (parent.dialogObj && parent.dialogObj.visible) {
                parent.dialogObj.hide();
            }
            onFailure(parent, result, 'create');
        }
    }
}
/* istanbul ignore next */
/**
 * Function to rename the folder/file in File Manager.
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {ReadArgs} result - specifies the result.
 * @param {string} path - specifies the path
 * @returns {void}
 * @private
 */
function renameSuccess(parent, result, path) {
    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(result.files)) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parent.dialogObj)) {
            parent.dialogObj.hide();
        }
        const args = { action: 'rename', result: result };
        parent.trigger('success', args);
        parent.renamedItem = result.files[0];
        if (parent.activeModule === 'navigationpane') {
            parent.pathId.pop();
            parent.itemData = [(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(parent.pathId[parent.pathId.length - 1], parent.feParent)];
            read(parent, renameEndParent, getParentPath(parent.path));
        }
        else {
            parent.itemData = [getPathObject(parent)];
            if (parent.breadcrumbbarModule.searchObj.value !== '') {
                Search(parent, renameEnd, parent.path, parent.searchWord, parent.showHiddenItems, !parent.searchSettings.ignoreCase);
            }
            else {
                if (parent.isFiltered) {
                    filter(parent, renameEnd);
                }
                else {
                    read(parent, renameEnd, parent.path);
                }
            }
        }
    }
    else {
        if (result.error.code === '400' && parent.dialogObj && parent.dialogObj.visible) {
            const ele = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#rename', parent.dialogObj.element);
            let error = getLocaleText(parent, 'Validation-Rename-Exists').replace('{0}', '"' + parent.currentItemText + '"');
            error = error.replace('{1}', '"' + ele.value + '"');
            ele.parentElement.nextElementSibling.innerHTML = error;
            const args = { action: 'rename', error: result.error };
            parent.trigger('failure', args);
        }
        else {
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parent.dialogObj)) {
                parent.dialogObj.hide();
            }
            onFailure(parent, result, 'rename');
        }
    }
}
/* istanbul ignore next */
/**
 * Function to create new folder in File Manager.
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {ReadArgs} result - specifies the result.
 * @param {string} path - specifies the path.
 * @param {string} operation - specifies the operation.
 * @returns {void}
 * @private
 */
function pasteSuccess(parent, result, path, operation) {
    if (result.error && result.error.fileExists) {
        parent.fileLength = 0;
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(result.files)) {
            parent.isPasteError = true;
            doPasteUpdate(parent, operation, result);
        }
        createExtDialog(parent, 'DuplicateItems', result.error.fileExists);
        if (result.error.code === '404') {
            createDialog(parent, 'Error', result);
        }
    }
    else if (!result.error && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(result.files)) {
        parent.isPasteError = false;
        doPasteUpdate(parent, operation, result);
    }
    else if (result.error && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(result.files)) {
        parent.isPasteError = true;
        doPasteUpdate(parent, operation, result);
        createDialog(parent, 'Error', result);
    }
    else {
        onFailure(parent, result, operation);
    }
}
/**
 * Function to delete success in File Manager.
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {ReadArgs} result - specifies the result.
 * @param {string} path - specifies the path.
 * @returns {void}
 * @private
 */
function deleteSuccess(parent, result, path) {
    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(result.files)) {
        parent.setProperties({ path: path }, true);
        parent.itemData = [getPathObject(parent)];
        read(parent, deleteEnd, parent.path);
        if (result.error) {
            onFailure(parent, result, 'delete');
        }
        else {
            const args = { action: 'delete', result: result };
            parent.trigger('success', args);
        }
    }
    else {
        onFailure(parent, result, 'delete');
    }
}
/**
 * Function for details success in File Manager.
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {ReadArgs} result - specifies the result.
 * @param {string} path - specifies the path.
 * @param {string} operation - specifies the operation.
 * @returns {void}
 * @private
 */
function detailsSuccess(
// eslint:disable-next-line
parent, result, path, operation) {
    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(result.details)) {
        createDialog(parent, operation, null, result.details);
        const args = { action: 'details', result: result };
        parent.trigger('success', args);
    }
    else {
        onFailure(parent, result, 'details');
    }
}
/**
 * Function for on failure event in File Manager.
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {ReadArgs} result - specifies the result.
 * @param {string} action - specifies the action.
 * @returns {void}
 * @private
 */
function onFailure(parent, result, action) {
    createDialog(parent, 'Error', result);
    const args = { action: action, error: result.error };
    parent.trigger('failure', args);
}
/**
 * Function for search in File Manager.
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {string} event - specifies the event.
 * @param {string} path - specifies the path.
 * @param {string} searchString - specifies the search string.
 * @param {boolean} showHiddenItems - specifies the hidden items.
 * @param {boolean} caseSensitive - specifies the casing of search text.
 * @returns {void}
 * @private
 */
function Search(
// eslint:disable-next-line
parent, event, path, searchString, showHiddenItems, caseSensitive) {
    // eslint-disable-next-line
    const data = {
        action: 'search', path: path, searchString: searchString, showHiddenItems: showHiddenItems, caseSensitive: caseSensitive,
        data: parent.itemData
    };
    createAjax(parent, data, searchSuccess, event);
}
/* istanbul ignore next */
/**
 * Function for search success in File Manager.
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {ReadArgs} result - specifies the result.
 * @param {string} event - specifies the event.
 * @returns {void}
 * @private
 */
function searchSuccess(parent, result, event) {
    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(result.files)) {
        parent.notify(event, result);
        const args = { action: 'search', result: result };
        parent.trigger('success', args);
    }
    else {
        onFailure(parent, result, 'search');
    }
}
/* istanbul ignore next */
/**
 * Function for download in File Manager.
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {string} path - specifies the path.
 * @param {string[]} items - specifies the items.
 * @returns {void}
 * @private
 */
function Download(parent, path, items) {
    const downloadUrl = parent.ajaxSettings.downloadUrl ? parent.ajaxSettings.downloadUrl : parent.ajaxSettings.url;
    // eslint-disable-next-line
    const data = { 'action': 'download', 'path': path, 'names': items, 'data': parent.itemData };
    const eventArgs = { data: data, cancel: false };
    parent.trigger('beforeDownload', eventArgs, (downloadArgs) => {
        if (!downloadArgs.cancel) {
            const form = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('form', {
                id: parent.element.id + '_downloadForm',
                attrs: { action: downloadUrl, method: 'post', name: 'downloadForm', 'download': '' }
            });
            const input = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', {
                id: parent.element.id + '_hiddenForm',
                attrs: { name: 'downloadInput', value: JSON.stringify(downloadArgs.data), type: 'hidden' }
            });
            form.appendChild(input);
            parent.element.appendChild(form);
            document.forms.namedItem('downloadForm').submit();
            parent.element.removeChild(form);
        }
    });
}

// eslint:disable-next-line
/**
 *
 * @param {IFileManager} parent - Specifies the parent element
 * @param {string} text - specifies the text string.
 * @param {ReadArgs | SelectedEventArgs} e - specifies the type of event args.
 * @param {FileDetails} details - specifies the file details.
 * @param {string[]} replaceItems - specifies the replacement.
 * @returns {void}
 * @private
 */
function createDialog(parent, text, e, details, replaceItems) {
    const options = getOptions(parent, text, e, details, replaceItems);
    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parent.dialogObj)) {
        parent.dialogObj = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.Dialog({
            beforeOpen: keydownAction.bind(this, parent, options.dialogName),
            beforeClose: (args) => {
                triggerPopupBeforeClose(parent, parent.dialogObj, args, options.dialogName);
            },
            header: options.header,
            content: options.content,
            buttons: options.buttons,
            animationSettings: { effect: 'None' },
            showCloseIcon: true,
            closeOnEscape: true,
            visible: true,
            allowDragging: true,
            isModal: true,
            target: parent.popupTarget ? parent.popupTarget : '#' + parent.element.id,
            cssClass: getCssClass(parent, parent.isMobile ? MOB_POPUP : ROOT_POPUP),
            width: '350px',
            open: options.open,
            close: options.close,
            enableRtl: parent.enableRtl,
            enableHtmlSanitizer: parent.enableHtmlSanitizer,
            locale: parent.locale
        });
        parent.dialogObj.isStringTemplate = true;
        parent.dialogObj.appendTo('#' + parent.element.id + DIALOG_ID);
    }
    else {
        changeOptions(parent, options);
    }
}
/**
 *
 * @param {IFileManager} parent - Specifies the parent element.
 * @param {string} text - specifies the text string.
 * @param {string[]} replaceItems - specifies the replacement items.
 * @param {string} newPath - specifies the new path.
 * @returns {void}
 * @private
 */
function createExtDialog(parent, text, replaceItems, newPath) {
    const extOptions = getExtOptions(parent, text, replaceItems, newPath);
    parent.isApplySame = false;
    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parent.extDialogObj)) {
        parent.extDialogObj = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.Dialog({
            beforeOpen: beforeExtOpen.bind(this, parent, extOptions.dialogName),
            beforeClose: (args) => {
                triggerPopupBeforeClose(parent, parent.extDialogObj, args, extOptions.dialogName);
            },
            content: extOptions.content,
            header: extOptions.header,
            closeOnEscape: true,
            allowDragging: true,
            animationSettings: { effect: 'None' },
            target: parent.popupTarget ? parent.popupTarget : '#' + parent.element.id,
            cssClass: getCssClass(parent, parent.isMobile ? MOB_POPUP : ROOT_POPUP),
            enableRtl: parent.enableRtl,
            showCloseIcon: true,
            isModal: true,
            width: 350,
            buttons: extOptions.buttons,
            open: extOptions.open,
            close: extOptions.close,
            enableHtmlSanitizer: parent.enableHtmlSanitizer,
            locale: parent.locale
        });
        parent.extDialogObj.isStringTemplate = true;
        parent.extDialogObj.appendTo('#' + parent.element.id + EXTN_DIALOG_ID);
    }
    else {
        parent.extDialogObj.header = extOptions.header;
        parent.extDialogObj.close = extOptions.close;
        parent.extDialogObj.open = extOptions.open;
        parent.extDialogObj.close = extOptions.close;
        parent.extDialogObj.content = extOptions.content;
        parent.extDialogObj.buttons = extOptions.buttons;
        parent.extDialogObj.enableRtl = parent.enableRtl;
        parent.extDialogObj.locale = parent.locale;
        parent.extDialogObj.beforeOpen = beforeExtOpen.bind(this, parent, extOptions.dialogName);
        parent.extDialogObj.beforeClose = (args) => {
            triggerPopupBeforeClose(parent, parent.extDialogObj, args, extOptions.dialogName);
        };
        parent.extDialogObj.dataBind();
        parent.extDialogObj.show();
    }
}
/**
 *
 * @param {IFileManager} parent - Specifies the parent element.
 * @param {Dialog} dlgModule - Specifies the dialog module.
 * @param {BeforeOpenEventArgs} args - specifies the before open arguements.
 * @param {string} dialogName - specifies the dialog name.
 * @returns {void}
 * @private
 */
function triggerPopupBeforeOpen(parent, dlgModule, args, dialogName) {
    const eventArgs = {
        cancel: args.cancel, popupName: dialogName, popupModule: dlgModule
    };
    parent.trigger('beforePopupOpen', eventArgs, (eventargs) => {
        args.cancel = eventargs.cancel;
    });
}
/**
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {Dialog} dlgModule - specifies the dialog module.
 * @param {BeforeCloseEventArgs} args - specifies the before close event arguements.
 * @param {string} dialogName - specifies the dialog name.
 * @returns {void}
 * @private
 */
function triggerPopupBeforeClose(parent, dlgModule, args, dialogName) {
    const eventArgs = {
        cancel: args.cancel, popupModule: dlgModule, popupName: dialogName
    };
    parent.trigger('beforePopupClose', eventArgs, (eventargs) => {
        args.cancel = eventargs.cancel;
        if (!args.cancel && args.isInteracted && ((dialogName === 'Rename') || (dialogName === 'Create Folder'))) {
            parent.trigger(actionFailure, {});
        }
    });
}
/**
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {Dialog} dlgModule - specifies the dialog module.
 * @param {string} dialogName - specifies the dialog name.
 * @returns {void}
 * @private
 */
function triggerPopupOpen(parent, dlgModule, dialogName) {
    const args = { popupModule: dlgModule, element: dlgModule.element, popupName: dialogName };
    parent.trigger('popupOpen', args);
}
/**
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {Dialog} dlgModule - specifies the dialog module.
 * @param {string} dialogName - specifies the dialog name.
 * @returns {void}
 * @private
 */
function triggerPopupClose(parent, dlgModule, dialogName) {
    const args = { popupModule: dlgModule, element: dlgModule.element, popupName: dialogName };
    parent.trigger('popupClose', args);
}
// eslint:disable-next-line
/**
 *
 * @param {IFileManager} parent - Specifies the parent element.
 * @param {string} text - specifies the text string.
 * @param {string[]} replaceItems - specifies the replacement items.
 * @param {string} newPath - specifies the new path.
 * @returns {DialogOptions} - returns the dialog options.
 * @private
 */
function getExtOptions(parent, text, replaceItems, newPath) {
    const options = {
        header: '', content: '', buttons: [], dialogName: ''
    };
    let duplicateContent;
    let item;
    let index;
    options.open = () => { triggerPopupOpen(parent, parent.extDialogObj, options.dialogName); };
    options.close = () => { triggerPopupClose(parent, parent.extDialogObj, options.dialogName); };
    switch (text) {
        case 'Extension':
            options.header = getLocaleText(parent, 'Header-Rename-Confirmation');
            options.content = '<div>' + getLocaleText(parent, 'Content-Rename-Confirmation') + '</div>';
            options.buttons = [{
                    buttonModel: { isPrimary: true, content: getLocaleText(parent, 'Button-Yes') },
                    click: () => {
                        parent.extDialogObj.hide();
                        rename(parent, newPath, parent.renameText);
                    }
                },
                {
                    buttonModel: { content: getLocaleText(parent, 'Button-No') },
                    click: () => {
                        parent.extDialogObj.hide();
                        parent.dialogObj.hide();
                    }
                }];
            options.dialogName = 'Extension Change';
            break;
        case 'DuplicateItems':
            options.dialogName = 'Duplicate Items';
            parent.replaceItems = replaceItems;
            item = parent.replaceItems[parent.fileLength];
            index = item.lastIndexOf('/');
            item = index === -1 ? item : item.substring(index);
            options.header = getLocaleText(parent, 'Header-Duplicate');
            duplicateContent = '<div>' + getLocaleText(parent, 'Content-Duplicate') + '</div>';
            options.content = (duplicateContent).replace('{0}', item);
            options.close = () => {
                if (!parent.isDropEnd && parent.duplicateItems.length === 0) {
                    const args = { fileDetails: parent.droppedObjects };
                    parent.trigger('fileDropped', args);
                    parent.isDropEnd = parent.isDragDrop = false;
                }
                triggerPopupClose(parent, parent.extDialogObj, options.dialogName);
            };
            options.buttons = [
                {
                    buttonModel: { isPrimary: true, content: getLocaleText(parent, 'Button-Yes') },
                    click: () => {
                        parent.duplicateItems.push(parent.replaceItems[parent.fileLength]);
                        parent.duplicateRecords.push(getDuplicateData(parent, parent.replaceItems[parent.fileLength]));
                        parent.fileLength++;
                        if (replaceItems[parent.fileLength]) {
                            let item = parent.replaceItems[parent.fileLength];
                            const indexval = item.lastIndexOf('/');
                            item = indexval === -1 ? item : item.substring(indexval);
                            parent.extDialogObj.content = (duplicateContent).replace('{0}', item);
                            parent.extDialogObj.show();
                        }
                        else {
                            parent.extDialogObj.hide();
                            const targetPath = parent.isDragDrop ? parent.dragPath : parent.targetPath;
                            const path = parent.isDragDrop ? parent.dropPath : ((parent.folderPath === '') ? parent.path :
                                parent.folderPath);
                            const action = parent.isDragDrop ? 'move' : parent.fileAction;
                            paste(parent, targetPath, parent.duplicateItems, path, action, parent.duplicateItems, parent.duplicateRecords);
                        }
                    }
                },
                {
                    buttonModel: { content: getLocaleText(parent, 'Button-No') },
                    click: () => {
                        parent.fileLength++;
                        if (replaceItems[parent.fileLength]) {
                            let item = parent.replaceItems[parent.fileLength];
                            const ind = item.lastIndexOf('/');
                            item = ind === -1 ? item : item.substring(ind);
                            parent.extDialogObj.content = (duplicateContent).replace('{0}', item);
                            parent.extDialogObj.show();
                        }
                        else {
                            parent.extDialogObj.hide();
                            if (parent.duplicateItems.length !== 0) {
                                const action = parent.isDragDrop ? 'move' : parent.fileAction;
                                const targetPath = parent.isDragDrop ? parent.dragPath : parent.targetPath;
                                const path = parent.isDragDrop ? parent.dropPath : ((parent.folderPath === '') ? parent.path :
                                    parent.folderPath);
                                paste(parent, targetPath, parent.duplicateItems, path, action, parent.duplicateItems, parent.duplicateRecords);
                            }
                        }
                    }
                }
            ];
            break;
        case 'UploadRetry':
            options.dialogName = 'Retry Upload';
            options.header = getLocaleText(parent, 'Header-Retry');
            options.content = parent.retryFiles[0].name + '<div class="e-fe-retrycontent">' +
                (getLocaleText(parent, 'Content-Retry')) + '</div>';
            options.open = onRetryOpen.bind(this, parent);
            options.close = () => {
                parent.isRetryOpened = false;
                retryDlgClose(parent);
                triggerPopupClose(parent, parent.extDialogObj, options.dialogName);
            };
            options.buttons = [
                {
                    buttonModel: { isPrimary: true, content: getLocaleText(parent, 'Button-Keep-Both') },
                    click: () => {
                        retryDlgUpdate(parent, true);
                    }
                },
                {
                    buttonModel: { isPrimary: true, content: getLocaleText(parent, 'Button-Replace') },
                    click: () => {
                        retryDlgUpdate(parent, false);
                    }
                },
                {
                    buttonModel: { isPrimary: true, content: getLocaleText(parent, 'Button-Skip') },
                    click: () => {
                        let count = 0;
                        if (parent.isApplySame) {
                            count = parent.retryFiles.length;
                            parent.retryFiles = [];
                            retryDlgClose(parent);
                        }
                        else {
                            count = 1;
                            parent.retryFiles.splice(0, 1);
                            if (parent.retryFiles.length !== 0) {
                                createExtDialog(parent, 'UploadRetry');
                            }
                            else {
                                retryDlgClose(parent);
                            }
                        }
                        parent.notify(skipUpload, { count: count });
                    }
                }
            ];
            break;
    }
    return options;
}
/**
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {boolean} isKeepBoth - checks the arguement to keep both.
 * @returns {void}
 * @private
 */
function retryDlgUpdate(parent, isKeepBoth) {
    if (parent.isApplySame) {
        if (isKeepBoth) {
            onKeepBothAll(parent);
        }
        else {
            onReplaceAll(parent);
        }
        retryDlgClose(parent);
    }
    else {
        parent.retryArgs.push({
            action: isKeepBoth ? 'keepboth' : 'replace',
            file: parent.retryFiles[0]
        });
        parent.uploadObj.retry(parent.retryFiles[0]);
        parent.retryFiles.splice(0, 1);
        if (parent.retryFiles.length !== 0) {
            createExtDialog(parent, 'UploadRetry');
        }
        else {
            retryDlgClose(parent);
        }
    }
}
/**
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @returns {void}
 * @private
 */
function retryDlgClose(parent) {
    let flag = true;
    if (parent.isRetryOpened) {
        parent.isRetryOpened = false;
    }
    else {
        flag = false;
    }
    const ele = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.e-dlg-checkbox', parent.extDialogObj.element);
    if (ele) {
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(ele);
    }
    if (flag) {
        parent.extDialogObj.hide();
    }
    else {
        parent.retryFiles = [];
    }
}
/**
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {object} args - specifies the arguements.
 * @returns {void}
 * @private
 */
// eslint-disable-next-line
function onRetryOpen(parent, args) {
    parent.isRetryOpened = true;
    const dialogEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('element', args);
    const container = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.e-dlg-content', dialogEle);
    const checkContainer = parent.createElement('div', {
        className: 'e-dlg-checkbox'
    });
    const checkbox = parent.createElement('input', {
        id: parent.element.id + '_applyall'
    });
    checkContainer.appendChild(checkbox);
    container.appendChild(checkContainer);
    const checkBoxObj = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_3__.CheckBox({
        label: getLocaleText(parent, 'ApplyAll-Label'),
        change: (args) => {
            parent.isApplySame = args.checked;
        }
    });
    checkBoxObj.appendTo('#' + parent.element.id + '_applyall');
    triggerPopupOpen(parent, parent.extDialogObj, 'Retry Upload');
}
/**
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @returns {void}
 * @private
 */
function onKeepBothAll(parent) {
    while (parent.retryFiles.length !== 0) {
        parent.retryArgs.push({ action: 'keepboth', file: parent.retryFiles[0] });
        parent.uploadObj.retry(parent.retryFiles[0]);
        parent.retryFiles.splice(0, 1);
    }
}
/**
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @returns {void}
 * @private
 */
function onReplaceAll(parent) {
    while (parent.retryFiles.length !== 0) {
        parent.retryArgs.push({ action: 'replace', file: parent.retryFiles[0] });
        parent.uploadObj.retry(parent.retryFiles[0]);
        parent.retryFiles.splice(0, 1);
    }
}
/**
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @returns {void}
 * @private
 */
function focusInput(parent) {
    const ele = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#newname', parent.dialogObj.element);
    ele.focus();
    ele.value = '';
    const len = ele.value.length;
    ele.setSelectionRange(0, len);
}
/**
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @returns {void}
 * @private
 */
function onFolderDialogOpen(parent) {
    const ele = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#newname', parent.dialogObj.element);
    if (!ele.parentElement.classList.contains('e-control-wrapper')) {
        createInput(ele, getLocaleText(parent, 'Content-NewFolder'));
    }
    ele.parentElement.nextElementSibling.innerHTML = '';
    ele.oninput = () => {
        onValidate(parent, ele);
    };
    ele.onkeyup = (e) => {
        const code = getKeyCode(e);
        if (code === 13) {
            onSubmit(parent);
        }
    };
    focusInput(parent);
    triggerPopupOpen(parent, parent.dialogObj, 'Create Folder');
}
/**
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @returns {void}
 * @private
 */
function onRenameDialogOpen(parent) {
    const inputEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#rename', parent.dialogObj.element);
    if (!inputEle.parentElement.classList.contains('e-control-wrapper')) {
        createInput(inputEle, getLocaleText(parent, 'Content-Rename'));
    }
    inputEle.parentElement.nextElementSibling.innerHTML = '';
    inputEle.oninput = () => {
        onValidate(parent, inputEle);
    };
    inputEle.onkeyup = (e) => {
        const code = getKeyCode(e);
        if (code === 13) {
            onReSubmit(parent);
        }
    };
    onFocusRenameInput(parent, inputEle);
    triggerPopupOpen(parent, parent.dialogObj, 'Rename');
}
/**
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {HTMLInputElement} inputEle - specifies the input element.
 * @returns {void}
 * @private
 */
function onFocusRenameInput(parent, inputEle) {
    inputEle.focus();
    let txt = '';
    if (parent.isFile && !parent.showFileExtension) {
        const index = parent.currentItemText.lastIndexOf('.');
        txt = (index === -1) ? parent.currentItemText : parent.currentItemText.substring(0, index);
    }
    else {
        txt = parent.currentItemText;
    }
    inputEle.value = txt;
    if (parent.isFile && parent.showFileExtension && (inputEle.value.indexOf('.') !== -1)) {
        inputEle.setSelectionRange(0, inputEle.value.lastIndexOf('.'));
    }
    else {
        inputEle.setSelectionRange(0, inputEle.value.length);
    }
}
/**
 *
 * @param {HTMLInputElement} ele - specifies the element.
 * @param {string} placeholder - specifies the place holder.
 * @returns {void}
 * @private
 */
function createInput(ele, placeholder) {
    _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__.Input.createInput({
        element: ele,
        properties: {
            placeholder: placeholder
        }
    });
}
/* istanbul ignore next */
// eslint:disable-next-line
/**
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {string} text - specifies the text string.
 * @param {ReadArgs | SelectedEventArgs} e - specifies the event arguements.
 * @param {FileDetails} details - specifies the file details.
 * @param {string[]} replaceItems - specifies the replacement items.
 * @returns {DialogOptions} - specifies the dialog options.
 * @private
 */
function getOptions(parent, text, e, details, replaceItems) {
    const options = {
        header: '', content: '', buttons: [], dialogName: ''
    };
    let permission;
    let formattedString;
    let intl;
    let strArr;
    let fileType$$1;
    let location;
    options.open = () => { triggerPopupOpen(parent, parent.dialogObj, options.dialogName); };
    options.close = () => { triggerPopupClose(parent, parent.dialogObj, options.dialogName); };
    text = (details && details.multipleFiles === true) ? 'MultipleFileDetails' : text;
    switch (text) {
        case 'NewFolder':
            options.dialogName = 'Create Folder';
            options.header = getLocaleText(parent, 'Header-NewFolder');
            options.content = '<input type="text" value="New folder" id="newname"><div class="e-fe-error"></div>';
            options.buttons = [
                {
                    buttonModel: { isPrimary: true, content: getLocaleText(parent, 'Button-Create') },
                    click: (e) => {
                        if (e.type === 'keydown') {
                            return;
                        }
                        onSubmit(parent);
                    }
                }
            ];
            options.open = onFolderDialogOpen.bind(this, parent);
            break;
        case 'Delete':
            options.dialogName = 'Delete';
            if (parent.selectedItems.length > 1) {
                options.content = ('<div>' + getLocaleText(parent, 'Content-Multiple-Delete') + '</div>')
                    .replace('{0}', parent.selectedItems.length.toString());
                options.header = getLocaleText(parent, 'Header-Multiple-Delete');
            }
            else {
                options.content = '<div>' + getLocaleText(parent, parent.isFile ? 'Content-Delete' : 'Content-Folder-Delete') + '</div>';
                options.header = getLocaleText(parent, parent.isFile ? 'Header-Delete' : 'Header-Folder-Delete');
            }
            options.buttons = [
                {
                    buttonModel: { isPrimary: true, content: getLocaleText(parent, 'Button-Yes') },
                    click: (e) => {
                        onDeleteSubmit(parent);
                    }
                },
                {
                    buttonModel: { content: getLocaleText(parent, 'Button-No') },
                    click: () => {
                        parent.dialogObj.hide();
                    }
                }
            ];
            break;
        case 'Rename':
            options.dialogName = 'Rename';
            options.header = getLocaleText(parent, 'Header-Rename');
            options.content = '<input type="text" class="e-input" id="rename"><div class="e-fe-error"></div>';
            options.buttons = [
                {
                    buttonModel: { isPrimary: true, content: getLocaleText(parent, 'Button-Save') },
                    click: (e) => {
                        if (e.type === 'keydown') {
                            return;
                        }
                        onReSubmit(parent);
                    }
                }
            ];
            options.open = onRenameDialogOpen.bind(this, parent);
            break;
        case 'details':
            options.dialogName = 'File Details';
            intl = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Internationalization(parent.locale);
            formattedString = intl.formatDate(new Date(details.modified), { format: 'MMMM dd, yyyy HH:mm:ss' });
            permission = '';
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(details.permission)) {
                permission = '<tr><td>' + getLocaleText(parent, 'Permission') + '</td><td class="' + VALUE + '" >'
                    + objectToString(details.permission) + '</td></tr>';
            }
            options.header = details.name;
            options.content = '<table>' +
                '<tr><td>' + getLocaleText(parent, 'Type') + '</td><td class="' + VALUE + '" title="' +
                (details.isFile ? 'File' : 'Folder') + '">' + (details.isFile ? 'File' : 'Folder') + '</td></tr>' +
                '<tr><td>' + getLocaleText(parent, 'Size') + '</td><td><span class="' + VALUE + '" title ="' +
                details.size + '">' + details.size + '</span></td></tr>' +
                '<tr><td>' + getLocaleText(parent, 'Location') + '</td><td class="' + VALUE + '" title="' +
                details.location + '">' + details.location + '</td></tr>' +
                '<tr><td>' + getLocaleText(parent, 'Modified') + '</td><td class="' + VALUE + '" >'
                + formattedString + '</td></tr>'
                + permission + '</table>';
            options.buttons = [
                {
                    buttonModel: { isPrimary: true, content: getLocaleText(parent, 'Button-Ok') },
                    click: (e) => {
                        parent.dialogObj.hide();
                    }
                }
            ];
            break;
        case 'MultipleFileDetails':
            options.dialogName = 'File Details';
            strArr = details.name.split(',').map((val) => {
                const index = val.indexOf('.') + 1;
                return (index === 0) ? 'Folder' : val.substr(index).replace(' ', '');
            });
            fileType$$1 = strArr.every((val, i, arr) => val === arr[0]) ?
                ((strArr[0] === 'Folder') ? 'Folder' : strArr[0].toLocaleUpperCase() + ' Type') : 'Multiple Types';
            location = details.location;
            options.header = details.name;
            options.content = '<table><tr><td>' + getLocaleText(parent, 'Type')
                + ':</td><td class="' + VALUE + '">' + fileType$$1 + '</td></tr>' +
                '<tr><td>' + getLocaleText(parent, 'Size') + ':</td><td>' +
                details.size + '<span class="' + VALUE + '" title ="' + details.size
                + '"></span></td></tr>' + '<tr><td>' + getLocaleText(parent, 'Location') +
                ':</td><td class="' + VALUE + '" title="' + location + '">'
                + location + '</td></tr>' + '</table>';
            options.buttons = [
                {
                    buttonModel: { isPrimary: true, content: getLocaleText(parent, 'Button-Ok') },
                    click: (e) => {
                        if (e.type === 'keydown') {
                            return;
                        }
                        parent.dialogObj.hide();
                    }
                }
            ];
            break;
        case 'Error':
            parent.notify(actionFailure, {});
            options.dialogName = 'Error';
            if (e.error.code === '401') {
                options.header = '<span class="e-fe-icon e-fe-access-error"></span><div class="e-fe-access-header">' +
                    getLocaleText(parent, 'Access-Denied') + '</div>';
            }
            else {
                options.header = getLocaleText(parent, 'Error');
            }
            options.content = '<div class="' + ERROR_CONTENT + '">' + e.error.message + '</div>';
            options.buttons = [
                {
                    buttonModel: { isPrimary: true, content: getLocaleText(parent, 'Button-Ok') },
                    click: (e) => {
                        parent.dialogObj.hide();
                    }
                }
            ];
            break;
    }
    return options;
}
/**
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {string} dialogName - specifies the dialog name.
 * @param {BeforeOpenEventArgs} args - specifies the before open event arguements.
 * @returns {void}
 * @private
 */
function keydownAction(parent, dialogName, args) {
    const btnElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.e-btn', parent.dialogObj.element);
    preventKeydown(btnElement);
    triggerPopupBeforeOpen(parent, parent.dialogObj, args, dialogName);
}
/**
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {string} dlgName - specifies the dialog name.
 * @param {BeforeOpenEventArgs} args - specifies the before open event arguements.
 * @returns {void}
 * @private
 */
function beforeExtOpen(parent, dlgName, args) {
    const btnElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.e-btn', parent.extDialogObj.element);
    preventKeydown(btnElement);
    triggerPopupBeforeOpen(parent, parent.extDialogObj, args, dlgName);
}
/**
 *
 * @param {HTMLInputElement[]} btnElement - specifies the button element.
 * @returns {void}
 * @private
 */
function preventKeydown(btnElement) {
    for (let btnCount = 0; btnCount < btnElement.length; btnCount++) {
        btnElement[btnCount].onkeydown = (e) => {
            if (e.keyCode === 13) {
                e.preventDefault();
            }
        };
        btnElement[btnCount].onkeyup = (e) => {
            if (e.keyCode === 13) {
                btnElement[btnCount].click();
            }
        };
    }
}
/**
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {DialogOptions} options - specifies the dialog options.
 * @returns {void}
 * @private
 */
function changeOptions(parent, options) {
    parent.dialogObj.header = options.header;
    parent.dialogObj.content = options.content;
    parent.dialogObj.buttons = options.buttons;
    parent.dialogObj.enableRtl = parent.enableRtl;
    parent.dialogObj.open = options.open;
    parent.dialogObj.close = options.close;
    parent.dialogObj.beforeOpen = keydownAction.bind(this, parent, options.dialogName);
    parent.dialogObj.beforeClose = (args) => {
        triggerPopupBeforeClose(parent, parent.dialogObj, args, options.dialogName);
    };
    parent.dialogObj.dataBind();
    parent.dialogObj.show();
}
/**
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @returns {void}
 * @private
 */
function onSubmit(parent) {
    const ele = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#newname', parent.dialogObj.element);
    onSubmitValidate(parent, ele);
    if (ele.parentElement.nextElementSibling.innerHTML !== '') {
        return;
    }
    createFolder(parent, ele.value);
}
/* istanbul ignore next */
/**
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @returns {void}
 * @private
 */
function onReSubmit(parent) {
    const ele = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#rename', parent.dialogObj.element);
    onSubmitValidate(parent, ele);
    if (ele.parentElement.nextElementSibling.innerHTML !== '') {
        return;
    }
    let text = ele.value;
    const oIndex = parent.currentItemText.lastIndexOf('.');
    if (parent.isFile && !parent.showFileExtension) {
        const extn = (oIndex === -1) ? '' : parent.currentItemText.substr(oIndex);
        text += extn;
    }
    parent.renameText = text;
    if (parent.currentItemText === text) {
        parent.dialogObj.hide();
        return;
    }
    const newPath = (parent.activeModule === 'navigationpane') ? getParentPath(parent.path) : parent.path;
    parent.renamedId = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('id', parent.itemData[0]);
    if (parent.isFile) {
        const oldExtension = (oIndex === -1) ? '' : parent.currentItemText.substr(oIndex);
        const nIndex = text.lastIndexOf('.');
        const newExtension = (nIndex === -1) ? '' : text.substr(nIndex);
        if (parent.showFileExtension && oldExtension !== newExtension) {
            createExtDialog(parent, 'Extension', null, newPath);
        }
        else {
            rename(parent, newPath, text);
        }
    }
    else {
        rename(parent, newPath, text);
    }
}
/**
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @returns {void}
 * @private
 */
function onDeleteSubmit(parent) {
    parent.dialogObj.hide();
    parent.notify(deleteInit, {});
}
/**
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {HTMLInputElement} ele - specifies the input element.
 * @returns {void}
 * @private
 */
function onValidate(parent, ele) {
    if (/[/\\|*?"<>:]/.test(ele.value)) {
        addInvalid(parent, ele);
    }
    else if (ele.value === '') {
        ele.parentElement.nextElementSibling.innerHTML = getLocaleText(parent, 'Validation-Empty');
    }
    else {
        ele.parentElement.nextElementSibling.innerHTML = '';
    }
}
/**
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {HTMLInputElement} ele - specifies the input element.
 * @returns {void}
 * @private
 */
function onSubmitValidate(parent, ele) {
    onValidate(parent, ele);
    const len = ele.value.length - 1;
    if (ele.value !== '' && ((ele.value.lastIndexOf('.') === len) || (ele.value.lastIndexOf(' ') === len)) &&
        (parent.showFileExtension || (parent.currentItemText.lastIndexOf('.') === -1))) {
        addInvalid(parent, ele);
    }
}
/**
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {HTMLInputElement} ele - specifies the input element.
 * @returns {void}
 * @private
 */
function addInvalid(parent, ele) {
    const error = getLocaleText(parent, 'Validation-Invalid').replace('{0}', '"' + ele.value + '"');
    if (parent.enableHtmlSanitizer) {
        ele.parentElement.nextElementSibling.textContent = error;
    }
    else {
        ele.parentElement.nextElementSibling.innerHTML = error;
    }
}
/**
 *
 * @param {KeyboardEvent} e - specifies the keyboard event.
 * @returns {number} - returns the key code.
 * @private
 */
function getKeyCode(e) {
    let code;
    if (e.keyCode) {
        code = e.keyCode;
    }
    else if (e.which) {
        code = e.which;
    }
    else {
        code = e.charCode;
    }
    return code;
}
/**
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @param {string} header - specifies the header element.
 * @param {string} imageUrl - specifies the image URL.
 * @returns {void}
 * @private
 */
function createImageDialog(parent, header, imageUrl) {
    const content = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'e-image-wrap' });
    const image = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('img', { className: 'e-image', attrs: { src: imageUrl, alt: header } });
    content.appendChild(image);
    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parent.viewerObj)) {
        parent.viewerObj = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.Dialog({
            header: header,
            content: content,
            animationSettings: { effect: 'None' },
            showCloseIcon: true,
            closeOnEscape: true,
            visible: true,
            isModal: true,
            width: '350px',
            height: '350px',
            target: parent.popupTarget ? parent.popupTarget : '#' + parent.element.id,
            cssClass: getCssClass(parent, parent.isMobile ? MOB_POPUP : ROOT_POPUP),
            locale: parent.locale,
            enableResize: true,
            allowDragging: true,
            enableHtmlSanitizer: parent.enableHtmlSanitizer,
            position: { X: 'center', Y: 'center' },
            enableRtl: parent.enableRtl,
            open: openImage.bind(this, parent),
            close: () => { triggerPopupClose(parent, parent.viewerObj, 'Image Preview'); },
            beforeOpen: (args) => {
                triggerPopupBeforeOpen(parent, parent.viewerObj, args, 'Image Preview');
            },
            beforeClose: (args) => {
                triggerPopupBeforeClose(parent, parent.viewerObj, args, 'Image Preview');
            },
            resizing: updateImage.bind(this, parent),
            resizeStop: updateImage.bind(this, parent)
        });
        parent.viewerObj.isStringTemplate = true;
        parent.viewerObj.appendTo('#' + parent.element.id + IMG_DIALOG_ID);
    }
    else {
        parent.viewerObj.refresh();
        parent.viewerObj.header = header;
        parent.viewerObj.content = content;
        parent.viewerObj.enableRtl = parent.enableRtl;
        parent.viewerObj.dataBind();
        parent.viewerObj.show();
    }
}
/**
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @returns {void}
 * @private
 */
function openImage(parent) {
    setTimeout(() => {
        if (parent.viewerObj) {
            parent.viewerObj.element.focus();
        }
    });
    updateImage(parent);
    triggerPopupOpen(parent, parent.viewerObj, 'Image Preview');
}
/**
 *
 * @param {IFileManager} parent - specifies the parent element.
 * @returns {void}
 * @private
 */
function updateImage(parent) {
    const content = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.e-dlg-content', parent.viewerObj.element);
    const imgWrap = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.e-image-wrap', parent.viewerObj.element);
    const cssObj = window.getComputedStyle(content, null);
    const paddingWidth = cssObj ? (2 * parseFloat(cssObj.paddingRight)) : 36;
    const paddingHeight = cssObj ? (2 * parseFloat(cssObj.paddingBottom)) : 20;
    imgWrap.style.width = (content.offsetWidth - paddingWidth) + 'px';
    imgWrap.style.height = (content.offsetHeight - paddingHeight) + 'px';
}

/**
 * File Manager common operations
 */

/**
 * LargeIconsView module
 */
class LargeIconsView {
    /**
     * Constructor for the LargeIcons module.
     *
     * @param {IFileManager} parent - specifies the parent element.
     * @hidden
     */
    constructor(parent) {
        this.isInteraction = true;
        this.uploadOperation = false;
        this.count = 0;
        this.isRendered = true;
        this.tapCount = 0;
        this.isPasteOperation = false;
        this.isInteracted = true;
        this.parent = parent;
        this.element = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parent.element.id + LARGEICON_ID, this.parent.element);
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], LARGE_ICONS);
        this.addEventListener();
        this.keyConfigs = {
            end: 'end',
            home: 'home',
            tab: 'tab',
            moveDown: 'downarrow',
            moveLeft: 'leftarrow',
            moveRight: 'rightarrow',
            moveUp: 'uparrow',
            ctrlEnd: 'ctrl+end',
            ctrlHome: 'ctrl+home',
            ctrlDown: 'ctrl+downarrow',
            ctrlLeft: 'ctrl+leftarrow',
            ctrlRight: 'ctrl+rightarrow',
            ctrlUp: 'ctrl+uparrow',
            shiftEnd: 'shift+end',
            shiftHome: 'shift+home',
            shiftDown: 'shift+downarrow',
            shiftLeft: 'shift+leftarrow',
            shiftRight: 'shift+rightarrow',
            shiftUp: 'shift+uparrow',
            csEnd: 'ctrl+shift+end',
            csHome: 'ctrl+shift+home',
            csDown: 'ctrl+shift+downarrow',
            csLeft: 'ctrl+shift+leftarrow',
            csRight: 'ctrl+shift+rightarrow',
            csUp: 'ctrl+shift+uparrow',
            space: 'space',
            ctrlSpace: 'ctrl+space',
            shiftSpace: 'shift+space',
            csSpace: 'ctrl+shift+space',
            ctrlA: 'ctrl+a',
            enter: 'enter',
            altEnter: 'alt+enter',
            esc: 'escape',
            del: 'delete',
            ctrlX: 'ctrl+x',
            ctrlC: 'ctrl+c',
            ctrlV: 'ctrl+v',
            f2: 'f2',
            shiftdel: 'shift+delete',
            back: 'backspace',
            ctrlD: 'ctrl+d'
        };
    }
    render(args) {
        this.parent.visitedItem = null;
        this.startItem = null;
        (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.showSpinner)(this.parent.element);
        if (this.parent.view === 'LargeIcons') {
            this.resetMultiSelect();
            this.element.setAttribute('tabindex', '0');
            if (this.listObj) {
                this.unWireEvents();
                this.removeEventListener();
            }
            this.parent.notify(hideLayout, {});
            const iconsView = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parent.element.id + LARGEICON_ID, this.parent.element);
            const ul = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('ul', iconsView);
            if (ul) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(ul);
            }
            this.listObj = {
                ariaAttributes: {
                    itemRole: 'option', listRole: 'listbox', itemText: '',
                    groupItemRole: 'group', wrapperRole: ''
                },
                showIcon: true,
                fields: { text: 'name', iconCss: '_fm_icon', imageUrl: '_fm_imageUrl', htmlAttributes: '_fm_htmlAttr' },
                sortOrder: this.parent.sortOrder,
                itemCreated: this.onItemCreated.bind(this),
                enableHtmlSanitizer: this.parent.enableHtmlSanitizer
            };
            this.items = [];
            this.items = this.renderList(args);
            this.items = getSortedData(this.parent, this.items);
            // eslint-disable-next-line
            this.listElements = _syncfusion_ej2_lists__WEBPACK_IMPORTED_MODULE_5__.ListBase.createListFromJson(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement, this.items, this.listObj);
            this.itemList = Array.prototype.slice.call((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + LIST_ITEM, this.listElements));
            this.element.appendChild(this.listElements);
            this.preventImgDrag();
            this.createDragObj();
            iconsView.classList.remove(DISPLAY_NONE);
            if (this.itemList.length === 0) {
                const emptyList = this.element.querySelector('.' + LIST_PARENT);
                this.element.removeChild(emptyList);
                createEmptyElement(this.parent, this.element, args);
            }
            else if (this.itemList.length !== 0 && this.element.querySelector('.' + EMPTY)) {
                this.element.removeChild(this.element.querySelector('.' + EMPTY));
            }
            if (this.isPasteOperation === true) {
                this.selectItems(this.parent.pasteNodes);
                this.isPasteOperation = false;
            }
            /* istanbul ignore next */
            if (this.uploadOperation === true) {
                this.selectItems(this.parent.uploadItem);
                this.parent.setProperties({ selectedItems: [] }, true);
                this.count++;
                if (this.count === this.parent.uploadItem.length) {
                    this.uploadOperation = false;
                    this.parent.uploadItem = [];
                }
            }
            const activeEle = this.element.querySelectorAll('.' + ACTIVE);
            if (activeEle.length !== 0) {
                this.parent.activeModule = 'largeiconsview';
            }
            for (let i = 0; i < activeEle.length; i++) {
                activeEle[i].setAttribute('aria-selected', 'true');
            }
            this.adjustHeight();
            this.element.style.maxHeight = '100%';
            this.getItemCount();
            this.addEventListener();
            this.wireEvents();
            this.isRendered = true;
            (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.hideSpinner)(this.parent.element);
            if (this.parent.selectedItems.length) {
                this.checkItem();
            }
        }
    }
    preventImgDrag() {
        let i = 0;
        while (i < this.itemList.length) {
            if (this.itemList[i].querySelector('img')) {
                /* istanbul ignore next */
                this.itemList[i].ondragstart = () => { return false; };
            }
            i++;
        }
    }
    createDragObj() {
        if (!this.parent.isMobile && this.listObj) {
            if (this.parent.allowDragAndDrop) {
                if (this.dragObj) {
                    this.dragObj.destroy();
                }
                this.dragObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Draggable(this.listElements, {
                    enableTailMode: true,
                    distance: 5,
                    enableAutoScroll: true,
                    dragTarget: '.' + LARGE_ICON,
                    helper: this.dragHelper.bind(this),
                    cursorAt: this.parent.dragCursorPosition,
                    dragArea: this.parent.element,
                    dragStop: dragStopHandler.bind(this, this.parent),
                    drag: draggingHandler.bind(this, this.parent),
                    clone: true,
                    dragStart: (args) => {
                        dragStartHandler(this.parent, args, this.dragObj);
                    }
                });
            }
            else if (this.dragObj && !this.parent.allowDragAndDrop) {
                this.dragObj.destroy();
            }
        }
    }
    dragHelper(args) {
        const dragTarget = args.sender.target;
        const dragLi = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(dragTarget, '.e-list-item');
        if (!dragLi) {
            return null;
        }
        if (dragLi && !dragLi.classList.contains('e-active')) {
            this.setFocus(dragLi);
        }
        const activeEle = this.element.querySelectorAll('.' + ACTIVE);
        this.parent.activeElements = [];
        this.parent.dragData = [];
        for (let i = 0; i < activeEle.length; i++) {
            // eslint-disable-next-line
            this.parent.dragData.push(this.getItemObject(activeEle[i]));
            this.parent.activeElements.push(activeEle[i]);
        }
        getModule(this.parent, dragLi);
        this.parent.dragPath = this.parent.path;
        createVirtualDragElement(this.parent);
        return this.parent.virtualDragElement;
    }
    onDropInit(args) {
        if (this.parent.targetModule === this.getModuleName()) {
            const dropLi = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.target, '.e-list-item');
            // eslint-disable-next-line
            const cwdData = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.parent.pathId[this.parent.pathId.length - 1], this.parent.feParent);
            if (dropLi) {
                // eslint-disable-next-line
                const info = this.getItemObject(dropLi);
                this.parent.dropPath = info.isFile ? this.parent.path : getFullPath(this.parent, info, this.parent.path);
                this.parent.dropData = info.isFile ? cwdData : info;
            }
            else {
                this.parent.dropPath = this.parent.path;
                this.parent.dropData = cwdData;
            }
        }
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} - returns the module name.
     * @private
     */
    getModuleName() {
        return 'largeiconsview';
    }
    adjustHeight() {
        const pane = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parent.element.id + CONTENT_ID, this.parent.element);
        const bar = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parent.element.id + BREADCRUMBBAR_ID, this.parent.element);
        this.element.style.height = (pane.offsetHeight - bar.offsetHeight) + 'px';
    }
    onItemCreated(args) {
        args.item.removeAttribute('aria-level');
        if (!this.parent.showFileExtension && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('isFile', args.curData)) {
            const textEle = args.item.querySelector('.' + LIST_TEXT);
            const txt = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('name', args.curData);
            const type = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('type', args.curData);
            textEle.innerHTML = txt.substr(0, txt.length - type.length);
        }
        this.renderCheckbox(args);
        const eventArgs = {
            element: args.item,
            fileDetails: args.curData,
            module: 'LargeIconsView'
        };
        this.parent.trigger('fileLoad', eventArgs);
    }
    renderCheckbox(args) {
        if (!this.parent.allowMultiSelection) {
            return;
        }
        const checkElement = (0,_syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_3__.createCheckBox)(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement, false, {
            checked: false,
            cssClass: 'e-small'
        });
        checkElement.setAttribute('role', 'checkbox');
        checkElement.setAttribute('aria-checked', 'false');
        args.item.firstElementChild.insertBefore(checkElement, args.item.firstElementChild.childNodes[0]);
    }
    onLayoutChange(args) {
        if (this.parent.view === 'LargeIcons') {
            this.destroy();
            this.render(args);
            /* istanbul ignore next */
            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('name', args) === 'layout-change' && this.parent.fileAction === 'move' &&
                this.parent.isCut && this.parent.selectedNodes && this.parent.selectedNodes.length !== 0) {
                const indexes = this.getIndexes(this.parent.selectedNodes);
                let length = 0;
                while (length < indexes.length) {
                    addBlur(this.itemList[indexes[length]]);
                    length++;
                }
            }
            const activeEle = this.element.querySelectorAll('.' + ACTIVE);
            if (activeEle.length !== 0) {
                this.element.focus();
            }
            this.checkItem();
            this.parent.isLayoutChange = false;
        }
        else {
            this.element.setAttribute('tabindex', '-1');
        }
    }
    checkItem() {
        const checkEle = this.element.querySelectorAll('.' + ACTIVE);
        if (checkEle) {
            let checkLength = 0;
            while (checkLength < checkEle.length) {
                this.checkState(checkEle[checkLength], true);
                checkLength++;
            }
        }
    }
    // eslint-disable-next-line
    renderList(args) {
        let i = 0;
        // eslint-disable-next-line
        const items = JSON.parse(JSON.stringify(args.files));
        while (i < items.length) {
            const icon = fileType(items[i]);
            const name = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('name', items[i]);
            const selected = getItemName(this.parent, items[i]);
            let className = ((this.parent.selectedItems &&
                this.parent.selectedItems.indexOf(selected) !== -1)) ?
                LARGE_ICON + ' e-active' : LARGE_ICON;
            if (!hasEditAccess(items[i])) {
                className += ' ' + getAccessClass(items[i]);
            }
            if (icon === ICON_IMAGE && this.parent.showThumbnail && hasReadAccess(items[i])) {
                const imgUrl = getImageUrl(this.parent, items[i]);
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('_fm_imageUrl', imgUrl, items[i]);
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('_fm_imageAttr', { alt: name }, items[i]);
            }
            else {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('_fm_icon', icon, items[i]);
            }
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('_fm_htmlAttr', { class: className, title: name }, items[i]);
            i++;
        }
        return items;
    }
    onFinalizeEnd(args) {
        this.render(args);
    }
    onCreateEnd(args) {
        if (this.parent.view !== 'LargeIcons') {
            return;
        }
        this.onLayoutChange(args);
        this.clearSelect();
        this.selectItems([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.parent.hasId ? 'id' : 'name', this.parent.createdItem)]);
        this.parent.createdItem = null;
        this.parent.largeiconsviewModule.element.focus();
    }
    onSelectedData() {
        if (this.parent.activeModule === 'largeiconsview') {
            this.updateSelectedData();
        }
    }
    onDeleteInit() {
        if (this.parent.activeModule === 'largeiconsview') {
            Delete(this.parent, this.parent.selectedItems, this.parent.path, 'delete');
        }
    }
    /* istanbul ignore next */
    onDeleteEnd(args) {
        if (this.parent.view !== 'LargeIcons') {
            return;
        }
        this.onLayoutChange(args);
        this.parent.setProperties({ selectedItems: [] }, true);
        this.clearSelect();
    }
    onRefreshEnd(args) {
        if (this.parent.view !== 'LargeIcons') {
            return;
        }
        this.onLayoutChange(args);
    }
    onRenameInit() {
        if (this.parent.activeModule === 'largeiconsview' && this.parent.selectedItems.length === 1) {
            this.updateRenameData();
        }
    }
    onPathChanged(args) {
        this.parent.isCut = false;
        /* istanbul ignore next */
        if (this.parent.breadcrumbbarModule.searchObj.element.value === '') {
            this.parent.searchedItems = [];
        }
        if (this.parent.view === 'LargeIcons') {
            removeBlur(this.parent);
            this.parent.setProperties({ selectedItems: [] }, true);
            this.onLayoutChange(args);
            if (this.parent.renamedItem) {
                this.clearSelect();
                this.addSelection(this.parent.renamedItem);
                this.parent.renamedItem = null;
            }
        }
    }
    onOpenInit(args) {
        if (this.parent.activeModule === 'largeiconsview') {
            this.doOpenAction(args.target);
        }
    }
    onHideLayout() {
        if (this.parent.view !== 'LargeIcons' && this.element) {
            this.element.classList.add(DISPLAY_NONE);
        }
    }
    onSelectAllInit() {
        if (this.parent.view === 'LargeIcons') {
            this.startItem = this.getFirstItem();
            const lastItem = this.getLastItem();
            const eveArgs = { ctrlKey: true, shiftKey: true };
            this.doSelection(lastItem, eveArgs);
            this.isInteraction = true;
            this.isInteracted = true;
        }
    }
    onClearAllInit() {
        if (this.parent.view === 'LargeIcons') {
            this.clearSelection();
            this.isInteraction = true;
            this.isInteracted = true;
        }
    }
    onBeforeRequest() {
        this.isRendered = false;
    }
    onAfterRequest() {
        this.isRendered = true;
    }
    /* istanbul ignore next */
    onSearch(args) {
        if (this.parent.view === 'LargeIcons') {
            this.parent.setProperties({ selectedItems: [] }, true);
            this.parent.notify(selectionChanged, {});
            this.parent.searchedItems = args.files;
            this.onLayoutChange(args);
        }
    }
    onLayoutRefresh() {
        if (this.parent.view !== 'LargeIcons') {
            return;
        }
        this.adjustHeight();
    }
    onUpdateSelectionData() {
        if (this.parent.view !== 'LargeIcons') {
            return;
        }
        this.updateSelectedData();
    }
    onPathColumn() {
        if (this.parent.view === 'LargeIcons' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.listObj) &&
            this.parent.breadcrumbbarModule.searchObj.element.value === '' && !this.parent.isFiltered
            && this.parent.sortBy === 'filterPath') {
            this.parent.sortBy = 'name';
            this.parent.notify(sortByChange, {});
        }
    }
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(pathColumn, this.onPathColumn);
        this.parent.off(finalizeEnd, this.onFinalizeEnd);
        this.parent.off(createEnd, this.onCreateEnd);
        this.parent.off(selectedData, this.onSelectedData);
        this.parent.off(deleteInit, this.onDeleteInit);
        this.parent.off(deleteEnd, this.onDeleteEnd);
        this.parent.off(refreshEnd, this.onRefreshEnd);
        this.parent.off(pathChanged, this.onPathChanged);
        this.parent.off(layoutChange, this.onLayoutChange);
        this.parent.off(search, this.onSearch);
        this.parent.off(openInit, this.onOpenInit);
        this.parent.off(openEnd, this.onPathChanged);
        this.parent.off(modelChanged, this.onPropertyChanged);
        this.parent.off(methodCall, this.onMethodCall);
        this.parent.off(actionFailure, this.onActionFailure);
        this.parent.off(renameInit, this.onRenameInit);
        this.parent.off(renameEnd, this.onPathChanged);
        this.parent.off(hideLayout, this.onHideLayout);
        this.parent.off(selectAllInit, this.onSelectAllInit);
        this.parent.off(clearAllInit, this.onClearAllInit);
        this.parent.off(menuItemData, this.onMenuItemData);
        this.parent.off(beforeRequest, this.onBeforeRequest);
        this.parent.off(afterRequest, this.onAfterRequest);
        this.parent.off(splitterResize, this.splitterResizeHandler);
        this.parent.off(resizeEnd, this.resizeHandler);
        this.parent.off(pasteInit, this.onpasteInit);
        this.parent.off(pasteEnd, this.onpasteEnd);
        this.parent.off(cutCopyInit, this.oncutCopyInit);
        this.parent.off(dropInit, this.onDropInit);
        this.parent.off(detailsInit, this.onDetailsInit);
        this.parent.off(layoutRefresh, this.onLayoutRefresh);
        this.parent.off(dropPath, this.onDropPath);
        this.parent.off(updateSelectionData, this.onUpdateSelectionData);
        this.parent.off(filterEnd, this.onPathChanged);
    }
    addEventListener() {
        this.parent.on(pathColumn, this.onPathColumn, this);
        this.parent.on(finalizeEnd, this.onFinalizeEnd, this);
        this.parent.on(createEnd, this.onCreateEnd, this);
        this.parent.on(refreshEnd, this.onRefreshEnd, this);
        this.parent.on(selectedData, this.onSelectedData, this);
        this.parent.on(pathChanged, this.onPathChanged, this);
        this.parent.on(deleteInit, this.onDeleteInit, this);
        this.parent.on(pasteInit, this.onpasteInit, this);
        this.parent.on(deleteEnd, this.onDeleteEnd, this);
        this.parent.on(layoutChange, this.onLayoutChange, this);
        this.parent.on(search, this.onSearch, this);
        this.parent.on(openInit, this.onOpenInit, this);
        this.parent.on(renameInit, this.onRenameInit, this);
        this.parent.on(renameEnd, this.onPathChanged, this);
        this.parent.on(openEnd, this.onPathChanged, this);
        this.parent.on(modelChanged, this.onPropertyChanged, this);
        this.parent.on(methodCall, this.onMethodCall, this);
        this.parent.on(actionFailure, this.onActionFailure, this);
        this.parent.on(hideLayout, this.onHideLayout, this);
        this.parent.on(selectAllInit, this.onSelectAllInit, this);
        this.parent.on(clearAllInit, this.onClearAllInit, this);
        this.parent.on(menuItemData, this.onMenuItemData, this);
        this.parent.on(beforeRequest, this.onBeforeRequest, this);
        this.parent.on(afterRequest, this.onAfterRequest, this);
        this.parent.on(dropInit, this.onDropInit, this);
        this.parent.on(detailsInit, this.onDetailsInit, this);
        this.parent.on(splitterResize, this.splitterResizeHandler, this);
        this.parent.on(resizeEnd, this.resizeHandler, this);
        this.parent.on(pasteEnd, this.onpasteEnd, this);
        this.parent.on(cutCopyInit, this.oncutCopyInit, this);
        this.parent.on(layoutRefresh, this.onLayoutRefresh, this);
        this.parent.on(dropPath, this.onDropPath, this);
        this.parent.on(updateSelectionData, this.onUpdateSelectionData, this);
        this.parent.on(filterEnd, this.onPathChanged, this);
    }
    onActionFailure() { this.isInteraction = true; this.isInteracted = true; }
    // eslint-disable-next-line
    onMenuItemData(args) {
        if (this.parent.activeModule === this.getModuleName()) {
            const ele = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.target, 'li');
            this.parent.itemData = [this.getItemObject(ele)];
        }
    }
    onDetailsInit() {
        if (this.parent.activeModule === this.getModuleName()) {
            if (this.parent.selectedItems.length !== 0) {
                this.updateSelectedData();
            }
            else {
                this.parent.itemData = [(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.parent.pathId[this.parent.pathId.length - 1], this.parent.feParent)];
            }
        }
    }
    onpasteInit() {
        if (this.parent.activeModule === this.getModuleName()) {
            this.parent.itemData = (this.parent.folderPath === '') ? [getPathObject(this.parent)] :
                [this.getItemObject((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.e-active', this.element))];
        }
    }
    oncutCopyInit() {
        if (this.parent.activeModule === this.getModuleName()) {
            const activeEle = this.element.querySelectorAll('.' + ACTIVE);
            this.parent.activeRecords = [];
            this.parent.activeElements = [];
            for (let i = 0; i < activeEle.length; i++) {
                this.parent.activeElements.push(activeEle[i]);
                this.parent.activeRecords.push(this.getItemObject(activeEle[i]));
            }
        }
    }
    onpasteEnd(args) {
        if (this.parent.view === 'LargeIcons') {
            this.isPasteOperation = true;
            if (this.parent.path === this.parent.destinationPath || this.parent.path === getDirectoryPath(this.parent, args)) {
                this.onPathChanged(args);
            }
        }
    }
    onDropPath(args) {
        if (this.parent.view === 'LargeIcons') {
            this.isPasteOperation = true;
            this.onPathChanged(args);
        }
    }
    onPropertyChanged(e) {
        let currentSelected;
        if (e.module !== this.getModuleName() && e.module !== 'common') {
            return;
        }
        for (const prop of Object.keys(e.newProp)) {
            switch (prop) {
                case 'allowDragAndDrop':
                    this.createDragObj();
                    break;
                case 'height':
                    this.adjustHeight();
                    break;
                case 'selectedItems':
                    this.isInteraction = false;
                    this.isInteracted = false;
                    currentSelected = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.selectedItems) ? [] : this.parent.selectedItems.slice(0);
                    currentSelected = this.parent.allowMultiSelection ? currentSelected :
                        currentSelected.slice(currentSelected.length - 1);
                    this.parent.setProperties({ selectedItems: [] }, true);
                    this.onClearAllInit();
                    if (currentSelected.length) {
                        this.selectItems(currentSelected);
                    }
                    this.parent.setProperties({ selectedItems: this.parent.selectedItems }, true);
                    this.isInteraction = true;
                    this.isInteracted = true;
                    break;
                case 'showThumbnail':
                    refresh(this.parent);
                    break;
                case 'showFileExtension':
                    read(this.parent, pathChanged, this.parent.path);
                    break;
                case 'showHiddenItems':
                    read(this.parent, pathChanged, this.parent.path);
                    break;
                case 'allowMultiSelection':
                    if (this.parent.view !== 'LargeIcons') {
                        break;
                    }
                    refresh(this.parent);
                    break;
                case 'view':
                    updateLayout(this.parent, 'LargeIcons');
                    break;
            }
        }
    }
    destroy() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.removeEventListener();
        if (this.listObj) {
            this.unWireEvents();
        }
    }
    wireEvents() {
        this.wireClickEvent(true);
        this.keyboardModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.KeyboardEvents(this.element, {
            keyAction: this.keyActionHandler.bind(this),
            keyConfigs: this.keyConfigs,
            eventName: 'keyup'
        });
        this.keyboardDownModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.KeyboardEvents(this.element, {
            keyAction: this.keydownActionHandler.bind(this),
            keyConfigs: this.keyConfigs,
            eventName: 'keydown'
        });
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'mouseover', this.onMouseOver, this);
    }
    unWireEvents() {
        this.wireClickEvent(false);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'mouseover', this.onMouseOver);
        this.keyboardModule.destroy();
        this.keyboardDownModule.destroy();
    }
    /* istanbul ignore next */
    onMouseOver(e) {
        const targetEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, '.e-list-item');
        removeBlur(this.parent, 'hover');
        if (targetEle !== null) {
            targetEle.classList.add(HOVER);
        }
    }
    wireClickEvent(toBind) {
        if (toBind) {
            // eslint-disable-next-line
            const proxy = this;
            this.clickObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Touch(this.element, {
                tap: (eve) => {
                    eve.originalEvent.preventDefault();
                    if (proxy.parent.isDevice) {
                        proxy.tapCount = eve.tapCount;
                        proxy.tapEvent = eve;
                        setTimeout(() => {
                            if (proxy.tapCount > 0) {
                                proxy.doTapAction(proxy.tapEvent);
                            }
                            proxy.tapCount = 0;
                        }, 350);
                    }
                    else {
                        if (eve.tapCount === 2 && eve.originalEvent.which !== 3) {
                            proxy.dblClickHandler(eve);
                        }
                        else {
                            proxy.clickHandler(eve);
                        }
                    }
                },
                tapHold: (e) => {
                    if (proxy.parent.isDevice) {
                        proxy.multiSelect = proxy.parent.allowMultiSelection ? true : false;
                        if (proxy.parent.allowMultiSelection) {
                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([proxy.parent.element], MULTI_SELECT);
                        }
                        proxy.clickHandler(e);
                    }
                }
            });
        }
        else {
            if (this.clickObj) {
                this.clickObj.destroy();
            }
        }
    }
    doTapAction(eve) {
        const target = eve.originalEvent.target;
        const item = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.' + LIST_ITEM);
        if (this.multiSelect || target.classList.contains(LIST_PARENT) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item)) {
            this.clickHandler(eve);
        }
        else {
            this.parent.isFile = false;
            this.updateType(item);
            if (!this.parent.isFile) {
                this.dblClickHandler(eve);
            }
            else if (eve.tapCount === 2) {
                this.clickHandler(eve);
                this.dblClickHandler(eve);
            }
            else {
                this.clickHandler(eve);
            }
        }
    }
    clickHandler(e) {
        const target = e.originalEvent.target;
        removeBlur(this.parent, 'hover');
        this.doSelection(target, e.originalEvent);
        this.parent.activeModule = 'largeiconsview';
    }
    /**
     *
     * @param {Element} target - specifies the target element.
     * @param {TouchEventArgs | MouseEventArgs | KeyboardEventArgs} e - specifies event arguements.
     * @returns {void}
     * @hidden
     */
    doSelection(target, e) {
        const item = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.' + LIST_ITEM);
        const cList = target.classList;
        this.parent.isFile = false;
        let action = 'select';
        if (e.which === 3 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item) && item.classList.contains(ACTIVE)) {
            this.updateType(item);
            return;
        }
        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item)) {
            if (this.parent.allowMultiSelection && item.classList.contains(ACTIVE)
                && (e.ctrlKey || target.classList.contains(CHECK))) {
                action = 'unselect';
            }
            const fileSelectionArgs = this.triggerSelection(action, item);
            if (fileSelectionArgs.cancel !== true) {
                if ((!this.parent.allowMultiSelection || (!this.multiSelect && (e && !e.ctrlKey)))
                    && !cList.contains(FRAME)) {
                    this.updateType(item);
                    this.clearSelect();
                }
                if (this.parent.allowMultiSelection && e.shiftKey) {
                    if (!(e && e.ctrlKey)) {
                        this.clearSelect();
                    }
                    if (!this.startItem) {
                        this.startItem = item;
                    }
                    const startIndex = this.itemList.indexOf(this.startItem);
                    const endIndex = this.itemList.indexOf(item);
                    if (startIndex > endIndex) {
                        for (let i = startIndex; i >= endIndex; i--) {
                            this.addActive(this.itemList[i]);
                        }
                    }
                    else {
                        for (let i = startIndex; i <= endIndex; i++) {
                            this.addActive(this.itemList[i]);
                        }
                    }
                    this.addFocus(this.itemList[endIndex]);
                }
                else {
                    this.startItem = item;
                    if (this.parent.allowMultiSelection && item.classList.contains(ACTIVE)) {
                        this.removeActive(item);
                    }
                    else {
                        this.addActive(item);
                    }
                    this.addFocus(item);
                }
                if (this.parent.selectedItems.length === 0) {
                    this.resetMultiSelect();
                }
                this.parent.notify(selectionChanged, {});
                this.triggerSelect(action, item);
            }
        }
        else {
            this.clearSelection();
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item)) {
            this.updateType(item);
        }
    }
    dblClickHandler(e) {
        this.parent.activeModule = 'largeiconsview';
        const target = e.originalEvent.target;
        this.doOpenAction(target);
    }
    clearSelection() {
        this.clearSelect();
        this.resetMultiSelect();
        this.parent.notify(selectionChanged, {});
    }
    resetMultiSelect() {
        this.multiSelect = false;
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.parent.element], MULTI_SELECT);
    }
    doOpenAction(target) {
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(target)) {
            return;
        }
        const item = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.' + LIST_ITEM);
        this.parent.isFile = false;
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item)) {
            this.updateType(item);
            // eslint-disable-next-line
            const details = this.getItemObject(item);
            if (!hasReadAccess(details)) {
                createDeniedDialog(this.parent, details, permissionRead);
                return;
            }
            const eventArgs = { cancel: false, fileDetails: details, module: 'LargeIconsView' };
            this.parent.trigger('fileOpen', eventArgs, (fileOpenArgs) => {
                if (!fileOpenArgs.cancel) {
                    const text = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('name', details);
                    if (!this.parent.isFile) {
                        const val = this.parent.breadcrumbbarModule.searchObj.element.value;
                        if (val === '' && !this.parent.isFiltered) {
                            const id = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('id', details);
                            const newPath = this.parent.path + ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(id) ? text : id) + '/';
                            this.parent.setProperties({ path: newPath }, true);
                            this.parent.pathNames.push(text);
                            this.parent.pathId.push((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('_fm_id', details));
                            this.parent.itemData = [details];
                            openAction(this.parent);
                        }
                        else {
                            openSearchFolder(this.parent, details);
                        }
                        this.parent.isFiltered = false;
                        this.parent.setProperties({ selectedItems: [] }, true);
                    }
                    else {
                        const icon = fileType(details);
                        if (icon === ICON_IMAGE) {
                            const imgUrl = getImageUrl(this.parent, details);
                            createImageDialog(this.parent, text, imgUrl);
                        }
                    }
                }
            });
        }
    }
    updateType(item) {
        const folder = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + FOLDER, item);
        this.parent.isFile = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(folder) ? true : false;
    }
    /* istanbul ignore next */
    // eslint:disable-next-line
    keydownActionHandler(e) {
        if (!this.isRendered) {
            return;
        }
        switch (e.action) {
            case 'end':
            case 'home':
            case 'moveDown':
            case 'moveLeft':
            case 'moveRight':
            case 'moveUp':
            case 'ctrlEnd':
            case 'shiftEnd':
            case 'csEnd':
            case 'ctrlHome':
            case 'shiftHome':
            case 'csHome':
            case 'ctrlDown':
            case 'shiftDown':
            case 'csDown':
            case 'ctrlLeft':
            case 'shiftLeft':
            case 'csLeft':
            case 'ctrlRight':
            case 'shiftRight':
            case 'csRight':
            case 'space':
            case 'ctrlSpace':
            case 'shiftSpace':
            case 'csSpace':
            case 'ctrlA':
            case 'enter':
            case 'altEnter':
            case 'esc':
            case 'del':
            case 'shiftdel':
            case 'ctrlC':
            case 'ctrlV':
            case 'ctrlX':
            case 'f2':
            case 'ctrlD':
                e.preventDefault();
                break;
            default:
                break;
        }
    }
    /* istanbul ignore next */
    // eslint:disable-next-line
    keyActionHandler(e) {
        if (!this.isRendered) {
            return;
        }
        const fItem = this.getFocusedItem();
        const firstItem = this.getFirstItem();
        const lastItem = this.getLastItem();
        switch (e.action) {
            case 'end':
                this.navigateItem(lastItem);
                break;
            case 'home':
                this.navigateItem(firstItem);
                break;
            case 'tab':
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fItem)) {
                    this.addFocus(fItem);
                }
                else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(firstItem)) {
                    this.addFocus(firstItem);
                }
                break;
            case 'moveDown':
                this.navigateDown(fItem, true);
                break;
            case 'moveLeft':
                this.navigateRight(fItem, false);
                break;
            case 'moveRight':
                this.navigateRight(fItem, true);
                break;
            case 'moveUp':
                this.navigateDown(fItem, false);
                break;
            case 'ctrlEnd':
            case 'shiftEnd':
            case 'csEnd':
                this.csEndKey(lastItem, e);
                break;
            case 'ctrlHome':
            case 'shiftHome':
            case 'csHome':
                this.csHomeKey(firstItem, e);
                break;
            case 'ctrlDown':
            case 'shiftDown':
            case 'csDown':
                this.csDownKey(fItem, e);
                break;
            case 'ctrlLeft':
            case 'shiftLeft':
            case 'csLeft':
                this.csLeftKey(fItem, e);
                break;
            case 'ctrlRight':
            case 'shiftRight':
            case 'csRight':
                this.csRightKey(fItem, e);
                break;
            case 'ctrlUp':
            case 'shiftUp':
            case 'csUp':
                this.csUpKey(fItem, e);
                break;
            case 'space':
                this.spaceKey(fItem);
                break;
            case 'ctrlSpace':
            case 'shiftSpace':
            case 'csSpace':
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fItem)) {
                    this.doSelection(fItem, e);
                }
                break;
            case 'ctrlA':
                this.ctrlAKey(firstItem, lastItem);
                break;
            case 'enter':
                this.doOpenAction(this.parent.visitedItem ? this.parent.visitedItem : this.getVisitedItem());
                break;
            case 'altEnter':
                this.parent.notify(detailsInit, {});
                GetDetails(this.parent, this.parent.selectedItems, this.parent.path, 'details');
                break;
            case 'esc':
                removeActive(this.parent);
                break;
            case 'del':
            case 'shiftdel':
                this.performDelete();
                break;
            case 'ctrlC':
                copyFiles(this.parent);
                break;
            case 'ctrlV':
                this.parent.folderPath = '';
                pasteHandler(this.parent);
                break;
            case 'ctrlX':
                cutFiles(this.parent);
                break;
            case 'f2':
                this.performRename();
                break;
            case 'ctrlD':
                this.doDownload();
                break;
        }
    }
    doDownload() {
        this.updateSelectedData();
        doDownload(this.parent);
    }
    performDelete() {
        if (this.parent.selectedItems && this.parent.selectedItems.length > 0) {
            this.updateSelectedData();
            // eslint-disable-next-line
            const data = this.parent.itemData;
            for (let i = 0; i < data.length; i++) {
                if (!hasEditAccess(data[i])) {
                    createDeniedDialog(this.parent, data[i], permissionEdit);
                    return;
                }
            }
            createDialog(this.parent, 'Delete');
        }
    }
    performRename() {
        if (this.parent.selectedItems.length === 1) {
            this.updateRenameData();
            doRename(this.parent);
        }
    }
    updateRenameData() {
        const item = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + LIST_ITEM + '.' + ACTIVE, this.element);
        // eslint-disable-next-line
        const data = this.getItemObject(item);
        updateRenamingData(this.parent, data);
    }
    getVisitedItem() {
        const item = this.parent.selectedItems[this.parent.selectedItems.length - 1];
        const indexes = this.getIndexes([item], this.parent.hasId);
        return this.itemList[indexes[0]];
    }
    getFocusedItem() {
        return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + LIST_ITEM + '.' + FOCUS, this.element);
    }
    getActiveItem() {
        return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + LIST_ITEM + '.' + ACTIVE, this.element);
    }
    getFirstItem() {
        return this.itemList[0];
    }
    getLastItem() {
        return this.itemList[this.itemList.length - 1];
    }
    navigateItem(item) {
        this.setFocus(item);
    }
    navigateDown(fItem, isTowards) {
        const nItem = this.getNextItem(fItem, isTowards, this.perRow);
        this.setFocus(nItem);
    }
    navigateRight(fItem, isTowards) {
        const nItem = this.getNextItem(fItem, isTowards);
        this.setFocus(nItem);
    }
    getNextItem(li, isTowards, perRow) {
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(li)) {
            return this.getFocusedItem() || this.getActiveItem() || this.getFirstItem();
        }
        let index = this.itemList.indexOf(li);
        let nextItem;
        do {
            if (isTowards) {
                index = perRow ? index + perRow : index + 1;
            }
            else {
                index = perRow ? index - perRow : index - 1;
            }
            nextItem = this.itemList[index];
            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(nextItem)) {
                return li;
            }
        } while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isVisible)(nextItem));
        return nextItem;
    }
    setFocus(nextItem) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(nextItem)) {
            const fileSelectionArgs = this.triggerSelection('select', nextItem);
            if (fileSelectionArgs.cancel !== true) {
                this.startItem = nextItem;
                this.clearSelect();
                this.addActive(nextItem);
                this.addFocus(nextItem);
                this.parent.notify(selectionChanged, {});
                this.triggerSelect('select', nextItem);
            }
        }
    }
    spaceKey(fItem) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fItem) && !fItem.classList.contains(ACTIVE)) {
            const fileSelectionArgs = this.triggerSelection('select', fItem);
            if (fileSelectionArgs.cancel !== true) {
                this.addActive(fItem);
                this.parent.notify(selectionChanged, {});
                this.triggerSelect('select', fItem);
            }
        }
    }
    ctrlAKey(firstItem, lastItem) {
        if (this.parent.allowMultiSelection && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(firstItem)) {
            this.startItem = firstItem;
            const eveArgs = { ctrlKey: true, shiftKey: true };
            const liParent = this.element.querySelector('.' + LIST_PARENT);
            const liScrPos = liParent.scrollTop;
            const getCurFocusedItem = this.getFocusedItem();
            this.doSelection(lastItem, eveArgs);
            liParent.scrollTop = liScrPos;
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(getCurFocusedItem)) {
                this.addFocus(getCurFocusedItem);
            }
        }
    }
    csEndKey(lastItem, e) {
        if (!this.parent.allowMultiSelection) {
            this.navigateItem(lastItem);
        }
        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(lastItem)) {
            if (e.action === 'ctrlEnd') {
                this.addFocus(lastItem);
            }
            else {
                this.doSelection(lastItem, e);
            }
        }
    }
    csHomeKey(firstItem, e) {
        if (!this.parent.allowMultiSelection) {
            this.navigateItem(firstItem);
        }
        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(firstItem)) {
            if (e.action === 'ctrlHome') {
                this.addFocus(firstItem);
            }
            else {
                this.doSelection(firstItem, e);
            }
        }
    }
    csDownKey(fItem, e) {
        if (!this.parent.allowMultiSelection) {
            this.navigateDown(fItem, true);
        }
        else {
            const dItem = this.getNextItem(fItem, true, this.perRow);
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dItem)) {
                if (e.action === 'ctrlDown') {
                    this.addFocus(dItem);
                }
                else {
                    this.doSelection(dItem, e);
                }
            }
        }
    }
    csLeftKey(fItem, e) {
        if (!this.parent.allowMultiSelection) {
            this.navigateRight(fItem, false);
        }
        else {
            const lItem = this.getNextItem(fItem, false);
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(lItem)) {
                if (e.action === 'ctrlLeft') {
                    this.addFocus(lItem);
                }
                else {
                    this.doSelection(lItem, e);
                }
            }
        }
    }
    csRightKey(fItem, e) {
        if (!this.parent.allowMultiSelection) {
            this.navigateRight(fItem, true);
        }
        else {
            const rItem = this.getNextItem(fItem, true);
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(rItem)) {
                if (e.action === 'ctrlRight') {
                    this.addFocus(rItem);
                }
                else {
                    this.doSelection(rItem, e);
                }
            }
        }
    }
    csUpKey(fItem, e) {
        if (!this.parent.allowMultiSelection) {
            this.navigateDown(fItem, false);
        }
        else {
            const uItem = this.getNextItem(fItem, false, this.perRow);
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(uItem)) {
                if (e.action === 'ctrlUp') {
                    this.addFocus(uItem);
                }
                else {
                    this.doSelection(uItem, e);
                }
            }
        }
    }
    addActive(nextItem) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(nextItem)) {
            if (!nextItem.classList.contains(ACTIVE)) {
                this.parent.selectedItems.push(this.getDataName(nextItem));
                this.parent.setProperties({ selectedItems: this.parent.selectedItems }, true);
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([nextItem], [ACTIVE]);
                nextItem.setAttribute('aria-selected', 'true');
                this.checkState(nextItem, true);
            }
            this.parent.visitedItem = nextItem;
        }
    }
    removeActive(preItem) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(preItem)) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([preItem], [ACTIVE]);
            if (this.parent.allowMultiSelection) {
                preItem.setAttribute('aria-selected', 'false');
            }
            else {
                preItem.removeAttribute('aria-selected');
            }
            this.checkState(preItem, false);
            const index = this.parent.selectedItems.indexOf(this.getDataName(preItem));
            if (index > -1) {
                this.parent.selectedItems.splice(index, 1);
                this.parent.setProperties({ selectedItems: this.parent.selectedItems }, true);
            }
            this.parent.visitedItem = null;
        }
    }
    getDataName(item) {
        // eslint-disable-next-line
        const data = this.getItemObject(item);
        return getItemName(this.parent, data);
    }
    addFocus(item) {
        this.element.setAttribute('tabindex', '-1');
        const fItem = this.getFocusedItem();
        if (fItem) {
            fItem.removeAttribute('tabindex');
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([fItem], [FOCUS]);
        }
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([item], [FOCUS]);
        item.setAttribute('tabindex', '0');
        item.focus();
    }
    checkState(item, toCheck) {
        if (!this.parent.allowMultiSelection) {
            return;
        }
        const checkEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + FRAME, item);
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(checkEle)) {
            return;
        }
        if (toCheck) {
            if (!checkEle.classList.contains(CHECK)) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([checkEle], CHECK);
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(checkEle, '.' + CB_WRAP).setAttribute('aria-checked', 'true');
            }
        }
        else {
            if (checkEle.classList.contains(CHECK)) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([checkEle], CHECK);
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(checkEle, '.' + CB_WRAP).setAttribute('aria-checked', 'false');
            }
        }
    }
    clearSelect() {
        const eles = Array.prototype.slice.call((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + ACTIVE, this.listElements));
        let fileSelectionArgs;
        if (eles.length !== 0) {
            fileSelectionArgs = this.triggerSelection('unselect', eles[0]);
            if (fileSelectionArgs.cancel !== true) {
                for (let i = 0, len = eles.length; i < len; i++) {
                    this.removeActive(eles[i]);
                }
            }
            this.triggerSelect('unselect', eles[0]);
        }
    }
    resizeHandler() {
        this.getItemCount();
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.listObj)) {
            this.adjustHeight();
        }
    }
    splitterResizeHandler() {
        this.getItemCount();
    }
    getItemCount() {
        let perRow = 1;
        if (this.itemList) {
            for (let i = 0, len = this.itemList.length - 1; i < len; i++) {
                if (this.itemList[i].getBoundingClientRect().top === this.itemList[i + 1].getBoundingClientRect().top) {
                    perRow++;
                }
                else {
                    break;
                }
            }
        }
        this.perRow = perRow;
    }
    triggerSelection(action, item) {
        // eslint-disable-next-line
        const data = this.getItemObject(item);
        const eventArgs = {
            action: action, fileDetails: data, isInteracted: this.isInteraction, cancel: false, target: item
        };
        this.parent.trigger('fileSelection', eventArgs);
        this.isInteraction = true;
        return eventArgs;
    }
    triggerSelect(action, item) {
        // eslint-disable-next-line
        const data = this.getItemObject(item);
        this.parent.visitedData = data;
        const eventArgs = { action: action, fileDetails: data, isInteracted: this.isInteracted };
        this.parent.trigger('fileSelect', eventArgs);
        this.isInteracted = true;
    }
    selectItems(items) {
        const indexes = this.getIndexes(items, this.parent.hasId);
        for (let j = 0, len = indexes.length; j < len; j++) {
            const eveArgs = { ctrlKey: true, shiftKey: false };
            this.doSelection(this.itemList[indexes[j]], eveArgs);
        }
    }
    getIndexes(items, byId) {
        const indexes = [];
        const filter$$1 = byId ? 'id' : 'name';
        for (let i = 0, len = this.items.length; i < len; i++) {
            if (items.indexOf((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(filter$$1, this.items[i])) !== -1) {
                indexes.push(i);
            }
        }
        return indexes;
    }
    // eslint-disable-next-line
    getItemObject(item) {
        const index = this.itemList.indexOf(item);
        return this.items[index];
    }
    // eslint-disable-next-line
    addSelection(data) {
        // eslint-disable-next-line
        let resultData = [];
        if (this.parent.hasId) {
            resultData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(this.items).
                executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where('id', 'equal', this.parent.renamedId, false));
        }
        else {
            // eslint-disable-next-line
            const newData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(this.items).
                executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where('name', 'equal', (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('name', data), false));
            if (newData.length > 0) {
                resultData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(newData).
                    executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where('filterPath', 'equal', this.parent.filterPath, false));
            }
        }
        if (resultData.length > 0) {
            const index = this.items.indexOf(resultData[0]);
            const eveArgs = { ctrlKey: true, shiftKey: false };
            this.doSelection(this.itemList[index], eveArgs);
        }
    }
    updateSelectedData() {
        // eslint-disable-next-line
        const data = [];
        const items = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + LIST_ITEM + '.' + ACTIVE, this.element);
        for (let i = 0; i < items.length; i++) {
            data[i] = this.getItemObject(items[i]);
        }
        this.parent.itemData = data;
    }
    // eslint-disable-next-line
    onMethodCall(args) {
        if (this.parent.view !== 'LargeIcons') {
            return;
        }
        const action = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('action', args);
        switch (action) {
            case 'deleteFiles':
                this.deleteFiles((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('ids', args));
                break;
            case 'downloadFiles':
                this.downloadFiles((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('ids', args));
                break;
            case 'openFile':
                this.openFile((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('id', args));
                break;
            case 'renameFile':
                this.isInteraction = false;
                this.isInteracted = false;
                this.renameFile((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('id', args), (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('newName', args));
                break;
            case 'createFolder':
                this.isInteraction = false;
                this.isInteracted = false;
                break;
            case 'clearSelection':
                this.isInteraction = false;
                this.isInteracted = false;
                this.onClearAllInit();
                break;
            case 'selectAll':
                this.isInteraction = false;
                this.isInteracted = false;
                this.onSelectAllInit();
                break;
        }
    }
    getItemsIndex(items) {
        const indexes = [];
        const isFilter = (this.parent.breadcrumbbarModule.searchObj.element.value !== '' || this.parent.isFiltered) ? true : false;
        const filterName = this.parent.hasId ? 'id' : 'name';
        if (this.parent.hasId || !isFilter) {
            for (let i = 0, len = this.items.length; i < len; i++) {
                if (items.indexOf((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(filterName, this.items[i])) !== -1) {
                    indexes.push(i);
                }
            }
        }
        else {
            for (let i = 0, len = this.items.length; i < len; i++) {
                const name = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('filterPath', this.items[i]) + (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('name', this.items[i]);
                if (items.indexOf(name) !== -1) {
                    indexes.push(i);
                }
            }
        }
        return indexes;
    }
    deleteFiles(ids) {
        this.parent.activeModule = 'largeiconsview';
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ids)) {
            this.performDelete();
            return;
        }
        const indexes = this.getItemsIndex(ids);
        if (indexes.length === 0) {
            return;
        }
        // eslint-disable-next-line
        const data = [];
        const newIds = [];
        for (let i = 0; i < indexes.length; i++) {
            data[i] = this.items[indexes[i]];
            newIds[i] = getItemName(this.parent, data[i]);
        }
        doDeleteFiles(this.parent, data, newIds);
    }
    downloadFiles(ids) {
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ids)) {
            this.doDownload();
            return;
        }
        const index = this.getItemsIndex(ids);
        if (index.length === 0) {
            return;
        }
        // eslint-disable-next-line
        const data = [];
        const newIds = [];
        for (let i = 0; i < index.length; i++) {
            data[i] = this.items[index[i]];
            newIds[i] = getItemName(this.parent, data[i]);
        }
        doDownloadFiles(this.parent, data, newIds);
    }
    openFile(id) {
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(id)) {
            return;
        }
        const indexes = this.getItemsIndex([id]);
        if (indexes.length > 0) {
            this.doOpenAction(this.itemList[indexes[0]]);
        }
    }
    renameFile(id, name) {
        this.parent.activeModule = 'largeiconsview';
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(id)) {
            this.performRename();
            return;
        }
        const indexes = this.getItemsIndex([id]);
        if (indexes.length > 0) {
            updateRenamingData(this.parent, this.items[indexes[0]]);
            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(name)) {
                doRename(this.parent);
            }
            else {
                if (!hasEditAccess(this.parent.itemData[0])) {
                    createDeniedDialog(this.parent, this.parent.itemData[0], permissionEdit);
                }
                else {
                    rename(this.parent, this.parent.path, name);
                }
            }
        }
    }
}

/**
 * BreadCrumbBar module
 */
class BreadCrumbBar {
    /**
     * constructor for addressbar module
     *
     * @hidden
     * @param {IFileManager} parent - specifies parent element.
     * @private
     *
     */
    constructor(parent) {
        this.addressPath = '';
        this.addressBarLink = '';
        this.searchTimer = null;
        this.searchWrapWidth = null;
        this.parent = parent;
        this.keyConfigs = {
            enter: 'enter'
        };
        this.render();
    }
    onPropertyChanged(e) {
        if (e.module !== this.getModuleName() && e.module !== 'common') {
            return;
        }
        for (const prop of Object.keys(e.newProp)) {
            const value = e.newProp.searchSettings;
            switch (prop) {
                case 'searchSettings':
                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(value.allowSearchOnTyping)) {
                        this.searchEventBind(value.allowSearchOnTyping);
                    }
                    if (this.parent.breadcrumbbarModule.searchObj.value && this.parent.breadcrumbbarModule.searchObj.value !== '' &&
                        !(!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(value.allowSearchOnTyping) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(value.filterType) &&
                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(value.ignoreCase))) {
                        searchWordHandler(this.parent, this.parent.breadcrumbbarModule.searchObj.value, false);
                    }
                    break;
            }
        }
    }
    render() {
        this.addEventListener();
    }
    onPathChange() {
        const pathNames = this.parent.pathNames;
        const paths = this.parent.path.split('/');
        const addressbarUL = this.parent.createElement('ul', { className: 'e-addressbar-ul' });
        let addressbarLI = null;
        const pathNamesLen = pathNames.length;
        if (pathNames.length > 0) {
            let id = '';
            for (let i = 0; i < pathNamesLen; i++) {
                let addressATag = null;
                addressbarLI = this.parent.createElement('li', { className: 'e-address-list-item' });
                for (let j = 0; j <= i; j++) {
                    id = id + paths[j] + '/';
                }
                addressbarLI.setAttribute('data-utext', id);
                if (i !== 0) {
                    const icon = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', { className: ICONS });
                    addressbarLI.appendChild(icon);
                }
                if (pathNamesLen - i !== 1) {
                    addressATag = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('a', { className: LIST_TEXT });
                    addressbarLI.setAttribute('tabindex', '0');
                }
                else {
                    addressATag = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', { className: LIST_TEXT });
                }
                id = '';
                addressATag.innerText = pathNames[i];
                addressbarLI.appendChild(addressATag);
                addressbarUL.appendChild(addressbarLI);
            }
            const ulElement = this.parent.breadCrumbBarNavigation.querySelector('.e-addressbar-ul');
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ulElement)) {
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.subMenuObj)) {
                    this.subMenuObj.destroy();
                }
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(ulElement);
            }
            const searchWrap = this.parent.breadCrumbBarNavigation.querySelector('.e-search-wrap');
            if (!searchWrap) {
                this.parent.breadCrumbBarNavigation.insertBefore(addressbarUL, searchWrap);
            }
            else {
                this.parent.breadCrumbBarNavigation.appendChild(addressbarUL);
            }
            this.updateBreadCrumbBar(addressbarUL);
        }
    }
    /* istanbul ignore next */
    updateBreadCrumbBar(addresBarUL) {
        const liElements = addresBarUL.querySelectorAll('li');
        const ulElement = this.parent.breadCrumbBarNavigation.querySelector('.e-addressbar-ul');
        const style = window.getComputedStyle(ulElement, null);
        const pRight = parseFloat(style.getPropertyValue('padding-right'));
        const pLeft = parseFloat(style.getPropertyValue('padding-left'));
        let breadCrumbBarWidth = ulElement.offsetWidth - pRight - pLeft;
        const addressbarUL = this.parent.createElement('ul', { className: 'e-addressbar-ul' });
        let liElementsWidth = 0;
        const liElementsWidths = [];
        for (let i = 0; i < liElements.length; i++) {
            const width = liElements[i].clientWidth;
            liElementsWidths.push(width);
            liElementsWidth = liElementsWidth + width;
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ulElement)) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.remove)(ulElement);
        }
        const searchContainer = this.parent.createElement('div');
        searchContainer.setAttribute('class', 'e-search-wrap');
        const id = this.parent.element.id + SEARCH_ID;
        const searchInput = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('input', { id: id,
            attrs: { autocomplete: 'off', 'aria-label': getLocaleText(this.parent, 'Search') } });
        searchContainer.appendChild(searchInput);
        const searchEle = this.parent.breadCrumbBarNavigation.querySelector('.e-search-wrap .e-input');
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(searchEle)) {
            this.parent.breadCrumbBarNavigation.appendChild(searchContainer);
            const span = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', { className: 'e-icons e-fe-search' });
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(span, 'click', this.onShowInput, this);
            searchInput.parentElement.insertBefore(span, searchInput);
            this.searchObj = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__.TextBox({
                value: '',
                showClearButton: true,
                placeholder: getLocaleText(this.parent, 'Search'),
                focus: this.onFocus.bind(this),
                blur: this.onBlur.bind(this)
            });
            this.searchObj.appendTo('#' + this.parent.element.id + SEARCH_ID);
            this.searchEventBind(this.parent.searchSettings.allowSearchOnTyping);
            const search$$1 = this.searchObj.element.nextElementSibling;
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(search$$1, 'mousedown', this.searchChangeHandler.bind(this), this);
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.searchObj.element, 'keyup', this.onKeyUp.bind(this), this);
        }
        const searchWrap = this.parent.breadCrumbBarNavigation.querySelector('.e-search-wrap');
        breadCrumbBarWidth = breadCrumbBarWidth - (this.searchWrapWidth ? this.searchWrapWidth : searchWrap.offsetWidth);
        if (liElementsWidth > breadCrumbBarWidth) {
            let i = liElements.length;
            while (i--) {
                const diff = breadCrumbBarWidth - liElementsWidths[i];
                if (diff > 40) {
                    addressbarUL.insertBefore(liElements[i], addressbarUL.querySelector('li'));
                    breadCrumbBarWidth = diff;
                }
                else {
                    // eslint-disable-next-line
                    const items = [];
                    for (let j = 0; j <= i; j++) {
                        const liElement = liElements[j];
                        items.push({
                            text: liElement.innerText,
                            utext: liElement.getAttribute('data-utext')
                        });
                    }
                    const subMenuLi = this.parent.createElement('li', { className: 'e-breadcrumb-menu' });
                    // eslint-disable-next-line
                    const attributes = { className: 'e-breadcrumb-submenu' };
                    const subMenuSpan = this.parent.createElement('button', attributes);
                    subMenuLi.appendChild(subMenuSpan);
                    addressbarUL.insertBefore(subMenuLi, addressbarUL.querySelector('li'));
                    this.subMenuObj = new _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_6__.DropDownButton({
                        items: items,
                        cssClass: 'e-caret-hide e-submenu',
                        iconCss: ICON_BREADCRUMB,
                        iconPosition: 'Top',
                        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
                        beforeItemRender: this.addSubMenuAttributes.bind(this),
                        select: this.subMenuSelectOperations.bind(this)
                    });
                    this.subMenuObj.isStringTemplate = true;
                    this.subMenuObj.appendTo(subMenuSpan);
                    break;
                }
            }
            this.parent.breadCrumbBarNavigation.insertBefore(addressbarUL, searchWrap);
        }
        else {
            this.parent.breadCrumbBarNavigation.insertBefore(addresBarUL, searchWrap);
        }
    }
    /* istanbul ignore next */
    onFocus() {
        const wrap = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.searchObj.element, '.e-search-wrap');
        wrap.classList.add('e-focus');
    }
    /* istanbul ignore next */
    onKeyUp() {
        this.parent.notify(pathColumn, { args: this.parent });
    }
    /* istanbul ignore next */
    onBlur() {
        const wrap = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.searchObj.element, '.e-search-wrap');
        wrap.classList.remove('e-focus');
    }
    /* istanbul ignore next */
    subMenuSelectOperations(event) {
        // eslint-disable-next-line
        const args = { target: event.element };
        this.addressPathClickHandler(args);
    }
    /* istanbul ignore next */
    addSubMenuAttributes(args) {
        args.element.setAttribute('data-utext', (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('utext', args.item));
        const anchor = this.parent.createElement('a', { className: 'e-list-text' });
        args.element.appendChild(anchor);
    }
    searchEventBind(allow) {
        if (allow) {
            this.searchObj.input = this.searchChangeHandler.bind(this);
            this.searchObj.change = null;
        }
        else {
            this.searchObj.change = this.searchChangeHandler.bind(this);
            this.searchObj.input = null;
        }
    }
    searchChangeHandler(args) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.value)) {
            this.parent.isFiltered = false;
            if (this.parent.searchSettings.allowSearchOnTyping) {
                window.clearTimeout(this.searchTimer);
                this.searchTimer = window.setTimeout(() => { searchWordHandler(this.parent, args.value, false); }, 300);
            }
            else {
                searchWordHandler(this.parent, args.value, false);
            }
        }
    }
    addressPathClickHandler(e) {
        const li = e.target;
        if (li.nodeName === 'LI' || li.nodeName === 'A') {
            const node = li.nodeName === 'LI' ? li.children[0] : li;
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(node)) {
                this.parent.isFiltered = false;
                const currentPath = this.updatePath(node);
                this.parent.itemData = [(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.parent.pathId[this.parent.pathId.length - 1], this.parent.feParent)];
                this.triggerFileOpen(this.parent.itemData[0]);
                read(this.parent, pathChanged, currentPath);
                const treeNodeId = this.parent.pathId[this.parent.pathId.length - 1];
                this.parent.notify(updateTreeSelection, { module: 'treeview', selectedNode: treeNodeId });
            }
        }
    }
    // eslint-disable-next-line
    triggerFileOpen(data) {
        const eventArgs = { cancel: false, fileDetails: data, module: 'BreadCrumbBar' };
        delete eventArgs.cancel;
        this.parent.trigger('fileOpen', eventArgs);
    }
    /* istanbul ignore next */
    onShowInput() {
        if (this.parent.isMobile) {
            if (this.parent.element.classList.contains(FILTER)) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.parent.element], FILTER);
                this.searchWrapWidth = null;
            }
            else {
                const searchWrap = this.parent.breadCrumbBarNavigation.querySelector('.e-search-wrap');
                this.searchWrapWidth = searchWrap.offsetWidth;
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.parent.element], FILTER);
                this.searchObj.element.focus();
            }
        }
    }
    updatePath(list) {
        const li = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(list, 'li');
        const liElementId = li.getAttribute('data-utext');
        this.addressBarLink = liElementId;
        const link = this.addressBarLink.split('/');
        const ids = this.parent.pathId;
        const names = this.parent.pathNames;
        this.parent.pathId = [];
        this.parent.pathNames = [];
        let newpath = '';
        for (let i = 0, len = link.length - 1; i < len; i++) {
            this.parent.pathId.push(ids[i]);
            this.parent.pathNames.push(names[i]);
            newpath += link[i] + '/';
        }
        this.parent.setProperties({ path: newpath }, true);
        return newpath;
    }
    onUpdatePath() {
        this.onPathChange();
        this.removeSearchValue();
    }
    onCreateEnd() {
        this.onPathChange();
    }
    onRenameEnd() {
        this.onPathChange();
    }
    /* istanbul ignore next */
    onDeleteEnd() {
        this.onUpdatePath();
    }
    /* istanbul ignore next */
    removeSearchValue() {
        this.parent.isFiltered = false;
        if (this.searchObj && (this.searchObj.value !== '' || this.searchObj.element.value !== '')) {
            this.searchObj.value = '';
            this.searchObj.element.value = '';
            this.searchObj.dataBind();
        }
    }
    onResize() {
        this.onPathChange();
    }
    onPasteEnd() {
        this.onPathChange();
    }
    addEventListener() {
        this.keyboardModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.KeyboardEvents(this.parent.breadCrumbBarNavigation, {
            keyAction: this.keyActionHandler.bind(this),
            keyConfigs: this.keyConfigs,
            eventName: 'keydown'
        });
        this.parent.on(modelChanged, this.onPropertyChanged, this);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.parent.breadCrumbBarNavigation, 'click', this.addressPathClickHandler, this);
        this.parent.on(destroy, this.destroy, this);
        this.parent.on(pathChanged, this.onUpdatePath, this);
        this.parent.on(finalizeEnd, this.onUpdatePath, this);
        this.parent.on(refreshEnd, this.onUpdatePath, this);
        this.parent.on(openEnd, this.onUpdatePath, this);
        this.parent.on(createEnd, this.onCreateEnd, this);
        this.parent.on(renameEnd, this.onRenameEnd, this);
        this.parent.on(deleteEnd, this.onDeleteEnd, this);
        this.parent.on(splitterResize, this.onResize, this);
        this.parent.on(pasteEnd, this.onPasteEnd, this);
        this.parent.on(resizeEnd, this.onResize, this);
        this.parent.on(searchTextChange, this.onSearchTextChange, this);
        this.parent.on(dropInit, this.onDropInit, this);
        this.parent.on(layoutRefresh, this.onResize, this);
        this.parent.on(dropPath, this.onPathChange, this);
    }
    keyActionHandler(e) {
        switch (e.action) {
            case 'enter':
                this.addressPathClickHandler(e);
                break;
        }
    }
    removeEventListener() {
        this.keyboardModule.destroy();
        this.parent.off(pathChanged, this.onUpdatePath);
        this.parent.off(finalizeEnd, this.onUpdatePath);
        this.parent.off(refreshEnd, this.onUpdatePath);
        this.parent.off(openEnd, this.onUpdatePath);
        this.parent.off(pasteEnd, this.onPasteEnd);
        this.parent.off(createEnd, this.onCreateEnd);
        this.parent.off(renameEnd, this.onRenameEnd);
        this.parent.off(deleteEnd, this.onDeleteEnd);
        this.parent.off(splitterResize, this.onResize);
        this.parent.off(resizeEnd, this.onResize);
        this.parent.off(searchTextChange, this.onSearchTextChange);
        this.parent.off(dropInit, this.onDropInit);
        this.parent.off(layoutRefresh, this.onResize);
        this.parent.off(dropPath, this.onPathChange);
    }
    /* istanbul ignore next */
    onDropInit(args) {
        if (this.parent.targetModule === this.getModuleName()) {
            const liEle = args.target.closest('li');
            this.parent.dropPath = this.updatePath((liEle.children[0]));
            this.parent.dropData = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.parent.pathId[this.parent.pathId.length - 1], this.parent.feParent);
            this.triggerFileOpen(this.parent.dropData);
            const treeNodeId = this.parent.pathId[this.parent.pathId.length - 1];
            this.parent.notify(updateTreeSelection, { module: 'treeview', selectedNode: treeNodeId });
        }
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} - returns the module name
     * @private
     */
    getModuleName() {
        return 'breadcrumbbar';
    }
    destroy() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.removeEventListener();
        /* istanbul ignore next */
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.subMenuObj)) {
            this.subMenuObj.destroy();
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.searchObj)) {
            this.searchObj.destroy();
        }
    }
    onSearchTextChange(args) {
        this.searchObj.element.placeholder = (this.parent.searchSettings.placeholder != null) ? this.parent.searchSettings.placeholder : getLocaleText(this.parent, 'Search') + ' ' + args.cwd.name;
    }
}

/**
 * ContextMenu module
 */
class ContextMenu$2 {
    /**
     * Constructor for the ContextMenu module
     *
     * @param {IFileManager} parent - Specifies the parent element.
     * @hidden
     */
    constructor(parent) {
        this.currentItems = [];
        this.currentElement = null;
        this.disabledItems = [];
        this.parent = parent;
        this.render();
    }
    render() {
        this.keyConfigs = {
            downarrow: 'downarrow',
            uparrow: 'uparrown'
        };
        this.contextMenu = new _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_7__.ContextMenu({
            enableRtl: this.parent.enableRtl,
            locale: this.parent.locale,
            target: '#' + this.parent.element.id,
            enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
            beforeItemRender: this.onBeforeItemRender.bind(this),
            select: this.onSelect.bind(this),
            beforeOpen: this.onBeforeOpen.bind(this),
            beforeClose: this.onBeforeClose.bind(this),
            cssClass: getCssClass(this.parent, ROOT_POPUP)
        });
        this.contextMenu.isStringTemplate = true;
        this.contextMenu.appendTo('#' + this.parent.element.id + CONTEXT_MENU_ID);
        this.addEventListener();
    }
    /* istanbul ignore next */
    onBeforeItemRender(args) {
        if (args.item.id === this.getMenuId('largeiconsview')) {
            const iconSpan = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span');
            const element = args.element;
            element.insertBefore(iconSpan, this.parent.view === 'LargeIcons' ? element.childNodes[1] : element.childNodes[0]);
            iconSpan.setAttribute('class', ICON_LARGE + ' ' + MENU_ICON);
        }
        if (args.item.id === this.getMenuId('detailsview')) {
            const iconSpan = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span');
            const element = args.element;
            element.insertBefore(iconSpan, this.parent.view === 'Details' ? element.childNodes[1] : element.childNodes[0]);
            iconSpan.setAttribute('class', ICON_GRID + ' ' + MENU_ICON);
        }
    }
    onBeforeClose() {
        this.menuTarget = null;
    }
    /* istanbul ignore next */
    onBeforeOpen(args) {
        this.disabledItems = [];
        let selected = false;
        let uid;
        // eslint-disable-next-line
        let data;
        let treeFolder = false;
        let target = args.event.target;
        this.menuTarget = this.targetNodeElement = target;
        this.currentElement = args.element;
        if (target.classList.contains('e-spinner-pane')) {
            target = this.parent.navigationpaneModule.activeNode.getElementsByClassName(FULLROW)[0];
            this.menuTarget = this.targetNodeElement = target;
        }
        this.targetElement = this.parent.view === 'Details' ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'tr.e-row') : target;
        const view = this.getTargetView(target);
        this.updateActiveModule();
        /* istanbul ignore next */
        if (target.classList.contains(TREE_VIEW) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'th') ||
            ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '#' + this.parent.element.id + BREADCRUMBBAR_ID)) ||
            ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '#' + this.parent.element.id + TOOLBAR_ID))) {
            args.cancel = true;
            // eslint:disable-next-line
        }
        else if (!(this.parent.view === 'LargeIcons') && this.targetElement &&
            this.targetElement.classList.contains('e-emptyrow')) {
            this.setLayoutItem(target);
            /* istanbul ignore next */
        }
        else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.' + EMPTY)) {
            this.setLayoutItem(target);
            // eslint:disable-next-line
        }
        else if (!target.classList.contains(MENU_ITEM) &&
            !target.classList.contains(MENU_ICON) && !target.classList.contains(SUBMENU_ICON)) {
            /* istanbul ignore next */
            // eslint:disable-next-line
            if (this.parent.view === 'LargeIcons' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'li')) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '#' + this.parent.element.id + TREE_ID)) {
                const eveArgs = { ctrlKey: true, shiftKey: true };
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'li').classList.contains('e-active')) {
                    this.parent.largeiconsviewModule.doSelection(target, eveArgs);
                }
                // eslint-disable-next-line
                data = this.parent.visitedData;
                selected = true;
            }
            else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'tr.e-row'))) {
                uid = this.targetElement.getAttribute('data-uid');
                // eslint-disable-next-line
                data = this.parent.detailsviewModule.gridObj.getRowObjectFromUID(uid).data;
                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.targetElement.getAttribute('aria-selected'))) {
                    /* istanbul ignore next */
                    this.parent.detailsviewModule.gridObj.selectRows([parseInt(this.targetElement.getAttribute('aria-rowindex'), 10)]);
                }
                selected = true;
                /* istanbul ignore next */
            }
            else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '#' + this.parent.element.id + TREE_ID)) {
                uid = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'li').getAttribute('data-uid');
                treeFolder = true;
            }
            /* istanbul ignore next */
            if (selected) {
                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('isFile', data) === true) {
                    this.setFileItem();
                }
                else {
                    this.setFolderItem(false);
                }
                /* istanbul ignore next */
            }
            else if (treeFolder) {
                this.setFolderItem(true);
                if (uid === this.parent.pathId[0]) {
                    this.disabledItems.push('Delete', 'Rename', 'Cut', 'Copy');
                }
                /* istanbul ignore next */
                // eslint:disable-next-line
            }
            else if (view === 'TreeView' || view === 'GridView' || view === 'LargeIcon') {
                this.setLayoutItem(target);
                /* istanbul ignore next */
            }
            else {
                args.cancel = true;
            }
        }
        const pasteEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.getMenuId('Paste'), this.contextMenu.element);
        if (!args.cancel && !this.parent.enablePaste &&
            pasteEle && !pasteEle.classList.contains('e-disabled')) {
            this.disabledItems.push('Paste');
        }
        if (args.cancel) {
            this.menuTarget = this.currentElement = null;
            return;
        }
        this.contextMenu.dataBind();
        let isSubMenu = false;
        if (target.classList.contains(MENU_ITEM) ||
            target.classList.contains(MENU_ICON) || target.classList.contains(SUBMENU_ICON)) {
            isSubMenu = true;
        }
        this.menuItemData = isSubMenu ? this.menuItemData : this.getMenuItemData();
        const eventArgs = {
            fileDetails: [this.menuItemData],
            element: args.element,
            target: target,
            items: isSubMenu ? args.items : this.contextMenu.items,
            menuModule: this.contextMenu,
            cancel: false,
            menuType: this.menuType,
            isSubMenu: isSubMenu
        };
        this.currentItems = eventArgs.items;
        this.parent.trigger('menuOpen', eventArgs, (menuOpenArgs) => {
            if (!isSubMenu) {
                this.contextMenu.dataBind();
                this.contextMenu.items = menuOpenArgs.items;
                this.contextMenu.dataBind();
            }
            this.enableItems(this.disabledItems, false, true);
            args.cancel = menuOpenArgs.cancel;
            if (menuOpenArgs.cancel) {
                this.menuTarget = this.targetNodeElement = this.currentElement = null;
            }
        });
    }
    updateActiveModule() {
        this.parent.activeModule = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.menuTarget, '#' + this.parent.element.id + TREE_ID) ?
            'navigationpane' : (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.menuTarget, '#' + this.parent.element.id + GRID_ID) ?
            'detailsview' : (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.menuTarget, '#' + this.parent.element.id + LARGEICON_ID) ?
            'largeiconsview' : this.parent.activeModule;
    }
    /* istanbul ignore next */
    /**
     *
     * @param {Element} target - specifies the target element.
     * @returns {string} -returns the target view.
     * @hidden
     */
    getTargetView(target) {
        return target.classList.contains(TREE_VIEW) ?
            'TreeView' : target.classList.contains(GRID_VIEW) ?
            'GridView' : target.classList.contains(ICON_VIEW) ?
            'LargeIcon' : target.classList.contains(LARGE_ICONS) ?
            'LargeIcon' : '';
    }
    getItemIndex(item) {
        const itemId = this.getMenuId(item);
        for (let i = 0; i < this.currentItems.length; i++) {
            if ((this.currentItems[i].id === itemId) || (this.currentItems[i].id === item)) {
                return i;
            }
        }
        return -1;
    }
    disableItem(items) {
        if (items.length !== 0) {
            this.disabledItems = this.disabledItems.concat(items);
        }
    }
    enableItems(items, enable, isUniqueId) {
        for (let i = 0; i < items.length; i++) {
            if (this.checkValidItem(items[i]) === 1) {
                this.contextMenu.enableItems([this.getMenuId(items[i])], enable, isUniqueId);
            }
            else if (this.checkValidItem(items[i]) === 2) {
                this.contextMenu.enableItems([items[i]], enable, isUniqueId);
            }
        }
    }
    setFolderItem(isTree) {
        this.menuType = 'folder';
        this.contextMenu.items = this.getItemData(this.parent.contextMenuSettings.folder.map((item) => item.trim()));
        this.contextMenu.dataBind();
        if (isTree) {
            this.disabledItems.push('Open');
        }
        else if (this.parent.selectedItems.length !== 1) {
            this.disabledItems.push('Rename', 'Paste');
        }
    }
    setFileItem() {
        this.menuType = 'file';
        this.contextMenu.items = this.getItemData(this.parent.contextMenuSettings.file.map((item) => item.trim()));
        this.contextMenu.dataBind();
        if (this.parent.selectedItems.length !== 1) {
            this.disabledItems.push('Rename');
        }
    }
    setLayoutItem(target) {
        this.menuType = 'layout';
        this.contextMenu.items = this.getItemData(this.parent.contextMenuSettings.layout.map((item) => item.trim()));
        this.contextMenu.dataBind();
        if (!this.parent.allowMultiSelection || ((this.parent.view === 'LargeIcons' &&
            ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '#' + this.parent.element.id + LARGEICON_ID).getElementsByClassName(EMPTY).length !== 0))
            || (this.parent.view === 'Details' &&
                ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '#' + this.parent.element.id + GRID_ID).getElementsByClassName(EMPTY).length !== 0)))) {
            this.disabledItems.push('SelectAll');
        }
        if (this.parent.selectedNodes.length === 0) {
            this.disabledItems.push('Paste');
        }
        this.contextMenu.dataBind();
    }
    checkValidItem(nameEle) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.getMenuId(nameEle), this.currentElement))) {
            return 1;
        }
        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + nameEle, this.currentElement))) {
            return 2;
        }
        else {
            return -1;
        }
    }
    // eslint-disable-next-line
    getMenuItemData() {
        if (this.menuType === 'layout') {
            return getPathObject(this.parent);
        }
        else {
            // eslint-disable-next-line
            const args = { target: this.menuTarget };
            this.parent.notify(menuItemData, args);
            return this.parent.itemData[0];
        }
    }
    /* istanbul ignore next */
    onSelect(args) {
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.item) || !args.item.id) {
            return;
        }
        const itemText = args.item.id.substr((this.parent.element.id + '_cm_').length);
        // eslint-disable-next-line
        let details;
        if (itemText === 'refresh' || itemText === 'newfolder' || itemText === 'upload') {
            details = [getPathObject(this.parent)];
            this.parent.itemData = details;
        }
        else {
            this.parent.notify(selectedData, {});
            if (this.parent.activeModule === 'navigationpane' && itemText === 'open') {
                details = [this.menuItemData];
            }
            else {
                details = this.parent.itemData;
            }
        }
        const eventArgs = {
            cancel: false,
            element: args.element,
            fileDetails: details,
            item: args.item
        };
        this.parent.trigger('menuClick', eventArgs, (menuClickArgs) => {
            let sItems;
            if (!menuClickArgs.cancel) {
                // eslint:disable-next-line
                switch (itemText) {
                    case 'cut':
                        cutFiles(this.parent);
                        break;
                    case 'copy':
                        copyFiles(this.parent);
                        break;
                    case 'paste':
                        if (this.menuType === 'folder') {
                            if ((this.parent.activeModule === 'largeiconsview') || (this.parent.activeModule === 'detailsview')) {
                                this.parent.folderPath = getFullPath(this.parent, this.menuItemData, this.parent.path);
                            }
                            else {
                                this.parent.folderPath = '';
                            }
                        }
                        else {
                            this.parent.folderPath = '';
                        }
                        pasteHandler(this.parent);
                        break;
                    case 'delete':
                        for (let j = 0; j < details.length; j++) {
                            if (!hasEditAccess(details[j])) {
                                createDeniedDialog(this.parent, details[j], permissionEdit);
                                return;
                            }
                        }
                        createDialog(this.parent, 'Delete');
                        break;
                    /* istanbul ignore next */
                    case 'download':
                        for (let i = 0; i < details.length; i++) {
                            if (!hasDownloadAccess(details[i])) {
                                createDeniedDialog(this.parent, details[i], permissionDownload);
                                return;
                            }
                        }
                        if (this.parent.activeModule === 'navigationpane') {
                            this.parent.notify(downloadInit, {});
                        }
                        else if (this.parent.selectedItems.length > 0) {
                            Download(this.parent, this.parent.path, this.parent.selectedItems);
                        }
                        break;
                    case 'rename':
                        if (!hasEditAccess(details[0])) {
                            createDeniedDialog(this.parent, details[0], permissionEdit);
                        }
                        else {
                            this.parent.notify(renameInit, {});
                            createDialog(this.parent, 'Rename');
                        }
                        break;
                    case 'selectall':
                        /* istanbul ignore next */
                        this.parent.notify(selectAllInit, {});
                        break;
                    case 'refresh':
                        refresh(this.parent);
                        break;
                    case 'open':
                        if (this.parent.visitedItem) {
                            this.parent.notify(openInit, { target: this.parent.visitedItem });
                        }
                        else if (this.parent.activeModule === 'navigationpane') {
                            this.parent.navigationpaneModule.openFileOnContextMenuClick((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.targetNodeElement, 'li'));
                        }
                        break;
                    case 'details':
                        this.parent.notify(detailsInit, {});
                        sItems = this.parent.selectedItems;
                        if (this.parent.activeModule === 'navigationpane') {
                            sItems = [];
                        }
                        GetDetails(this.parent, sItems, this.parent.path, 'details');
                        break;
                    case 'newfolder':
                        createNewFolder(this.parent);
                        break;
                    case 'upload':
                        uploadItem(this.parent);
                        break;
                    /* istanbul ignore next */
                    case 'name':
                    /* istanbul ignore next */
                    // eslint-disable-next-line no-fallthrough
                    case 'size':
                    /* istanbul ignore next */
                    // eslint-disable-next-line no-fallthrough
                    case 'date':
                    /* istanbul ignore next */
                    // eslint-disable-next-line no-fallthrough
                    case 'ascending':
                    /* istanbul ignore next */
                    // eslint-disable-next-line no-fallthrough
                    case 'descending':
                        /* istanbul ignore next */
                        sortbyClickHandler(this.parent, args);
                        break;
                    /* istanbul ignore next */
                    case 'none':
                        /* istanbul ignore next */
                        sortbyClickHandler(this.parent, args);
                        break;
                    /* istanbul ignore next */
                    // eslint:disable-next-line
                    case 'largeiconsview':
                        updateLayout(this.parent, 'LargeIcons');
                        break;
                    /* istanbul ignore next */
                    // eslint:disable-next-line
                    case 'detailsview':
                        updateLayout(this.parent, 'Details');
                        break;
                }
            }
        });
    }
    onPropertyChanged(e) {
        if (e.module !== this.getModuleName() && e.module !== 'common') {
            /* istanbul ignore next */
            return;
        }
        for (const prop of Object.keys(e.newProp)) {
            switch (prop) {
                case 'cssClass':
                    this.contextMenu.cssClass = getCssClass(this.parent, ROOT_POPUP);
                    break;
            }
        }
    }
    addEventListener() {
        this.parent.on(destroy, this.destroy, this);
        this.parent.on(modelChanged, this.onPropertyChanged, this);
        this.keyboardModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.KeyboardEvents(this.contextMenu.element, {
            keyAction: this.keyActionHandler.bind(this),
            keyConfigs: this.keyConfigs,
            eventName: 'keydown'
        });
    }
    removeEventListener() {
        this.parent.off(destroy, this.destroy);
        this.parent.off(modelChanged, this.onPropertyChanged);
        this.keyboardModule.destroy();
    }
    keyActionHandler(e) {
        switch (e.action) {
            case 'uparrow':
            case 'downarrow':
                e.preventDefault();
        }
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} - returns the module name.
     * @private
     */
    getModuleName() {
        return 'contextmenu';
    }
    destroy() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.removeEventListener();
        this.contextMenu.destroy();
    }
    /* istanbul ignore next */
    getItemData(data) {
        const items = [];
        for (let i = 0; i < data.length; i++) {
            let item;
            const itemId = this.getMenuId(data[i]);
            const itemText = getLocaleText(this.parent, data[i]);
            switch (data[i]) {
                case '|':
                    item = { separator: true };
                    break;
                case 'Open':
                    item = { id: itemId, text: itemText, iconCss: ICON_OPEN };
                    break;
                case 'Upload':
                    item = { id: itemId, text: itemText, iconCss: ICON_UPLOAD };
                    break;
                case 'Cut':
                    item = { id: itemId, text: itemText, iconCss: ICON_CUT };
                    break;
                case 'Copy':
                    item = { id: itemId, text: itemText, iconCss: ICON_COPY };
                    break;
                case 'Paste':
                    item = { id: itemId, text: itemText, iconCss: ICON_PASTE };
                    break;
                case 'Delete':
                    item = { id: itemId, text: itemText, iconCss: ICON_DELETE };
                    break;
                case 'Rename':
                    item = { id: itemId, text: itemText, iconCss: ICON_RENAME };
                    break;
                case 'NewFolder':
                    item = { id: itemId, text: itemText, iconCss: ICON_NEWFOLDER };
                    break;
                case 'Details':
                    item = { id: itemId, text: itemText, iconCss: ICON_DETAILS };
                    break;
                case 'SortBy':
                    item = {
                        id: itemId, text: itemText, iconCss: ICON_SHORTBY,
                        items: [
                            {
                                id: this.getMenuId('Name'), text: getLocaleText(this.parent, 'Name'),
                                iconCss: this.parent.sortBy === 'name' ? TB_OPTION_DOT : null
                            },
                            {
                                id: this.getMenuId('Size'), text: getLocaleText(this.parent, 'Size'),
                                iconCss: this.parent.sortBy === 'size' ? TB_OPTION_DOT : null
                            },
                            {
                                id: this.getMenuId('Date'), text: getLocaleText(this.parent, 'DateModified'),
                                iconCss: this.parent.sortBy === '_fm_modified' ? TB_OPTION_DOT : null
                            },
                            { separator: true },
                            {
                                id: this.getMenuId('Ascending'), text: getLocaleText(this.parent, 'Ascending'),
                                iconCss: this.parent.sortOrder === 'Ascending' ? TB_OPTION_TICK : null
                            },
                            {
                                id: this.getMenuId('Descending'), text: getLocaleText(this.parent, 'Descending'),
                                iconCss: this.parent.sortOrder === 'Descending' ? TB_OPTION_TICK : null
                            },
                            {
                                id: this.getMenuId('None'), text: getLocaleText(this.parent, 'None'),
                                iconCss: this.parent.sortOrder === 'None' ? TB_OPTION_TICK : null
                            }
                        ]
                    };
                    break;
                /* istanbul ignore next */
                case 'View':
                    item = {
                        id: itemId, text: itemText, iconCss: this.parent.view === 'Details' ? ICON_GRID : ICON_LARGE,
                        items: [
                            {
                                id: this.getMenuId('largeiconsview'), text: getLocaleText(this.parent, 'View-LargeIcons'),
                                iconCss: this.parent.view === 'Details' ? null : TB_OPTION_TICK
                            },
                            {
                                id: this.getMenuId('detailsview'), text: getLocaleText(this.parent, 'View-Details'),
                                iconCss: this.parent.view === 'Details' ? TB_OPTION_TICK : null
                            }
                        ]
                    };
                    break;
                case 'Refresh':
                    item = { id: itemId, text: itemText, iconCss: ICON_REFRESH };
                    break;
                case 'SelectAll':
                    item = { id: itemId, text: itemText, iconCss: ICON_SELECTALL };
                    break;
                /* istanbul ignore next */
                case 'Download':
                    item = { id: itemId, text: itemText, iconCss: ICON_DOWNLOAD };
                    break;
                /* istanbul ignore next */
                default:
                    item = { id: itemId, text: itemText };
                    break;
            }
            items.push(item);
        }
        return items;
    }
    getMenuId(id) {
        return this.parent.element.id + '_cm_' + id.toLowerCase();
    }
}

/**
 * Specifies the default locale of FileManager component
 */
// eslint-disable-next-line
const defaultLocale = {
    'NewFolder': 'New folder',
    'Upload': 'Upload',
    'Delete': 'Delete',
    'Rename': 'Rename',
    'Download': 'Download',
    'Cut': 'Cut',
    'Copy': 'Copy',
    'Paste': 'Paste',
    'SortBy': 'Sort by',
    'Refresh': 'Refresh',
    'Item-Selection': 'item selected',
    'Items-Selection': 'items selected',
    'View': 'View',
    'Details': 'Details',
    'SelectAll': 'Select all',
    'Open': 'Open',
    'Tooltip-NewFolder': 'New folder',
    'Tooltip-Upload': 'Upload',
    'Tooltip-Delete': 'Delete',
    'Tooltip-Rename': 'Rename',
    'Tooltip-Download': 'Download',
    'Tooltip-Cut': 'Cut',
    'Tooltip-Copy': 'Copy',
    'Tooltip-Paste': 'Paste',
    'Tooltip-SortBy': 'Sort by',
    'Tooltip-Refresh': 'Refresh',
    'Tooltip-Selection': 'Clear selection',
    'Tooltip-View': 'View',
    'Tooltip-Details': 'Details',
    'Tooltip-SelectAll': 'Select all',
    'Name': 'Name',
    'Size': 'Size',
    'DateModified': 'Modified',
    'DateCreated': 'Date created',
    'Path': 'Path',
    'Modified': 'Modified',
    'Created': 'Created',
    'Location': 'Location',
    'Type': 'Type',
    'Permission': 'Permission',
    'Ascending': 'Ascending',
    'Descending': 'Descending',
    'None': 'None',
    'View-LargeIcons': 'Large icons',
    'View-Details': 'Details',
    'Search': 'Search',
    'Button-Ok': 'OK',
    'Button-Cancel': 'Cancel',
    'Button-Yes': 'Yes',
    'Button-No': 'No',
    'Button-Create': 'Create',
    'Button-Save': 'Save',
    'Header-NewFolder': 'Folder',
    'Content-NewFolder': 'Enter your folder name',
    'Header-Rename': 'Rename',
    'Content-Rename': 'Enter your new name',
    'Header-Rename-Confirmation': 'Rename Confirmation',
    'Content-Rename-Confirmation': 'If you change a file name extension, the file might become unstable. ' +
        'Are you sure you want to change it?',
    'Header-Delete': 'Delete File',
    'Content-Delete': 'Are you sure you want to delete this file?',
    'Header-Folder-Delete': 'Delete Folder',
    'Content-Folder-Delete': 'Are you sure you want to delete this folder?',
    'Header-Multiple-Delete': 'Delete Multiple Items',
    'Content-Multiple-Delete': 'Are you sure you want to delete these {0} items?',
    'Header-Duplicate': 'File/Folder exists',
    'Content-Duplicate': '{0} already exists. Do you want to rename and paste?',
    'Header-Upload': 'Upload Files',
    'Error': 'Error',
    'Validation-Empty': 'The file or folder name cannot be empty.',
    'Validation-Invalid': 'The file or folder name {0} contains invalid characters. Please use a different name. ' +
        // eslint-disable-next-line no-useless-escape
        'Valid file or folder names cannot end with a dot or space, and cannot contain any of the following characters: \\/:*?\"<>|',
    'Validation-NewFolder-Exists': 'A file or folder with the name {0} already exists.',
    'Validation-Rename-Exists': 'Cannot rename {0} to {1}: destination already exists.',
    'Folder-Empty': 'This folder is empty',
    'File-Upload': 'Drag files here to upload',
    'Search-Empty': 'No results found',
    'Search-Key': 'Try with different keywords',
    'Filter-Empty': 'No results found',
    'Filter-Key': 'Try with different filter',
    'Sub-Folder-Error': 'The destination folder is the subfolder of the source folder.',
    'Same-Folder-Error': 'The destination folder is the same as the source folder.',
    'Access-Denied': 'Access Denied',
    'Access-Details': 'You don"t have permission to access this folder.',
    'Header-Retry': 'File Already Exists',
    'Content-Retry': 'A file with this name already exists in this folder. What would you like to do?',
    'Button-Keep-Both': 'Keep both',
    'Button-Replace': 'Replace',
    'Button-Skip': 'Skip',
    'ApplyAll-Label': 'Do this for all current items',
    'KB': 'KB',
    'Access-Message': '{0} is not accessible. You need permission to perform the {1} action.',
    'Network-Error': 'NetworkError: Failed to send on XMLHTTPRequest: Failed to load',
    'Server-Error': 'ServerError: Invalid response from'
};

var __decorate$8 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FileManager_1;
/**
 * The FileManager component allows users to access and manage the file system through the web  browser. It can performs the
 * functionalities like add, rename, search, sort, upload and delete files or folders. And also it
 * provides an easy way of  dynamic injectable modules like toolbar, navigationpane, detailsview, largeiconsview.
 * ```html
 *  <div id="file"></div>
 * ```
 * ```typescript,
 *  let feObj: FileManager = new FileManager();
 *  feObj.appendTo('#file');
 * ```
 */
let FileManager = FileManager_1 = class FileManager extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Component {
    constructor(options, element) {
        super(options, element);
        // eslint-disable-next-line
        this.filterData = null;
        this.selectedNodes = [];
        this.duplicateItems = [];
        // eslint-disable-next-line
        this.duplicateRecords = [];
        this.previousPath = [];
        this.nextPath = [];
        this.isLayoutChange = false;
        this.layoutSelectedItems = [];
        this.renamedId = null;
        this.uploadItem = [];
        this.deleteRecords = [];
        this.isFile = false;
        this.sortBy = 'name';
        this.isCut = false;
        this.isSearchCut = false;
        this.isSearchDrag = false;
        this.isPasteError = false;
        this.folderPath = '';
        this.isSameAction = false;
        this.isFiltered = false;
        // Specifies whether the sort by option is clicked or not.
        this.isSortByClicked = false;
        this.enablePaste = false;
        this.persistData = false;
        this.retryArgs = [];
        this.isOpened = false;
        this.isRetryOpened = false;
        this.isPathDrag = false;
        // eslint-disable-next-line
        this.searchedItems = [];
        this.retryFiles = [];
        this.isApplySame = false;
        // eslint-disable-next-line
        this.dragData = [];
        this.dragNodes = [];
        this.dragPath = '';
        this.dropPath = '';
        this.isDragDrop = false;
        this.treeExpandTimer = null;
        this.dragCursorPosition = { left: 44, top: 18 };
        this.isDropEnd = false;
        this.dragCount = 0;
        // eslint-disable-next-line
        this.droppedObjects = [];
        this.uploadingCount = 0;
        this.uploadedCount = 0;
        FileManager_1.Inject(BreadCrumbBar, LargeIconsView, ContextMenu$2);
    }
    /**
     * Get component name.
     *
     * @returns {string} - returns module name.
     * @private
     */
    getModuleName() {
        return 'filemanager';
    }
    /**
     * Initialize the event handler
     *
     * @returns {void}
     */
    preRender() {
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.element.id) || this.element.id === '') {
            this.element.setAttribute('id', (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getUniqueID)('filemanager'));
        }
        this.ensurePath();
        this.feParent = [];
        this.feFiles = [];
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(this.element, { 'width': (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(this.width), 'height': (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(this.height) });
        this.isDevice = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice;
        this.isMobile = this.checkMobile();
        if (this.isMobile) {
            this.setProperties({ navigationPaneSettings: { visible: false } }, true);
        }
        const ele = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.element, '.e-bigger');
        this.isBigger = ele ? true : false;
        this.activeModule = (this.view === 'LargeIcons') ? 'largeiconsview' : 'detailsview';
        (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.createSpinner)({ target: this.element }, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement);
        this.addWrapper();
        this.keyConfigs = {
            altN: 'alt+n',
            f5: 'f5',
            ctrlShift1: 'ctrl+shift+1',
            ctrlShift2: 'ctrl+shift+2',
            ctrlU: 'ctrl+u'
        };
        this.localeObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.L10n(this.getModuleName(), defaultLocale, this.locale);
    }
    /**
     * Gets the properties to be maintained upon browser refresh.
     *
     * @returns {string} - returns the persisted data.
     * @hidden
     */
    getPersistData() {
        const keyEntity = ['view', 'path', 'selectedItems'];
        return this.addOnPersist(keyEntity);
    }
    /**
     * To provide the array of modules needed for component rendering
     *
     * @returns {ModuleDeclaration[]} - returns module declaration.
     * @hidden
     */
    requiredModules() {
        const modules = [];
        modules.push({
            member: 'breadcrumbbar',
            args: [this]
        });
        modules.push({
            member: 'largeiconsview',
            args: [this]
        });
        if (this.toolbarSettings.visible) {
            modules.push({
                member: 'toolbar',
                args: [this]
            });
        }
        if (this.navigationPaneSettings.visible) {
            modules.push({
                member: 'navigationpane',
                args: [this]
            });
        }
        if (this.view) {
            modules.push({
                member: 'detailsview',
                args: [this]
            });
        }
        if (this.contextMenuSettings.visible && !this.isDevice) {
            modules.push({
                member: 'contextmenu',
                args: [this]
            });
        }
        return modules;
    }
    /**
     * To Initialize the control rendering
     *
     * @private
     * @returns {void}
     */
    render() {
        this.initialize();
        const slItems = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.selectedItems) ? [] :
            this.allowMultiSelection ? this.selectedItems : this.selectedItems.slice(this.selectedItems.length - 1);
        this.setProperties({ selectedItems: slItems }, true);
        this.fileView = this.view;
        this.setRtl(this.enableRtl);
        this.addEventListeners();
        read(this, (this.path !== this.originalPath) ? initialEnd : finalizeEnd, this.path);
        this.adjustHeight();
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.navigationpaneModule)) {
            this.splitterObj.collapse(this.enableRtl ? 1 : 0);
            const bar = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + SPLIT_BAR, this.element);
            bar.classList.add(DISPLAY_NONE);
        }
        this.wireEvents();
        this.renderComplete();
    }
    ensurePath() {
        let currentPath = this.path;
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentPath)) {
            currentPath = '/';
        }
        if (currentPath.lastIndexOf('/') !== (currentPath.length - 1)) {
            currentPath = currentPath + '/';
        }
        this.originalPath = currentPath;
        const paths = currentPath.split('/');
        this.setProperties({ path: paths[0] + '/' }, true);
        this.pathNames = [];
        this.pathId = ['fe_tree'];
        this.itemData = [];
    }
    initialize() {
        if (this.isMobile) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], MOBILE);
        }
        if (this.allowMultiSelection) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], CHECK_SELECT);
        }
        this.addCssClass(null, this.cssClass);
        this.renderFileUpload();
    }
    addWrapper() {
        const headerWrap = this.createElement('div', { id: this.element.id + TOOLBAR_ID });
        this.element.appendChild(headerWrap);
        const layoutWrap = this.createElement('div', {
            id: this.element.id + LAYOUT_ID, className: LAYOUT
        });
        this.element.appendChild(layoutWrap);
        const navigationWrap = this.createElement('div', {
            id: this.element.id + NAVIGATION_ID, className: NAVIGATION
        });
        const treeWrap = this.createElement('div', {
            id: this.element.id + TREE_ID
        });
        navigationWrap.appendChild(treeWrap);
        const contentWrap = this.createElement('div', {
            id: this.element.id + CONTENT_ID, className: LAYOUT_CONTENT
        });
        this.breadCrumbBarNavigation = this.createElement('div', {
            id: this.element.id + BREADCRUMBBAR_ID,
            className: BREADCRUMBS
        });
        contentWrap.appendChild(this.breadCrumbBarNavigation);
        const gridWrap = this.createElement('div', {
            id: this.element.id + GRID_ID
        });
        contentWrap.appendChild(gridWrap);
        const largeiconWrap = this.createElement('div', {
            id: this.element.id + LARGEICON_ID,
            className: LARGE_ICONS, attrs: { 'role': 'group' }
        });
        contentWrap.appendChild(largeiconWrap);
        const overlay = this.createElement('span', { className: OVERLAY });
        contentWrap.appendChild(overlay);
        let paneSettings;
        if (!this.enableRtl) {
            layoutWrap.appendChild(navigationWrap);
            layoutWrap.appendChild(contentWrap);
            paneSettings = [
                {
                    size: '25%', min: this.navigationPaneSettings.minWidth.toString(),
                    max: this.navigationPaneSettings.maxWidth.toString()
                },
                { size: '75%', min: '270px' }
            ];
        }
        else {
            layoutWrap.appendChild(contentWrap);
            layoutWrap.appendChild(navigationWrap);
            paneSettings = [
                { size: '75%', min: '270px' },
                {
                    size: '25%', min: this.navigationPaneSettings.minWidth.toString(),
                    max: this.navigationPaneSettings.maxWidth.toString()
                }
            ];
        }
        this.splitterObj = new _syncfusion_ej2_layouts__WEBPACK_IMPORTED_MODULE_8__.Splitter({
            paneSettings: paneSettings,
            width: '100%',
            enableRtl: false,
            enableHtmlSanitizer: this.enableHtmlSanitizer,
            resizing: this.splitterResize.bind(this)
        });
        this.splitterObj.isStringTemplate = true;
        this.splitterObj.appendTo(layoutWrap);
        const dialogWrap = this.createElement('div', { id: this.element.id + DIALOG_ID });
        this.element.appendChild(dialogWrap);
        const menuWrap = this.createElement('ul', { id: this.element.id + CONTEXT_MENU_ID });
        this.element.appendChild(menuWrap);
        const dialogImgWrap = this.createElement('div', { id: this.element.id + IMG_DIALOG_ID });
        this.element.appendChild(dialogImgWrap);
        const extnDialogWrap = this.createElement('div', { id: this.element.id + EXTN_DIALOG_ID });
        this.element.appendChild(extnDialogWrap);
        const uploadDialogWrap = this.createElement('div', { id: this.element.id + UPLOAD_DIALOG_ID });
        this.element.appendChild(uploadDialogWrap);
    }
    adjustHeight() {
        const toolbar = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.element.id + TOOLBAR_ID, this.element);
        const toolBarHeight = toolbar ? toolbar.offsetHeight : 0;
        if (this.splitterObj) {
            this.splitterObj.height = (this.element.clientHeight - toolBarHeight).toString();
            this.splitterObj.dataBind();
        }
    }
    /* istanbul ignore next */
    splitterResize() {
        this.notify(splitterResize, {});
    }
    splitterAdjust() {
        const bar = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + SPLIT_BAR, this.element);
        if (this.navigationPaneSettings.visible) {
            this.splitterObj.expand(this.enableRtl ? 1 : 0);
            bar.classList.remove(DISPLAY_NONE);
        }
        else {
            this.splitterObj.collapse(this.enableRtl ? 1 : 0);
            bar.classList.add(DISPLAY_NONE);
        }
    }
    addCssClass(oldOne, newOne) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(oldOne) && oldOne !== '') {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], oldOne.split(' '));
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newOne) && newOne !== '') {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], newOne.split(' '));
        }
    }
    showSpinner() {
        (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.showSpinner)(this.element);
    }
    hideSpinner() {
        (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.hideSpinner)(this.element);
    }
    onContextMenu(e) {
        e.preventDefault();
    }
    checkMobile() {
        return (/iphone|ipod|android|blackberry|opera|mini|windows\sce|palm|smartphone|iemobile/i.test(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.userAgent.toLowerCase())
            && /mobile/i.test(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.userAgent.toLowerCase()));
    }
    renderFileUpload() {
        const id = this.element.id + UPLOAD_ID;
        const uploadEle = this.createElement('input', { id: id, attrs: { name: 'uploadFiles', type: 'file' } });
        this.element.appendChild(uploadEle);
        this.uploadDialogObj = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.Dialog({
            header: getLocaleText(this, 'Header-Upload'),
            content: uploadEle,
            animationSettings: { effect: 'None' },
            showCloseIcon: true,
            closeOnEscape: true,
            visible: false,
            isModal: true,
            width: '350px',
            target: this.popupTarget ? this.popupTarget : '#' + this.element.id,
            cssClass: getCssClass(this, this.isMobile ? MOB_POPUP : ROOT_POPUP),
            locale: this.locale,
            allowDragging: true,
            position: { X: 'center', Y: 'center' },
            enableRtl: this.enableRtl,
            enableHtmlSanitizer: this.enableHtmlSanitizer,
            open: this.onOpen.bind(this),
            close: this.onClose.bind(this),
            beforeOpen: this.onBeforeOpen.bind(this),
            beforeClose: this.onBeforeClose.bind(this)
        });
        this.uploadDialogObj.appendTo('#' + this.element.id + UPLOAD_DIALOG_ID);
        this.renderUploadBox();
    }
    renderUploadBox() {
        const uploadUrl = this.ajaxSettings.uploadUrl ? this.ajaxSettings.uploadUrl : this.ajaxSettings.url;
        this.uploadObj = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_4__.Uploader({
            dropArea: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.element.id + CONTENT_ID, this.element),
            asyncSettings: {
                saveUrl: uploadUrl,
                removeUrl: uploadUrl
            },
            locale: this.locale,
            enableRtl: this.enableRtl,
            uploading: this.onUploading.bind(this),
            removing: this.onRemoving.bind(this),
            canceling: this.onCancel.bind(this),
            clearing: this.onClearing.bind(this),
            selected: this.onSelected.bind(this),
            success: this.onUploadSuccess.bind(this),
            failure: this.onUploadFailure.bind(this),
            autoUpload: this.uploadSettings.autoUpload,
            minFileSize: this.uploadSettings.minFileSize,
            maxFileSize: this.uploadSettings.maxFileSize,
            allowedExtensions: this.uploadSettings.allowedExtensions,
            fileListRendering: this.onFileListRender.bind(this)
        });
        this.uploadObj.appendTo('#' + this.element.id + UPLOAD_ID);
    }
    onFileListRender(args) {
        this.trigger('uploadListCreate', args);
    }
    updateUploader() {
        this.uploadObj.autoUpload = this.uploadSettings.autoUpload;
        this.uploadObj.minFileSize = this.uploadSettings.minFileSize;
        this.uploadObj.maxFileSize = this.uploadSettings.maxFileSize;
        this.uploadObj.allowedExtensions = this.uploadSettings.allowedExtensions;
        this.uploadObj.dataBind();
    }
    onBeforeOpen(args) {
        const eventArgs = {
            cancel: args.cancel, popupName: 'Upload', popupModule: this.uploadDialogObj
        };
        this.trigger('beforePopupOpen', eventArgs, (eventargs) => {
            args.cancel = eventargs.cancel;
        });
    }
    onBeforeClose(args) {
        const eventArgs = {
            cancel: args.cancel, popupName: 'Upload', popupModule: this.uploadDialogObj
        };
        this.trigger('beforePopupClose', eventArgs, (eventargs) => {
            args.cancel = eventargs.cancel;
        });
    }
    onOpen() {
        this.isOpened = true;
        this.uploadDialogObj.element.focus();
        const args = {
            popupModule: this.uploadDialogObj, popupName: 'Upload',
            element: this.uploadDialogObj.element
        };
        this.trigger('popupOpen', args);
    }
    onClose() {
        this.isOpened = false;
        this.uploadObj.clearAll();
        const args = {
            popupModule: this.uploadDialogObj, popupName: 'Upload',
            element: this.uploadDialogObj.element
        };
        this.trigger('popupClose', args);
    }
    /* istanbul ignore next */
    onUploading(args) {
        let action = 'save';
        if ((this.retryArgs.length !== 0)) {
            for (let i = 0; i < this.retryArgs.length; i++) {
                if (args.fileData.name === this.retryArgs[i].file.name) {
                    action = this.retryArgs[i].action;
                    this.retryArgs.splice(i, 1);
                    i = this.retryArgs.length;
                }
            }
        }
        const data = JSON.stringify((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.pathId[this.pathId.length - 1], this.feParent));
        args.customFormData = [{ 'path': this.path }, { 'action': action }, { 'data': data }];
        const uploadUrl = this.ajaxSettings.uploadUrl ? this.ajaxSettings.uploadUrl : this.ajaxSettings.url;
        // eslint-disable-next-line
        const ajaxSettings = {
            url: uploadUrl,
            type: 'POST',
            mode: true,
            dataType: null,
            contentType: null,
            data: JSON.stringify(args.customFormData),
            onSuccess: null,
            onFailure: null,
            beforeSend: null
        };
        this.uploadEventArgs = { action: 'Upload', ajaxSettings: ajaxSettings, cancel: false };
        this.trigger('beforeSend', this.uploadEventArgs, (uploadEventArgs) => {
            args.customFormData = JSON.parse((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('data', uploadEventArgs.ajaxSettings));
            args.cancel = uploadEventArgs.cancel;
            // eslint-disable-next-line
            const eventArgs = {
                cancel: false,
                httpRequest: args.currentRequest
            };
            if (typeof (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('beforeSend', uploadEventArgs.ajaxSettings) === 'function') {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('beforeSend', uploadEventArgs.ajaxSettings)(eventArgs);
                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('cancel', eventArgs)) {
                    args.cancel = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('cancel', eventArgs);
                }
            }
        });
    }
    onRemoving() {
        this.onFileUploadSuccess({ count: 1 });
        if (this.uploadObj.getFilesData().length === 1) {
            this.uploadDialogObj.hide();
        }
    }
    /* istanbul ignore next */
    onCancel(args) {
        const data = JSON.stringify((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.pathId[this.pathId.length - 1], this.feParent));
        args.customFormData = [{ 'path': this.path }, { 'action': 'remove' }, { 'data': data }];
    }
    /* istanbul ignore next */
    onClearing() {
        if (this.isOpened) {
            this.uploadDialogObj.hide();
        }
    }
    /* istanbul ignore next */
    onSelected(args) {
        if (args.filesData.length === 0) {
            return;
        }
        this.uploadingCount = args.filesData.length;
        this.uploadedCount = 0;
        // eslint-disable-next-line
        const details = getPathObject(this);
        if (!hasUploadAccess(details)) {
            args.cancel = true;
            createDeniedDialog(this, details, permissionUpload);
            return;
        }
        this.uploadDialogObj.show();
    }
    // eslint-disable-next-line
    onFileUploadSuccess(args) {
        this.uploadedCount = this.uploadedCount + args.count;
        if (this.uploadSettings.autoClose && (this.uploadingCount === this.uploadedCount)) {
            this.uploadDialogObj.hide();
        }
    }
    /* istanbul ignore next */
    // eslint-disable-next-line
    onUploadSuccess(files) {
        const args = { action: 'Upload', result: files };
        this.trigger('success', args);
        this.itemData = [(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.pathId[this.pathId.length - 1], this.feParent)];
        read(this, pathChanged, this.path);
        this.onFileUploadSuccess({ count: 1 });
        if (typeof (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('onSuccess', this.uploadEventArgs.ajaxSettings) === 'function') {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('onSuccess', this.uploadEventArgs.ajaxSettings)();
        }
    }
    /* istanbul ignore next */
    // eslint-disable-next-line
    onUploadFailure(files) {
        // eslint-disable-next-line
        const response = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('response', files);
        const statusText = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('statusText', response);
        if (statusText !== '') {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('statusText', statusText, files);
        }
        const args = { action: 'Upload', error: files };
        this.trigger('failure', args);
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('statusCode', response) === 400) {
            this.retryFiles.push((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('file', files));
            if (!this.isRetryOpened) {
                createExtDialog(this, 'UploadRetry');
            }
        }
        if (typeof (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('onFailure', this.uploadEventArgs.ajaxSettings) === 'function') {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('onFailure', this.uploadEventArgs.ajaxSettings)();
        }
    }
    onInitialEnd() {
        setNextPath(this, this.path);
    }
    addEventListeners() {
        this.on(beforeRequest, this.showSpinner, this);
        this.on(afterRequest, this.hideSpinner, this);
        this.on(initialEnd, this.onInitialEnd, this);
        this.on(detailsInit, this.onDetailsInit, this);
        this.on(skipUpload, this.onFileUploadSuccess, this);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'contextmenu', this.onContextMenu, this);
    }
    removeEventListeners() {
        if (this.isDestroyed) {
            return;
        }
        this.off(beforeRequest, this.showSpinner);
        this.off(afterRequest, this.hideSpinner);
        this.off(initialEnd, this.onInitialEnd);
        this.off(detailsInit, this.onDetailsInit);
        this.off(skipUpload, this.onFileUploadSuccess);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.element, 'contextmenu', this.onContextMenu);
    }
    onDetailsInit() {
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.activeModule)) {
            this.itemData = [(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.pathId[this.pathId.length - 1], this.feParent)];
        }
    }
    resizeHandler() {
        this.adjustHeight();
        this.notify(resizeEnd, {});
    }
    keyActionHandler(e) {
        let uploadEle;
        switch (e.action) {
            case 'altN':
                e.preventDefault();
                this.itemData = [getPathObject(this)];
                if (!hasContentAccess(this.itemData[0])) {
                    createDeniedDialog(this, this.itemData[0], permissionEditContents);
                }
                else {
                    createDialog(this, 'NewFolder');
                }
                break;
            case 'f5':
                e.preventDefault();
                refresh(this);
                break;
            /* istanbul ignore next */
            case 'ctrlShift1':
                e.preventDefault();
                this.fileView = 'Details';
                this.setProperties({ view: 'Details' }, true);
                (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.showSpinner)(this.element);
                updateLayout(this, 'Details');
                break;
            /* istanbul ignore next */
            case 'ctrlShift2':
                e.preventDefault();
                this.fileView = 'LargeIcons';
                this.setProperties({ view: 'LargeIcons' }, true);
                (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.showSpinner)(this.element);
                updateLayout(this, 'LargeIcons');
                break;
            case 'ctrlU':
                e.preventDefault();
                uploadEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.element.id + UPLOAD_ID, this.element);
                uploadEle.click();
                break;
        }
    }
    wireEvents() {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(window, 'resize', this.resizeHandler, this);
        this.keyboardModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.KeyboardEvents(this.element, {
            keyAction: this.keyActionHandler.bind(this),
            keyConfigs: this.keyConfigs,
            eventName: 'keydown'
        });
    }
    unWireEvents() {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(window, 'resize', this.resizeHandler);
        this.keyboardModule.destroy();
    }
    setPath() {
        this.setProperties({ selectedItems: [] }, true);
        this.ensurePath();
        this.notify(clearPathInit, { selectedNode: this.pathId[0] });
        read(this, (this.path !== this.originalPath) ? initialEnd : finalizeEnd, this.path);
    }
    /**
     * Called internally if any of the property value changed.
     *
     * @param  {FileManager} newProp
     * @param  {FileManager} oldProp
     * @returns void
     * @private
     */
    /* istanbul ignore next */
    // eslint:disable-next-line
    onPropertyChanged(newProp, oldProp) {
        let height;
        for (const prop of Object.keys(newProp)) {
            switch (prop) {
                case 'ajaxSettings':
                    this.ajaxSettingSetModel(newProp);
                    break;
                case 'allowDragAndDrop':
                    this.allowDragAndDrop = newProp.allowDragAndDrop;
                    this.notify(modelChanged, { module: 'common', newProp: newProp, oldProp: oldProp });
                    break;
                case 'allowMultiSelection':
                    if (this.allowMultiSelection) {
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], CHECK_SELECT);
                    }
                    else {
                        if (this.selectedItems.length > 1) {
                            this.setProperties({ selectedItems: this.selectedItems.slice(this.selectedItems.length - 1) }, true);
                        }
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], CHECK_SELECT);
                    }
                    this.notify(modelChanged, { module: 'common', newProp: newProp, oldProp: oldProp });
                    break;
                case 'cssClass':
                    this.addCssClass(oldProp.cssClass, newProp.cssClass);
                    this.notify(modelChanged, { module: 'common', newProp: newProp, oldProp: oldProp });
                    break;
                case 'detailsViewSettings':
                    this.notify(modelChanged, { module: 'detailsview', newProp: newProp, oldProp: oldProp });
                    break;
                case 'enableRtl':
                    this.enableRtl = newProp.enableRtl;
                    this.refresh();
                    break;
                case 'rootAliasName':
                    this.rootAliasName = newProp.rootAliasName;
                    this.refresh();
                    break;
                case 'height':
                    height = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newProp.height) ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(newProp.height) : newProp.height;
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(this.element, { 'height': height });
                    this.adjustHeight();
                    this.notify(modelChanged, { module: 'common', newProp: newProp, oldProp: oldProp });
                    break;
                case 'locale':
                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newProp.enableRtl)) {
                        this.setProperties({ enableRtl: newProp.enableRtl }, true);
                    }
                    this.localeSetModelOption(newProp);
                    break;
                case 'navigationPaneSettings':
                    this.splitterAdjust();
                    this.notify(modelChanged, { module: 'navigationpane', newProp: newProp, oldProp: oldProp });
                    break;
                case 'path':
                    this.setPath();
                    break;
                case 'searchSettings':
                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newProp.searchSettings.allowSearchOnTyping)) {
                        this.setProperties({ searchSettings: { allowSearchOnTyping: newProp.searchSettings.allowSearchOnTyping } }, true);
                    }
                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newProp.searchSettings.ignoreCase)) {
                        this.setProperties({ searchSettings: { ignoreCase: newProp.searchSettings.ignoreCase } }, true);
                    }
                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newProp.searchSettings.filterType)) {
                        this.setProperties({ searchSettings: { filterType: newProp.searchSettings.filterType } }, true);
                    }
                    this.notify(modelChanged, { module: 'breadcrumbbar', newProp: newProp, oldProp: oldProp });
                    break;
                case 'selectedItems':
                    if (this.view === 'Details') {
                        this.notify(modelChanged, { module: 'detailsview', newProp: newProp, oldProp: oldProp });
                    }
                    else if (this.view === 'LargeIcons') {
                        this.notify(modelChanged, { module: 'largeiconsview', newProp: newProp, oldProp: oldProp });
                    }
                    break;
                case 'showFileExtension':
                    this.notify(modelChanged, { module: 'common', newProp: newProp, oldProp: oldProp });
                    break;
                case 'showHiddenItems':
                    this.notify(modelChanged, { module: 'common', newProp: newProp, oldProp: oldProp });
                    break;
                case 'showThumbnail':
                    this.notify(modelChanged, { module: 'largeiconsview', newProp: newProp, oldProp: oldProp });
                    break;
                case 'toolbarSettings':
                    this.adjustHeight();
                    this.notify(modelChanged, { module: 'toolbar', newProp: newProp, oldProp: oldProp });
                    break;
                case 'uploadSettings':
                    this.updateUploader();
                    break;
                case 'view':
                    if (newProp.view === 'Details') {
                        this.notify(modelChanged, { module: 'detailsview', newProp: newProp, oldProp: oldProp });
                    }
                    else if (newProp.view === 'LargeIcons') {
                        this.notify(modelChanged, { module: 'largeiconsview', newProp: newProp, oldProp: oldProp });
                    }
                    break;
                case 'width':
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(this.element, { 'width': !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newProp.width) ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(newProp.width) : newProp.width });
                    this.notify(modelChanged, { module: 'common', newProp: newProp, oldProp: oldProp });
                    break;
                case 'sortOrder':
                    refresh(this);
                    this.notify(sortByChange, {});
                    break;
                case 'popupTarget':
                    if (this.uploadDialogObj) {
                        this.uploadDialogObj.target = newProp.popupTarget;
                    }
                    if (this.dialogObj) {
                        this.dialogObj.target = newProp.popupTarget;
                    }
                    if (this.extDialogObj) {
                        this.extDialogObj.target = newProp.popupTarget;
                    }
                    if (this.viewerObj) {
                        this.viewerObj.target = newProp.popupTarget;
                    }
                    break;
            }
        }
    }
    /* istanbul ignore next */
    ajaxSettingSetModel(newProp) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newProp.ajaxSettings.url)) {
            this.setProperties({ ajaxSettings: { url: newProp.ajaxSettings.url } }, true);
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newProp.ajaxSettings.uploadUrl)) {
            this.setProperties({ ajaxSettings: { uploadUrl: newProp.ajaxSettings.uploadUrl } }, true);
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newProp.ajaxSettings.downloadUrl)) {
            this.setProperties({ ajaxSettings: { downloadUrl: newProp.ajaxSettings.downloadUrl } }, true);
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newProp.ajaxSettings.getImageUrl)) {
            this.setProperties({ ajaxSettings: { getImageUrl: newProp.ajaxSettings.getImageUrl } }, true);
        }
        this.setProperties({ path: '/' }, true);
        this.setProperties({ selectedItems: [] }, true);
        super.refresh();
    }
    /* istanbul ignore next */
    localeSetModelOption(newProp) {
        this.uploadObj.locale = newProp.locale;
        super.refresh();
    }
    /**
     * Triggers when the component is destroyed.
     *
     * @returns {void}
     */
    destroy() {
        if (this.isDestroyed) {
            return;
        }
        if (!this.refreshing) {
            this.notify(destroy, {});
        }
        this.uploadObj.destroy();
        this.uploadObj = null;
        this.uploadDialogObj.destroy();
        this.uploadDialogObj = null;
        this.splitterObj.destroy();
        this.splitterObj = null;
        if (this.dialogObj) {
            this.dialogObj.destroy();
            this.dialogObj = null;
        }
        if (this.viewerObj) {
            this.viewerObj.destroy();
            this.viewerObj = null;
        }
        if (this.extDialogObj) {
            this.extDialogObj.destroy();
            this.extDialogObj = null;
        }
        this.element.removeAttribute('style');
        this.element.removeAttribute('tabindex');
        this.removeEventListeners();
        this.unWireEvents();
        this.addCssClass(this.cssClass, null);
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], [RTL, MOBILE, CHECK_SELECT]);
        this.element.innerHTML = '';
        super.destroy();
    }
    /**
     * Creates a new folder in file manager.
     *
     * @param {string} name – Specifies the name of new folder in current path.
     * If it is not specified, then the default new folder dialog will be opened.
     * @returns {void}
     */
    createFolder(name) {
        this.notify(methodCall, { action: 'createFolder' });
        // eslint-disable-next-line
        const details = [getPathObject(this)];
        this.itemData = details;
        if (name) {
            if (/[/\\|*?"<>:]/.test(name)) {
                const result = {
                    files: null,
                    error: {
                        code: '402',
                        message: getLocaleText(this, 'Validation-Invalid').replace('{0}', '"' + name + '"'),
                        fileExists: null
                    }
                };
                createDialog(this, 'Error', result);
            }
            else {
                if (!hasContentAccess(details[0])) {
                    createDeniedDialog(this, details[0], permissionEditContents);
                }
                else {
                    createFolder(this, name);
                }
            }
        }
        else {
            createNewFolder(this);
        }
    }
    /**
     * Deletes the folders or files from the given unique identifiers.
     *
     * @param {string} ids - Specifies the name of folders or files in current path. If you want to delete the nested level folders or
     * files, then specify the filter path along with name of the folders or files when performing the search or custom filtering.
     * For ID based file provider, specify the unique identifier of folders or files.
     * If it is not specified, then delete confirmation dialog will be opened for selected item.
     *
     * @returns {void}
     */
    deleteFiles(ids) {
        this.notify(methodCall, { action: 'deleteFiles', ids: ids });
    }
    /**
     * Disables the specified toolbar items of the file manager.
     *
     * @param {string[]} items - Specifies an array of items to be disabled.
     * @returns {void}
     */
    disableToolbarItems(items) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(items)) {
            this.toolbarModule.enableItems(items, false);
        }
    }
    /**
     * Downloads the folders or files from the given unique identifiers.
     *
     * @param {string} ids - Specifies the name of folders or files in current path. If you want to download the nested level folders
     * or files, then specify the filter path along with name of the folders or files when performing search or custom filtering.
     * For ID based file provider, specify the unique identifier of folders or files.
     * If it is not specified, then the selected items will be downloaded.
     *
     * @returns {void}
     */
    downloadFiles(ids) {
        this.notify(methodCall, { action: 'downloadFiles', ids: ids });
    }
    /**
     * Enables the specified toolbar items of the file manager.
     *
     * @param {string[]} items - Specifies an array of items to be enabled.
     * @returns {void}
     */
    enableToolbarItems(items) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(items)) {
            this.toolbarModule.enableItems(items, true);
        }
    }
    /**
     * Disables the specified context menu items in file manager. This method is used only in the menuOpen event.
     *
     * @param {string[]} items - Specifies an array of items to be disabled.
     * @returns {void}
     */
    disableMenuItems(items) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(items) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.contextmenuModule.contextMenu)) {
            this.contextmenuModule.disableItem(items);
        }
    }
    /**
     * Returns the index position of given current context menu item in file manager.
     *
     * @param {string} item - Specifies an item to get the index position.
     * @returns {number} - returns menu item index.
     */
    getMenuItemIndex(item) {
        if (this.contextmenuModule) {
            return this.contextmenuModule.getItemIndex(item);
        }
        else {
            return -1;
        }
    }
    /**
     * Returns the index position of given toolbar item in file manager.
     *
     * @param {string} item - Specifies an item to get the index position.
     * @returns {number} - returns toolbar item index.
     */
    getToolbarItemIndex(item) {
        if (this.toolbarModule) {
            return this.toolbarModule.getItemIndex(item);
        }
        else {
            return -1;
        }
    }
    /**
     * Display the custom filtering files in file manager.
     *
     * @param {Object} filterData - Specifies the custom filter details along with custom file action name,
     * which needs to be sent to the server side. If you do not specify the details, then default action name will be `filter`.
     *
     * @returns {void}
     */
    // eslint-disable-next-line
    filterFiles(filterData) {
        this.filterData = filterData ? filterData : null;
        this.setProperties({ selectedItems: [] }, true);
        this.notify(selectionChanged, {});
        this.isFiltered = true;
        if (this.breadcrumbbarModule.searchObj.element.value !== '') {
            this.breadcrumbbarModule.searchObj.element.value = '';
        }
        filter(this, filterEnd);
    }
    /**
     * Gets the details of the selected files in the file manager.
     *
     * @returns {Object[]} - returns selected files.
     */
    // eslint-disable-next-line
    getSelectedFiles() {
        this.notify(updateSelectionData, {});
        return this.itemData;
    }
    /**
     * Opens the corresponding file or folder from the given unique identifier.
     *
     * @param {string} id - Specifies the name of folder or file in current path. If you want to open the nested level folder or
     * file, then specify the filter path along with name of the folder or file when performing search or custom filtering. For ID based
     * file provider, specify the unique identifier of folder or file.
     *
     * @returns {void}
     */
    openFile(id) {
        this.notify(methodCall, { action: 'openFile', id: id });
    }
    /**
     * Refreshes the folder files of the file manager.
     *
     * @returns {void}
     */
    refreshFiles() {
        refresh(this);
    }
    /**
     * Refreshes the layout of the file manager.
     *
     * @returns {void}
     */
    refreshLayout() {
        this.adjustHeight();
        this.notify(layoutRefresh, {});
    }
    /**
     * Selects the entire folders and files in current path.
     *
     * @returns {void}
     */
    selectAll() {
        this.notify(methodCall, { action: 'selectAll' });
    }
    /**
     * Deselects the currently selected folders and files in current path.
     *
     * @returns {void}
     */
    clearSelection() {
        this.notify(methodCall, { action: 'clearSelection' });
    }
    /**
     * Renames the file or folder with given new name in file manager.
     *
     * @param {string} id - Specifies the name of folder or file in current path. If you want to rename the nested level folder or
     * file, then specify the filter path along with name of the folder or file when performing search or custom filtering. For ID based
     * file provider, specify the unique identifier of folder or file.
     * If it is not specified, then rename dialog will be opened for selected item.
     *
     * @param {string} name – Specifies the new name of the file or folder in current path. If it is not specified, then rename dialog
     * will be opened for given identifier.
     *
     * @returns {void}
     */
    renameFile(id, name) {
        this.notify(methodCall, { action: 'renameFile', id: id, newName: name });
    }
    /**
     * Opens the upload dialog in file manager.
     *
     * @returns {void}
     */
    uploadFiles() {
        // eslint-disable-next-line
        const details = [getPathObject(this)];
        this.itemData = details;
        uploadItem(this);
    }
    /**
     * Specifies the direction of FileManager
     *
     * @param {boolean} rtl - specifies rtl parameter.
     * @returns {void}
     */
    setRtl(rtl) {
        if (rtl) {
            this.addCssClass(null, RTL);
        }
        else {
            this.addCssClass(RTL, null);
        }
        if (this.uploadObj) {
            this.uploadDialogObj.enableRtl = rtl;
            this.uploadObj.enableRtl = rtl;
        }
    }
};
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, AjaxSettings)
], FileManager.prototype, "ajaxSettings", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], FileManager.prototype, "allowDragAndDrop", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], FileManager.prototype, "allowMultiSelection", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, ContextMenuSettings)
], FileManager.prototype, "contextMenuSettings", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')
], FileManager.prototype, "cssClass", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, DetailsViewSettings)
], FileManager.prototype, "detailsViewSettings", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], FileManager.prototype, "enableHtmlSanitizer", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], FileManager.prototype, "enablePersistence", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('400px')
], FileManager.prototype, "height", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('LargeIcons')
], FileManager.prototype, "view", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, NavigationPaneSettings)
], FileManager.prototype, "navigationPaneSettings", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('/')
], FileManager.prototype, "path", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], FileManager.prototype, "popupTarget", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, SearchSettings)
], FileManager.prototype, "searchSettings", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()
], FileManager.prototype, "selectedItems", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], FileManager.prototype, "showFileExtension", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], FileManager.prototype, "rootAliasName", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], FileManager.prototype, "showHiddenItems", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], FileManager.prototype, "showThumbnail", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Ascending')
], FileManager.prototype, "sortOrder", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, ToolbarSettings)
], FileManager.prototype, "toolbarSettings", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, UploadSettings)
], FileManager.prototype, "uploadSettings", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('100%')
], FileManager.prototype, "width", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], FileManager.prototype, "fileLoad", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], FileManager.prototype, "fileOpen", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], FileManager.prototype, "beforeDownload", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], FileManager.prototype, "beforeImageLoad", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], FileManager.prototype, "beforePopupClose", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], FileManager.prototype, "beforePopupOpen", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], FileManager.prototype, "beforeSend", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], FileManager.prototype, "created", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], FileManager.prototype, "destroyed", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], FileManager.prototype, "fileDragStart", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], FileManager.prototype, "fileDragging", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], FileManager.prototype, "fileDragStop", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], FileManager.prototype, "fileDropped", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], FileManager.prototype, "fileSelection", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], FileManager.prototype, "fileSelect", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], FileManager.prototype, "menuClick", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], FileManager.prototype, "menuOpen", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], FileManager.prototype, "failure", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], FileManager.prototype, "popupClose", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], FileManager.prototype, "popupOpen", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], FileManager.prototype, "success", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], FileManager.prototype, "toolbarClick", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], FileManager.prototype, "toolbarCreate", void 0);
__decorate$8([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], FileManager.prototype, "uploadListCreate", void 0);
FileManager = FileManager_1 = __decorate$8([
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.NotifyPropertyChanges
], FileManager);

/**
 * File Manager base modules
 */

/**
 * Toolbar module
 */
class Toolbar$1 {
    /**
     * Constructor for the Toolbar module
     *
     * @hidden
     * @param {IFileManager} parent - specifies the parent element.
     * @private
     */
    constructor(parent) {
        this.default = ['Delete', 'Rename', 'Download', 'Cut', 'Copy', 'Paste'];
        this.single = ['Delete', 'Rename', 'Download', 'Cut', 'Copy'];
        this.multiple = ['Delete', 'Download', 'Cut', 'Copy', 'Refresh'];
        this.selection = ['NewFolder', 'Upload', 'SortBy', 'Refresh'];
        this.parent = parent;
        this.render();
        this.addEventListener();
    }
    render() {
        this.items = this.toolbarItemData(this.getItems(this.parent.toolbarSettings.items.map((item) => item.trim())));
        const eventArgs = { items: this.items };
        this.parent.trigger('toolbarCreate', eventArgs, (toolbarCreateArgs) => {
            this.items = toolbarCreateArgs.items;
            this.toolbarObj = new _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_7__.Toolbar({
                items: this.items,
                created: this.toolbarCreateHandler.bind(this),
                overflowMode: 'Popup',
                clicked: this.onClicked.bind(this),
                enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
                enableRtl: this.parent.enableRtl
            });
            this.toolbarObj.isStringTemplate = true;
            this.toolbarObj.appendTo('#' + this.parent.element.id + TOOLBAR_ID);
        });
    }
    getItemIndex(item) {
        const itemId = this.getId(item);
        for (let i = 0; i < this.items.length; i++) {
            if (this.items[i].id === itemId) {
                return i;
            }
        }
        return -1;
    }
    getItems(items) {
        const currItems = items.slice();
        if (this.parent.isDevice && this.parent.allowMultiSelection) {
            currItems.push('SelectAll');
        }
        return currItems;
    }
    /* istanbul ignore next */
    onClicked(args) {
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.item) || !args.item.id) {
            return;
        }
        const tool = args.item.id.substr((this.parent.element.id + '_tb_').length);
        // eslint-disable-next-line
        let details;
        if (tool === 'refresh' || tool === 'newfolder' || tool === 'upload') {
            details = [getPathObject(this.parent)];
            this.parent.itemData = details;
        }
        else {
            this.parent.notify(selectedData, {});
            details = this.parent.itemData;
        }
        const eventArgs = { cancel: false, fileDetails: details, item: args.item };
        this.parent.trigger('toolbarClick', eventArgs, (toolbarClickArgs) => {
            let sItems;
            let target;
            if (!toolbarClickArgs.cancel) {
                switch (tool) {
                    case 'sortby':
                        target = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.originalEvent.target, '.' + TB_ITEM);
                        if (target && target.classList.contains('e-toolbar-popup')) {
                            args.cancel = true;
                        }
                        break;
                    case 'newfolder':
                        createNewFolder(this.parent);
                        break;
                    case 'cut':
                        cutFiles(this.parent);
                        break;
                    case 'copy':
                        copyFiles(this.parent);
                        break;
                    case 'delete':
                        for (let i = 0; i < details.length; i++) {
                            if (!hasEditAccess(details[i])) {
                                createDeniedDialog(this.parent, details[i], permissionEdit);
                                return;
                            }
                        }
                        createDialog(this.parent, 'Delete');
                        break;
                    case 'details':
                        this.parent.notify(detailsInit, {});
                        sItems = this.parent.selectedItems;
                        if (this.parent.activeModule === 'navigationpane') {
                            sItems = [];
                        }
                        GetDetails(this.parent, sItems, this.parent.path, 'details');
                        break;
                    case 'paste':
                        this.parent.folderPath = '';
                        pasteHandler(this.parent);
                        break;
                    case 'refresh':
                        refresh(this.parent);
                        break;
                    case 'download':
                        doDownload(this.parent);
                        break;
                    case 'rename':
                        if (!hasEditAccess(details[0])) {
                            createDeniedDialog(this.parent, details[0], permissionEdit);
                        }
                        else {
                            this.parent.notify(renameInit, {});
                            createDialog(this.parent, 'Rename');
                        }
                        break;
                    case 'upload':
                        uploadItem(this.parent);
                        break;
                    case 'selectall':
                        this.parent.notify(selectAllInit, {});
                        break;
                    case 'selection':
                        this.parent.notify(clearAllInit, {});
                        break;
                }
            }
        });
    }
    toolbarCreateHandler() {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.getId('SortBy'), this.parent.element))) {
            const items = [
                { id: this.getPupupId('name'), text: getLocaleText(this.parent, 'Name'), iconCss: TB_OPTION_DOT },
                { id: this.getPupupId('size'), text: getLocaleText(this.parent, 'Size') },
                { id: this.getPupupId('date'), text: getLocaleText(this.parent, 'DateModified') },
                { separator: true },
                { id: this.getPupupId('ascending'), text: getLocaleText(this.parent, 'Ascending'),
                    iconCss: this.parent.sortOrder === 'Ascending' ? TB_OPTION_TICK : '' },
                { id: this.getPupupId('descending'), text: getLocaleText(this.parent, 'Descending'),
                    iconCss: this.parent.sortOrder === 'Descending' ? TB_OPTION_TICK : '' },
                { id: this.getPupupId('none'), text: getLocaleText(this.parent, 'None'),
                    iconCss: this.parent.sortOrder === 'None' ? TB_OPTION_TICK : '' }
            ];
            this.buttonObj = new _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_6__.DropDownButton({
                items: items, cssClass: getCssClass(this.parent, ROOT_POPUP),
                select: sortbyClickHandler.bind(this, this.parent),
                enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
                enableRtl: this.parent.enableRtl, iconCss: ICON_SHORTBY
            });
            this.buttonObj.isStringTemplate = true;
            this.buttonObj.appendTo('#' + this.getId('SortBy'));
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.getId('View'), this.parent.element))) {
            const gridSpan = '<span class="' + ICON_GRID + ' ' + MENU_ICON + '"></span>';
            const largeIconSpan = '<span class="' + ICON_LARGE + ' ' + MENU_ICON + '"></span>';
            const layoutItems = [
                {
                    id: this.getPupupId('large'), text: largeIconSpan + getLocaleText(this.parent, 'View-LargeIcons'),
                    iconCss: this.parent.view === 'Details' ? '' : TB_OPTION_TICK
                },
                {
                    id: this.getPupupId('details'), text: gridSpan + getLocaleText(this.parent, 'View-Details'),
                    iconCss: this.parent.view === 'Details' ? TB_OPTION_TICK : ''
                }
            ];
            this.layoutBtnObj = new _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_6__.DropDownButton({
                iconCss: this.parent.view === 'Details' ? ICON_GRID : ICON_LARGE,
                cssClass: getCssClass(this.parent, 'e-caret-hide ' + ROOT_POPUP),
                items: layoutItems, select: this.layoutChange.bind(this),
                enableRtl: this.parent.enableRtl,
                enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
                content: '<span class="e-tbar-btn-text">' + getLocaleText(this.parent, 'View') + '</span>'
            });
            this.layoutBtnObj.isStringTemplate = true;
            this.layoutBtnObj.appendTo('#' + this.getId('View'));
        }
        this.hideItems(this.default, true);
        this.hideStatus();
        const btnElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.e-btn', this.toolbarObj.element);
        for (let btnCount = 0; btnCount < btnElement.length; btnCount++) {
            /* istanbul ignore next */
            btnElement[btnCount].onkeydown = (e) => {
                if (e.keyCode === 13 && !e.target.classList.contains('e-fe-popup')) {
                    e.preventDefault();
                }
            };
            btnElement[btnCount].onkeyup = (e) => {
                if (e.keyCode === 13 && !e.target.classList.contains('e-fe-popup')) {
                    btnElement[btnCount].click();
                }
            };
        }
        this.parent.refreshLayout();
    }
    updateSortByButton() {
        if (this.buttonObj) {
            const items = this.buttonObj.items;
            for (let itemCount = 0; itemCount < items.length; itemCount++) {
                if (items[itemCount].id === this.getPupupId('name')) {
                    items[itemCount].iconCss = this.parent.sortBy === 'name' ? TB_OPTION_DOT : '';
                }
                else if (items[itemCount].id === this.getPupupId('size')) {
                    items[itemCount].iconCss = this.parent.sortBy === 'size' ? TB_OPTION_DOT : '';
                }
                else if (items[itemCount].id === this.getPupupId('date')) {
                    items[itemCount].iconCss = this.parent.sortBy === '_fm_modified' ? TB_OPTION_DOT : '';
                }
                else if (items[itemCount].id === this.getPupupId('ascending')) {
                    items[itemCount].iconCss = this.parent.sortOrder === 'Ascending' ? TB_OPTION_TICK : '';
                }
                else if (items[itemCount].id === this.getPupupId('descending')) {
                    items[itemCount].iconCss = this.parent.sortOrder === 'Descending' ? TB_OPTION_TICK : '';
                }
                else if (items[itemCount].id === this.getPupupId('none')) {
                    items[itemCount].iconCss = this.parent.sortOrder === 'None' ? TB_OPTION_TICK : '';
                }
            }
        }
    }
    getPupupId(id) {
        return this.parent.element.id + '_ddl_' + id.toLowerCase();
    }
    layoutChange(args) {
        if (this.parent.view === 'Details') {
            if (args.item.id === this.getPupupId('large')) {
                updateLayout(this.parent, 'LargeIcons');
            }
        }
        else {
            if (args.item.id === this.getPupupId('details')) {
                updateLayout(this.parent, 'Details');
            }
        }
    }
    toolbarItemData(data) {
        const items = [];
        let mode = 'Both';
        if (this.parent.isMobile) {
            mode = 'Overflow';
        }
        for (let i = 0; i < data.length; i++) {
            let item;
            const itemId = this.getId(data[i]);
            const itemText = getLocaleText(this.parent, data[i]);
            const itemTooltip = getLocaleText(this.parent, 'Tooltip-' + data[i]);
            const spanElement = '<span class="e-tbar-btn-text e-tbar-ddb-text">' + itemText + '</span>';
            switch (data[i]) {
                case '|':
                    item = { type: 'Separator' };
                    break;
                case 'Upload':
                    item = { id: itemId, text: itemText, tooltipText: itemTooltip, prefixIcon: ICON_UPLOAD, showTextOn: mode };
                    break;
                case 'SortBy':
                    item = {
                        id: itemId, tooltipText: itemTooltip,
                        template: '<button id="' + itemId + '" class="e-tbar-btn e-tbtn-txt" tabindex="-1">' + spanElement + '</button>'
                    };
                    break;
                case 'Refresh':
                    item = { id: itemId, text: itemText, tooltipText: itemTooltip, prefixIcon: ICON_REFRESH, showTextOn: mode };
                    break;
                case 'Selection':
                    item = {
                        id: itemId, text: itemText, tooltipText: itemTooltip, suffixIcon: ICON_CLEAR, overflow: 'Show',
                        align: 'Right'
                    };
                    break;
                case 'View':
                    item = {
                        id: itemId, tooltipText: itemTooltip, prefixIcon: this.parent.view === 'Details' ? ICON_GRID : ICON_LARGE,
                        overflow: 'Show', align: 'Right', text: itemText, showTextOn: 'Overflow',
                        template: '<button id="' + itemId + '" class="e-tbar-btn e-tbtn-txt" tabindex="-1" aria-label=' +
                            getLocaleText(this.parent, 'View') + '></button>'
                    };
                    break;
                case 'Details':
                    item = {
                        id: itemId, tooltipText: itemTooltip, prefixIcon: ICON_DETAILS, overflow: 'Show', align: 'Right',
                        text: itemText, showTextOn: 'Overflow'
                    };
                    break;
                case 'NewFolder':
                    item = { id: itemId, text: itemText, tooltipText: itemTooltip, prefixIcon: ICON_NEWFOLDER, showTextOn: mode };
                    break;
                case 'Cut':
                    item = { id: itemId, text: itemText, tooltipText: itemTooltip, prefixIcon: ICON_CUT, showTextOn: mode };
                    break;
                case 'Copy':
                    item = { id: itemId, text: itemText, tooltipText: itemTooltip, prefixIcon: ICON_COPY, showTextOn: mode };
                    break;
                case 'Paste':
                    item = { id: itemId, text: itemText, tooltipText: itemTooltip, prefixIcon: ICON_PASTE, showTextOn: mode };
                    break;
                case 'Delete':
                    item = { id: itemId, text: itemText, tooltipText: itemTooltip, prefixIcon: ICON_DELETE, showTextOn: mode };
                    break;
                case 'Rename':
                    item = { id: itemId, text: itemText, tooltipText: itemTooltip, prefixIcon: ICON_RENAME, showTextOn: mode };
                    break;
                case 'Download':
                    item = { id: itemId, text: itemText, tooltipText: itemTooltip, prefixIcon: ICON_DOWNLOAD, showTextOn: mode };
                    break;
                case 'SelectAll':
                    item = { id: itemId, text: itemText, tooltipText: itemTooltip, prefixIcon: ICON_SELECTALL, showTextOn: mode };
                    break;
                default:
                    item = { id: itemId, text: itemText, tooltipText: itemTooltip };
                    break;
            }
            items.push(item);
        }
        return items;
    }
    getId(id) {
        return this.parent.element.id + '_tb_' + id.toLowerCase();
    }
    addEventListener() {
        this.parent.on(modelChanged, this.onPropertyChanged, this);
        this.parent.on(selectionChanged, this.onSelectionChanged, this);
        this.parent.on(layoutChange, this.onLayoutChange, this);
        this.parent.on(showPaste, this.showPaste, this);
        this.parent.on(hidePaste, this.hidePaste, this);
        this.parent.on(destroy, this.destroy, this);
        this.parent.on(sortByChange, this.updateSortByButton, this);
    }
    reRenderToolbar(e) {
        if (e.newProp.toolbarSettings.items !== undefined) {
            this.items = this.toolbarItemData(this.getItems(e.newProp.toolbarSettings.items.map((item) => item.trim())));
            const eventArgs = { items: this.items };
            this.parent.trigger('toolbarCreate', eventArgs, (toolbarCreateArgs) => {
                if (this.buttonObj) {
                    this.buttonObj.destroy();
                }
                if (this.layoutBtnObj) {
                    this.layoutBtnObj.destroy();
                }
                this.items = toolbarCreateArgs.items;
                this.toolbarObj.items = this.items;
                this.toolbarObj.dataBind();
                this.toolbarCreateHandler();
            });
        }
    }
    onSelectionChanged() {
        this.hideStatus();
        this.hideItems(this.single, true);
        this.hideItems(this.selection, false);
        if (this.parent.selectedItems.length === 1) {
            this.hideItems(this.single, false);
            this.hideItems(this.selection, true);
        }
        else if (this.parent.selectedItems.length > 1) {
            this.hideItems(this.multiple, false);
            this.hideItems(this.selection, true);
        }
        const ele = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.getId('Selection'), this.toolbarObj.element);
        if (this.parent.selectedItems.length > 0 && ele) {
            let txt;
            if (this.parent.selectedItems.length === 1) {
                txt = this.parent.selectedItems.length + ' ' + getLocaleText(this.parent, 'Item-Selection');
            }
            else {
                txt = this.parent.selectedItems.length + ' ' + getLocaleText(this.parent, 'Items-Selection');
            }
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.e-tbar-btn-text', ele).textContent = txt;
            this.toolbarObj.hideItem(ele.parentElement, false);
        }
    }
    hideItems(tools, toHide) {
        for (let i = 0; i < tools.length; i++) {
            const ele = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.getId(tools[i]), this.parent.element);
            if (ele) {
                this.toolbarObj.hideItem(ele.parentElement, toHide);
            }
        }
    }
    hideStatus() {
        const ele = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.getId('Selection'), this.toolbarObj.element);
        if (ele) {
            this.toolbarObj.hideItem(ele.parentElement, true);
        }
    }
    showPaste() {
        this.hideItems(['Paste'], false);
    }
    hidePaste() {
        this.hideItems(['Paste'], true);
    }
    onLayoutChange() {
        if (this.layoutBtnObj) {
            this.layoutBtnObj.iconCss = this.parent.view === 'Details' ? ICON_GRID : ICON_LARGE;
            const items = this.layoutBtnObj.items;
            for (let itemCount = 0; itemCount < items.length; itemCount++) {
                if (items[itemCount].id === this.getPupupId('large')) {
                    items[itemCount].iconCss = this.parent.view === 'LargeIcons' ? TB_OPTION_TICK : '';
                }
                else if (items[itemCount].id === this.getPupupId('details')) {
                    items[itemCount].iconCss = this.parent.view === 'Details' ? TB_OPTION_TICK : '';
                }
            }
        }
    }
    removeEventListener() {
        this.parent.off(modelChanged, this.onPropertyChanged);
        this.parent.off(selectionChanged, this.onSelectionChanged);
        this.parent.off(layoutChange, this.onLayoutChange);
        this.parent.off(showPaste, this.showPaste);
        this.parent.off(hidePaste, this.hidePaste);
        this.parent.off(destroy, this.destroy);
        this.parent.off(sortByChange, this.updateSortByButton);
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} - returns module name.
     * @private
     */
    getModuleName() {
        return 'toolbar';
    }
    onPropertyChanged(e) {
        if (e.module !== this.getModuleName() && e.module !== 'common') {
            /* istanbul ignore next */
            return;
        }
        for (const prop of Object.keys(e.newProp)) {
            switch (prop) {
                case 'cssClass':
                    if (this.buttonObj) {
                        this.buttonObj.cssClass = getCssClass(this.parent, ROOT_POPUP);
                    }
                    if (this.layoutBtnObj) {
                        this.layoutBtnObj.cssClass = getCssClass(this.parent, 'e-caret-hide ' + ROOT_POPUP);
                    }
                    break;
                case 'height':
                case 'width':
                    this.toolbarObj.refreshOverflow();
                    break;
                case 'toolbarSettings':
                    this.reRenderToolbar(e);
                    break;
            }
        }
    }
    destroy() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.removeEventListener();
        if (this.buttonObj) {
            this.buttonObj.destroy();
        }
        if (this.layoutBtnObj) {
            this.layoutBtnObj.destroy();
        }
        this.toolbarObj.destroy();
        this.parent.refreshLayout();
    }
    enableItems(items, isEnable) {
        for (let i = 0; i < items.length; i++) {
            const ele = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.getId(items[i]), this.parent.element);
            if (ele) {
                this.toolbarObj.enableItems(ele.parentElement, isEnable);
            }
        }
    }
}

/**
 * File Manager actions modules
 */

/**
 * NavigationPane module
 */
class NavigationPane {
    /**
     * Constructor for the TreeView module
     *
     * @param {IFileManager} parent - specifies the parent element.
     * @hidden
     */
    constructor(parent) {
        this.removeNodes = [];
        this.moveNames = [];
        this.expandTree = false;
        this.isDrag = false;
        this.isPathDragged = false;
        this.isRenameParent = false;
        this.isRightClick = false;
        this.renameParent = null;
        // Specifies the previously selected nodes in the treeview control.
        this.previousSelected = null;
        // Specifies whether the nodeClicked event of the treeview control is triggered or not.
        this.isNodeClickCalled = false;
        // Specifies whether to restrict node selection in the treeview control.
        this.restrictSelecting = false;
        this.parent = parent;
        this.addEventListener();
        this.keyConfigs = {
            altEnter: 'alt+enter',
            esc: 'escape',
            del: 'delete',
            ctrlX: 'ctrl+x',
            ctrlC: 'ctrl+c',
            ctrlV: 'ctrl+v',
            ctrlShiftN: 'ctrl+shift+n',
            shiftF10: 'shift+F10',
            f2: 'f2'
        };
    }
    onInit() {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.treeObj)) {
            return;
        }
        // eslint-disable-next-line
        const rootData = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.parent.pathId[0], this.parent.feParent);
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('_fm_icon', 'e-fe-folder', rootData);
        // eslint-disable-next-line
        const attr = {};
        const id = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('id', rootData);
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(id)) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('data-id', id, attr);
        }
        if (!hasEditAccess(rootData)) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('class', getAccessClass(rootData), attr);
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(attr)) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('_fm_htmlAttr', attr, rootData);
        }
        this.treeObj = new _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_7__.TreeView({
            fields: {
                dataSource: [rootData], id: '_fm_id', parentID: '_fm_pId', expanded: '_fm_expanded', selected: '_fm_selected', text: 'name',
                hasChildren: 'hasChild', iconCss: '_fm_icon', htmlAttributes: '_fm_htmlAttr', tooltip: 'name'
            },
            enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
            sortOrder: this.parent.navigationPaneSettings.sortOrder,
            nodeSelecting: this.onNodeSelecting.bind(this),
            nodeSelected: this.onNodeSelected.bind(this),
            nodeExpanding: this.onNodeExpand.bind(this),
            nodeClicked: this.onNodeClicked.bind(this),
            allowEditing: true,
            nodeEditing: this.onNodeEditing.bind(this),
            drawNode: this.onDrowNode.bind(this),
            enableRtl: this.parent.enableRtl,
            dataBound: this.addDragDrop.bind(this)
        });
        this.treeObj.isStringTemplate = true;
        this.treeObj.appendTo('#' + this.parent.element.id + TREE_ID);
        this.wireEvents();
    }
    addDragDrop() {
        if (!this.parent.isMobile && this.treeObj) {
            if (this.parent.allowDragAndDrop) {
                if (this.dragObj) {
                    this.dragObj.destroy();
                }
                this.dragObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Draggable(this.treeObj.element, {
                    cursorAt: this.parent.dragCursorPosition,
                    dragTarget: '.' + FULLROW,
                    distance: 5,
                    dragArea: this.parent.element,
                    drag: draggingHandler.bind(this, this.parent),
                    dragStart: (args) => {
                        dragStartHandler(this.parent, args, this.dragObj);
                    },
                    dragStop: dragStopHandler.bind(this, this.parent),
                    enableTailMode: true,
                    enableAutoScroll: true,
                    helper: this.dragHelper.bind(this)
                });
            }
            else if (!this.parent.allowDragAndDrop && this.dragObj) {
                this.dragObj.destroy();
            }
        }
    }
    dragHelper(args) {
        const dragTarget = args.sender.target;
        if (!dragTarget.classList.contains(FULLROW)) {
            return null;
        }
        const dragLi = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(dragTarget, 'li');
        this.parent.dragPath = '';
        this.parent.dragData = [];
        this.parent.activeElements = [];
        this.parent.activeElements = [dragLi];
        this.parent.dragNodes = [];
        getModule(this.parent, dragLi);
        // eslint-disable-next-line
        this.parent.dragData = this.getTreeData(dragLi);
        this.parent.dragPath = this.getDragPath(dragLi, this.parent.dragData[0].name);
        this.parent.dragNodes.push(this.parent.dragData[0].name);
        createVirtualDragElement(this.parent);
        return this.parent.virtualDragElement;
    }
    getDragPath(dragLi, text) {
        const path = this.getDropPath(dragLi, text);
        return getParentPath(path);
    }
    getDropPath(node, text) {
        const id = node.getAttribute('data-id');
        const newText = this.parent.hasId ? id : text;
        return getPath(node, newText, this.parent.hasId);
    }
    onDrowNode(args) {
        const eventArgs = {
            element: args.node,
            fileDetails: args.nodeData,
            module: 'NavigationPane'
        };
        this.parent.trigger('fileLoad', eventArgs);
    }
    // eslint-disable-next-line
    addChild(files, target, prevent) {
        // eslint-disable-next-line
        const directories = getDirectories(files);
        if (directories.length > 0) {
            let length = 0;
            // eslint-disable-next-line
            const folders = directories;
            while (length < directories.length) {
                // eslint-disable-next-line
                folders[length]._fm_icon = 'e-fe-folder';
                // eslint-disable-next-line
                const attr = {};
                const id = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('id', folders[length]);
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(id)) {
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('data-id', id, attr);
                }
                if (!hasEditAccess(folders[length])) {
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('class', getAccessClass(folders[length]), attr);
                }
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(attr)) {
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('_fm_htmlAttr', attr, folders[length]);
                }
                length++;
            }
            // eslint-disable-next-line
            this.treeObj.addNodes(directories, target, null, prevent);
        }
    }
    // Node Selecting event handler
    onNodeSelecting(args) {
        if (!args.isInteracted && !this.isRightClick && !this.isPathDragged && !this.isRenameParent || this.restrictSelecting) {
            this.restrictSelecting = false;
            this.isNodeClickCalled = false;
            return;
        }
        if (!this.renameParent) {
            this.parent.activeModule = 'navigationpane';
            // eslint-disable-next-line
            const nodeData = this.getTreeData((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('id', args.nodeData));
            const eventArgs = { cancel: false, fileDetails: nodeData[0], module: 'NavigationPane' };
            this.parent.trigger('fileOpen', eventArgs);
            args.cancel = eventArgs.cancel;
            if (args.cancel) {
                this.restrictSelecting = this.isNodeClickCalled ? this.previousSelected[0] != args.node.getAttribute('data-uid') : false;
                this.treeObj.selectedNodes = this.isNodeClickCalled ? this.previousSelected : this.treeObj.selectedNodes;
                this.previousSelected = this.treeObj.selectedNodes;
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.contextmenuModule)) {
                    this.parent.contextmenuModule.contextMenu.enableItems(['Open'], true);
                }
            }
        }
    }
    // Opens the folder while clicking open context menu item in the treeview.
    openFileOnContextMenuClick(node) {
        const data = this.treeObj.getTreeData(node);
        // eslint-disable-next-line
        this.parent.selectedItems = [];
        this.parent.itemData = data;
        this.activeNode = node;
        this.parent.activeModule = 'navigationpane';
        updatePath(node, this.parent.itemData[0], this.parent);
        read(this.parent, this.isPathDragged ? pasteEnd : pathChanged, this.parent.path);
        this.parent.visitedItem = node;
        this.isPathDragged = this.isRenameParent = this.isRightClick = false;
        this.treeObj.selectedNodes = [node.getAttribute('data-uid')];
    }
    onNodeSelected(args) {
        if (this.parent.breadcrumbbarModule && this.parent.breadcrumbbarModule.searchObj && !this.renameParent) {
            this.parent.breadcrumbbarModule.searchObj.element.value = '';
            this.parent.isFiltered = false;
        }
        this.parent.searchedItems = [];
        if (!args.isInteracted && !this.isRightClick && !this.isPathDragged && !this.isRenameParent) {
            return;
        }
        this.activeNode = args.node;
        this.parent.activeModule = 'navigationpane';
        // eslint-disable-next-line
        const nodeData = this.getTreeData((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('id', args.nodeData));
        this.parent.selectedItems = [];
        this.parent.itemData = nodeData;
        let previousPath = this.parent.path;
        updatePath(args.node, this.parent.itemData[0], this.parent);
        if (previousPath !== this.parent.path) {
            this.expandNodeTarget = null;
            if (args.node.querySelector('.' + ICONS) && args.node.querySelector('.' + LIST_ITEM) === null) {
                this.expandNodeTarget = 'add';
            }
            read(this.parent, this.isPathDragged ? pasteEnd : pathChanged, this.parent.path);
            this.parent.visitedItem = args.node;
        }
        this.isPathDragged = this.isRenameParent = this.isRightClick = false;
    }
    /* istanbul ignore next */
    // eslint-disable-next-line
    onPathDrag(args) {
        this.isPathDragged = true;
        this.selectResultNode(args[0]);
    }
    /* istanbul ignore next */
    onNodeExpand(args) {
        if (!args.isInteracted && !this.isDrag) {
            return;
        }
        if (args.node.querySelector('.' + LIST_ITEM) === null) {
            const text = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('text', args.nodeData);
            const id = args.node.getAttribute('data-id');
            const isId = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(id) ? false : true;
            const newText = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(id) ? text : id;
            const path = getPath(args.node, newText, isId);
            this.expandNodeTarget = args.node.getAttribute('data-uid');
            this.parent.expandedId = this.expandNodeTarget;
            this.parent.itemData = this.getTreeData((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('id', args.nodeData));
            read(this.parent, nodeExpand, path);
        }
    }
    /* istanbul ignore next */
    onNodeExpanded(args) {
        this.addChild(args.files, this.expandNodeTarget, false);
        this.parent.expandedId = null;
    }
    onNodeClicked(args) {
        this.parent.activeModule = 'navigationpane';
        this.previousSelected = this.treeObj.selectedNodes;
        this.activeNode = args.node;
        if ((args.event.which === 3) && (args.node.getAttribute('data-uid') !== this.treeObj.selectedNodes[0])) {
            this.isRightClick = true;
            this.isNodeClickCalled = true;
            this.treeObj.selectedNodes = [args.node.getAttribute('data-uid')];
        }
        else if (args.node.getAttribute('data-uid') === this.treeObj.selectedNodes[0] && this.parent.selectedItems.length !== 0) {
            this.parent.setProperties({ selectedItems: [] }, true);
            const layout = (this.parent.view === 'LargeIcons') ? 'largeiconsview' : 'detailsview';
            this.parent.notify(modelChanged, { module: layout, newProp: { selectedItems: [] } });
        }
    }
    /* istanbul ignore next */
    onNodeEditing(args) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.innerHtml)) {
            args.cancel = true;
        }
    }
    onPathChanged(args) {
        this.parent.isCut = false;
        // eslint-disable-next-line
        const currFiles = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.parent.pathId[this.parent.pathId.length - 1], this.parent.feFiles);
        if (this.expandNodeTarget === 'add') {
            const sNode = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('[data-uid="' + this.treeObj.selectedNodes[0] + '"]', this.treeObj.element);
            const ul = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + LIST_PARENT, sNode);
            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ul)) {
                this.addChild(args.files, this.treeObj.selectedNodes[0], !this.expandTree);
            }
            this.expandNodeTarget = '';
        }
        this.expandTree = false;
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currFiles)) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)(this.parent.pathId[this.parent.pathId.length - 1], args.files, this.parent.feFiles);
        }
    }
    updateTree(args) {
        if (this.treeObj) {
            const id = this.treeObj.selectedNodes[0];
            this.updateTreeNode(args, id);
        }
    }
    updateTreeNode(args, id) {
        const toExpand = this.treeObj.expandedNodes.indexOf(id) === -1 ? false : true;
        this.removeChildNodes(id);
        this.addChild(args.files, id, !toExpand);
    }
    removeChildNodes(id) {
        const sNode = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('[data-uid="' + id + '"]', this.treeObj.element);
        const parent = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + LIST_PARENT, sNode);
        const childs = parent ? Array.prototype.slice.call(parent.children) : null;
        if (childs) {
            this.treeObj.removeNodes(childs);
        }
    }
    onOpenEnd(args) {
        const sleId = this.parent.pathId[this.parent.pathId.length - 1];
        this.treeObj.expandAll(this.treeObj.selectedNodes);
        this.treeObj.selectedNodes = [sleId];
        this.expandNodeTarget = 'add';
        this.onPathChanged(args);
    }
    onOpenInit(args) {
        if (this.parent.activeModule === 'navigationpane') {
            if (args.target.querySelector('.' + ICONS)) {
                this.treeObj.expandAll(this.treeObj.selectedNodes);
            }
        }
    }
    onInitialEnd(args) {
        this.onInit();
        this.addChild(args.files, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('_fm_id', args.cwd), false);
    }
    onFinalizeEnd(args) {
        this.onInit();
        const id = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('_fm_id', args.cwd);
        this.removeChildNodes(id);
        this.addChild(args.files, id, false);
        this.treeObj.selectedNodes = [this.parent.pathId[this.parent.pathId.length - 1]];
    }
    onCreateEnd(args) {
        this.updateTree(args);
    }
    onSelectedData() {
        if (this.parent.activeModule === 'navigationpane') {
            this.updateItemData();
        }
    }
    onDeleteInit() {
        if (this.parent.activeModule === 'navigationpane') {
            this.updateActionData();
            const name = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('name', this.parent.itemData[0]);
            Delete(this.parent, [name], this.parent.path, 'delete');
        }
    }
    /* istanbul ignore next */
    onDeleteEnd(args) {
        if (this.parent.activeModule === 'navigationpane') {
            const selectedNode = this.treeObj.selectedNodes[0];
            const selcetedEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('[data-uid="' + selectedNode + '"]', this.treeObj.element);
            const selectedNodeEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selcetedEle, '.' + LIST_PARENT).parentElement;
            this.treeObj.selectedNodes = [selectedNodeEle.getAttribute('data-uid')];
            this.treeObj.dataBind();
        }
        this.updateTree(args);
    }
    onRefreshEnd(args) {
        this.updateTree(args);
    }
    onRenameInit() {
        if (this.parent.activeModule === 'navigationpane') {
            this.updateRenameData();
        }
    }
    /* istanbul ignore next */
    onRenameEndParent(args) {
        const id = this.renameParent ? this.renameParent : this.parent.pathId[this.parent.pathId.length - 1];
        this.expandTree = this.treeObj.expandedNodes.indexOf(this.treeObj.selectedNodes[0]) !== -1;
        this.updateTreeNode(args, id);
        this.parent.expandedId = null;
        if (this.renameParent) {
            this.renameParent = null;
        }
        else {
            // eslint-disable-next-line
            let resultData = [];
            if (this.parent.hasId) {
                resultData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(this.treeObj.getTreeData()).
                    executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where('id', 'equal', this.parent.renamedId, false));
            }
            else {
                // eslint-disable-next-line
                const nData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(this.treeObj.getTreeData()).
                    executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where(this.treeObj.fields.text, 'equal', this.parent.renameText, false));
                if (nData.length > 0) {
                    resultData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(nData).
                        executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where('_fm_pId', 'equal', id, false));
                }
            }
            if (resultData.length > 0) {
                this.isRenameParent = true;
                const id = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.treeObj.fields.id, resultData[0]);
                this.treeObj.selectedNodes = [id];
                this.treeObj.dataBind();
            }
        }
    }
    /* istanbul ignore next */
    onRenameEnd(args) {
        if (this.parent.breadcrumbbarModule.searchObj.element.value === '' && !this.parent.isFiltered) {
            this.updateTree(args);
        }
        else {
            // eslint-disable-next-line
            const data = this.treeObj.getTreeData();
            // eslint-disable-next-line
            let resultData = [];
            if (this.parent.hasId) {
                resultData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(data).
                    executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where('id', 'equal', this.parent.renamedId, false));
            }
            else {
                // eslint-disable-next-line
                const nData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(data).
                    executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where(this.treeObj.fields.text, 'equal', this.parent.currentItemText, false));
                if (nData.length > 0) {
                    resultData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(nData).
                        executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where('filterPath', 'equal', this.parent.filterPath, false));
                }
            }
            if (resultData.length > 0) {
                this.renameParent = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.treeObj.fields.parentID, resultData[0]);
                this.parent.expandedId = this.renameParent;
                this.parent.itemData = this.getTreeData(this.renameParent);
                read(this.parent, renameEndParent, this.parent.filterPath.replace(/\\/g, '/'));
            }
        }
    }
    onPropertyChanged(e) {
        if (e.module !== this.getModuleName() && e.module !== 'common') {
            /* istanbul ignore next */
            return;
        }
        for (const prop of Object.keys(e.newProp)) {
            switch (prop) {
                case 'allowDragAndDrop':
                    this.addDragDrop();
                    break;
                case 'navigationPaneSettings':
                    read(this.parent, finalizeEnd, '/');
                    if (e.oldProp.navigationPaneSettings.sortOrder !== e.newProp.navigationPaneSettings.sortOrder) {
                        this.treeObj.sortOrder = e.newProp.navigationPaneSettings.sortOrder;
                    }
                    break;
            }
        }
    }
    /* istanbul ignore next */
    onDownLoadInit() {
        this.doDownload();
    }
    onSelectionChanged(e) {
        this.treeObj.selectedNodes = [e.selectedNode];
    }
    onClearPathInit(e) {
        this.removeChildNodes(e.selectedNode);
    }
    onDragEnd(args) {
        let moveNames = [];
        if (this.parent.isPasteError || this.parent.isSearchDrag) {
            moveNames = this.getMoveNames(args.files, this.parent.isSearchDrag, this.parent.dragPath);
        }
        else {
            moveNames = this.moveNames;
        }
        this.treeObj.removeNodes(moveNames);
    }
    // eslint-disable-next-line
    getMoveNames(files, flag, path) {
        const moveNames = [];
        for (let i = 0; i < files.length; i++) {
            if (!files[i].isFile) {
                if (!this.parent.hasId) {
                    let name = (files[i].previousName);
                    if (flag) {
                        path = path + files[i].previousName;
                        const index = path.lastIndexOf('/');
                        name = path.substring(index + 1);
                        path = path.substring(0, index + 1);
                    }
                    // eslint-disable-next-line
                    const resultData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(this.treeObj.getTreeData()).
                        executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where(this.treeObj.fields.text, 'equal', name, false));
                    for (let j = 0; j < resultData.length; j++) {
                        let fPath = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('filterPath', resultData[j]);
                        fPath = fPath.replace(/\\/g, '/');
                        if (fPath === path) {
                            moveNames.push((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.treeObj.fields.id, resultData[j]));
                            break;
                        }
                    }
                }
            }
        }
        return moveNames;
    }
    onCutEnd(args) {
        let moveNames = [];
        if (this.parent.isPasteError || this.parent.isSearchCut) {
            this.moveNames = this.getMoveNames(args.files, this.parent.isSearchCut, this.parent.targetPath);
        }
        else {
            moveNames = this.moveNames;
        }
        this.treeObj.removeNodes(moveNames);
    }
    /* istanbul ignore next */
    // eslint-disable-next-line
    selectResultNode(resultObj) {
        if (!this.parent.hasId) {
            const path = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('filterPath', resultObj);
            const itemname = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('name', resultObj);
            // eslint-disable-next-line
            const data = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(this.treeObj.getTreeData()).
                executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where(this.treeObj.fields.text, 'equal', itemname, false));
            if (data.length > 0) {
                // eslint-disable-next-line
                const resultData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(data).
                    executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where('filterPath', 'equal', path, false));
                if (resultData.length > 0) {
                    const id = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.treeObj.fields.id, resultData[0]);
                    this.treeObj.selectedNodes = [id];
                    this.treeObj.dataBind();
                }
            }
        }
        else {
            this.treeObj.selectedNodes = [(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('_fm_id', resultObj)];
            this.treeObj.dataBind();
        }
    }
    onDropPath(args) {
        this.onpasteEnd(args);
        this.selectResultNode(this.parent.dropData);
        this.parent.isDropEnd = !this.parent.isPasteError;
    }
    onpasteEnd(args) {
        // eslint-disable-next-line
        let resultData = [];
        if (this.parent.hasId) {
            resultData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(this.treeObj.getTreeData()).
                executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where('id', 'equal', (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('id', args.cwd), false));
        }
        else {
            // eslint-disable-next-line
            const nData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(this.treeObj.getTreeData()).
                executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where(this.treeObj.fields.text, 'equal', (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('name', args.cwd), false));
            if (nData.length > 0) {
                resultData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(nData).
                    executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where('filterPath', 'equal', (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('filterPath', args.cwd), false));
            }
        }
        if (resultData.length > 0) {
            const id = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.treeObj.fields.id, resultData[0]);
            const toExpand = this.treeObj.expandedNodes.indexOf(id) === -1;
            this.removeChildNodes(id);
            this.addChild(args.files, id, toExpand);
        }
        this.parent.expandedId = null;
        this.onPathChanged(args);
        if (this.parent.isDragDrop) {
            this.checkDropPath(args);
        }
    }
    /* istanbul ignore next */
    checkDropPath(args) {
        if (this.parent.hasId) {
            this.parent.isDropEnd = !this.parent.isPasteError;
            readDropPath(this.parent);
            return;
        }
        if ((this.parent.dropPath.indexOf(getDirectoryPath(this.parent, args)) === -1)) {
            this.parent.isDropEnd = false;
            readDropPath(this.parent);
        }
        else {
            this.parent.isDropEnd = !this.parent.isPasteError;
        }
    }
    onpasteInit() {
        if (this.parent.activeModule === this.getModuleName()) {
            this.updateItemData();
        }
        this.moveNames = [];
        // eslint-disable-next-line
        const obj = this.parent.isDragDrop ? this.parent.dragData : this.parent.actionRecords;
        for (let i = 0; i < obj.length; i++) {
            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('isFile', obj[i]) === false) {
                this.moveNames.push((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('_fm_id', obj[i]));
            }
        }
    }
    oncutCopyInit() {
        if (this.parent.activeModule === this.getModuleName()) {
            this.parent.activeRecords = this.getTreeData(this.treeObj.selectedNodes[0]);
            this.parent.activeElements = [this.activeNode];
        }
    }
    addEventListener() {
        this.parent.on(modelChanged, this.onPropertyChanged, this);
        this.parent.on(downloadInit, this.onDownLoadInit, this);
        this.parent.on(initialEnd, this.onInitialEnd, this);
        this.parent.on(finalizeEnd, this.onFinalizeEnd, this);
        this.parent.on(pathChanged, this.onPathChanged, this);
        this.parent.on(pasteEnd, this.onpasteEnd, this);
        this.parent.on(cutEnd, this.onCutEnd, this);
        this.parent.on(pasteInit, this.onpasteInit, this);
        this.parent.on(nodeExpand, this.onNodeExpanded, this);
        this.parent.on(createEnd, this.onCreateEnd, this);
        this.parent.on(selectedData, this.onSelectedData, this);
        this.parent.on(deleteInit, this.onDeleteInit, this);
        this.parent.on(deleteEnd, this.onDeleteEnd, this);
        this.parent.on(refreshEnd, this.onRefreshEnd, this);
        this.parent.on(updateTreeSelection, this.onSelectionChanged, this);
        this.parent.on(openInit, this.onOpenInit, this);
        this.parent.on(openEnd, this.onOpenEnd, this);
        this.parent.on(destroy, this.destroy, this);
        this.parent.on(renameInit, this.onRenameInit, this);
        this.parent.on(renameEnd, this.onRenameEnd, this);
        this.parent.on(renameEndParent, this.onRenameEndParent, this);
        this.parent.on(clearPathInit, this.onClearPathInit, this);
        this.parent.on(cutCopyInit, this.oncutCopyInit, this);
        this.parent.on(dropInit, this.onDropInit, this);
        this.parent.on(menuItemData, this.onMenuItemData, this);
        this.parent.on(dragEnd, this.onDragEnd, this);
        this.parent.on(dragging, this.onDragging, this);
        this.parent.on(dropPath, this.onDropPath, this);
        this.parent.on(detailsInit, this.onDetailsInit, this);
        this.parent.on(pathDrag, this.onPathDrag, this);
    }
    removeEventListener() {
        this.parent.off(initialEnd, this.onInitialEnd);
        this.parent.off(downloadInit, this.onDownLoadInit);
        this.parent.off(finalizeEnd, this.onFinalizeEnd);
        this.parent.off(selectedData, this.onSelectedData);
        this.parent.off(modelChanged, this.onPropertyChanged);
        this.parent.off(pathChanged, this.onPathChanged);
        this.parent.off(pasteEnd, this.onpasteEnd);
        this.parent.off(cutEnd, this.onCutEnd);
        this.parent.off(pasteInit, this.onpasteInit);
        this.parent.off(updateTreeSelection, this.onSelectionChanged);
        this.parent.off(nodeExpand, this.onNodeExpanded);
        this.parent.off(createEnd, this.onCreateEnd);
        this.parent.off(refreshEnd, this.onRefreshEnd);
        this.parent.off(openInit, this.onOpenInit);
        this.parent.off(openEnd, this.onOpenEnd);
        this.parent.off(destroy, this.destroy);
        this.parent.off(renameInit, this.onRenameInit);
        this.parent.off(renameEnd, this.onRenameEnd);
        this.parent.off(renameEndParent, this.onRenameEndParent);
        this.parent.off(clearPathInit, this.onClearPathInit);
        this.parent.off(deleteInit, this.onDeleteInit);
        this.parent.off(deleteEnd, this.onDeleteEnd);
        this.parent.off(cutCopyInit, this.oncutCopyInit);
        this.parent.off(dropInit, this.onDropInit);
        this.parent.off(dragEnd, this.onDragEnd);
        this.parent.off(dragging, this.onDragging);
        this.parent.off(dropPath, this.onDropPath);
        this.parent.off(detailsInit, this.onDetailsInit);
        this.parent.off(menuItemData, this.onMenuItemData);
        this.parent.off(pathDrag, this.onPathDrag);
    }
    /* istanbul ignore next */
    onDetailsInit() {
        if (this.parent.activeModule === this.getModuleName()) {
            // eslint-disable-next-line
            const dataobj = this.getTreeData(this.treeObj.selectedNodes[0]);
            this.parent.itemData = dataobj;
        }
    }
    // eslint-disable-next-line
    onMenuItemData(args) {
        if (this.parent.activeModule === this.getModuleName()) {
            const liEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.target, 'li');
            this.parent.itemData = this.getTreeData(liEle.getAttribute('data-uid'));
        }
    }
    /* istanbul ignore next */
    onDragging(args) {
        const ele = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.target, 'li');
        if (ele.classList.contains('e-node-collapsed')) {
            this.isDrag = true;
            const level = parseInt(ele.getAttribute('aria-level'), 10);
            this.treeObj.expandAll([ele.getAttribute('data-uid')], level + 1);
            this.isDrag = false;
        }
    }
    onDropInit(args) {
        if (this.parent.targetModule === this.getModuleName()) {
            const dropLi = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.target, 'li');
            this.parent.dropData = this.getTreeData(dropLi)[0];
            this.parent.dropPath = this.getDropPath(dropLi, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('name', this.parent.dropData));
        }
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} - returns the module name.
     * @private
     */
    getModuleName() {
        return 'navigationpane';
    }
    destroy() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.removeEventListener();
        if (this.treeObj) {
            this.unWireEvents();
            this.treeObj.destroy();
        }
    }
    wireEvents() {
        this.keyboardModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.KeyboardEvents(this.treeObj.element, {
            keyAction: this.keyDown.bind(this),
            keyConfigs: this.keyConfigs,
            eventName: 'keydown'
        });
    }
    unWireEvents() {
        this.keyboardModule.destroy();
    }
    /* istanbul ignore next */
    keyDown(e) {
        const action = e.action;
        switch (action) {
            case 'altEnter':
                this.parent.notify(detailsInit, {});
                GetDetails(this.parent, [], this.parent.path, 'details');
                break;
            case 'esc':
                removeActive(this.parent);
                break;
            case 'del':
                if (this.parent.pathId[0] !== this.activeNode.getAttribute('data-uid')) {
                    this.updateItemData();
                    if (!hasEditAccess(this.parent.itemData[0])) {
                        createDeniedDialog(this.parent, this.parent.itemData[0], permissionEdit);
                    }
                    else {
                        this.removeNodes = [];
                        createDialog(this.parent, 'Delete');
                    }
                }
                break;
            case 'ctrlC':
                copyFiles(this.parent);
                break;
            case 'ctrlV':
                this.parent.folderPath = '';
                pasteHandler(this.parent);
                break;
            case 'ctrlX':
                cutFiles(this.parent);
                break;
            case 'shiftF10':
                this.updateItemData();
                if (!hasDownloadAccess(this.parent.itemData[0])) {
                    createDeniedDialog(this.parent, this.parent.itemData[0], permissionDownload);
                    return;
                }
                if (this.parent.selectedItems.length !== 0) {
                    this.doDownload();
                }
                break;
            case 'f2':
                if (this.parent.selectedItems.length === 0) {
                    // eslint-disable-next-line
                    const data = this.getTreeData(this.treeObj.selectedNodes[0])[0];
                    if (!hasEditAccess(data)) {
                        createDeniedDialog(this.parent, data, permissionEdit);
                    }
                    else {
                        this.updateRenameData();
                        createDialog(this.parent, 'Rename');
                    }
                }
                break;
        }
    }
    // eslint-disable-next-line
    getTreeData(args) {
        // eslint-disable-next-line
        const data = this.treeObj.getTreeData(args);
        for (let i = 0; i < data.length; i++) {
            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('hasChild', data[i]))) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('hasChild', false, data[i]);
            }
        }
        return data;
    }
    updateRenameData() {
        this.updateItemData();
        this.parent.currentItemText = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('name', this.parent.itemData[0]);
    }
    updateItemData() {
        // eslint-disable-next-line
        const data = this.getTreeData(this.treeObj.selectedNodes[0])[0];
        this.parent.itemData = [data];
        this.parent.isFile = false;
    }
    updateActionData() {
        this.updateItemData();
        const newPath = getParentPath(this.parent.path);
        this.parent.setProperties({ path: newPath }, true);
        this.parent.pathId.pop();
        this.parent.pathNames.pop();
    }
    /* istanbul ignore next */
    doDownload() {
        const newPath = getParentPath(this.parent.path);
        const itemId = this.treeObj.selectedNodes[0];
        const name = (itemId === this.parent.pathId[0]) ? '' : (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('name', this.parent.itemData[0]);
        Download(this.parent, newPath, [name]);
    }
}

/**
 * DetailsView module
 */
class DetailsView {
    /**
     * Constructor for the GridView module
     *
     * @param {FileManager} parent - specifies the parent.
     * @hidden
     */
    constructor(parent) {
        this.isInteracted = true;
        this.interaction = true;
        this.isPasteOperation = false;
        this.isColumnRefresh = false;
        this.dragObj = null;
        this.startIndex = null;
        this.firstItemIndex = null;
        this.isSelectionUpdate = false;
        this.currentSelectedItem = [];
        this.count = 0;
        this.isRendered = true;
        this.isLoaded = false;
        this.isNameWidth = false;
        this.pasteOperation = false;
        this.uploadOperation = false;
        _syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_9__.Grid.Inject(_syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_9__.Resize, _syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_9__.ContextMenu, _syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_9__.Sort, _syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_9__.VirtualScroll);
        this.parent = parent;
        this.element = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parent.element.id + GRID_ID, this.parent.element);
        this.addEventListener();
        this.keyConfigs = {
            altEnter: 'alt+enter',
            esc: 'escape',
            tab: 'tab',
            moveDown: 'downarrow',
            ctrlEnd: 'ctrl+end',
            ctrlHome: 'ctrl+home',
            ctrlDown: 'ctrl+downarrow',
            ctrlLeft: 'ctrl+leftarrow',
            ctrlRight: 'ctrl+rightarrow',
            shiftEnd: 'shift+end',
            shiftHome: 'shift+home',
            shiftDown: 'shift+downarrow',
            shiftUp: 'shift+uparrow',
            ctrlUp: 'ctrl+uparrow',
            csEnd: 'ctrl+shift+end',
            csHome: 'ctrl+shift+home',
            csDown: 'ctrl+shift+downarrow',
            csUp: 'ctrl+shift+uparrow',
            space: 'space',
            ctrlSpace: 'ctrl+space',
            shiftSpace: 'shift+space',
            csSpace: 'ctrl+shift+space',
            end: 'end',
            home: 'home',
            moveUp: 'uparrow',
            del: 'delete',
            ctrlX: 'ctrl+x',
            ctrlC: 'ctrl+c',
            ctrlV: 'ctrl+v',
            ctrlShiftN: 'ctrl+shift+n',
            shiftdel: 'shift+delete',
            ctrlD: 'ctrl+d',
            f2: 'f2',
            ctrlA: 'ctrl+a',
            enter: 'enter'
        };
    }
    /* istanbul ignore next */
    render(args) {
        (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.showSpinner)(this.parent.element);
        if (this.parent.view === 'Details') {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.parent.element], MULTI_SELECT);
            // eslint-disable-next-line
            const items = getSortedData(this.parent, args.files);
            this.checkNameWidth();
            const columns = this.getColumns();
            let sortSettings;
            if (this.parent.isMobile) {
                sortSettings = [];
            }
            else {
                if (this.parent.sortOrder !== 'None') {
                    sortSettings = [{ direction: this.parent.sortOrder, field: this.parent.sortBy }];
                }
            }
            this.gridObj = new _syncfusion_ej2_grids__WEBPACK_IMPORTED_MODULE_9__.Grid({
                dataSource: items,
                allowSorting: true,
                rowSelecting: this.onSelection.bind(this, 'select'),
                rowDeselecting: this.onSelection.bind(this, 'unselect'),
                rowSelected: this.onSelected.bind(this),
                rowDeselected: this.onDeSelection.bind(this),
                allowResizing: this.parent.detailsViewSettings.columnResizing,
                selectionSettings: {
                    type: this.parent.allowMultiSelection ? 'Multiple' : 'Single',
                    checkboxMode: 'ResetOnRowClick'
                },
                enableRtl: this.parent.enableRtl,
                pageSettings: { pageSize: 20 },
                sortSettings: { allowUnsort: false, columns: sortSettings },
                columns: columns,
                recordDoubleClick: this.DblClickEvents.bind(this),
                beforeDataBound: this.onBeforeDataBound.bind(this),
                dataBound: this.onDataBound.bind(this),
                rowDataBound: this.onRowDataBound.bind(this),
                actionBegin: this.onActionBegin.bind(this),
                headerCellInfo: this.onHeaderCellInfo.bind(this),
                width: '100%',
                beforeCopy: (args) => { args.cancel = true; },
                // eslint-disable-next-line
                load: function (args) {
                    this.focusModule.destroy();
                },
                locale: this.parent.locale
            });
            this.gridObj.isStringTemplate = true;
            this.gridObj.appendTo('#' + this.parent.element.id + GRID_ID);
            this.wireEvents();
            this.adjustHeight();
            this.emptyArgs = args;
        }
    }
    checkNameWidth() {
        const initialColumn = this.parent.detailsViewSettings.columns;
        this.isNameWidth = false;
        for (let i = 0; i < initialColumn.length; i++) {
            if (initialColumn[i].field === 'name') {
                this.isNameWidth = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(initialColumn[i].width);
                return;
            }
        }
    }
    adjustWidth(columns, fieldName) {
        if (this.isNameWidth && (fieldName === 'name')) {
            return;
        }
        for (let i = 0; i < columns.length; i++) {
            if (columns[i].field === fieldName) {
                let nameWidth;
                if (this.parent.breadcrumbbarModule.searchObj.element.value === '' && !this.parent.isFiltered) {
                    nameWidth = (this.element.clientWidth <= 500) ? '120px' : 'auto';
                }
                else {
                    nameWidth = (this.element.clientWidth <= 680) ? ((fieldName === 'name') ? '120px' : '180px') : 'auto';
                }
                columns[i].width = nameWidth;
            }
        }
    }
    getColumns() {
        let columns;
        if (this.parent.isMobile) {
            columns = [
                {
                    field: 'name', headerText: getLocaleText(this.parent, 'Name'), width: 'auto', minWidth: 120, headerTextAlign: 'Left',
                    template: '<div class="e-fe-text">${name}</div><div class="e-fe-date">${_fm_modified}</div>' +
                        '<span class="e-fe-size">${size}</span>'
                }
            ];
        }
        else {
            columns = JSON.parse(JSON.stringify(this.parent.detailsViewSettings.columns));
            this.adjustWidth(columns, 'name');
            for (let i = 0, len = columns.length; i < len; i++) {
                columns[i].headerText = getLocaleText(this.parent, columns[i].headerText);
            }
        }
        const iWidth = ((this.parent.isMobile || this.parent.isBigger) ? '54' : '46');
        const icon = {
            field: 'type', width: iWidth, minWidth: iWidth, template: '<span class="e-fe-icon ${_fm_iconClass}"></span>',
            allowResizing: false, allowSorting: true, customAttributes: { class: 'e-fe-grid-icon' },
            headerTemplate: '<span class="e-fe-icon e-fe-folder"></span>'
        };
        columns.unshift(icon);
        if (this.parent.allowMultiSelection) {
            const cWidth = (this.parent.isBigger ? '36' : '26');
            const cBox = {
                type: 'checkbox', width: cWidth, minWidth: cWidth, customAttributes: { class: 'e-fe-checkbox' },
                allowResizing: false, allowSorting: false
            };
            if (this.parent.isMobile) {
                columns.push(cBox);
            }
            else {
                columns.unshift(cBox);
            }
        }
        for (let i = 0, len = columns.length; i < len; i++) {
            columns[i].disableHtmlEncode = !this.parent.enableHtmlSanitizer;
        }
        return columns;
    }
    adjustHeight() {
        if (!this.gridObj) {
            return;
        }
        const pane = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parent.element.id + CONTENT_ID, this.parent.element);
        const bar = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parent.element.id + BREADCRUMBBAR_ID, this.parent.element);
        const gridHeader = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + GRID_HEADER, this.parent.element);
        const height = (pane.offsetHeight - bar.offsetHeight - gridHeader.offsetHeight);
        this.gridObj.height = height;
        this.gridObj.dataBind();
    }
    renderCheckBox() {
        this.gridObj.columns = this.getColumns();
        this.isColumnRefresh = true;
        this.gridObj.refreshColumns();
    }
    onRowDataBound(args) {
        let td = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.e-fe-grid-name', args.row);
        if (!td) {
            const columns = this.parent.detailsViewSettings.columns;
            for (let i = 0; i < columns.length; i++) {
                if (columns[i].field === 'name') {
                    td = args.row.children[this.parent.allowMultiSelection ? (i + 2) : (i + 1)];
                    break;
                }
            }
        }
        if (td) {
            td.setAttribute('title', (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('name', args.data));
        }
        if (this.parent.isLayoutChange && this.parent.isCut && this.parent.fileAction === 'move' &&
            this.parent.selectedNodes && this.parent.selectedNodes.length !== 0) {
            if (this.parent.selectedNodes.indexOf((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('name', args.data)) !== -1) {
                addBlur(args.row);
            }
        }
        if (!this.parent.showFileExtension && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('isFile', args.data)) {
            const textEle = args.row.querySelector('.e-fe-text');
            if (textEle) {
                const name = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('name', args.data);
                const type = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('type', args.data);
                textEle.innerHTML = name.substr(0, name.length - type.length);
            }
        }
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('size', args.data) !== undefined && args.row.querySelector('.e-fe-size')) {
            const sizeEle = args.row.querySelector('.e-fe-size');
            let modifiedSize;
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('isFile', args.data)) {
                modifiedSize = '';
            }
            else {
                const sizeValue = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('size', args.data);
                const intl = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Internationalization(this.parent.locale);
                const value = intl.formatNumber((sizeValue / 1024), { format: 'n' });
                modifiedSize = value + ' ' + getLocaleText(this.parent, 'KB');
            }
            sizeEle.innerHTML = modifiedSize;
        }
        if (this.parent.isMobile) {
            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('_fm_modified', args.data) !== undefined && args.row.querySelector('.e-fe-date')) {
                const dateEle = args.row.querySelector('.e-fe-date');
                const intl = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Internationalization(this.parent.locale);
                const columns = this.parent.detailsViewSettings.columns;
                // eslint-disable-next-line
                let format;
                for (let i = 0; i < columns.length; i++) {
                    if (columns[i].field === 'dateModified') {
                        format = columns[i].format;
                        break;
                    }
                }
                const formattedString = intl.formatDate(new Date((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('_fm_modified', args.data)), format);
                dateEle.innerHTML = formattedString;
            }
        }
        const checkWrap = args.row.querySelector('.' + CB_WRAP);
        if (checkWrap) {
            checkWrap.classList.add('e-small');
        }
        if (!hasEditAccess(args.data)) {
            args.row.className += ' ' + getAccessClass(args.data);
        }
        const eventArgs = {
            element: args.row,
            fileDetails: args.data,
            module: 'DetailsView'
        };
        this.parent.trigger('fileLoad', eventArgs);
    }
    onActionBegin(args) {
        if (args.requestType === 'sorting') {
            this.parent.setProperties({ sortOrder: args.direction }, true);
            this.parent.setProperties({ sortBy: args.columnName }, true);
            if (this.parent.selectedItems.length !== 0) {
                this.sortItem = true;
                const rows = this.gridObj.getSelectedRowIndexes();
                let len = rows.length;
                this.sortSelectedNodes = [];
                while (len > 0) {
                    // eslint-disable-next-line
                    const data = this.gridObj.getRowsObject()[rows[len - 1]].data;
                    this.sortSelectedNodes.push((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.parent.hasId ? 'id' : 'name', data));
                    len--;
                }
            }
            this.parent.notify(sortByChange, {});
        }
    }
    onHeaderCellInfo(args) {
        const checkWrap = args.node.querySelector('.' + CB_WRAP);
        if (checkWrap) {
            checkWrap.classList.add('e-small');
        }
    }
    onBeforeDataBound(args) {
        (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.showSpinner)(this.parent.element);
        // eslint-disable-next-line
        const items = getSortedData(this.parent, this.gridObj.dataSource);
        args.result = items;
    }
    /* istanbul ignore next */
    onDataBound() {
        this.createDragObj();
        if (this.parent.selectedItems.length !== 0) {
            this.selectRecords(this.parent.selectedItems);
        }
        if (this.isPasteOperation === true) {
            if (!this.isColumnRefresh) {
                this.selectRecords(this.parent.pasteNodes);
                this.isPasteOperation = false;
            }
            else {
                this.isColumnRefresh = false;
            }
        }
        if (this.parent.createdItem) {
            this.selectRecords([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.parent.hasId ? 'id' : 'name', this.parent.createdItem)]);
            this.parent.createdItem = null;
        }
        if (this.parent.layoutSelectedItems.length) {
            this.selectRecords(this.parent.layoutSelectedItems);
        }
        if (this.parent.renamedItem) {
            this.addSelection(this.parent.renamedItem);
            this.parent.renamedItem = null;
        }
        if (this.sortItem === true) {
            this.selectRecords(this.sortSelectedNodes);
            this.sortItem = false;
        }
        if (this.isSelectionUpdate) {
            if (!this.isColumnRefresh) {
                this.selectRecords(this.currentSelectedItem);
                this.isSelectionUpdate = false;
            }
            else {
                this.isColumnRefresh = false;
            }
        }
        if (this.uploadOperation === true) {
            this.count++;
            this.selectRecords(this.parent.uploadItem);
            if (this.count === this.parent.uploadItem.length) {
                this.uploadOperation = false;
                this.parent.uploadItem = [];
            }
        }
        if (this.gridObj.currentViewData.length * this.gridObj.getRowHeight() < this.gridObj.height) {
            const hdTable = this.gridObj.getHeaderContent();
            hdTable.style.paddingRight = '';
            hdTable.style.paddingLeft = '';
            const hdContent = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.e-headercontent', hdTable);
            hdContent.style.borderRightWidth = '0';
            const cnTable = this.gridObj.getContent().querySelector('.e-content');
            cnTable.style.overflowY = '';
            cnTable.classList.add('e-scrollShow');
        }
        else {
            const hdTable = this.gridObj.getHeaderContent();
            if (!this.parent.enableRtl) {
                hdTable.style.paddingRight = '16px';
            }
            else {
                hdTable.style.paddingLeft = '16px';
            }
            const cnTable = this.gridObj.getContent().querySelector('.e-content');
            cnTable.classList.remove('e-scrollShow');
        }
        this.isRendered = true;
        this.parent.isLayoutChange = false;
        (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.hideSpinner)(this.parent.element);
        this.checkEmptyDiv(this.emptyArgs);
        this.isInteracted = this.isLoaded ? true : this.isInteracted;
        this.isLoaded = false;
    }
    selectRecords(nodes) {
        // eslint-disable-next-line
        const gridRecords = this.gridObj.getCurrentViewRecords();
        const sRecords = [];
        for (let i = 0, len = gridRecords.length; i < len; i++) {
            const node = this.parent.hasId ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('id', gridRecords[i]) : getName(this.parent, gridRecords[i]);
            if (nodes.indexOf(node) !== -1) {
                sRecords.push(i);
            }
        }
        if (sRecords.length !== 0) {
            this.gridObj.selectRows(sRecords);
            this.addFocus(this.gridObj.selectedRowIndex);
        }
    }
    // eslint-disable-next-line
    addSelection(data) {
        // eslint-disable-next-line
        const items = this.gridObj.getCurrentViewRecords();
        // eslint-disable-next-line
        let rData = [];
        if (this.parent.hasId) {
            rData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(items).
                executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where('id', 'equal', this.parent.renamedId, false));
        }
        else {
            // eslint-disable-next-line
            const nData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(items).
                executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where('name', 'equal', (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('name', data), false));
            if (nData.length > 0) {
                rData = new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.DataManager(nData).
                    executeLocal(new _syncfusion_ej2_data__WEBPACK_IMPORTED_MODULE_1__.Query().where('filterPath', 'equal', this.parent.filterPath, false));
            }
        }
        if (rData.length > 0) {
            const index = items.indexOf(rData[0]);
            this.gridObj.selectRows([index]);
        }
    }
    onSortColumn() {
        if (this.parent.sortOrder !== 'None') {
            this.gridObj.sortModule.sortColumn(this.parent.sortBy, this.parent.sortOrder);
        }
        else {
            // eslint-disable-next-line
            this.gridObj.dataSource = getSortedData(this.parent, this.gridObj.dataSource);
        }
    }
    onPropertyChanged(e) {
        if (e.module !== this.getModuleName() && e.module !== 'common') {
            /* istanbul ignore next */
            return;
        }
        for (const prop of Object.keys(e.newProp)) {
            switch (prop) {
                case 'allowDragAndDrop':
                    this.createDragObj();
                    break;
                case 'height':
                    this.adjustHeight();
                    break;
                case 'detailsViewSettings':
                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.gridObj)) {
                        this.checkNameWidth();
                        const columns = this.getColumns();
                        this.gridObj.columns = columns;
                        this.gridObj.allowResizing = this.parent.detailsViewSettings.columnResizing;
                        this.gridObj.dataBind();
                        this.gridObj.refreshColumns();
                    }
                    break;
                case 'selectedItems':
                    this.interaction = false;
                    if (this.parent.selectedItems.length !== 0) {
                        if (!this.parent.allowMultiSelection) {
                            const slItems = this.parent.selectedItems.slice(this.parent.selectedItems.length - 1);
                            this.parent.setProperties({ selectedItems: slItems }, true);
                        }
                        this.selectRecords(this.parent.selectedItems);
                        this.parent.setProperties({ selectedItems: this.parent.selectedItems }, true);
                    }
                    else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.gridObj)) {
                        this.gridObj.clearSelection();
                    }
                    break;
                case 'showFileExtension':
                    read(this.parent, pathChanged, this.parent.path);
                    break;
                case 'showHiddenItems':
                    read(this.parent, pathChanged, this.parent.path);
                    break;
                case 'allowMultiSelection':
                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.gridObj)) {
                        this.currentSelectedItem = this.parent.selectedItems;
                        this.gridObj.selectionSettings.type = e.newProp.allowMultiSelection ? 'Multiple' : 'Single';
                        this.isSelectionUpdate = true;
                        this.renderCheckBox();
                    }
                    break;
                case 'view':
                    updateLayout(this.parent, 'Details');
                    break;
                case 'width':
                    this.onDetailsResize();
            }
        }
    }
    onPathChanged(args) {
        this.parent.isCut = false;
        if (this.parent.breadcrumbbarModule.searchObj.element.value.trim() === '' && this.gridObj) {
            this.parent.searchedItems = [];
            if (!this.parent.isFiltered) {
                this.removePathColumn(false);
            }
            else {
                this.updatePathColumn();
            }
        }
        removeBlur(this.parent);
        if (this.parent.view === 'Details') {
            /* istanbul ignore next */
            this.isInteracted = false;
            (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_2__.showSpinner)(this.parent.element);
            this.parent.setProperties({ selectedItems: [] }, true);
            this.gridObj.dataSource = getSortedData(this.parent, args.files);
        }
        this.emptyArgs = args;
    }
    updatePathColumn() {
        const len = this.gridObj.columns.length;
        const columnData = JSON.parse(JSON.stringify(this.gridObj.columns));
        if (columnData[len - 1].field && columnData[len - 1].field !== 'filterPath' && !this.parent.isMobile) {
            const pathColumn$$1 = {
                field: 'filterPath', headerText: getLocaleText(this.parent, 'Path'), minWidth: 180, width: 'auto'
            };
            this.gridObj.columns.push(pathColumn$$1);
            this.adjustWidth(this.gridObj.columns, 'filterPath');
            this.adjustWidth(this.gridObj.columns, 'name');
            this.isColumnRefresh = true;
            this.gridObj.refreshColumns();
        }
    }
    checkEmptyDiv(args) {
        // eslint-disable-next-line
        const items = getSortedData(this.parent, args.files);
        if (items.length === 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.element.querySelector('.' + GRID_VIEW))) {
            createEmptyElement(this.parent, this.element, args);
        }
        else if (items.length !== 0 && this.element.querySelector('.' + EMPTY)) {
            if (this.element.querySelector('.' + GRID_VIEW).querySelector('.' + EMPTY)) {
                const emptyDiv = this.element.querySelector('.' + GRID_VIEW).querySelector('.' + EMPTY);
                this.element.querySelector('.' + GRID_VIEW).removeChild(emptyDiv);
            }
            else {
                this.element.removeChild(this.element.querySelector('.' + EMPTY));
            }
        }
    }
    onOpenInit() {
        if (this.parent.activeModule === 'detailsview') {
            // eslint-disable-next-line
            const data = this.gridObj.getSelectedRecords()[0];
            this.openContent(data);
        }
    }
    DblClickEvents(args) {
        this.gridObj.selectRows([args.rowIndex]);
        // eslint-disable-next-line
        let data;
        if (args.rowData) {
            data = JSON.parse(JSON.stringify(args.rowData));
            this.openContent(data);
        }
    }
    // eslint-disable-next-line
    openContent(data) {
        if (!hasReadAccess(data)) {
            createDeniedDialog(this.parent, data, permissionRead);
            return;
        }
        const eventArgs = { cancel: false, fileDetails: data, module: 'DetailsView' };
        this.parent.trigger('fileOpen', eventArgs, (fileOpenArgs) => {
            if (!fileOpenArgs.cancel) {
                const name = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('name', data);
                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('isFile', data)) {
                    const icon = fileType(data);
                    if (icon === ICON_IMAGE) {
                        const imgUrl = getImageUrl(this.parent, data);
                        createImageDialog(this.parent, name, imgUrl);
                    }
                }
                else {
                    const val = this.parent.breadcrumbbarModule.searchObj.element.value;
                    if (val === '' && !this.parent.isFiltered) {
                        const id = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('id', data);
                        const newPath = this.parent.path + ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(id) ? name : id) + '/';
                        this.parent.setProperties({ path: newPath }, true);
                        this.parent.pathNames.push(name);
                        this.parent.pathId.push((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('_fm_id', data));
                        this.parent.itemData = [data];
                        openAction(this.parent);
                    }
                    else {
                        openSearchFolder(this.parent, data);
                    }
                    this.parent.isFiltered = false;
                }
                this.element.focus();
            }
        });
    }
    /* istanbul ignore next */
    onLayoutChange(args) {
        if (this.parent.view === 'Details') {
            if (!this.gridObj) {
                this.render(args);
            }
            else {
                this.isLoaded = true;
            }
            if (this.parent.isFiltered) {
                this.updatePathColumn();
                this.parent.setProperties({ selectedItems: [] }, true);
            }
            this.gridObj.dataSource = getSortedData(this.parent, args.files);
            this.parent.notify(hideLayout, {});
            this.gridObj.element.classList.remove(DISPLAY_NONE);
            this.isInteracted = false;
            this.gridObj.clearSelection();
            if (this.parent.breadcrumbbarModule.searchObj.element.value.trim() !== '') {
                this.onSearchFiles(args);
            }
            this.adjustHeight();
            if (this.gridObj.sortSettings.columns.length > 0 && this.gridObj.sortSettings.columns[0].field !== this.parent.sortBy) {
                if (this.parent.sortOrder !== 'None') {
                    this.gridObj.sortColumn(this.parent.sortBy, this.parent.sortOrder);
                }
            }
        }
    }
    /* istanbul ignore next */
    onSearchFiles(args) {
        if (this.parent.view === 'Details') {
            this.parent.setProperties({ selectedItems: [] }, true);
            this.parent.notify(selectionChanged, {});
            if (!this.parent.isLayoutChange) {
                this.parent.layoutSelectedItems = [];
            }
            this.updatePathColumn();
            this.parent.searchedItems = args.files;
            this.onPathChanged(args);
        }
    }
    removePathColumn(isRefresh) {
        const len = this.gridObj.columns.length;
        const columnData = JSON.parse(JSON.stringify(this.gridObj.columns));
        if (columnData[len - 1].field && (columnData[len - 1].field === 'filterPath')) {
            /* istanbul ignore next */
            if (this.gridObj.sortSettings.columns[0].field === 'filterPath') {
                if (this.parent.sortOrder !== 'None') {
                    this.gridObj.sortColumn('name', this.parent.sortOrder);
                }
                else {
                    // eslint-disable-next-line
                    this.gridObj.dataSource = getSortedData(this.parent, this.gridObj.dataSource);
                }
                this.parent.notify(sortByChange, {});
            }
            this.gridObj.columns.pop();
            if (!isRefresh) {
                this.isColumnRefresh = true;
                this.gridObj.refreshColumns();
            }
        }
    }
    onFinalizeEnd(args) {
        if (this.parent.view !== 'Details') {
            return;
        }
        if (!this.gridObj) {
            this.render(args);
        }
        else {
            this.onPathChanged(args);
        }
    }
    onCreateEnd(args) {
        if (this.parent.view !== 'Details') {
            return;
        }
        this.onPathChanged(args);
    }
    onRenameInit() {
        if (this.parent.activeModule === 'detailsview' && this.parent.selectedItems.length === 1) {
            this.updateRenameData();
        }
    }
    onSelectedData() {
        if (this.parent.activeModule === 'detailsview') {
            this.parent.itemData = this.gridObj.getSelectedRecords();
        }
    }
    onDeleteInit() {
        if (this.parent.activeModule === 'detailsview') {
            Delete(this.parent, this.parent.selectedItems, this.parent.path, 'delete');
        }
    }
    /* istanbul ignore next */
    onDeleteEnd(args) {
        if (this.parent.view !== 'Details') {
            return;
        }
        this.onPathChanged(args);
        this.parent.setProperties({ selectedItems: [] }, true);
    }
    onRefreshEnd(args) {
        if (this.parent.view !== 'Details') {
            return;
        }
        this.isInteracted = false;
        this.removePathColumn(false);
        this.gridObj.dataSource = getSortedData(this.parent, args.files);
        this.emptyArgs = args;
    }
    onHideLayout() {
        if (this.parent.view !== 'Details' && this.gridObj) {
            this.gridObj.element.classList.add(DISPLAY_NONE);
        }
    }
    onSelectAllInit() {
        if (this.parent.view === 'Details') {
            this.isInteracted = false;
            if (this.parent.allowMultiSelection) {
                this.gridObj.selectionModule.selectRowsByRange(0, this.gridObj.getRows().length);
            }
            else {
                this.gridObj.selectRow(this.gridObj.getRows().length - 1);
            }
            this.isInteracted = true;
            this.interaction = true;
        }
    }
    onClearAllInit() {
        if (this.parent.view === 'Details') {
            this.removeSelection();
            this.interaction = true;
        }
    }
    /* istanbul ignore next */
    onSelectionChanged() {
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], HEADER_CHECK);
        if (this.parent.selectedItems.length > 0) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], HEADER_CHECK);
        }
    }
    onLayoutRefresh() {
        if (this.parent.view !== 'Details') {
            return;
        }
        this.adjustHeight();
    }
    onBeforeRequest() {
        this.isRendered = false;
    }
    onAfterRequest() {
        this.isRendered = true;
    }
    onUpdateSelectionData() {
        if (this.parent.view !== 'Details') {
            return;
        }
        this.parent.itemData = this.gridObj.getSelectedRecords();
    }
    addEventListener() {
        this.parent.on(finalizeEnd, this.onFinalizeEnd, this);
        this.parent.on(destroy, this.destroy, this);
        this.parent.on(layoutChange, this.onLayoutChange, this);
        this.parent.on(pathChanged, this.onPathChanged, this);
        this.parent.on(createEnd, this.onCreateEnd, this);
        this.parent.on(dropInit, this.onDropInit, this);
        this.parent.on(detailsInit, this.onDetailsInit, this);
        this.parent.on(refreshEnd, this.onRefreshEnd, this);
        this.parent.on(search, this.onSearchFiles, this);
        this.parent.on(methodCall, this.onMethodCall, this);
        this.parent.on(actionFailure, this.onActionFailure, this);
        this.parent.on(modelChanged, this.onPropertyChanged, this);
        this.parent.on(deleteInit, this.onDeleteInit, this);
        this.parent.on(deleteEnd, this.onDeleteEnd, this);
        this.parent.on(selectedData, this.onSelectedData, this);
        this.parent.on(renameInit, this.onRenameInit, this);
        this.parent.on(renameEnd, this.onPathChanged, this);
        this.parent.on(openInit, this.onOpenInit, this);
        this.parent.on(sortColumn, this.onSortColumn, this);
        this.parent.on(openEnd, this.onPathChanged, this);
        this.parent.on(filterEnd, this.onPathChanged, this);
        this.parent.on(pasteInit, this.onPasteInit, this);
        this.parent.on(hideLayout, this.onHideLayout, this);
        this.parent.on(selectAllInit, this.onSelectAllInit, this);
        this.parent.on(clearAllInit, this.onClearAllInit, this);
        this.parent.on(pathColumn, this.onPathColumn, this);
        this.parent.on(selectionChanged, this.onSelectionChanged, this);
        this.parent.on(beforeRequest, this.onBeforeRequest, this);
        this.parent.on(afterRequest, this.onAfterRequest, this);
        this.parent.on(pasteEnd, this.onpasteEnd, this);
        this.parent.on(cutCopyInit, this.oncutCopyInit, this);
        this.parent.on(menuItemData, this.onMenuItemData, this);
        this.parent.on(resizeEnd, this.onDetailsResizeHandler, this);
        this.parent.on(splitterResize, this.onDetailsResize, this);
        this.parent.on(layoutRefresh, this.onLayoutRefresh, this);
        this.parent.on(dropPath, this.onDropPath, this);
        this.parent.on(updateSelectionData, this.onUpdateSelectionData, this);
    }
    removeEventListener() {
        this.parent.off(finalizeEnd, this.onFinalizeEnd);
        this.parent.off(destroy, this.destroy);
        this.parent.off(layoutChange, this.onLayoutChange);
        this.parent.off(pathChanged, this.onPathChanged);
        this.parent.off(pasteInit, this.onPasteInit);
        this.parent.off(createEnd, this.onCreateEnd);
        this.parent.off(refreshEnd, this.onRefreshEnd);
        this.parent.off(search, this.onSearchFiles);
        this.parent.off(methodCall, this.onMethodCall);
        this.parent.off(actionFailure, this.onActionFailure);
        this.parent.off(modelChanged, this.onPropertyChanged);
        this.parent.off(renameInit, this.onRenameInit);
        this.parent.off(renameEnd, this.onPathChanged);
        this.parent.off(filterEnd, this.onPathChanged);
        this.parent.off(openInit, this.onOpenInit);
        this.parent.off(sortColumn, this.onSortColumn);
        this.parent.off(openEnd, this.onPathChanged);
        this.parent.off(hideLayout, this.onHideLayout);
        this.parent.off(selectAllInit, this.onSelectAllInit);
        this.parent.off(clearAllInit, this.onClearAllInit);
        this.parent.off(deleteInit, this.onDeleteInit);
        this.parent.off(deleteEnd, this.onDeleteEnd);
        this.parent.off(pathColumn, this.onPathColumn);
        this.parent.off(selectionChanged, this.onSelectionChanged);
        this.parent.off(beforeRequest, this.onBeforeRequest);
        this.parent.off(afterRequest, this.onAfterRequest);
        this.parent.off(pasteEnd, this.onpasteEnd);
        this.parent.off(cutCopyInit, this.oncutCopyInit);
        this.parent.off(dropInit, this.onDropInit);
        this.parent.off(selectedData, this.onSelectedData);
        this.parent.off(detailsInit, this.onDetailsInit);
        this.parent.off(menuItemData, this.onMenuItemData);
        this.parent.off(resizeEnd, this.onDetailsResizeHandler);
        this.parent.off(splitterResize, this.onDetailsResize);
        this.parent.off(layoutRefresh, this.onLayoutRefresh);
        this.parent.off(dropPath, this.onDropPath);
        this.parent.off(updateSelectionData, this.onUpdateSelectionData);
    }
    onActionFailure() { this.interaction = true; }
    // eslint-disable-next-line
    onMenuItemData(args) {
        if (this.parent.activeModule === this.getModuleName()) {
            this.parent.itemData = [this.gridObj.getRowInfo(args.target).rowData];
        }
    }
    onPasteInit() {
        if (this.parent.activeModule === this.getModuleName()) {
            this.parent.itemData = (this.parent.folderPath !== '') ? this.gridObj.getSelectedRecords() :
                [getPathObject(this.parent)];
        }
    }
    onDetailsInit() {
        if (this.parent.activeModule === this.getModuleName()) {
            if (this.parent.selectedItems.length !== 0) {
                this.parent.itemData = this.gridObj.getSelectedRecords();
            }
            else {
                this.parent.itemData = [(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.parent.pathId[this.parent.pathId.length - 1], this.parent.feParent)];
            }
        }
    }
    dragHelper(args) {
        const dragTarget = args.sender.target;
        const dragLi = dragTarget.closest('tr.e-row');
        if (!dragLi) {
            return null;
        }
        const name = dragLi.getElementsByClassName('e-fe-text')[0].innerText;
        if (dragLi && !dragLi.querySelector('.e-active')) {
            this.selectRecords([name]);
        }
        getModule(this.parent, dragLi);
        this.parent.activeElements = [];
        this.parent.dragData = [];
        // eslint-disable-next-line
        this.parent.dragData = this.gridObj.getSelectedRecords();
        let dragRow;
        if (this.parent.dragData.length === 0 && dragLi) {
            dragRow = this.gridObj.getRowInfo(dragLi);
        }
        if (dragRow) {
            this.parent.dragData.push(dragRow.rowData);
        }
        this.parent.dragPath = this.parent.path;
        this.parent.activeElements = this.gridObj.getSelectedRows();
        createVirtualDragElement(this.parent);
        return this.parent.virtualDragElement;
    }
    /* istanbul ignore next */
    onDetailsResize() {
        if (this.parent.view === 'Details' && !this.parent.isMobile && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.gridObj)) {
            const gridHeader = this.gridObj.getHeaderContent().querySelector('.e-headercontent');
            const gridHeaderColGroup = gridHeader.firstChild.childNodes[0];
            const gridContentColGroup = this.gridObj.getContent().querySelector('.e-content .e-table').children[0];
            const gridHeaderColNames = this.gridObj.getColumns();
            for (let i = 0; i < gridHeaderColNames.length; i++) {
                if ((!this.isNameWidth && gridHeaderColNames[i].field === 'name') || gridHeaderColNames[i].field === 'filterPath') {
                    if (this.parent.breadcrumbbarModule.searchObj.element.value === '' && !this.parent.isFiltered) {
                        if (this.element.clientWidth <= 500) {
                            gridHeaderColGroup.children[i].setAttribute('style', 'width: 120px');
                            gridContentColGroup.children[i].setAttribute('style', 'width: 120px');
                        }
                        else if (this.element.clientWidth > 500) {
                            gridHeaderColGroup.children[i].setAttribute('style', 'width: auto');
                            gridContentColGroup.children[i].setAttribute('style', 'width: auto');
                        }
                    }
                    else {
                        if (this.element.clientWidth <= 680) {
                            if (gridHeaderColNames[i].field === 'name') {
                                gridHeaderColGroup.children[i].setAttribute('style', 'width: 120px');
                                gridContentColGroup.children[i].setAttribute('style', 'width: 120px');
                            }
                            else {
                                gridHeaderColGroup.children[i].setAttribute('style', 'width: 180px');
                                gridContentColGroup.children[i].setAttribute('style', 'width: 180px');
                            }
                        }
                        else if (this.element.clientWidth > 680) {
                            gridHeaderColGroup.children[i].setAttribute('style', 'width: auto');
                            gridContentColGroup.children[i].setAttribute('style', 'width: auto');
                        }
                    }
                }
            }
        }
    }
    onDetailsResizeHandler() {
        this.onDetailsResize();
        if (this.parent.view === 'Details' && !this.parent.isMobile && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.gridObj)) {
            this.adjustHeight();
        }
    }
    createDragObj() {
        if (!this.parent.isMobile && this.gridObj) {
            if (this.parent.allowDragAndDrop) {
                if (this.dragObj) {
                    this.dragObj.destroy();
                }
                this.dragObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Draggable(this.gridObj.element, {
                    cursorAt: this.parent.dragCursorPosition,
                    distance: 5,
                    enableTailMode: true,
                    dragArea: this.parent.element,
                    dragTarget: '.' + ROW,
                    drag: draggingHandler.bind(this, this.parent),
                    dragStart: (args) => {
                        dragStartHandler(this.parent, args, this.dragObj);
                    },
                    dragStop: dragStopHandler.bind(this, this.parent),
                    enableAutoScroll: true,
                    helper: this.dragHelper.bind(this)
                });
            }
            else if (!this.parent.allowDragAndDrop && this.dragObj) {
                this.dragObj.destroy();
            }
        }
    }
    onDropInit(args) {
        if (this.parent.targetModule === this.getModuleName()) {
            /* istanbul ignore next */
            // eslint-disable-next-line
            const cwdData = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.parent.pathId[this.parent.pathId.length - 1], this.parent.feParent);
            if (!args.target.closest('tr')) {
                this.parent.dropPath = this.parent.path;
                this.parent.dropData = cwdData;
            }
            else {
                // eslint-disable-next-line
                let info = null;
                // eslint-disable-next-line
                info = this.gridObj.getRowInfo(args.target).rowData;
                this.parent.dropPath = info.isFile ? this.parent.path : getFullPath(this.parent, info, this.parent.path);
                this.parent.dropData = info.isFile ? cwdData : info;
            }
        }
    }
    oncutCopyInit() {
        if (this.parent.activeModule === this.getModuleName()) {
            this.parent.activeRecords = this.gridObj.getSelectedRecords();
            this.parent.activeElements = this.gridObj.getSelectedRows();
        }
    }
    onpasteEnd(args) {
        if (this.parent.view === 'Details') {
            this.isPasteOperation = true;
            if (this.parent.path === this.parent.destinationPath || this.parent.path === getDirectoryPath(this.parent, args)) {
                this.onPathChanged(args);
            }
        }
    }
    onDropPath(args) {
        if (this.parent.view === 'Details') {
            this.isPasteOperation = true;
            this.onPathChanged(args);
        }
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} - returns modules name.
     * @private
     */
    getModuleName() {
        return 'detailsview';
    }
    destroy() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.removeEventListener();
        if (this.gridObj) {
            this.unWireEvents();
            this.gridObj.destroy();
        }
    }
    updateType(item) {
        const folder = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + FOLDER, item);
        this.parent.isFile = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(folder) ? true : false;
    }
    /* istanbul ignore next */
    onSelection(action, args) {
        const eventArgs = {
            action: action, fileDetails: args.data, isInteracted: this.interaction, cancel: false, target: args.target
        };
        this.parent.trigger('fileSelection', eventArgs);
        args.cancel = eventArgs.cancel;
    }
    /* istanbul ignore next */
    onSelected(args) {
        this.parent.activeModule = 'detailsview';
        if (!this.parent.isLayoutChange || this.parent.isFiltered) {
            this.selectedRecords();
        }
        this.parent.notify(selectionChanged, {});
        if (this.gridObj.getSelectedRowIndexes().length === 1) {
            this.firstItemIndex = this.gridObj.selectedRowIndex;
        }
        this.gridObj.element.setAttribute('tabindex', '-1');
        this.triggerSelect('select', args);
        const item = this.gridObj.getRowByIndex(this.gridObj.selectedRowIndex);
        this.updateType(item);
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item.querySelector('.e-checkselect'))) {
            if (this.gridObj.getSelectedRowIndexes().length !== 1) {
                const lastItemIndex = this.gridObj.getSelectedRowIndexes()[this.gridObj.getSelectedRowIndexes().length - 2];
                const lastItem = this.gridObj.getRowByIndex(lastItemIndex);
                lastItem.querySelector('.e-checkselect').setAttribute('tabindex', '-1');
            }
            item.querySelector('.e-rowcell.e-fe-checkbox').removeAttribute('tabindex');
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.gridObj) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.gridObj.element.querySelector('.e-checkselectall'))) {
            this.gridObj.element.querySelector('.e-checkselectall').setAttribute('tabindex', '-1');
        }
        const rows = this.gridObj.getSelectedRowIndexes();
        if (!this.parent.allowMultiSelection) {
            for (let i = 0; i < rows.length; i++) {
                if (rows[i] === this.gridObj.selectedRowIndex) {
                    this.gridObj.getRowByIndex(rows[i]).setAttribute('tabindex', '0');
                }
                else {
                    this.gridObj.getRowByIndex(rows[i]).removeAttribute('tabindex');
                }
            }
        }
        const len = rows.length;
        if (len > 0) {
            // eslint-disable-next-line
            const data = this.gridObj.getRowsObject()[rows[len - 1]].data;
            this.parent.currentItemText = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('name', data);
        }
        const indexes = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('rowIndexes', args);
        const multiSelect = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('enableSelectMultiTouch', this.gridObj.selectionModule);
        if (this.parent.isDevice && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(indexes) && args.target && !multiSelect && !args.target.closest('.e-headercell')) {
            this.parent.isFile = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('isFile', args.data);
            if (!this.parent.isFile) {
                this.openContent(args.data);
            }
        }
        this.parent.visitedItem = args.row;
        if (this.parent.allowMultiSelection && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item.querySelector('.e-checkselect'))) {
            const checkItem = item.querySelector('.e-checkselect');
            checkItem.focus();
        }
        this.addFocus(this.gridObj.selectedRowIndex);
        if (!this.parent.isLayoutChange) {
            this.isInteracted = true;
        }
    }
    /* istanbul ignore next */
    onPathColumn() {
        if (this.parent.view === 'Details' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.gridObj)) {
            if (this.parent.breadcrumbbarModule.searchObj.element.value === '' && !this.parent.isFiltered) {
                this.removePathColumn(false);
            }
        }
    }
    selectedRecords() {
        this.parent.setProperties({ selectedItems: [] }, true);
        // eslint-disable-next-line
        const selectedRecords = this.gridSelectNodes();
        let selectSize = 0;
        while (selectSize < selectedRecords.length) {
            const record = selectedRecords[selectSize];
            const name = getItemName(this.parent, record);
            this.parent.selectedItems.push(name);
            selectSize++;
        }
        this.parent.setProperties({ selectedItems: this.parent.selectedItems }, true);
    }
    onDeSelection(args) {
        /* istanbul ignore next */
        if (!this.parent.allowMultiSelection && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.data)) {
            this.gridObj.getRowByIndex(args.rowIndex).removeAttribute('tabindex');
        }
        else if (this.gridObj.getSelectedRowIndexes().length > 1) {
            const lastItemIndex = this.gridObj.getSelectedRowIndexes()[this.gridObj.getSelectedRowIndexes().length - 2];
            this.gridObj.getRowByIndex(lastItemIndex).querySelector('.e-checkselect').removeAttribute('tabindex');
        }
        if (this.gridObj.selectedRowIndex === -1) {
            this.gridObj.element.setAttribute('tabindex', '0');
        }
        if (!this.isInteracted) {
            this.isInteracted = true;
            return;
        }
        this.selectedRecords();
        if (this.parent.selectedItems.length === 0) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('enableSelectMultiTouch', false, this.gridObj.selectionModule);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.parent.element], MULTI_SELECT);
        }
        this.parent.notify(selectionChanged, {});
        this.triggerSelect('unselect', args);
        this.parent.visitedItem = null;
    }
    triggerSelect(action, args) {
        const eventArgs = { action: action, fileDetails: args.data, isInteracted: this.interaction };
        this.parent.trigger('fileSelect', eventArgs);
        this.interaction = true;
    }
    wireEvents() {
        this.wireClickEvent(true);
        this.keyboardModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.KeyboardEvents(this.gridObj.element, {
            keyAction: this.keyupHandler.bind(this),
            keyConfigs: this.keyConfigs,
            eventName: 'keyup'
        });
        this.keyboardDownModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.KeyboardEvents(this.element, {
            keyAction: this.keydownHandler.bind(this),
            keyConfigs: this.keyConfigs,
            eventName: 'keydown'
        });
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.gridObj.element, 'blur', this.removeFocus, this);
    }
    unWireEvents() {
        this.wireClickEvent(false);
        this.keyboardModule.destroy();
        this.keyboardDownModule.destroy();
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.gridObj.element, 'blur', this.removeFocus);
    }
    wireClickEvent(toBind) {
        if (toBind) {
            // eslint-disable-next-line
            const proxy = this;
            const ele = this.gridObj.getContent();
            this.clickObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Touch(ele, {
                tap: (eve) => {
                    if (eve.tapCount === 1 && eve.originalEvent.target.classList.contains('e-content')) {
                        proxy.onClearAllInit();
                    }
                },
                tapHold: (e) => {
                    if (proxy.parent.isDevice) {
                        e.originalEvent.preventDefault();
                        if (proxy.parent.allowMultiSelection) {
                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('enableSelectMultiTouch', proxy.parent.allowMultiSelection, proxy.gridObj.selectionModule);
                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([proxy.parent.element], MULTI_SELECT);
                        }
                        const target = e.originalEvent.target;
                        if (target) {
                            const row = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.' + ROW);
                            const index = proxy.gridObj.getRows().indexOf(row);
                            proxy.gridObj.selectRow(index);
                        }
                    }
                }
            });
        }
        else {
            if (this.clickObj) {
                this.clickObj.destroy();
            }
        }
    }
    /* istanbul ignore next */
    removeSelection() {
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.parent.element], MULTI_SELECT);
        this.gridObj.clearSelection();
        this.parent.setProperties({ selectedItems: [] }, true);
        this.parent.notify(selectionChanged, {});
        if (this.gridObj.selectedRowIndex === -1) {
            this.startIndex = null;
        }
        this.isInteracted = true;
    }
    removeFocus() {
        this.addFocus(null);
    }
    getFocusedItemIndex() {
        return (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.getFocusedItem())) ?
            parseInt(this.getFocusedItem().getAttribute('aria-rowindex'), 10) : null;
    }
    /* istanbul ignore next */
    // eslint:disable-next-line
    keydownHandler(e) {
        if (!this.isRendered) {
            return;
        }
        switch (e.action) {
            case 'end':
            case 'home':
            case 'space':
            case 'ctrlSpace':
            case 'shiftSpace':
            case 'csSpace':
            case 'ctrlA':
            case 'enter':
            case 'altEnter':
            case 'ctrlEnd':
            case 'shiftEnd':
            case 'csEnd':
            case 'ctrlHome':
            case 'shiftHome':
            case 'csHome':
            case 'ctrlDown':
            case 'shiftDown':
            case 'csDown':
            case 'ctrlLeft':
            case 'shiftLeft':
            case 'csLeft':
            case 'esc':
            case 'del':
            case 'shiftdel':
            case 'ctrlC':
            case 'ctrlV':
            case 'ctrlX':
            case 'f2':
            case 'moveDown':
            case 'moveUp':
                e.preventDefault();
                break;
            default:
                break;
        }
    }
    /* istanbul ignore next */
    // eslint:disable-next-line
    keyupHandler(e) {
        if (!this.isRendered) {
            return;
        }
        e.preventDefault();
        const action = e.action;
        // eslint-disable-next-line
        const gridItems = getSortedData(this.parent, this.gridObj.dataSource);
        const gridLength = gridItems.length;
        const focItem = this.getFocusedItem();
        const focIndex = this.getFocusedItemIndex();
        const selIndex = this.gridObj.selectedRowIndex;
        const selRowIndeces = this.gridObj.getSelectedRowIndexes();
        // eslint-disable-next-line
        let rowData;
        let firstItem;
        let lastItem;
        switch (action) {
            case 'altEnter':
                GetDetails(this.parent, this.parent.selectedItems, this.parent.path, 'details');
                break;
            case 'esc':
                removeActive(this.parent);
                break;
            case 'del':
            case 'shiftdel':
                this.performDelete();
                break;
            case 'enter':
                if (this.gridObj.selectedRowIndex === -1) {
                    break;
                }
                rowData = this.gridObj.getRowsObject()[this.gridObj.selectedRowIndex].data;
                if (rowData) {
                    // eslint-disable-next-line
                    const data = JSON.parse(JSON.stringify(rowData));
                    this.openContent(data);
                }
                break;
            case 'ctrlC':
                copyFiles(this.parent);
                break;
            case 'ctrlV':
                this.parent.folderPath = '';
                pasteHandler(this.parent);
                break;
            case 'ctrlX':
                cutFiles(this.parent);
                break;
            case 'ctrlD':
                this.doDownload();
                break;
            case 'f2':
                this.performRename();
                break;
            case 'ctrlA':
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(gridItems[0]) && this.parent.allowMultiSelection) {
                    const cnTable = this.gridObj.getContent().querySelector('.e-content');
                    const crtSrlPos = cnTable.scrollTop;
                    const crtFocusIndex = this.gridObj.selectedRowIndex;
                    this.gridObj.selectionModule.selectRowsByRange(0, gridItems.length - 1);
                    cnTable.scrollTop = crtSrlPos;
                    if (crtFocusIndex !== -1) {
                        this.addFocus(crtFocusIndex);
                    }
                }
                break;
            case 'ctrlHome':
            case 'tab':
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(gridItems[0])) {
                    if (!this.parent.allowMultiSelection && e.action === 'ctrlHome') {
                        this.gridObj.selectRow(0);
                    }
                    else if (this.gridObj.selectedRowIndex !== -1 && e.action === 'tab') {
                        return;
                    }
                    else {
                        this.addFocus(0);
                    }
                }
                break;
            case 'ctrlEnd':
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(gridItems[0])) {
                    if (!this.parent.allowMultiSelection) {
                        this.gridObj.selectRow(gridLength - 1);
                    }
                    else {
                        this.addFocus(gridLength - 1);
                    }
                }
                break;
            case 'shiftHome':
            case 'shiftEnd':
            case 'csHome':
            case 'csEnd':
                if (!this.parent.allowMultiSelection) {
                    this.gridObj.selectRow((e.action === 'shiftHome' || e.action === 'csHome') ? 0 : gridItems.length - 1);
                }
                else {
                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(gridItems[0])) {
                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(selIndex) && selIndex !== -1) {
                            this.checkRowsKey(gridItems, selIndex, null, e);
                        }
                        else {
                            if (e.action === 'csHome' || e.action === 'shiftHome') {
                                this.gridObj.selectRow(0);
                            }
                            else {
                                this.gridObj.selectionModule.selectRowsByRange(0, gridItems.length - 1);
                            }
                        }
                    }
                }
                break;
            case 'space':
            case 'csSpace':
            case 'shiftSpace':
            case 'ctrlSpace':
                this.spaceSelection(selRowIndeces, focIndex, selIndex, e);
                break;
            case 'csUp':
            case 'csDown':
            case 'shiftUp':
            case 'shiftDown':
                this.shiftMoveMethod(gridItems, selIndex, focIndex, selRowIndeces, e);
                break;
            case 'ctrlUp':
            case 'ctrlDown':
                if (!this.parent.allowMultiSelection) {
                    this.moveFunction(gridItems, e, selIndex);
                }
                else {
                    this.ctrlMoveFunction(gridItems, e, selIndex);
                }
                break;
            case 'home':
                firstItem = [(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.parent.hasId ? 'id' : 'name', gridItems[0])];
                this.parent.setProperties({ selectedItems: firstItem }, true);
                this.selectRecords(firstItem);
                break;
            case 'moveUp':
            case 'moveDown':
                this.moveFunction(gridItems, e, selIndex);
                break;
            case 'end':
                lastItem = [(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(this.parent.hasId ? 'id' : 'name', gridItems[gridLength - 1])];
                this.parent.setProperties({ selectedItems: lastItem }, true);
                this.selectRecords(lastItem);
                break;
        }
    }
    // eslint-disable-next-line
    gridSelectNodes() {
        return this.gridObj.getSelectedRecords();
    }
    doDownload() {
        if (this.parent.selectedItems.length !== 0) {
            this.parent.itemData = this.gridObj.getSelectedRecords();
            // eslint-disable-next-line
            const items = this.parent.itemData;
            for (let i = 0; i < items.length; i++) {
                if (!hasDownloadAccess(items[i])) {
                    createDeniedDialog(this.parent, items[i], permissionDownload);
                    return;
                }
            }
            Download(this.parent, this.parent.path, this.parent.selectedItems);
        }
    }
    performDelete() {
        if (this.parent.selectedItems && this.parent.selectedItems.length > 0) {
            this.parent.itemData = this.gridObj.getSelectedRecords();
            // eslint-disable-next-line
            const items = this.parent.itemData;
            for (let i = 0; i < items.length; i++) {
                if (!hasEditAccess(items[i])) {
                    createDeniedDialog(this.parent, items[i], permissionEdit);
                    return;
                }
            }
            createDialog(this.parent, 'Delete');
        }
    }
    performRename() {
        if (this.parent.selectedItems.length === 1) {
            this.updateRenameData();
            doRename(this.parent);
        }
    }
    updateRenameData() {
        // eslint-disable-next-line
        const data = this.gridSelectNodes()[0];
        updateRenamingData(this.parent, data);
    }
    // eslint-disable-next-line
    shiftMoveMethod(gridItems, selIndex, focIndex, selRowIndeces, e) {
        if (!this.parent.allowMultiSelection) {
            this.moveFunction(gridItems, e, selIndex);
        }
        else {
            if (selIndex === -1 && (e.action === 'csUp' || e.action === 'csDown')) {
                this.ctrlMoveFunction(gridItems, e, selIndex);
            }
            else if (selIndex !== -1 && focIndex !== selIndex &&
                !((e.action === 'csUp' || e.action === 'csDown') && this.isSelected(selRowIndeces, focIndex))) {
                this.shiftSelectFocusItem(selIndex, focIndex, selRowIndeces, e);
            }
            else {
                this.shiftSelectedItem(selIndex, selRowIndeces, gridItems, e);
            }
        }
    }
    // eslint-disable-next-line
    moveFunction(selectedItems, e, rowIndex) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.getFocusedItem()) && this.parent.allowMultiSelection) {
            if (e.action === 'moveDown') {
                this.gridObj.selectRow(this.getFocusedItemIndex() + 1);
            }
            else {
                this.gridObj.selectRow(this.getFocusedItemIndex() - 1);
            }
        }
        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(rowIndex) && rowIndex !== -1) {
            if (e.action === 'moveDown' || e.action === 'ctrlDown' || e.action === 'shiftDown' || e.action === 'csDown') {
                this.gridObj.selectRow(rowIndex + ((rowIndex !== selectedItems.length - 1) ? 1 : 0));
            }
            else {
                this.gridObj.selectRow(rowIndex - ((rowIndex !== 0) ? 1 : 0));
            }
        }
        else {
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(selectedItems[0])) {
                this.gridObj.selectRow(0);
            }
        }
    }
    spaceSelection(selRowIndeces, focIndex, selIndex, e) {
        if (!this.isSelected(selRowIndeces, focIndex) && selIndex !== -1 && (e.action === 'shiftSpace' || e.action === 'csSpace')) {
            if (focIndex < selIndex) {
                this.gridObj.selectionModule.selectRowsByRange(focIndex, selIndex);
            }
            else {
                this.gridObj.selectionModule.selectRowsByRange(selIndex, focIndex);
            }
        }
        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.getFocusedItem()) && focIndex !== selIndex) {
            selRowIndeces.push(this.getFocusedItemIndex());
            this.gridObj.selectRows(selRowIndeces);
        }
        else if (selIndex !== -1 && e.action === 'ctrlSpace' && this.parent.allowMultiSelection) {
            const lItem = selIndex;
            selRowIndeces.pop();
            this.gridObj.selectRows(selRowIndeces);
            this.addFocus(lItem);
        }
        else if (e.action === 'shiftSpace') {
            this.gridObj.selectRow(selIndex);
        }
    }
    // eslint-disable-next-line
    ctrlMoveFunction(items, e, rowIndex) {
        let nextItem;
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.getFocusedItem())) {
            const nextIndex = this.getFocusedItemIndex();
            nextItem = (e.action === 'ctrlDown' || e.action === 'csDown') ?
                nextIndex + ((nextIndex < items.length - 1) ? 1 : 0) : nextIndex - ((nextIndex < 1) ? 0 : 1);
        }
        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(rowIndex) && rowIndex !== -1) {
            nextItem = (e.action === 'ctrlDown' || e.action === 'csDown') ?
                rowIndex + ((rowIndex < items.length) ? 1 : 0) : rowIndex - ((rowIndex < 1) ? 0 : 1);
        }
        else {
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(items[0])) {
                nextItem = 0;
            }
        }
        this.addFocus(nextItem);
    }
    // eslint-disable-next-line
    checkRowsKey(items, indexValue, focIndex, e) {
        if (this.gridObj.checkAllRows === 'Uncheck' || this.gridObj.checkAllRows === 'Intermediate') {
            if (e.action !== 'csHome' && e.action !== 'csEnd') {
                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.startIndex) && this.firstItemIndex !== indexValue) {
                    this.firstItemIndex = indexValue;
                }
                if (e.action === 'shiftEnd') {
                    this.gridObj.selectionModule.selectRowsByRange(this.firstItemIndex, items.length - 1);
                }
                else {
                    this.gridObj.selectionModule.selectRowsByRange(0, this.firstItemIndex);
                }
                this.startIndex = indexValue;
            }
            else {
                if (e.action === 'csEnd') {
                    this.gridObj.
                        selectRows(this.InnerItems((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(indexValue) ? 0 : indexValue, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(focIndex) ? items.length - 1 : focIndex, e));
                }
                else {
                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(indexValue)) {
                        this.gridObj.selectRow(0);
                    }
                    else {
                        this.gridObj.selectRows(this.InnerItems((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(focIndex) ? 0 : focIndex, indexValue, e));
                    }
                }
            }
        }
        else {
            this.gridObj.selectionModule.selectRow(((e.action === 'shiftHome' || e.action === 'csHome') ? 0 : items.length - 1));
        }
    }
    InnerItems(fItem, lItem, e) {
        const itemArr = this.gridObj.getSelectedRowIndexes();
        if (e.action === 'csEnd') {
            for (let i = fItem + 1; i <= lItem; i++) {
                itemArr.push(i);
            }
        }
        else {
            for (let i = lItem - 1; fItem <= i; i--) {
                itemArr.push(i);
            }
        }
        return itemArr;
    }
    shiftSelectFocusItem(selIndex, fIndex, selRowIndexes, e) {
        const lItem = fIndex + ((e.action === 'shiftDown' || e.action === 'csDown') ? 1 : -1);
        const fItem = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.startIndex) ? selIndex : selRowIndexes[0];
        if (fItem === lItem) {
            this.gridObj.selectRow(fItem);
        }
        else {
            if (fItem < lItem) {
                if (e.action === 'shiftDown' || e.action === 'csDown') {
                    this.gridObj.selectionModule.selectRowsByRange(fItem, lItem);
                }
                else {
                    this.gridObj.selectionModule.selectRowsByRange(lItem, fItem);
                }
            }
            else if (e.action === 'shiftDown' || e.action === 'csDown') {
                this.gridObj.selectionModule.selectRowsByRange(lItem, fItem);
            }
            else {
                this.gridObj.selectionModule.selectRowsByRange(fItem, lItem);
            }
        }
        this.startIndex = this.gridObj.selectedRowIndex;
    }
    addFocus(item) {
        const fItem = this.getFocusedItem();
        const itemElement = this.gridObj.getRowByIndex(item);
        if (fItem) {
            fItem.removeAttribute('tabindex');
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([fItem], [FOCUS, FOCUSED]);
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(itemElement)) {
            this.gridObj.element.setAttribute('tabindex', '-1');
            itemElement.setAttribute('tabindex', '0');
            itemElement.focus();
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([itemElement], [FOCUS, FOCUSED]);
        }
    }
    getFocusedItem() {
        return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + FOCUSED, this.element);
    }
    isSelected(selRowIndexes, focIndex) {
        let check = false;
        for (let i = 0; i <= selRowIndexes.length - 1; i++) {
            if (selRowIndexes[i] === focIndex) {
                check = true;
                break;
            }
        }
        return check;
    }
    // eslint-disable-next-line
    shiftSelectedItem(selIndex, selRowIndexes, gridItems, e) {
        if (selIndex === -1) {
            this.gridObj.selectRow(0);
        }
        else {
            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.startIndex) && e.shiftKey) {
                this.startIndex = this.gridObj.selectedRowIndex;
                this.gridObj.selectRows([selIndex, (e.action === 'shiftDown' || e.action === 'csDown') ?
                        (selIndex + ((selIndex !== gridItems.length - 1) ? 1 : 0)) : (selIndex - ((selIndex !== 0) ? 1 : 0))]);
            }
            else {
                if (e.action === 'shiftDown' || e.action === 'shiftUp') {
                    if (e.action === 'shiftDown' && selRowIndexes.indexOf(selIndex + 1) === -1) {
                        if (selIndex !== gridItems.length - 1) {
                            selRowIndexes.push(selIndex + 1);
                        }
                    }
                    else if (e.action === 'shiftUp' && selRowIndexes.indexOf(selIndex - 1) === -1) {
                        if (selIndex !== 0) {
                            selRowIndexes.push(selIndex - 1);
                        }
                    }
                    else {
                        selRowIndexes.pop();
                    }
                    this.gridObj.selectRows(selRowIndexes);
                }
                else {
                    if (e.action === 'csDown') {
                        if (!this.isSelected(selRowIndexes, this.getFocusedItemIndex() + 1)) {
                            selRowIndexes.push((this.getFocusedItemIndex() + 1));
                            this.gridObj.selectRows(selRowIndexes);
                        }
                        else {
                            this.addFocus(this.getFocusedItemIndex() + 1);
                        }
                    }
                    else if (!this.isSelected(selRowIndexes, this.getFocusedItemIndex() - 1)) {
                        selRowIndexes.push((this.getFocusedItemIndex() - 1));
                        this.gridObj.selectRows(selRowIndexes);
                    }
                    else {
                        this.addFocus(this.getFocusedItemIndex() - 1);
                    }
                }
            }
        }
    }
    // eslint-disable-next-line
    onMethodCall(e) {
        if (this.parent.view !== 'Details') {
            return;
        }
        const action = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('action', e);
        switch (action) {
            case 'deleteFiles':
                this.deleteFiles((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('ids', e));
                break;
            case 'downloadFiles':
                this.downloadFiles((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('ids', e));
                break;
            case 'openFile':
                this.openFile((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('id', e));
                break;
            case 'createFolder':
                this.interaction = false;
                break;
            case 'renameFile':
                this.interaction = false;
                this.renameFile((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('id', e), (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('newName', e));
                break;
            case 'selectAll':
                this.interaction = false;
                this.onSelectAllInit();
                break;
            case 'clearSelection':
                this.interaction = false;
                this.onClearAllInit();
                break;
        }
    }
    // eslint-disable-next-line
    getRecords(nodes) {
        // eslint-disable-next-line
        const gridRecords = this.gridObj.getCurrentViewRecords();
        // eslint-disable-next-line
        const records = [];
        const hasFilter = (this.parent.breadcrumbbarModule.searchObj.element.value !== '' || this.parent.isFiltered) ? true : false;
        const filter$$1 = this.parent.hasId ? 'id' : 'name';
        if (this.parent.hasId || !hasFilter) {
            for (let i = 0, len = gridRecords.length; i < len; i++) {
                if (nodes.indexOf((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(filter$$1, gridRecords[i])) !== -1) {
                    records.push(gridRecords[i]);
                }
            }
        }
        else {
            for (let i = 0, len = gridRecords.length; i < len; i++) {
                const name = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('filterPath', gridRecords[i]) + (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)('name', gridRecords[i]);
                if (nodes.indexOf(name) !== -1) {
                    records.push(gridRecords[i]);
                }
            }
        }
        return records;
    }
    deleteFiles(ids) {
        this.parent.activeModule = 'detailsview';
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ids)) {
            this.performDelete();
            return;
        }
        // eslint-disable-next-line
        const records = this.getRecords(ids);
        if (records.length === 0) {
            return;
        }
        // eslint-disable-next-line
        const data = [];
        const newIds = [];
        for (let i = 0; i < records.length; i++) {
            data[i] = records[i];
            newIds[i] = getItemName(this.parent, data[i]);
        }
        doDeleteFiles(this.parent, data, newIds);
    }
    downloadFiles(ids) {
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ids)) {
            this.doDownload();
            return;
        }
        // eslint-disable-next-line
        const dRecords = this.getRecords(ids);
        if (dRecords.length === 0) {
            return;
        }
        // eslint-disable-next-line
        const data = [];
        const newIds = [];
        for (let i = 0; i < dRecords.length; i++) {
            data[i] = dRecords[i];
            newIds[i] = getItemName(this.parent, data[i]);
        }
        doDownloadFiles(this.parent, data, newIds);
    }
    openFile(id) {
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(id)) {
            return;
        }
        // eslint-disable-next-line
        const records = this.getRecords([id]);
        if (records.length > 0) {
            this.openContent(records[0]);
        }
    }
    renameFile(id, name) {
        this.parent.activeModule = 'detailsview';
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(id)) {
            this.performRename();
            return;
        }
        // eslint-disable-next-line
        const records = this.getRecords([id]);
        if (records.length > 0) {
            updateRenamingData(this.parent, records[0]);
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(name)) {
                if (hasEditAccess(this.parent.itemData[0])) {
                    rename(this.parent, this.parent.path, name);
                }
                else {
                    createDeniedDialog(this.parent, this.parent.itemData[0], permissionEdit);
                }
            }
            else {
                doRename(this.parent);
            }
        }
    }
}

/**
 * File Manager layout modules
 */

/**
 * File Manager pop-up modules
 */

/**
 * File Manager modules
 */

/**
 * File Manager all modules
 */


//# sourceMappingURL=ej2-filemanager.es2015.js.map


/***/ }),

/***/ 60537:
/*!*****************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-layouts/dist/es6/ej2-layouts.es2015.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PaneProperties": () => (/* binding */ PaneProperties),
/* harmony export */   "Splitter": () => (/* binding */ Splitter),
/* harmony export */   "Panel": () => (/* binding */ Panel),
/* harmony export */   "DashboardLayout": () => (/* binding */ DashboardLayout)
/* harmony export */ });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ 39232);


var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const ROOT = 'e-splitter';
const HORIZONTAL_PANE = 'e-splitter-horizontal';
const VERTICAL_PANE = 'e-splitter-vertical';
const PANE = 'e-pane';
const SPLIT_H_PANE = 'e-pane-horizontal';
const SPLIT_V_PANE = 'e-pane-vertical';
const SPLIT_BAR = 'e-split-bar';
const SPLIT_H_BAR = 'e-split-bar-horizontal';
const SPLIT_V_BAR = 'e-split-bar-vertical';
const STATIC_PANE = 'e-static-pane';
const SCROLL_PANE = 'e-scrollable';
const RESIZE_BAR = 'e-resize-handler';
const RESIZABLE_BAR = 'e-resizable-split-bar';
const SPLIT_BAR_HOVER = 'e-split-bar-hover';
const SPLIT_BAR_ACTIVE = 'e-split-bar-active';
const HIDE_HANDLER = 'e-hide-handler';
const SPLIT_TOUCH = 'e-splitter-touch';
const DISABLED = 'e-disabled';
const RTL = 'e-rtl';
const E_ICONS = 'e-icons';
const COLLAPSIBLE = 'e-collapsible';
const NAVIGATE_ARROW = 'e-navigate-arrow';
const ARROW_RIGHT = 'e-arrow-right';
const ARROW_LEFT = 'e-arrow-left';
const ARROW_UP = 'e-arrow-up';
const ARROW_DOWN = 'e-arrow-down';
const HIDE_ICON = 'e-icon-hidden';
const EXPAND_PANE = 'e-expanded';
const COLLAPSE_PANE = 'e-collapsed';
const PANE_HIDDEN = 'e-pane-hidden';
const RESIZABLE_PANE = 'e-resizable';
const LAST_BAR = 'e-last-bar';
const BAR_SIZE_DEFAULT = 1;
/**
 * Interface to configure pane properties such as its content, size, min, max, resizable, collapsed and collapsible.
 */
class PaneProperties extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty {
}
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()
], PaneProperties.prototype, "size", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], PaneProperties.prototype, "collapsible", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], PaneProperties.prototype, "collapsed", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], PaneProperties.prototype, "resizable", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], PaneProperties.prototype, "min", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], PaneProperties.prototype, "max", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)()
], PaneProperties.prototype, "content", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')
], PaneProperties.prototype, "cssClass", void 0);
/**
 * Splitter is a layout user interface (UI) control that has resizable and collapsible split panes.
 * The container can be split into multiple panes, which are oriented horizontally or vertically.
 * The separator (divider) splits the panes and resizes and expands/collapses the panes.
 * The splitter is placed inside the split pane to make a nested layout user interface.
 *
 * ```html
 * <div id="splitter">
 *  <div> Left Pane </div>
 *  <div> Center Pane </div>
 *  <div> Right Pane </div>
 * </div>
 * ```
 * ```typescript
 * <script>
 *   var splitterObj = new Splitter({ width: '300px', height: '200px'});
 *   splitterObj.appendTo('#splitter');
 * </script>
 * ```
 */
let Splitter = class Splitter extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Component {
    /**
     * Initializes a new instance of the Splitter class.
     *
     * @param options  - Specifies Splitter model properties as options.
     * @param element  - Specifies the element that is rendered as an Splitter.
     */
    constructor(options, element) {
        super(options, element);
    }
    /**
     * Gets called when the model property changes.The data that describes the old and new values of the property that changed.
     *
     * @param  {SplitterModel} newProp - specifies the new property
     * @param  {SplitterModel} oldProp - specifies the old property
     * @returns {void}
     * @private
     */
    onPropertyChanged(newProp, oldProp) {
        if (!this.element.classList.contains(ROOT)) {
            return;
        }
        for (const prop of Object.keys(newProp)) {
            switch (prop) {
                case 'height':
                    this.setSplitterSize(this.element, newProp.height, 'height');
                    break;
                case 'width':
                    this.setSplitterSize(this.element, newProp.width, 'width');
                    break;
                case 'cssClass':
                    this.setCssClass(this.element, newProp.cssClass);
                    break;
                case 'enabled':
                    this.isEnabled(this.enabled);
                    break;
                case 'enableReversePanes':
                    this.setReversePane();
                    break;
                case 'separatorSize':
                    this.setSeparatorSize(newProp.separatorSize);
                    break;
                case 'orientation':
                    this.changeOrientation(newProp.orientation);
                    break;
                case 'paneSettings': {
                    if (!(newProp.paneSettings instanceof Array && oldProp.paneSettings instanceof Array)) {
                        const paneCounts = Object.keys(newProp.paneSettings);
                        for (let i = 0; i < paneCounts.length; i++) {
                            const index = parseInt(Object.keys(newProp.paneSettings)[i], 10);
                            const changedPropsCount = Object.keys(newProp.paneSettings[index]).length;
                            for (let j = 0; j < changedPropsCount; j++) {
                                const property = Object.keys(newProp.paneSettings[index])[j];
                                switch (property) {
                                    case 'content': {
                                        const newValue = Object(newProp.paneSettings[index])[property];
                                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newValue)) {
                                            this.allPanes[index].innerHTML = '';
                                            this.setTemplate(newValue, this.allPanes[index]);
                                        }
                                        break;
                                    }
                                    case 'resizable': {
                                        const newVal = Object(newProp.paneSettings[index])[property];
                                        this.resizableModel(index, newVal);
                                        break;
                                    }
                                    case 'collapsible':
                                        this.collapsibleModelUpdate(index);
                                        break;
                                    case 'collapsed':
                                        // eslint-disable-next-line
                                        newProp.paneSettings[index].collapsed ? this.isCollapsed(index) : this.collapsedOnchange(index);
                                        break;
                                    case 'cssClass':
                                        this.setCssClass(this.allPanes[index], newProp.paneSettings[index].cssClass);
                                        break;
                                    case 'size': {
                                        const newValSize = Object(newProp.paneSettings[index])[property];
                                        if (newValSize !== '' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newValSize)) {
                                            this.updatePaneSize(newValSize, index);
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    else {
                        this.destroyPaneSettings();
                        this.allBars = [];
                        this.allPanes = [];
                        this.createSplitPane(this.element);
                        this.addSeparator(this.element);
                        this.getPanesDimensions();
                        this.setRTL(this.enableRtl);
                        this.isCollapsed();
                    }
                    break;
                }
                case 'enableRtl':
                    this.setRTL(newProp.enableRtl);
                    break;
            }
        }
    }
    updatePaneSize(newValSize, index) {
        this.allPanes[index].style.flexBasis = newValSize;
        const flexPaneIndexes = [];
        let staticPaneWidth;
        let flexCount = 0;
        for (let i = 0; i < this.allPanes.length; i++) {
            if (!this.paneSettings[i].size && !(this.allPanes[i].innerText === '')) {
                flexPaneIndexes[flexCount] = i;
                flexCount++;
            }
            else if (this.paneSettings[i].size) {
                staticPaneWidth = this.orientation === 'Horizontal' ? this.allPanes[index].offsetWidth : this.allPanes[index].offsetHeight;
            }
        }
        staticPaneWidth = this.orientation === 'Horizontal' ? (this.allBars[0].offsetWidth * this.allBars.length) + staticPaneWidth :
            (this.allBars[0].offsetHeight * this.allBars.length) + staticPaneWidth;
        const flexPaneWidth = (this.orientation === 'Horizontal' ? this.element.offsetWidth : this.element.offsetHeight)
            - staticPaneWidth - (this.border * 2);
        const avgDiffWidth = flexPaneWidth / flexPaneIndexes.length;
        for (let j = 0; j < flexPaneIndexes.length; j++) {
            this.allPanes[flexPaneIndexes[j]].style.flexBasis = avgDiffWidth + 'px';
        }
        this.allPanes[index].classList.add(STATIC_PANE);
    }
    initializeValues() {
        this.allPanes = [];
        this.paneOrder = [];
        this.separatorOrder = [];
        this.allBars = [];
        this.previousCoordinates = {};
        this.currentCoordinates = {};
        this.updatePrePaneInPercentage = false;
        this.updateNextPaneInPercentage = false;
        this.panesDimensions = [];
        this.border = 0;
        this.validDataAttributes = ['data-size', 'data-min', 'data-max', 'data-collapsible',
            'data-resizable', 'data-content', 'data-collapsed'];
        this.validElementAttributes = ['data-orientation', 'data-width', 'data-height'];
        this.iconsDelay = 300;
        this.templateElement = [];
        this.collapseFlag = false;
        this.expandFlag = true;
    }
    preRender() {
        this.initializeValues();
        this.onReportWindowSize = this.reportWindowSize.bind(this);
        this.onMouseMoveHandler = this.onMouseMove.bind(this);
        this.onMouseUpHandler = this.onMouseUp.bind(this);
        this.onTouchMoveHandler = this.onMouseMove.bind(this);
        this.onTouchEndHandler = this.onMouseUp.bind(this);
        this.wrapper = this.element.cloneNode(true);
        this.wrapperParent = this.element.parentElement;
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.wrapper], ['e-control', 'e-lib', ROOT]);
        const orientation = this.orientation === 'Horizontal' ? HORIZONTAL_PANE : VERTICAL_PANE;
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], orientation);
        const name = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name;
        const css = (name === 'msie') ? 'e-ie' : '';
        this.setCssClass(this.element, css);
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], SPLIT_TOUCH);
        }
    }
    getPersistData() {
        return this.addOnPersist(['paneSettings']);
    }
    /**
     * Returns the current module name.
     *
     * @returns {string} - returns the string value
     * @private
     */
    getModuleName() {
        return 'splitter';
    }
    /**
     * To Initialize the control rendering
     *
     * @returns {void}
     * @private
     */
    render() {
        this.checkDataAttributes();
        this.setCssClass(this.element, this.cssClass);
        this.isEnabled(this.enabled);
        this.setDimension(this.getHeight(this.element), this.getWidth(this.element));
        this.createSplitPane(this.element);
        this.addSeparator(this.element);
        this.getPanesDimensions();
        this.setPaneSettings();
        this.setRTL(this.enableRtl);
        if (this.enableReversePanes) {
            this.setReversePane();
        }
        this.collapseFlag = true;
        this.isCollapsed();
        this.collapseFlag = false;
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(document, 'touchstart click', this.onDocumentClick, this);
        this.renderComplete();
        this.element.ownerDocument.defaultView.addEventListener('resize', this.onReportWindowSize, true);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.element, 'keydown', this.onMove, this);
    }
    onDocumentClick(e) {
        if (!e.target.classList.contains(SPLIT_BAR) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.currentSeparator)) {
            this.currentSeparator.classList.remove(SPLIT_BAR_HOVER);
            this.currentSeparator.classList.remove(SPLIT_BAR_ACTIVE);
        }
    }
    checkPaneSize(e) {
        const prePaneSize = this.orientation === 'Horizontal' ? this.previousPane.offsetWidth : this.previousPane.offsetHeight;
        const nextPaneSize = this.orientation === 'Horizontal' ? this.nextPane.offsetWidth : this.nextPane.offsetHeight;
        const splitBarSize = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.separatorSize) ? BAR_SIZE_DEFAULT : this.separatorSize;
        if ((this.previousPane.style.flexBasis.indexOf('%') > 0 || this.nextPane.style.flexBasis.indexOf('%') > 0)) {
            const previousFlexBasis = this.updatePaneFlexBasis(this.previousPane);
            const nextFlexBasis = this.updatePaneFlexBasis(this.nextPane);
            this.totalPercent = previousFlexBasis + nextFlexBasis;
            this.totalWidth = this.convertPercentageToPixel(this.totalPercent + '%');
            if (e.type === 'keydown' && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.keyCode))) {
                if ((e.keyCode === 39 || (e.keyCode === 40)) && nextPaneSize > 0 &&
                    (this.getMinInPixel(this.paneSettings[this.nextPaneIndex].min) <
                        this.convertPercentageToPixel((nextFlexBasis - 1) + '%'))) {
                    this.previousPane.style.flexBasis = (previousFlexBasis + 1) + '%';
                    this.nextPane.style.flexBasis = (nextFlexBasis - 1) + '%';
                }
                else if ((e.keyCode === 37 || (e.keyCode === 38)) && prePaneSize > 0 &&
                    (this.getMinInPixel(this.paneSettings[this.prevPaneIndex].min) <
                        this.convertPercentageToPixel((previousFlexBasis - 1) + '%'))) {
                    this.previousPane.style.flexBasis = (previousFlexBasis - 1) + '%';
                    this.nextPane.style.flexBasis = (nextFlexBasis + 1) + '%';
                }
            }
        }
        else {
            this.totalWidth = (this.orientation === 'Horizontal') ? this.previousPane.offsetWidth + this.nextPane.offsetWidth :
                this.previousPane.offsetHeight + this.nextPane.offsetHeight;
            if (e.type === 'keydown' && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.keyCode))) {
                if ((e.keyCode === 39 || (e.keyCode === 40)) && nextPaneSize > 0 &&
                    (this.getMinInPixel(this.paneSettings[this.nextPaneIndex].min) < (nextPaneSize + splitBarSize))) {
                    this.addStaticPaneClass();
                    this.previousPane.style.flexBasis = (prePaneSize + splitBarSize) + 'px';
                    this.nextPane.style.flexBasis = (nextPaneSize < splitBarSize) ? '0px' :
                        (nextPaneSize - splitBarSize) + 'px';
                }
                else if ((e.keyCode === 37 || (e.keyCode === 38)) && prePaneSize > 0 &&
                    (this.getMinInPixel(this.paneSettings[this.prevPaneIndex].min) < (prePaneSize - splitBarSize))) {
                    this.addStaticPaneClass();
                    this.previousPane.style.flexBasis = (prePaneSize < splitBarSize) ? '0px' :
                        (prePaneSize - splitBarSize) + 'px';
                    this.nextPane.style.flexBasis = (nextPaneSize + splitBarSize) + 'px';
                }
            }
        }
    }
    onMove(event) {
        if (this.allPanes.length > 1) {
            const index = this.getSeparatorIndex(this.currentSeparator);
            const isPrevpaneCollapsed = this.previousPane.classList.contains(COLLAPSE_PANE);
            const isPrevpaneExpanded = this.previousPane.classList.contains(EXPAND_PANE);
            const isNextpaneCollapsed = this.nextPane.classList.contains(COLLAPSE_PANE);
            if (((this.orientation !== 'Horizontal' && event.keyCode === 38) || (this.orientation === 'Horizontal' &&
                event.keyCode === 39) ||
                (this.orientation === 'Horizontal' && event.keyCode === 37) || (this.orientation !== 'Horizontal' && event.keyCode === 40))
                && (!isPrevpaneExpanded && !isNextpaneCollapsed && !isPrevpaneCollapsed || (isPrevpaneExpanded) && !isNextpaneCollapsed) &&
                document.activeElement.classList.contains(SPLIT_BAR) && (this.paneSettings[index].resizable &&
                this.paneSettings[index + 1].resizable)) {
                event.preventDefault();
                this.checkPaneSize(event);
                this.triggerResizing(event);
            }
            else if (event.keyCode === 13 && this.paneSettings[index].collapsible &&
                document.activeElement.classList.contains(SPLIT_BAR) && this.currentSeparator.classList.contains(SPLIT_BAR_ACTIVE)) {
                if (!this.previousPane.classList.contains(COLLAPSE_PANE)) {
                    this.collapse(index);
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.currentSeparator], SPLIT_BAR_ACTIVE);
                }
                else {
                    this.expand(index);
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.currentSeparator], SPLIT_BAR_ACTIVE);
                }
            }
        }
    }
    getMinInPixel(minValue) {
        let min;
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(minValue)) {
            return 0;
        }
        let paneMinRange = this.convertPixelToNumber(minValue.toString());
        if (minValue.indexOf('%') > 0) {
            paneMinRange = this.convertPercentageToPixel(minValue);
        }
        min = this.convertPixelToNumber((paneMinRange).toString());
        return min;
    }
    /**
     * @param {string} value - specifies the string value
     * @returns {string} returns the string
     * @hidden
     */
    sanitizeHelper(value) {
        if (this.enableHtmlSanitizer) {
            const item = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.beforeSanitize();
            const beforeEvent = {
                cancel: false,
                helper: null
            };
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(item, item, beforeEvent);
            this.trigger('beforeSanitizeHtml', item);
            if (item.cancel && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item.helper)) {
                value = item.helper(value);
            }
            else if (!item.cancel) {
                value = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.serializeValue(item, value);
            }
        }
        return value;
    }
    checkDataAttributes() {
        let api;
        let value;
        // Element values
        for (let dataIndex = 0; dataIndex < this.validElementAttributes.length; dataIndex++) {
            value = this.element.getAttribute(this.validElementAttributes[dataIndex]);
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(value)) {
                api = this.removeDataPrefix(this.validElementAttributes[dataIndex]);
                // eslint-disable-next-line
                this[api] = value;
            }
        }
        // Pane values
        for (let paneIndex = 0; paneIndex < this.element.children.length; paneIndex++) {
            for (let dataAttr = 0; dataAttr < this.validDataAttributes.length; dataAttr++) {
                value = this.element.children[paneIndex].getAttribute(this.validDataAttributes[dataAttr]);
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(value)) {
                    api = this.removeDataPrefix(this.validDataAttributes[dataAttr]);
                    value = (api === 'collapsible' || api === 'resizable') ? (value === 'true') : value;
                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[paneIndex])) {
                        this.paneSettings[paneIndex] = {
                            size: '',
                            min: null,
                            max: null,
                            content: '',
                            resizable: true,
                            collapsible: false,
                            collapsed: false
                        };
                    }
                    // eslint-disable-next-line
                    let paneAPI = this.paneSettings[paneIndex][api];
                    if (api === 'resizable' || api === 'collapsible' || api === 'collapsed') {
                        // eslint-disable-next-line
                        this.paneSettings[paneIndex][api] = value;
                    }
                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(paneAPI) || paneAPI === '') {
                        // eslint-disable-next-line
                        this.paneSettings[paneIndex][api] = value;
                    }
                }
            }
        }
    }
    destroyPaneSettings() {
        [].slice.call(this.element.children).forEach((el) => {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(el);
        });
        this.restoreElem();
    }
    setPaneSettings() {
        const childCount = this.allPanes.length;
        const paneCollection = [];
        const paneValue = {
            size: '',
            min: null,
            max: null,
            content: '',
            resizable: true,
            collapsed: false,
            collapsible: false,
            cssClass: ''
        };
        for (let i = 0; i < childCount; i++) {
            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[i])) {
                paneCollection[i] = paneValue;
            }
            else {
                paneCollection[i] = this.paneSettings[i];
            }
        }
        this.setProperties({ 'paneSettings': paneCollection }, true);
    }
    checkArrow(paneIndex, targetArrow) {
        return (this.allBars[paneIndex].querySelector('.' + NAVIGATE_ARROW + '.' + targetArrow));
    }
    removeDataPrefix(attribute) {
        return attribute.slice(attribute.lastIndexOf('-') + 1);
    }
    setRTL(rtl) {
        // eslint-disable-next-line
        rtl ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], RTL) : (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], RTL);
    }
    setReversePane() {
        this.allPanes = this.allPanes.reverse();
        this.allBars = this.allBars.reverse();
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.allBars[this.allBars.length - 1]], LAST_BAR);
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.allBars[0]], LAST_BAR);
        this.setProperties({ 'paneSettings': this.paneSettings.reverse() }, true);
        if (this.enableReversePanes) {
            this.element.setAttribute('dir', 'rtl');
        }
        else {
            this.element.removeAttribute('dir');
        }
    }
    setSplitterSize(element, size, property) {
        const style = property === 'width' ? { 'width': (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(size) } : { 'height': (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(size) };
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(element, style);
    }
    getPanesDimensions() {
        for (let index = 0; index < this.allPanes.length; index++) {
            // eslint-disable-next-line
            this.orientation === 'Horizontal' ? this.panesDimensions.push(this.allPanes[index].getBoundingClientRect().width) :
                this.panesDimensions.push(this.allPanes[index].getBoundingClientRect().height);
        }
    }
    setCssClass(element, className) {
        if (className) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([element], className.split(className.indexOf(',') > -1 ? ',' : ' '));
        }
    }
    hideResizer(target) {
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + RESIZE_BAR, target)], HIDE_HANDLER);
    }
    showResizer(target) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.previousPane) && this.previousPane.classList.contains(RESIZABLE_PANE) &&
            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.nextPane) && this.nextPane.classList.contains(RESIZABLE_PANE)) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + RESIZE_BAR, target)], HIDE_HANDLER);
        }
    }
    resizableModel(index, newVal) {
        const paneIndex = (index === (this.allBars.length)) ? (index - 1) : index;
        const i = index;
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.allBars[paneIndex], 'mousedown', this.onMouseDown);
        if (newVal) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.allBars[paneIndex], 'mousedown', this.onMouseDown, this);
            if (this.isResizable()) {
                this.showResizer(this.allBars[paneIndex]);
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + RESIZE_BAR, this.allBars[paneIndex])], HIDE_HANDLER);
                this.allBars[paneIndex].classList.add(RESIZABLE_BAR);
                // eslint-disable-next-line
                (index === (this.allBars.length)) ? this.allPanes[index].classList.add(RESIZABLE_PANE) :
                    this.allPanes[paneIndex].classList.add(RESIZABLE_PANE);
                this.updateResizablePanes(i);
            }
        }
        else {
            this.updateResizablePanes(i);
            this.hideResizer(this.allBars[paneIndex]);
            this.allBars[paneIndex].classList.remove(RESIZABLE_BAR);
            // eslint-disable-next-line
            (index === (this.allBars.length)) ? this.allPanes[index].classList.remove(RESIZABLE_PANE) :
                this.allPanes[paneIndex].classList.remove(RESIZABLE_PANE);
        }
    }
    collapsibleModelUpdate(index) {
        const paneIndex = index === (this.allBars.length) ? (index - 1) : index;
        const arrow2 = (this.orientation === 'Horizontal')
            ? this.checkArrow(paneIndex, ARROW_LEFT) : this.checkArrow(paneIndex, ARROW_UP);
        const arrow1 = (this.orientation === 'Horizontal')
            ? this.checkArrow(paneIndex, ARROW_RIGHT) : this.checkArrow(paneIndex, ARROW_DOWN);
        this.paneCollapsible(this.allPanes[index], index);
        this.updateCollapseIcons(paneIndex, arrow1, arrow2);
    }
    collapseArrow(barIndex, arrow) {
        return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + arrow, this.allBars[barIndex])[0];
    }
    updateIsCollapsed(index, collapseArrow, lastBarArrow) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(index)) {
            let targetEle;
            const lastBarIndex = (index === this.allBars.length);
            const barIndex = lastBarIndex ? index - 1 : index;
            if (!lastBarIndex && this.allPanes[index + 1].classList.contains(COLLAPSE_PANE) && index !== 0) {
                targetEle = this.collapseArrow(barIndex - 1, lastBarArrow);
            }
            else {
                targetEle = (lastBarIndex) ? this.collapseArrow(barIndex, lastBarArrow) : this.collapseArrow(barIndex, collapseArrow);
            }
            targetEle.click();
        }
    }
    isCollapsed(index) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(index) && this.paneSettings[index].collapsed
            && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.allPanes[index].classList.contains(COLLAPSE_PANE))) {
            return;
        }
        this.expandFlag = false;
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(index)) {
            this.collapseFlag = true;
            let targetEle;
            const lastBarIndex = (index === this.allBars.length);
            const barIndex = lastBarIndex ? index - 1 : index;
            if (!lastBarIndex && this.allPanes[index + 1].classList.contains(COLLAPSE_PANE) && index !== 0) {
                targetEle = this.collapseArrow(barIndex - 1, this.targetArrows().lastBarArrow);
            }
            else {
                targetEle = (lastBarIndex) ? this.collapseArrow(barIndex, this.targetArrows().lastBarArrow) :
                    this.collapseArrow(barIndex, this.targetArrows().collapseArrow);
            }
            const event = { target: targetEle };
            const eventArgs = this.beforeAction(event);
            this.trigger('beforeCollapse', eventArgs, (beforeCollapseArgs) => {
                if (!beforeCollapseArgs.cancel) {
                    let collapsedindex = [];
                    collapsedindex[0] = index;
                    let j = 1;
                    for (let i = 0; i < this.allPanes.length; i++) {
                        if (this.allPanes[i].classList.contains(COLLAPSE_PANE)) {
                            collapsedindex[j] = i;
                            j++;
                        }
                    }
                    collapsedindex = collapsedindex.sort();
                    this.updateIsCollapsed(index, this.targetArrows().collapseArrow, this.targetArrows().lastBarArrow);
                    for (let i = 0; i < collapsedindex.length; i++) {
                        if (!this.allPanes[collapsedindex[i]].classList.contains(COLLAPSE_PANE)) {
                            this.updateIsCollapsed(collapsedindex[i], this.targetArrows().collapseArrow, this.targetArrows().lastBarArrow);
                        }
                    }
                    for (let i = collapsedindex.length; i > 0; i--) {
                        if (!this.allPanes[collapsedindex[i - 1]].classList.contains(COLLAPSE_PANE)) {
                            const targetArrow = this.targetArrows();
                            this.updateIsCollapsed(collapsedindex[i - 1], targetArrow.collapseArrow, targetArrow.lastBarArrow);
                        }
                    }
                    const collapseEventArgs = this.afterAction(event);
                    this.trigger('collapsed', collapseEventArgs);
                    this.collapseFlag = false;
                }
            });
        }
        else {
            for (let m = 0; m < this.allPanes.length; m++) {
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[m]) && this.paneSettings[m].collapsed) {
                    this.updateIsCollapsed(m, this.targetArrows().collapseArrow, this.targetArrows().lastBarArrow);
                }
            }
            for (let m = this.allPanes.length - 1; m >= 0; m--) {
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[m]) && this.paneSettings[m].collapsed &&
                    !this.allPanes[m].classList.contains(COLLAPSE_PANE)) {
                    const collapseArrow = this.orientation === 'Horizontal' ? ARROW_RIGHT : ARROW_DOWN;
                    if (m !== 0) {
                        const targetEle = this.collapseArrow(m - 1, collapseArrow);
                        targetEle.click();
                    }
                    if (!this.nextPane.classList.contains(COLLAPSE_PANE)) {
                        const targetEle = this.collapseArrow(m - 1, collapseArrow);
                        targetEle.click();
                    }
                }
            }
        }
        this.expandFlag = true;
    }
    targetArrows() {
        this.splitterProperty();
        return {
            collapseArrow: (this.orientation === 'Horizontal') ? ARROW_LEFT : ARROW_UP,
            lastBarArrow: (this.orientation === 'Vertical') ? ARROW_DOWN : ARROW_RIGHT
        };
    }
    collapsedOnchange(index) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[index]) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[index].collapsed)
            && this.allPanes[index].classList.contains(COLLAPSE_PANE)) {
            this.updateIsCollapsed(index, this.targetArrows().lastBarArrow, this.targetArrows().collapseArrow);
        }
    }
    isEnabled(enabled) {
        // eslint-disable-next-line
        enabled ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], DISABLED) : (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], DISABLED);
    }
    setSeparatorSize(size) {
        const sizeValue = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(size) ? 'auto' : size + 'px';
        const separator = this.orientation === 'Horizontal' ? SPLIT_H_BAR : SPLIT_V_BAR;
        for (let index = 0; index < this.allBars.length; index++) {
            const splitBar = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + separator, this.element)[index];
            const resizeBar = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + RESIZE_BAR, splitBar)[0];
            if (this.orientation === 'Horizontal') {
                splitBar.style.width = sizeValue;
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(resizeBar)) {
                    resizeBar.style.width = sizeValue;
                }
            }
            else {
                splitBar.style.height = sizeValue;
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(resizeBar)) {
                    resizeBar.style.height = sizeValue;
                }
            }
        }
    }
    changeOrientation(orientation) {
        const isVertical = orientation === 'Vertical';
        this.element.classList.remove(isVertical ? HORIZONTAL_PANE : VERTICAL_PANE);
        this.element.classList.add(isVertical ? VERTICAL_PANE : HORIZONTAL_PANE);
        for (let index = 0; index < this.allPanes.length; index++) {
            this.allPanes[index].classList.remove(isVertical ? SPLIT_H_PANE : SPLIT_V_PANE);
            this.allPanes[index].classList.add(isVertical ? SPLIT_V_PANE : SPLIT_H_PANE);
        }
        for (let index = 0; index < this.allBars.length; index++) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.allBars[index]);
        }
        this.allBars = [];
        this.addSeparator(this.element);
    }
    checkSplitPane(currentBar, elementIndex) {
        const paneEle = this.collectPanes(currentBar.parentElement.children)[elementIndex];
        return paneEle;
    }
    collectPanes(childNodes) {
        const elements = [];
        for (let i = 0; i < childNodes.length; i++) {
            if (childNodes[i].classList.contains(PANE)) {
                elements.push(childNodes[i]);
            }
        }
        return elements;
    }
    getPrevPane(order) {
        return this.enableReversePanes ? this.getOrderPane(order + 1) : this.getOrderPane(order - 1);
    }
    getNextPane(order) {
        return this.enableReversePanes ? this.getOrderPane(order - 1) : this.getOrderPane(order + 1);
    }
    getOrderPane(order) {
        let pane;
        for (let i = 0; i < this.element.children.length; i++) {
            if (parseInt(this.element.children[i].style.order, 10) === order) {
                pane = this.element.children[i];
            }
        }
        return pane;
    }
    getOrderIndex(order, type) {
        let index;
        let panes;
        if (type === 'pane') {
            panes = this.allPanes;
        }
        else {
            panes = this.allBars;
        }
        for (let i = 0; i < panes.length; i++) {
            if (parseInt(panes[i].style.order, 10) === order) {
                index = i;
            }
        }
        return index;
    }
    updateSeparatorSize(resizeHanlder) {
        const sizeValue = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.separatorSize) ? '1px' : this.separatorSize + 'px';
        // eslint-disable-next-line
        this.orientation === 'Horizontal' ? (resizeHanlder.style.width = sizeValue) : resizeHanlder.style.height = sizeValue;
    }
    addResizeHandler(currentBar) {
        const resizeHanlder = this.createElement('div');
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([resizeHanlder], [RESIZE_BAR, E_ICONS]);
        this.updateSeparatorSize(resizeHanlder);
        currentBar.appendChild(resizeHanlder);
    }
    getHeight(target) {
        let height = this.height;
        height = target.style.height !== '' && this.height === '100%' ? target.style.height : this.height;
        return height;
    }
    getWidth(target) {
        let width = this.width;
        width = target.style.width !== '' && this.width === '100%' ? target.style.width : this.width;
        return width;
    }
    setDimension(height, width) {
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(this.element, { 'height': height, 'width': width });
    }
    updateCollapseIcons(index, arrow1, arrow2) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[index])) {
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[index].collapsible)) {
                // eslint-disable-next-line
                this.paneSettings[index].collapsible ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([arrow2], [HIDE_ICON]) : (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([arrow2], [HIDE_ICON]);
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[index + 1])) {
                    // eslint-disable-next-line
                    this.paneSettings[index + 1].collapsible ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([arrow1], [HIDE_ICON]) : (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([arrow1], [HIDE_ICON]);
                }
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[index + 1])) {
                    if ((this.paneSettings[index + 1].collapsible)) {
                        // eslint-disable-next-line
                        this.paneSettings[index + 1].collapsible ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([arrow1], [HIDE_ICON]) : (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([arrow1], [HIDE_ICON]);
                    }
                }
            }
        }
    }
    updateIconClass() {
        if (this.orientation === 'Horizontal') {
            this.leftArrow = ARROW_LEFT;
            this.rightArrow = ARROW_RIGHT;
        }
        else {
            this.leftArrow = ARROW_UP;
            this.rightArrow = ARROW_DOWN;
        }
    }
    createSeparator(i) {
        const separator = this.createElement('div');
        this.allBars.push(separator);
        const arrow1 = this.createElement('button');
        const arrow2 = this.createElement('button');
        arrow1.setAttribute('tabindex', '-1');
        arrow2.setAttribute('tabindex', '-1');
        arrow1.setAttribute('aria-label', 'Toggle navigation');
        arrow2.setAttribute('aria-label', 'Toggle navigation');
        arrow1.setAttribute('type', 'button');
        arrow2.setAttribute('type', 'button');
        const size = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.separatorSize) ? '1px' : this.separatorSize + 'px';
        // eslint-disable-next-line
        const proxy = this;
        if (this.orientation === 'Horizontal') {
            this.updateIconClass();
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([arrow2], [NAVIGATE_ARROW, ARROW_LEFT, HIDE_ICON]);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([arrow1], [NAVIGATE_ARROW, ARROW_RIGHT, HIDE_ICON]);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([separator], [SPLIT_BAR, SPLIT_H_BAR]);
            separator.style.width = size;
        }
        else {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([arrow1], [NAVIGATE_ARROW, ARROW_DOWN, HIDE_ICON]);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([arrow2], [NAVIGATE_ARROW, ARROW_UP, HIDE_ICON]);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([separator], [SPLIT_BAR, SPLIT_V_BAR]);
            this.updateIconClass();
            separator.style.height = size;
        }
        this.addMouseActions(separator);
        separator.appendChild(arrow2);
        this.addResizeHandler(separator);
        separator.appendChild(arrow1);
        this.updateCollapseIcons(i, arrow1, arrow2);
        separator.setAttribute('tabindex', '0');
        if (this.enableReversePanes) {
            separator.setAttribute('dir', 'ltr');
        }
        else {
            separator.removeAttribute('dir');
        }
        separator.addEventListener('focus', () => {
            separator.classList.add(SPLIT_BAR_ACTIVE);
            proxy.currentSeparator = separator;
            proxy.getPaneDetails();
        });
        separator.addEventListener('blur', () => {
            separator.classList.remove(SPLIT_BAR_ACTIVE);
        });
        return separator;
    }
    updateResizablePanes(index) {
        this.getPaneDetails();
        // eslint-disable-next-line
        this.isResizable() ? this.allPanes[index].classList.add(RESIZABLE_PANE) : this.allPanes[index].classList.remove(RESIZABLE_PANE);
    }
    addSeparator(target) {
        const childCount = this.allPanes.length;
        const clonedEle = target.children;
        let separator;
        for (let i = 0; i < childCount; i++) {
            if (i < childCount - 1) {
                separator = this.createSeparator(i);
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(separator, { 'order': (i * 2) + 1 });
                this.separatorOrder.push((i * 2) + 1);
                clonedEle[i].parentNode.appendChild(separator);
                this.currentSeparator = separator;
                separator.setAttribute('role', 'separator');
                separator.setAttribute('aria-orientation', this.orientation.toLowerCase());
                this.wireClickEvents();
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(separator)) {
                    if (this.isResizable()) {
                        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(separator, 'mousedown', this.onMouseDown, this);
                        const eventName = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie') ? 'pointerdown' : 'touchstart';
                        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(separator, eventName, this.onMouseDown, this);
                        separator.classList.add(RESIZABLE_BAR);
                        this.updateResizablePanes(i);
                    }
                    else {
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + RESIZE_BAR, separator)], HIDE_HANDLER);
                    }
                }
            }
            else {
                if (separator) {
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([separator], LAST_BAR);
                }
                if (childCount > 1) {
                    this.updateResizablePanes(i);
                }
            }
        }
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie') {
            const allBar = this.element.querySelectorAll('.e-splitter .e-resize-handler');
            for (let i = 0; i < allBar.length; i++) {
                const sepSize = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.separatorSize) ? 1 : this.separatorSize;
                allBar[i].style.paddingLeft = sepSize / 2 + 'px';
                allBar[i].style.paddingRight = sepSize / 2 + 'px';
            }
        }
    }
    isResizable() {
        let resizable = false;
        if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[this.getPreviousPaneIndex()]) &&
            this.paneSettings[this.getPreviousPaneIndex()].resizable &&
            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[this.getNextPaneIndex()]) &&
            this.paneSettings[this.getNextPaneIndex()].resizable) ||
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[this.getNextPaneIndex()])) {
            resizable = true;
        }
        return resizable;
    }
    addMouseActions(separator) {
        let sTout;
        let hoverTimeOut;
        separator.addEventListener('mouseenter', () => {
            /* istanbul ignore next */
            sTout = setTimeout(() => {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([separator], [SPLIT_BAR_HOVER]);
            }, this.iconsDelay);
        });
        separator.addEventListener('mouseleave', () => {
            clearTimeout(sTout);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([separator], [SPLIT_BAR_HOVER]);
        });
        separator.addEventListener('mouseout', () => {
            clearTimeout(hoverTimeOut);
        });
        separator.addEventListener('mouseover', () => {
            /* istanbul ignore next */
            hoverTimeOut = setTimeout(() => {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([separator], [SPLIT_BAR_HOVER]);
            }, this.iconsDelay);
        });
    }
    getEventType(e) {
        return (e.indexOf('mouse') > -1) ? 'mouse' : 'touch';
    }
    updateCurrentSeparator(target) {
        this.currentSeparator = this.isSeparator(target) ? target.parentElement : target;
    }
    isSeparator(target) {
        return (target.classList.contains(SPLIT_BAR) ? false : true);
    }
    isMouseEvent(e) {
        let isMouse = false;
        if (this.getEventType(e.type) === 'mouse' || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.pointerType) &&
            this.getEventType(e.pointerType) === 'mouse')) {
            isMouse = true;
        }
        return isMouse;
    }
    updateCursorPosition(e, type) {
        if (this.isMouseEvent(e)) {
            this.changeCoordinates({ x: e.pageX, y: e.pageY }, type);
        }
        else {
            const eventType = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name !== 'msie' ? e.touches[0] : e;
            this.changeCoordinates({ x: eventType.pageX, y: eventType.pageY }, type);
        }
    }
    changeCoordinates(coordinates, type) {
        if (type === 'previous') {
            this.previousCoordinates = coordinates;
        }
        else {
            this.currentCoordinates = coordinates;
        }
    }
    reportWindowSize() {
        const paneCount = this.allPanes.length;
        if (!document.body.contains(this.element)) {
            document.defaultView.removeEventListener('resize', this.onReportWindowSize);
            return;
        }
        for (let i = 0; i < paneCount; i++) {
            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[i].size)) {
                this.allPanes[i].classList.remove(STATIC_PANE);
            }
            if (paneCount - 1 === i) {
                const staticPaneCount = this.element.querySelectorAll('.' + STATIC_PANE).length;
                if (staticPaneCount === paneCount) {
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.allPanes[i]], STATIC_PANE);
                }
            }
        }
        if (paneCount > 0) {
            setTimeout(() => {
                this.updateSplitterSize(true);
            }, 200);
        }
    }
    updateSplitterSize(iswindowResize) {
        let totalWidth = 0;
        const flexPaneIndexes = [];
        let flexCount = 0;
        const children = this.element.children;
        for (let i = 0; i < children.length; i++) {
            totalWidth += this.orientation === 'Horizontal' ? children[i].offsetWidth :
                children[i].offsetHeight;
        }
        for (let j = 0; j < this.allBars.length; j++) {
            totalWidth += this.orientation === 'Horizontal' ? parseInt(getComputedStyle(this.allBars[j]).marginLeft, 10) +
                parseInt(getComputedStyle(this.allBars[j]).marginLeft, 10) : parseInt(getComputedStyle(this.allBars[j]).marginTop, 10) +
                parseInt(getComputedStyle(this.allBars[j]).marginBottom, 10);
        }
        const diff = this.orientation === 'Horizontal' ? this.element.offsetWidth -
            ((this.border * 2) + totalWidth) :
            this.element.offsetHeight - ((this.border * 2) + totalWidth);
        for (let i = 0; i < this.allPanes.length; i++) {
            if (!this.paneSettings[i].size && !(this.allPanes[i].innerText === '')) {
                flexPaneIndexes[flexCount] = i;
                flexCount++;
            }
        }
        const avgDiffWidth = diff / flexPaneIndexes.length;
        for (let j = 0; j < flexPaneIndexes.length; j++) {
            this.allPanes[flexPaneIndexes[j]].style.flexBasis = this.orientation === 'Horizontal' ?
                (this.allPanes[flexPaneIndexes[j]].offsetWidth + avgDiffWidth) + 'px' :
                (this.allPanes[flexPaneIndexes[j]].offsetHeight + avgDiffWidth) + 'px';
        }
        if (this.allPanes.length === 2 && iswindowResize) {
            const paneCount = this.allPanes.length;
            let minValue;
            let paneMinRange;
            const paneIndex = 0;
            let updatePane;
            let flexPane;
            for (let i = 0; i < paneCount; i++) {
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[i].min)) {
                    paneMinRange = this.convertPixelToNumber((this.paneSettings[i].min).toString());
                    if (this.paneSettings[i].min.indexOf('%') > 0) {
                        paneMinRange = this.convertPercentageToPixel(this.paneSettings[i].min);
                    }
                    minValue = this.convertPixelToNumber((paneMinRange).toString());
                    if (this.allPanes[i].offsetWidth < minValue) {
                        if (i === paneIndex) {
                            updatePane = this.allPanes[i];
                            flexPane = this.allPanes[i + 1];
                        }
                        else {
                            updatePane = this.allPanes[i];
                            flexPane = this.allPanes[i - 1];
                        }
                        const sizeDiff = minValue - this.allPanes[i].offsetWidth;
                        const isPercent = updatePane.style.flexBasis.indexOf('%') > -1;
                        updatePane.style.flexBasis = isPercent ? this.convertPixelToPercentage(updatePane.offsetWidth + sizeDiff) + '%'
                            : (updatePane.offsetWidth + sizeDiff) + 'px';
                        flexPane.style.flexBasis = flexPane.style.flexBasis.indexOf('%') > -1 ?
                            this.convertPixelToPercentage(flexPane.offsetWidth - sizeDiff) + '%' : (flexPane.offsetWidth - sizeDiff) + 'px';
                    }
                }
            }
        }
    }
    wireResizeEvents() {
        document.addEventListener('mousemove', this.onMouseMoveHandler, true);
        document.addEventListener('mouseup', this.onMouseUpHandler, true);
        const touchMoveEvent = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie') ? 'pointermove' : 'touchmove';
        const touchEndEvent = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie') ? 'pointerup' : 'touchend';
        document.addEventListener(touchMoveEvent, this.onTouchMoveHandler, true);
        document.addEventListener(touchEndEvent, this.onTouchEndHandler, true);
    }
    unwireResizeEvents() {
        this.element.ownerDocument.defaultView.removeEventListener('resize', this.onReportWindowSize);
        const touchMoveEvent = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie') ? 'pointermove' : 'touchmove';
        const touchEndEvent = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie') ? 'pointerup' : 'touchend';
        document.removeEventListener('mousemove', this.onMouseMoveHandler, true);
        document.removeEventListener('mouseup', this.onMouseUpHandler, true);
        document.removeEventListener(touchMoveEvent, this.onTouchMoveHandler, true);
        document.removeEventListener(touchEndEvent, this.onTouchEndHandler, true);
    }
    wireClickEvents() {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.currentSeparator, 'touchstart click', this.clickHandler, this);
    }
    clickHandler(e) {
        if (!e.target.classList.contains(NAVIGATE_ARROW)) {
            const hoverBars = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + ROOT + ' > .' + SPLIT_BAR + '.' + SPLIT_BAR_HOVER);
            if (hoverBars.length > 0) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(hoverBars, SPLIT_BAR_HOVER);
            }
            e.target.classList.add(SPLIT_BAR_HOVER);
        }
        const icon = e.target;
        if (icon.classList.contains(ARROW_LEFT) || icon.classList.contains(ARROW_UP)) {
            this.collapseAction(e);
        }
        if (icon.classList.contains(ARROW_RIGHT) || icon.classList.contains(ARROW_DOWN)) {
            this.expandAction(e);
        }
        let totalWidth = 0;
        const children = this.element.children;
        for (let i = 0; i < children.length; i++) {
            totalWidth += this.orientation === 'Horizontal' ? children[i].offsetWidth :
                children[i].offsetHeight;
        }
        if (totalWidth > this.element.offsetWidth) {
            this.updateSplitterSize();
        }
    }
    expandAction(e) {
        this.splitterDetails(e);
        const eventArgs = this.beforeAction(e);
        if (this.expandFlag) {
            this.trigger('beforeExpand', eventArgs, (beforeExpandArgs) => {
                if (!beforeExpandArgs.cancel) {
                    this.expandPane(e);
                }
                const expandEventArgs = this.afterAction(e);
                this.trigger('expanded', expandEventArgs);
            });
        }
        else {
            this.expandPane(e);
        }
    }
    expandPane(e) {
        this.removeStaticPanes();
        const collapseCount = this.element.querySelectorAll('.' + COLLAPSE_PANE).length;
        const flexStatus = (!this.previousPane.classList.contains(COLLAPSE_PANE) &&
            this.previousPane.classList.contains(STATIC_PANE) && !this.nextPane.classList.contains(COLLAPSE_PANE) &&
            !this.nextPane.classList.contains(EXPAND_PANE) && this.nextPane.nextElementSibling.classList.contains(PANE) &&
            !this.nextPane.nextElementSibling.classList.contains(STATIC_PANE) && !(collapseCount === this.allPanes.length - 2));
        const collapseClass = [COLLAPSE_PANE, PANE_HIDDEN];
        if (!this.previousPane.classList.contains(COLLAPSE_PANE)) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.nextPane], EXPAND_PANE);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.previousPane], collapseClass);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.previousPane], EXPAND_PANE);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.nextPane], collapseClass);
            if (this.expandFlag) {
                this.updatePaneSettings(this.nextPaneIndex, true);
            }
        }
        else {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.previousPane], collapseClass);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.nextPane], EXPAND_PANE);
            if (this.expandFlag) {
                this.updatePaneSettings(this.prevPaneIndex, false);
            }
        }
        this.updateIconsOnExpand(e);
        this.previousPane.setAttribute('aria-expanded', 'true');
        this.nextPane.setAttribute('aria-expanded', 'false');
        this.updateFlexGrow(this.checkStaticPanes());
        if (flexStatus) {
            this.previousPane.classList.remove(EXPAND_PANE);
            this.previousPane.style.flexGrow = '';
        }
    }
    checkStaticPanes() {
        let staticPane = true;
        for (let i = 0; i < this.allPanes.length; i++) {
            if (!this.allPanes[i].classList.contains(COLLAPSE_PANE) && staticPane) {
                if (this.allPanes[i].classList.contains(STATIC_PANE)) {
                    staticPane = true;
                }
                else {
                    staticPane = false;
                }
            }
        }
        return staticPane;
    }
    updateFlexGrow(status) {
        let collapseCount = 0;
        for (let j = 0; j < this.element.children.length; j++) {
            if (this.element.children[j].classList.contains(COLLAPSE_PANE)) {
                collapseCount = collapseCount + 1;
            }
        }
        const visiblePane = collapseCount === this.allPanes.length - 2;
        const panes = this.allPanes;
        for (let i = 0; i < panes.length; i++) {
            if (panes[i].classList.contains(EXPAND_PANE)) {
                panes[i].style.flexGrow = '1';
            }
            else if (panes[i].classList.contains(COLLAPSE_PANE)) {
                panes[i].style.flexGrow = '0';
            }
            else {
                panes[i].style.flexGrow = '';
            }
            if (status && !this.nextPane.classList.contains(COLLAPSE_PANE)) {
                this.nextPane.style.flexGrow = '1';
            }
            if (visiblePane && !this.allPanes[i].classList.contains(COLLAPSE_PANE) && this.paneSettings[i].size &&
                i !== this.allPanes.length - 1) {
                panes[i].style.flexGrow = '';
            }
        }
    }
    hideTargetBarIcon(targetBar, targetArrow) {
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + targetArrow, targetBar)], HIDE_ICON);
    }
    showTargetBarIcon(targetBar, targetArrow) {
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + targetArrow, targetBar)], HIDE_ICON);
    }
    updateIconsOnCollapse(e) {
        this.splitterProperty();
        if (this.previousPane.classList.contains(COLLAPSE_PANE) && !this.nextPane.classList.contains(COLLAPSE_PANE)) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([e.target], HIDE_ICON);
            if (this.paneSettings[this.prevPaneIndex].collapsible) {
                this.showCurrentBarIcon();
            }
            this.resizableModel(this.currentBarIndex, false);
            if (this.previousPane.classList.contains(COLLAPSE_PANE) && !this.nextPane.classList.contains(COLLAPSE_PANE) &&
                !this.paneSettings[this.prevPaneIndex].collapsible) {
                this.hideTargetBarIcon(this.prevBar, this.rightArrow);
            }
            if (this.previousPane.previousElementSibling && !this.previousPane.previousElementSibling.classList.contains(COLLAPSE_PANE)) {
                if (this.previousPane.classList.contains(COLLAPSE_PANE) && this.paneSettings[this.prevPaneIndex].collapsible) {
                    this.showTargetBarIcon(this.prevBar, this.leftArrow);
                }
                else if (!this.paneSettings[this.prevPaneIndex].collapsible) {
                    this.hideTargetBarIcon(this.prevBar, this.leftArrow);
                }
            }
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.prevBar)) {
                this.resizableModel(this.currentBarIndex - 1, false);
                this.hideTargetBarIcon(this.prevBar, this.arrow);
            }
            if (!this.paneSettings[this.prevPaneIndex].collapsible) {
                this.hideTargetBarIcon(this.currentSeparator, this.rightArrow);
            }
        }
        else if (!this.splitInstance.prevPaneCollapsed && !this.splitInstance.nextPaneExpanded) {
            if (this.paneSettings[this.currentBarIndex].resizable) {
                this.resizableModel(this.currentBarIndex, true);
            }
            if (!this.splitInstance.nextPaneNextEle.classList.contains(COLLAPSE_PANE) &&
                this.paneSettings[this.currentBarIndex + 1].resizable) {
                this.resizableModel(this.currentBarIndex + 1, true);
            }
            if (!this.paneSettings[this.currentBarIndex].collapsible) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([e.target], HIDE_ICON);
            }
            if (this.previousPane && this.prevPaneIndex === 0 && (this.paneSettings[this.prevPaneIndex].collapsible)) {
                this.showTargetBarIcon(this.currentSeparator, this.leftArrow);
            }
            if (this.nextPane && this.nextPaneIndex === this.allPanes.length - 1 && (this.paneSettings[this.nextPaneIndex].collapsible)) {
                this.showTargetBarIcon(this.getPrevBar(this.nextPaneIndex), this.rightArrow);
            }
            if (!(this.previousPane.classList.contains(COLLAPSE_PANE)) && this.paneSettings[this.nextPaneIndex].collapsible) {
                this.showTargetBarIcon(this.currentSeparator, this.rightArrow);
            }
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.nextBar)) {
                if (this.nextPane.nextElementSibling && (this.nextPane.nextElementSibling.classList.contains(COLLAPSE_PANE) &&
                    this.paneSettings[this.nextPaneIndex + 1].collapsible) ||
                    (!this.nextPane.nextElementSibling.classList.contains(COLLAPSE_PANE) &&
                        this.paneSettings[this.nextPaneIndex].collapsible)) {
                    this.showTargetBarIcon(this.nextBar, this.leftArrow);
                }
                else if (!this.paneSettings[this.splitInstance.nextPaneIndex + 1].collapsible &&
                    this.paneSettings[this.currentBarIndex]) {
                    this.hideTargetBarIcon(this.nextBar, this.arrow);
                }
            }
            if (!(this.nextPaneIndex === this.allPanes.length - 1) && this.nextPane.nextElementSibling &&
                !this.nextPane.classList.contains(COLLAPSE_PANE) && !this.nextPane.nextElementSibling.classList.contains(COLLAPSE_PANE)
                && !this.paneSettings[this.nextPaneIndex + 1].collapsible) {
                this.hideTargetBarIcon(this.nextBar, this.rightArrow);
            }
        }
    }
    collapseAction(e) {
        this.splitterDetails(e);
        const eventArgs = this.beforeAction(e);
        if (this.collapseFlag) {
            this.collapsePane(e);
        }
        else {
            this.trigger('beforeCollapse', eventArgs, (beforeCollapseArgs) => {
                if (!beforeCollapseArgs.cancel) {
                    this.collapsePane(e);
                    const collapseEventArgs = this.afterAction(e);
                    this.trigger('collapsed', collapseEventArgs);
                }
            });
        }
    }
    collapsePane(e) {
        this.removeStaticPanes();
        const collapseCount = this.element.querySelectorAll('.' + COLLAPSE_PANE).length;
        const flexStatus = (this.previousPane.classList.contains(STATIC_PANE) &&
            !this.previousPane.classList.contains(COLLAPSE_PANE) && !this.nextPane.classList.contains(COLLAPSE_PANE) &&
            this.nextPane.nextElementSibling.classList.contains(PANE) &&
            !this.nextPane.nextElementSibling.classList.contains(STATIC_PANE) &&
            !this.nextPane.nextElementSibling.classList.contains(COLLAPSE_PANE) &&
            !(collapseCount === this.allPanes.length - 2)) || (this.nextPane.classList.contains(COLLAPSE_PANE) &&
            !this.previousPane.classList.contains(STATIC_PANE) && this.nextPane.classList.contains(STATIC_PANE));
        const collapseClass = [COLLAPSE_PANE, PANE_HIDDEN];
        if (this.nextPane.classList.contains(COLLAPSE_PANE)) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.previousPane], EXPAND_PANE);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.nextPane], collapseClass);
            if (!this.collapseFlag) {
                this.updatePaneSettings(this.nextPaneIndex, false);
            }
        }
        else {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.previousPane], EXPAND_PANE);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.nextPane], collapseClass);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.nextPane], EXPAND_PANE);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.previousPane], collapseClass);
            if (!this.collapseFlag) {
                this.updatePaneSettings(this.prevPaneIndex, true);
            }
        }
        this.updateIconsOnCollapse(e);
        this.previousPane.setAttribute('aria-expanded', 'false');
        this.nextPane.setAttribute('aria-expanded', 'true');
        this.updateFlexGrow(this.checkStaticPanes());
        if (flexStatus) {
            this.nextPane.classList.remove(EXPAND_PANE);
            this.nextPane.style.flexGrow = '';
        }
    }
    removeStaticPanes() {
        for (let i = 0; i < this.allPanes.length; i++) {
            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[i].size)) {
                this.allPanes[i].classList.remove(STATIC_PANE);
            }
        }
    }
    beforeAction(e) {
        const eventArgs = {
            element: this.element,
            event: e,
            pane: [this.previousPane, this.nextPane],
            index: [this.prevPaneIndex, this.nextPaneIndex],
            separator: this.currentSeparator,
            cancel: false
        };
        return eventArgs;
    }
    updatePaneSettings(index, collapsed) {
        const paneValues = this.paneSettings;
        paneValues[index].collapsed = collapsed;
        this.setProperties({ 'paneSettings': paneValues }, true);
    }
    splitterProperty() {
        this.splitInstance = {
            currentBarIndex: this.currentBarIndex,
            nextPaneCollapsible: this.nextPane.classList.contains(COLLAPSIBLE),
            prevPaneCollapsible: this.previousPane.classList.contains(COLLAPSIBLE),
            prevPaneExpanded: this.previousPane.classList.contains(EXPAND_PANE),
            nextPaneExpanded: this.nextPane.classList.contains(EXPAND_PANE),
            nextPaneCollapsed: this.nextPane.classList.contains(COLLAPSE_PANE),
            prevPaneCollapsed: this.previousPane.classList.contains(COLLAPSE_PANE),
            nextPaneIndex: this.getNextPaneIndex(),
            prevPaneIndex: this.getPreviousPaneIndex(),
            nextPaneNextEle: this.nextPane.nextElementSibling,
            prevPanePreEle: this.previousPane.previousElementSibling
        };
    }
    showCurrentBarIcon() {
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + this.arrow, this.currentSeparator)], HIDE_ICON);
    }
    updateIconsOnExpand(e) {
        this.splitterProperty();
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([e.target], HIDE_ICON);
        if (!this.splitInstance.prevPaneExpanded && !this.splitInstance.nextPaneCollapsed) {
            if (this.paneSettings[this.prevPaneIndex].collapsible) {
                this.showCurrentBarIcon();
            }
            if (this.paneSettings[this.nextPaneIndex].collapsible) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([e.target], HIDE_ICON);
            }
            if (this.paneSettings[this.currentBarIndex].resizable) {
                this.resizableModel(this.currentBarIndex, true);
            }
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.prevBar) &&
                !this.splitInstance.prevPanePreEle.classList.contains(COLLAPSE_PANE)) {
                if (this.paneSettings[this.currentBarIndex - 1].resizable) {
                    this.resizableModel(this.currentBarIndex - 1, true);
                }
                if (this.paneSettings[this.prevPaneIndex].collapsible) {
                    this.showTargetBarIcon(this.prevBar, this.rightArrow);
                }
                if (!this.paneSettings[this.currentBarIndex - 1].collapsible) {
                    this.hideTargetBarIcon(this.prevBar, this.arrow);
                    if (this.paneSettings[this.currentBarIndex].collapsible &&
                        !this.paneSettings[this.currentBarIndex + 1].collapsible) {
                        this.hideTargetBarIcon(this.currentSeparator, this.rightArrow);
                    }
                }
                else if (this.paneSettings[this.currentBarIndex].collapsible &&
                    !this.paneSettings[this.currentBarIndex + 1].collapsible) {
                    this.hideTargetBarIcon(this.currentSeparator, this.rightArrow);
                }
            }
            else {
                if (this.previousPane.previousElementSibling && this.paneSettings[this.prevPaneIndex].collapsible &&
                    (this.previousPane.previousElementSibling.classList.contains(COLLAPSE_PANE) &&
                        this.paneSettings[this.prevPaneIndex - 1].collapsible)) {
                    this.showTargetBarIcon(this.prevBar, this.rightArrow);
                }
                if (!this.paneSettings[this.currentBarIndex + 1].collapsible) {
                    this.hideTargetBarIcon(this.currentSeparator, this.rightArrow);
                }
            }
        }
        else if (this.splitInstance.prevPaneExpanded && this.splitInstance.nextPaneCollapsed) {
            this.resizableModel(this.currentBarIndex, false);
            this.resizableModel(this.currentBarIndex + 1, false);
            if (this.paneSettings[this.nextPaneIndex].collapsible) {
                this.showCurrentBarIcon();
            }
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.nextBar)) {
                this.hideTargetBarIcon(this.nextBar, this.arrow);
            }
            if (this.nextPane && this.nextPaneIndex === this.allPanes.length - 1 && (!this.paneSettings[this.nextPaneIndex].collapsible &&
                this.splitInstance.nextPaneCollapsed)) {
                this.hideTargetBarIcon(this.currentSeparator, this.arrow);
            }
            if (!(this.nextPaneIndex === this.allPanes.length - 1) && this.nextPane.nextElementSibling &&
                this.nextPane.classList.contains(COLLAPSE_PANE) &&
                !this.nextPane.nextElementSibling.classList.contains(COLLAPSE_PANE)
                && this.paneSettings[this.nextPaneIndex].collapsible) {
                this.showTargetBarIcon(this.nextBar, this.rightArrow);
            }
        }
    }
    afterAction(e) {
        const eventArgs = {
            element: this.element,
            event: e,
            pane: [this.previousPane, this.nextPane],
            index: [this.prevPaneIndex, this.nextPaneIndex],
            separator: this.currentSeparator
        };
        return eventArgs;
    }
    currentIndex(e) {
        this.currentBarIndex = this.getOrderIndex(parseInt(e.target.parentElement.style.order, 10), 'splitbar');
    }
    getSeparatorIndex(target) {
        let array = [].slice.call(this.allBars);
        array = this.enableReversePanes ? array.reverse() : array;
        return array.indexOf(target);
    }
    getPrevBar(currentBar) {
        const prevbar = this.allBars[(currentBar - 1)];
        return prevbar;
    }
    getNextBar(currentBar) {
        const prevbar = this.allBars[(currentBar + 1)];
        return prevbar;
    }
    updateBars(index) {
        this.prevBar = this.getPrevBar(index);
        this.nextBar = this.getNextBar(index);
    }
    splitterDetails(e) {
        if (this.orientation === 'Horizontal') {
            this.arrow = e.target.classList.contains(ARROW_LEFT) ? ARROW_RIGHT : ARROW_LEFT;
        }
        else {
            this.arrow = e.target.classList.contains(ARROW_UP) ? ARROW_DOWN : ARROW_UP;
        }
        this.updateCurrentSeparator(e.target);
        this.currentIndex(e);
        this.updateBars(this.currentBarIndex);
        this.getPaneDetails();
    }
    triggerResizing(e) {
        const eventArgs = {
            element: this.element,
            event: e,
            pane: [this.previousPane, this.nextPane],
            index: [this.prevPaneIndex, this.nextPaneIndex],
            paneSize: [this.prePaneDimenson, this.nextPaneDimension],
            separator: this.currentSeparator
        };
        this.trigger('resizing', eventArgs);
    }
    onMouseDown(e) {
        e.preventDefault();
        const target = e.target;
        if (target.classList.contains(NAVIGATE_ARROW)) {
            return;
        }
        this.updateCurrentSeparator(target);
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.currentSeparator], SPLIT_BAR_ACTIVE);
        this.updateCursorPosition(e, 'previous');
        this.getPaneDetails();
        const eventArgs = {
            element: this.element,
            event: e,
            pane: [this.previousPane, this.nextPane],
            index: [this.getPreviousPaneIndex(), this.getNextPaneIndex()],
            separator: this.currentSeparator,
            cancel: false
        };
        for (let i = 0; i < this.element.querySelectorAll('iframe').length; i++) {
            this.element.querySelectorAll('iframe')[i].style.pointerEvents = 'none';
        }
        this.trigger('resizeStart', eventArgs, (resizeStartArgs) => {
            if (!resizeStartArgs.cancel) {
                this.wireResizeEvents();
                this.checkPaneSize(e);
            }
        });
    }
    updatePaneFlexBasis(pane) {
        let previous;
        if (pane.style.flexBasis.indexOf('%') > 0) {
            previous = this.removePercentageUnit(pane.style.flexBasis);
        }
        else {
            if (pane.style.flexBasis !== '') {
                previous = this.convertPixelToPercentage(this.convertPixelToNumber(pane.style.flexBasis));
            }
            else {
                const offset = (this.orientation === 'Horizontal') ? (pane.offsetWidth) : (pane.offsetHeight);
                previous = this.convertPixelToPercentage(offset);
            }
        }
        return previous;
    }
    removePercentageUnit(value) {
        return parseFloat(value.slice(0, value.indexOf('%')));
    }
    convertPercentageToPixel(value, targetElement) {
        const percentage = value.toString();
        let convertedValue;
        if (percentage.indexOf('%') > -1) {
            convertedValue = parseFloat(percentage.slice(0, percentage.indexOf('%')));
            let offsetValue;
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(targetElement)) {
                offsetValue = this.panesDimensions[this.allPanes.indexOf(targetElement)];
            }
            else {
                offsetValue = (this.orientation === 'Horizontal') ? this.element.offsetWidth : this.element.offsetHeight;
            }
            convertedValue = Math.ceil(offsetValue * (convertedValue / 100));
        }
        else {
            convertedValue = parseInt(percentage, 10);
        }
        return convertedValue;
    }
    convertPixelToPercentage(value) {
        const offsetValue = (this.orientation === 'Horizontal') ? this.element.offsetWidth : this.element.offsetHeight;
        return (value / offsetValue) * 100;
    }
    convertPixelToNumber(value) {
        if (value.indexOf('p') > -1) {
            return parseFloat(value.slice(0, value.indexOf('p')));
        }
        else {
            return parseFloat(value);
        }
    }
    calcDragPosition(rectValue, offsetValue) {
        const separatorPosition = this.orientation === 'Horizontal' ? (this.currentCoordinates.x - rectValue) :
            (this.currentCoordinates.y - rectValue);
        let separator;
        separator = separatorPosition / offsetValue;
        separator = (separator > 1) ? 1 : (separator < 0) ? 0 : separator;
        return separator * offsetValue;
    }
    getSeparatorPosition(e) {
        this.updateCursorPosition(e, 'current');
        const rectBound = (this.orientation === 'Horizontal') ? this.element.getBoundingClientRect().left + window.scrollX :
            this.element.getBoundingClientRect().top + window.scrollY;
        const offSet = (this.orientation === 'Horizontal') ? this.element.offsetWidth : this.element.offsetHeight;
        return this.calcDragPosition(rectBound, offSet);
    }
    getMinMax(paneIndex, target, selection) {
        const defaultVal = selection === 'min' ? 0 : null;
        // eslint-disable-next-line
        let paneValue = null;
        if (selection === 'min') {
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[paneIndex]) &&
                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[paneIndex].min)) {
                paneValue = this.paneSettings[paneIndex].min;
            }
        }
        else {
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[paneIndex]) &&
                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[paneIndex].max)) {
                paneValue = this.paneSettings[paneIndex].max;
            }
        }
        if (this.paneSettings.length > 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[paneIndex]) &&
            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(paneValue)) {
            if (paneValue.indexOf('%') > 0) {
                paneValue = this.convertPercentageToPixel(paneValue).toString();
            }
            return this.convertPixelToNumber(paneValue);
        }
        else {
            return defaultVal;
        }
    }
    getPreviousPaneIndex() {
        const separatorIndex = this.enableReversePanes ? parseInt(this.currentSeparator.style.order, 10) + 1 :
            parseInt(this.currentSeparator.style.order, 10) - 1;
        return this.getOrderIndex(separatorIndex, 'pane');
    }
    getNextPaneIndex() {
        const separatorIndex = this.enableReversePanes ? parseInt(this.currentSeparator.style.order, 10) - 1 :
            parseInt(this.currentSeparator.style.order, 10) + 1;
        return this.getOrderIndex(separatorIndex, 'pane');
    }
    getPaneDetails() {
        let prevPane = null;
        let nextPane = null;
        this.order = parseInt(this.currentSeparator.style.order, 10);
        if (this.allPanes.length > 1) {
            prevPane = this.getPrevPane(this.order);
            nextPane = this.getNextPane(this.order);
        }
        if (prevPane && nextPane) {
            this.previousPane = prevPane;
            this.nextPane = nextPane;
            this.prevPaneIndex = this.getPreviousPaneIndex();
            this.nextPaneIndex = this.getNextPaneIndex();
        }
        else {
            return;
        }
    }
    getPaneHeight(pane) {
        return ((this.orientation === 'Horizontal') ? pane.offsetWidth.toString() :
            pane.offsetHeight.toString());
    }
    isValidSize(paneIndex) {
        let isValid = false;
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[paneIndex]) &&
            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[paneIndex].size) &&
            this.paneSettings[paneIndex].size.indexOf('%') > -1) {
            isValid = true;
        }
        return isValid;
    }
    getPaneDimensions() {
        this.previousPaneHeightWidth = (this.previousPane.style.flexBasis === '') ? this.getPaneHeight(this.previousPane) :
            this.previousPane.style.flexBasis;
        this.nextPaneHeightWidth = (this.nextPane.style.flexBasis === '') ? this.getPaneHeight(this.nextPane) :
            this.nextPane.style.flexBasis;
        if (this.isValidSize(this.prevPaneIndex)) {
            this.previousPaneHeightWidth = this.convertPercentageToPixel(this.previousPaneHeightWidth).toString();
            this.updatePrePaneInPercentage = true;
        }
        if (this.isValidSize(this.nextPaneIndex)) {
            this.nextPaneHeightWidth = this.convertPercentageToPixel(this.nextPaneHeightWidth).toString();
            this.updateNextPaneInPercentage = true;
        }
        this.prePaneDimenson = this.convertPixelToNumber(this.previousPaneHeightWidth.toString());
        this.nextPaneDimension = this.convertPixelToNumber(this.nextPaneHeightWidth.toString());
    }
    checkCoordinates(pageX, pageY) {
        let coordinatesChanged = true;
        if ((pageX === this.previousCoordinates.x || pageY === this.previousCoordinates.y)) {
            coordinatesChanged = false;
        }
        return coordinatesChanged;
    }
    isCursorMoved(e) {
        let cursorMoved = true;
        if (this.getEventType(e.type) === 'mouse' || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.pointerType)) &&
            this.getEventType(e.pointerType) === 'mouse') {
            cursorMoved = this.checkCoordinates(e.pageX, e.pageY);
        }
        else {
            cursorMoved = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name !== 'msie') ?
                this.checkCoordinates(e.touches[0].pageX, e.touches[0].pageY) :
                this.checkCoordinates(e.pageX, e.pageY);
        }
        return cursorMoved;
    }
    getBorder() {
        this.border = 0;
        const border = this.orientation === 'Horizontal' ? ((this.element.offsetWidth - this.element.clientWidth) / 2) :
            (this.element.offsetHeight - this.element.clientHeight) / 2;
        this.border = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name !== 'chrome' ? this.border : border;
    }
    onMouseMove(e) {
        if (!this.isCursorMoved(e)) {
            return;
        }
        this.getPaneDetails();
        this.getPaneDimensions();
        this.triggerResizing(e);
        const left = this.validateDraggedPosition(this.getSeparatorPosition(e), this.prePaneDimenson, this.nextPaneDimension);
        let separatorNewPosition;
        this.getBorder();
        if (this.orientation === 'Horizontal') {
            separatorNewPosition = (this.element.getBoundingClientRect().left + left) -
                this.currentSeparator.getBoundingClientRect().left + this.border;
        }
        else {
            separatorNewPosition = (this.element.getBoundingClientRect().top + left) -
                this.currentSeparator.getBoundingClientRect().top + this.border;
        }
        this.nextPaneHeightWidth =
            (typeof (this.nextPaneHeightWidth) === 'string' && this.nextPaneHeightWidth.indexOf('p') > -1) ?
                this.convertPixelToNumber(this.nextPaneHeightWidth) : parseInt(this.nextPaneHeightWidth, 10);
        this.prevPaneCurrentWidth = separatorNewPosition + this.convertPixelToNumber(this.previousPaneHeightWidth);
        this.nextPaneCurrentWidth = this.nextPaneHeightWidth - separatorNewPosition;
        this.validateMinMaxValues();
        if (this.nextPaneCurrentWidth < 0) {
            this.nextPaneCurrentWidth = 0;
        }
        /* istanbul ignore next */
        if (this.prevPaneCurrentWidth < 0) {
            this.prevPaneCurrentWidth = 0;
        }
        if ((this.nextPaneCurrentWidth + this.prevPaneCurrentWidth) > this.totalWidth) {
            if (this.nextPaneCurrentWidth < this.prevPaneCurrentWidth) {
                this.prevPaneCurrentWidth = this.prevPaneCurrentWidth - ((this.nextPaneCurrentWidth + this.prevPaneCurrentWidth)
                    - this.totalWidth);
            }
            else {
                this.nextPaneCurrentWidth = this.nextPaneCurrentWidth - ((this.nextPaneCurrentWidth + this.prevPaneCurrentWidth)
                    - this.totalWidth);
            }
        }
        /* istanbul ignore next */
        if ((this.nextPaneCurrentWidth + this.prevPaneCurrentWidth) < this.totalWidth) {
            const difference = this.totalWidth - ((this.nextPaneCurrentWidth + this.prevPaneCurrentWidth));
            this.nextPaneCurrentWidth = this.nextPaneCurrentWidth + difference;
        }
        this.calculateCurrentDimensions();
        this.addStaticPaneClass();
        this.previousPane.style.flexBasis = this.prevPaneCurrentWidth;
        this.nextPane.style.flexBasis = this.nextPaneCurrentWidth;
        if (!(this.allPanes.length > 2)) {
            this.updateSplitterSize();
        }
    }
    // eslint-disable-next-line
    validateMinRange(paneIndex, paneCurrentWidth, pane) {
        let paneMinRange = null;
        let paneMinDimensions;
        let difference = 0;
        let validatedVal;
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[paneIndex]) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[paneIndex].min)) {
            paneMinRange = this.paneSettings[paneIndex].min.toString();
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(paneMinRange)) {
            if (paneMinRange.indexOf('%') > 0) {
                paneMinRange = this.convertPercentageToPixel(paneMinRange).toString();
            }
            paneMinDimensions = this.convertPixelToNumber(paneMinRange);
            if (paneCurrentWidth < paneMinDimensions) {
                difference = (paneCurrentWidth - paneMinDimensions) <= 0 ? 0 :
                    (paneCurrentWidth - paneMinDimensions);
                this.totalWidth = this.totalWidth - difference;
                this.totalPercent = this.convertPixelToPercentage(this.totalWidth);
                validatedVal = paneMinDimensions;
            }
        }
        return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(validatedVal) ? paneCurrentWidth : validatedVal;
    }
    // eslint-disable-next-line
    validateMaxRange(paneIndex, paneCurrentWidth, pane) {
        let paneMaxRange = null;
        let paneMaxDimensions;
        let validatedVal;
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[paneIndex]) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[paneIndex].max)) {
            paneMaxRange = this.paneSettings[paneIndex].max.toString();
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(paneMaxRange)) {
            if (paneMaxRange.indexOf('%') > 0) {
                paneMaxRange = this.convertPercentageToPixel(paneMaxRange).toString();
            }
            paneMaxDimensions = this.convertPixelToNumber(paneMaxRange);
            if (paneCurrentWidth > paneMaxDimensions) {
                this.totalWidth = this.totalWidth - (paneCurrentWidth - paneMaxDimensions);
                this.totalPercent = this.convertPixelToPercentage(this.totalWidth);
                validatedVal = paneMaxDimensions;
            }
        }
        return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(validatedVal) ? paneCurrentWidth : validatedVal;
    }
    validateMinMaxValues() {
        //validate previous pane minimum range
        this.prevPaneCurrentWidth = this.validateMinRange(this.prevPaneIndex, this.prevPaneCurrentWidth, this.previousPane);
        // Validate next pane minimum range
        this.nextPaneCurrentWidth = this.validateMinRange(this.nextPaneIndex, this.nextPaneCurrentWidth, this.nextPane);
        // validate previous pane maximum range
        this.prevPaneCurrentWidth = this.validateMaxRange(this.prevPaneIndex, this.prevPaneCurrentWidth, this.previousPane);
        // validate next pane maximum range
        this.nextPaneCurrentWidth = this.validateMaxRange(this.nextPaneIndex, this.nextPaneCurrentWidth, this.nextPane);
    }
    equatePaneWidths() {
        let difference;
        if ((this.prevPaneCurrentWidth + this.nextPaneCurrentWidth) > this.totalPercent) {
            difference = (this.prevPaneCurrentWidth + this.nextPaneCurrentWidth) - this.totalPercent;
            this.prevPaneCurrentWidth = this.prevPaneCurrentWidth - (difference / 2) + '%';
            this.nextPaneCurrentWidth = this.nextPaneCurrentWidth - (difference / 2) + '%';
        }
        if ((this.prevPaneCurrentWidth + this.nextPaneCurrentWidth) < this.totalPercent) {
            difference = this.totalPercent - (this.prevPaneCurrentWidth + this.nextPaneCurrentWidth);
            this.prevPaneCurrentWidth = this.prevPaneCurrentWidth + (difference / 2) + '%';
            this.nextPaneCurrentWidth = this.nextPaneCurrentWidth + (difference / 2) + '%';
        }
    }
    calculateCurrentDimensions() {
        if (this.updatePrePaneInPercentage || this.updateNextPaneInPercentage) {
            this.prevPaneCurrentWidth = Math.round(Number(Math.round(this.convertPixelToPercentage(this.prevPaneCurrentWidth)
                * 10) / 10));
            this.nextPaneCurrentWidth = Math.round(Number(Math.round(this.convertPixelToPercentage(this.nextPaneCurrentWidth)
                * 10) / 10));
            if (this.prevPaneCurrentWidth === 0) {
                this.nextPaneCurrentWidth = this.totalPercent;
            }
            if (this.nextPaneCurrentWidth === 0) {
                this.prevPaneCurrentWidth = this.totalPercent;
            }
            if (this.prevPaneCurrentWidth + this.nextPaneCurrentWidth !== this.totalPercent) {
                this.equatePaneWidths();
            }
            else {
                this.prevPaneCurrentWidth = this.prevPaneCurrentWidth + '%';
                this.nextPaneCurrentWidth = this.nextPaneCurrentWidth + '%';
            }
            this.prevPaneCurrentWidth = (this.updatePrePaneInPercentage) ? this.prevPaneCurrentWidth :
                this.convertPercentageToPixel(this.prevPaneCurrentWidth) + 'px';
            this.nextPaneCurrentWidth = (this.updateNextPaneInPercentage) ? this.nextPaneCurrentWidth :
                this.convertPercentageToPixel(this.nextPaneCurrentWidth) + 'px';
            this.updatePrePaneInPercentage = false;
            this.updateNextPaneInPercentage = false;
        }
        else {
            this.prevPaneCurrentWidth = this.prevPaneCurrentWidth + 'px';
            this.nextPaneCurrentWidth = this.nextPaneCurrentWidth + 'px';
        }
    }
    addStaticPaneClass() {
        if (!this.previousPane.classList.contains(STATIC_PANE)) {
            this.previousPane.classList.add(STATIC_PANE);
        }
        if (!this.nextPane.classList.contains(STATIC_PANE)) {
            this.nextPane.classList.add(STATIC_PANE);
        }
    }
    validateDraggedPosition(draggedPos, prevPaneHeightWidth, nextPaneHeightWidth) {
        const separatorTopLeft = (this.orientation === 'Horizontal') ? this.currentSeparator.offsetLeft + window.scrollX :
            this.currentSeparator.offsetTop;
        const prePaneRange = separatorTopLeft - prevPaneHeightWidth;
        const nextPaneRange = nextPaneHeightWidth + separatorTopLeft;
        const pane1MinSize = this.getMinMax(this.prevPaneIndex, this.previousPane, 'min');
        const pane2MinSize = this.getMinMax(this.nextPaneIndex, this.nextPane, 'min');
        const pane1MaxSize = this.getMinMax(this.prevPaneIndex, this.previousPane, 'max');
        const pane2MaxSize = this.getMinMax(this.nextPaneIndex, this.nextPane, 'max');
        let validatedSize = draggedPos;
        if (draggedPos > nextPaneRange - pane2MinSize) {
            validatedSize = nextPaneRange - pane2MinSize;
        }
        else if (draggedPos < prePaneRange + pane1MinSize) {
            validatedSize = prePaneRange + pane1MinSize;
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pane1MaxSize)) {
            if (draggedPos > prePaneRange + pane1MaxSize) {
                validatedSize = prePaneRange + pane1MaxSize;
            }
        }
        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(pane2MaxSize)) {
            if (draggedPos < nextPaneRange - pane2MaxSize) {
                validatedSize = nextPaneRange - pane2MaxSize;
            }
        }
        return validatedSize;
    }
    onMouseUp(e) {
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.currentSeparator], SPLIT_BAR_ACTIVE);
        this.unwireResizeEvents();
        const eventArgs = {
            event: e,
            element: this.element,
            pane: [this.previousPane, this.nextPane],
            index: [this.prevPaneIndex, this.nextPaneIndex],
            separator: this.currentSeparator,
            paneSize: [this.prePaneDimenson, this.nextPaneDimension]
        };
        for (let i = 0; i < this.element.querySelectorAll('iframe').length; i++) {
            this.element.querySelectorAll('iframe')[i].style.pointerEvents = 'auto';
        }
        this.trigger('resizeStop', eventArgs);
        if (this.enablePersistence) {
            const paneValues = this.paneSettings;
            paneValues[this.getPreviousPaneIndex()].size = this.allPanes[this.getPreviousPaneIndex()].style.flexBasis;
            paneValues[this.getNextPaneIndex()].size = this.allPanes[this.getNextPaneIndex()].style.flexBasis;
            this.setProperties({ 'paneSettings': paneValues }, true);
        }
    }
    panesDimension(index, child) {
        const childCount = child.length;
        let size;
        parseInt(this.getHeight(this.element), 10);
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[index])) {
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[index].size)) {
                size = this.paneSettings[index].size;
                if (index < childCount) {
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(child[index], { 'flex-basis': size, 'order': index * 2 });
                    if (index < childCount - 1 && this.paneSettings[index].size !== '') {
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([child[index]], STATIC_PANE);
                    }
                    else if (!this.sizeFlag) {
                        child[index].style.flexBasis = null;
                    }
                    if ((index === childCount - 1) && this.sizeFlag && this.paneSettings[index].size !== '') {
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([child[index]], STATIC_PANE);
                    }
                }
            }
            else {
                this.sizeFlag = true;
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(child[index], { 'order': index * 2 });
            }
        }
        else {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(child[index], { 'order': index * 2 });
        }
        this.paneOrder.push(index * 2);
    }
    setTemplate(template, toElement) {
        toElement.innerHTML = '';
        template = typeof (template) === 'string' ? this.sanitizeHelper(template) : template;
        this.templateCompile(toElement, template);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        if (this.isReact) {
            this.renderReactTemplates();
        }
    }
    // eslint-disable-next-line
    templateCompile(ele, cnt) {
        // eslint-disable-next-line
        const tempEle = this.createElement('div');
        this.compileElement(tempEle, cnt, 'content');
        if (tempEle.childNodes.length !== 0) {
            [].slice.call(tempEle.childNodes).forEach((childEle) => {
                ele.appendChild(childEle);
            });
        }
    }
    compileElement(ele, val, prop) {
        // eslint-disable-next-line
        if (typeof (val) === 'string') {
            if (val[0] === '.' || val[0] === '#') {
                const eleVal = document.querySelector(val);
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(eleVal)) {
                    this.templateElement.push(eleVal);
                    if (eleVal.style.display === 'none') {
                        eleVal.style.removeProperty('display');
                    }
                    if (eleVal.getAttribute('style') === '') {
                        eleVal.removeAttribute('style');
                    }
                    ele.appendChild(eleVal);
                    return;
                }
                else {
                    val = val.trim();
                }
            }
            else {
                val = val.trim();
            }
        }
        let templateFn;
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(val.outerHTML)) {
            templateFn = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(val.outerHTML);
        }
        else {
            templateFn = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(val);
        }
        let templateFUN;
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(templateFn)) {
            templateFUN = templateFn({}, this, prop, this.element.id + 'content' + this.allPanes.length.toString(), true);
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(templateFn) && templateFUN && templateFUN.length > 0) {
            [].slice.call(templateFUN).forEach((el) => {
                ele.appendChild(el);
            });
        }
    }
    paneCollapsible(pane, index) {
        // eslint-disable-next-line
        this.paneSettings[index].collapsible ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([pane], COLLAPSIBLE) : (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([pane], COLLAPSIBLE);
    }
    createSplitPane(target) {
        let childCount = target.children.length;
        for (let i = 0; i < this.paneSettings.length; i++) {
            if (childCount < this.paneSettings.length) {
                const childElement = this.createElement('div');
                this.element.appendChild(childElement);
                childCount = childCount + 1;
            }
        }
        childCount = target.children.length;
        const child = [].slice.call(target.children);
        this.sizeFlag = false;
        if (childCount > 0) {
            for (let i = 0; i < childCount; i++) {
                // To accept only div and span element as pane
                if (child[i].nodeName === 'DIV' || child[i].nodeName === 'SPAN') {
                    this.allPanes.push(child[i]);
                    if (this.orientation === 'Horizontal') {
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([child[i]], [PANE, SPLIT_H_PANE, SCROLL_PANE]);
                        this.panesDimension(i, child);
                    }
                    else {
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([child[i]], [PANE, SPLIT_V_PANE, SCROLL_PANE]);
                        this.panesDimension(i, child);
                    }
                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[i]) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[i].content)) {
                        this.setTemplate(this.paneSettings[i].content, child[i]);
                    }
                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[i]) && this.paneSettings[i].cssClass) {
                        this.setCssClass(child[i], this.paneSettings[i].cssClass);
                    }
                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.paneSettings[i])) {
                        this.paneCollapsible(child[i], i);
                    }
                }
            }
        }
    }
    /**
     * expands corresponding pane based on the index is passed.
     *
     * @param { number } index - Specifies the index value of the corresponding pane to be expanded at initial rendering of splitter.
     * @returns {void}
     */
    expand(index) {
        this.collapsedOnchange(index);
        this.updatePaneSettings(index, false);
    }
    /**
     * collapses corresponding pane based on the index is passed.
     *
     * @param { number } index - Specifies the index value of the corresponding pane to be collapsed at initial rendering of splitter.
     * @returns {void}
     */
    collapse(index) {
        this.isCollapsed(index);
        this.updatePaneSettings(index, true);
    }
    /**
     * Removes the control from the DOM and also removes all its related events.
     *
     * @returns {void}
     */
    destroy() {
        if (!this.isDestroyed) {
            super.destroy();
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(document, 'touchstart click', this.onDocumentClick);
            this.element.ownerDocument.defaultView.removeEventListener('resize', this.onReportWindowSize, true);
            while (this.element.attributes.length > 0) {
                this.element.removeAttribute(this.element.attributes[0].name);
            }
            this.element.innerHTML = this.wrapper.innerHTML;
            for (let i = 0; i < this.wrapper.attributes.length; i++) {
                this.element.setAttribute(this.wrapper.attributes[i].name, this.wrapper.attributes[i].value);
            }
            if (this.refreshing) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], ['e-control', 'e-lib', ROOT]);
                this.allBars = [];
                this.allPanes = [];
            }
            this.restoreElem();
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            if (this.isReact) {
                this.clearTemplate();
            }
        }
    }
    restoreElem() {
        if (this.templateElement.length > 0) {
            for (let i = 0; i < this.templateElement.length; i++) {
                this.templateElement[i].style.display = 'none';
                document.body.appendChild(this.templateElement[i]);
            }
        }
    }
    addPaneClass(pane) {
        // eslint-disable-next-line
        this.orientation === 'Horizontal' ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([pane], [PANE, SPLIT_H_PANE, SCROLL_PANE]) :
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([pane], [PANE, SPLIT_V_PANE, SCROLL_PANE]);
        return pane;
    }
    removePaneOrders(paneClass) {
        const childNodes = this.element.childNodes;
        const panes = [];
        for (let i = 0; childNodes.length < 0; i++) {
            if (childNodes[i].classList.contains(paneClass)) {
                panes.push(childNodes[i]);
            }
        }
        for (let i = 0; i < panes.length; i++) {
            panes[i].style.removeProperty('order');
        }
    }
    setPaneOrder() {
        for (let i = 0; i < this.allPanes.length; i++) {
            this.panesDimension(i, this.allPanes);
        }
    }
    removeSeparator() {
        for (let i = 0; i < this.allBars.length; i++) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.allBars[i]);
        }
        this.allBars = [];
    }
    updatePanes() {
        this.setPaneOrder();
        this.removeSeparator();
        this.addSeparator(this.element);
    }
    /**
     * Allows you to add a pane dynamically to the specified index position by passing the pane properties.
     *
     * @param { PanePropertiesModel } paneProperties - Specifies the pane’s properties that apply to new pane.
     * @param { number } index - Specifies the index where the pane will be inserted.
     * @returns {void}
     */
    addPane(paneProperties, index) {
        let newPane = this.createElement('div');
        newPane = this.addPaneClass(newPane);
        index = (index > this.allPanes.length + 1) ? this.allPanes.length : index;
        const paneDetails = {
            size: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(paneProperties.size) ? '' : paneProperties.size,
            min: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(paneProperties.min) ? null : paneProperties.min,
            max: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(paneProperties.max) ? null : paneProperties.max,
            content: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(paneProperties.content) ? '' : paneProperties.content,
            resizable: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(paneProperties.resizable) ? true : paneProperties.resizable,
            collapsible: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(paneProperties.collapsible) ? false : paneProperties.collapsible,
            collapsed: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(paneProperties.collapsed) ? false : paneProperties.collapsed,
            cssClass: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(paneProperties.cssClass) ? '' : paneProperties.cssClass
        };
        this.paneSettings.splice(index, 0, paneDetails);
        this.setProperties({ 'paneSettings': this.paneSettings }, true);
        if (this.orientation === 'Horizontal') {
            this.element.insertBefore(newPane, this.element.querySelectorAll('.' + SPLIT_H_PANE)[index]);
            this.removePaneOrders(SPLIT_H_PANE);
        }
        else {
            this.element.insertBefore(newPane, this.element.querySelectorAll('.' + SPLIT_V_PANE)[index]);
            this.removePaneOrders(SPLIT_V_PANE);
        }
        this.allPanes.splice(index, 0, newPane);
        this.updatePanes();
        this.setTemplate(this.paneSettings[index].content, newPane);
        this.setCssClass(this.allPanes[index], paneProperties.cssClass);
        this.allPanes[this.allPanes.length - 1].classList.remove(STATIC_PANE);
    }
    /**
     * Allows you to remove the specified pane dynamically by passing its index value.
     *
     * @param { number } index - Specifies the index value to remove the corresponding pane.
     * @returns {void}
     */
    removePane(index) {
        index = (index > this.allPanes.length + 1) ? this.allPanes.length : index;
        const elementClass = (this.orientation === 'Horizontal') ? SPLIT_H_PANE : SPLIT_V_PANE;
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.element.querySelectorAll('.' + elementClass)[index])) {
            return;
        }
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.element.querySelectorAll('.' + elementClass)[index]);
        this.allPanes.splice(index, 1);
        this.removePaneOrders(elementClass);
        this.updatePanes();
        this.paneSettings.splice(index, 1);
        this.setProperties({ 'paneSettings': this.paneSettings }, true);
        if (this.allPanes.length > 0) {
            this.allPanes[this.allPanes.length - 1].classList.remove(STATIC_PANE);
        }
    }
};
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('100%')
], Splitter.prototype, "height", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], Splitter.prototype, "enableReversePanes", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('100%')
], Splitter.prototype, "width", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], Splitter.prototype, "enablePersistence", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([], PaneProperties)
], Splitter.prototype, "paneSettings", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Horizontal')
], Splitter.prototype, "orientation", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')
], Splitter.prototype, "cssClass", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], Splitter.prototype, "enabled", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], Splitter.prototype, "enableHtmlSanitizer", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], Splitter.prototype, "separatorSize", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], Splitter.prototype, "beforeSanitizeHtml", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], Splitter.prototype, "created", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], Splitter.prototype, "resizeStart", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], Splitter.prototype, "resizing", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], Splitter.prototype, "resizeStop", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], Splitter.prototype, "beforeCollapse", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], Splitter.prototype, "beforeExpand", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], Splitter.prototype, "collapsed", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], Splitter.prototype, "expanded", void 0);
Splitter = __decorate([
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.NotifyPropertyChanges
], Splitter);

/**
 * splitter modules
 */

var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
// constant class definitions
const preventSelect = 'e-prevent';
const dragging = 'e-dragging';
const dragRestrict = 'e-drag-restrict';
const drag = 'e-drag';
const resize = 'e-resize';
const resizeicon = 'e-dl-icon';
const responsive = 'e-responsive';
const east = 'e-east';
const west = 'e-west';
const north = 'e-north';
const south = 'e-south';
const single = 'e-single';
const double = 'e-double';
const northEast = 'e-north-east';
const southEast = 'e-south-east';
const northWest = 'e-north-west';
const southWest = 'e-south-west';
const panel = 'e-panel';
const panelContent = 'e-panel-content';
const panelContainer = 'e-panel-container';
const disable = 'e-disabled';
const header = 'e-panel-header';
const panelTransition = 'e-panel-transition';
/**
 * Defines the panel of the DashboardLayout component.
 */
class Panel extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty {
}
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')
], Panel.prototype, "id", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')
], Panel.prototype, "cssClass", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')
], Panel.prototype, "header", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')
], Panel.prototype, "content", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], Panel.prototype, "enabled", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)
], Panel.prototype, "row", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)
], Panel.prototype, "col", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1)
], Panel.prototype, "sizeX", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1)
], Panel.prototype, "sizeY", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1)
], Panel.prototype, "minSizeY", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1)
], Panel.prototype, "minSizeX", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], Panel.prototype, "maxSizeY", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], Panel.prototype, "maxSizeX", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1000)
], Panel.prototype, "zIndex", void 0);
/**
 * The DashboardLayout is a grid structured layout control, that helps to create a dashboard with panels.
 * Panels hold the UI components or data to be visualized with flexible options like resize, reorder, drag-n-drop, remove and add,
 * that allows users to easily place the panels at a desired position within the grid layout.
 * ```html
 * <div id="default-layout">
 * ```
 * ```typescript
 * <script>
 *   let dashBoardObject : DashboardLayout = new DashboardLayout();
 *   dashBoardObject.appendTo('#default-layout');
 * </script>
 * ```
 */
let DashboardLayout = class DashboardLayout extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Component {
    constructor(options, element) {
        super(options, element);
        this.rows = 1;
        this.panelID = 0;
        this.movePanelCalled = false;
        this.resizeCalled = false;
        this.mOffX = 0;
        this.mOffY = 0;
        this.maxTop = 9999;
        this.maxRows = 100;
        this.mouseX = 0;
        this.mouseY = 0;
        this.minTop = 0;
        this.minLeft = 0;
        this.isInlineRendering = false;
        this.removeAllCalled = false;
        // to check whether removePanel is executed in mobile device
        this.isPanelRemoved = false;
        // to maintain sizeY in mobile device
        this.panelsSizeY = 0;
        this.resizeHeight = false;
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setValue)('mergePersistData', this.mergePersistPanelData, this);
    }
    /**
     * Initialize the event handler
     *
     * @private
     */
    preRender() {
        this.panelCollection = [];
        this.sortedArray = [];
        this.gridPanelCollection = [];
        this.overlapElement = [];
        this.overlapElementClone = [];
        this.overlapSubElementClone = [];
        this.collisionChecker = {};
        this.dragCollection = [];
        this.elementRef = { top: '', left: '', height: '', width: '' };
        this.dimensions = [];
        this.allItems = [];
        this.oldRowCol = {};
        this.availableClasses = [];
        this.setOldRowCol();
        this.calculateCellSize();
        this.contentTemplateChild = [].slice.call(this.element.children);
    }
    setOldRowCol() {
        for (let i = 0; i < this.panels.length; i++) {
            if (!this.panels[i].id) {
                this.panelPropertyChange(this.panels[i], { id: 'layout_' + this.panelID.toString() });
                this.panelID = this.panelID + 1;
            }
            this.oldRowCol[this.panels[i].id] = { row: this.panels[i].row, col: this.panels[i].col };
        }
    }
    createPanelElement(cssClass, idValue) {
        const ele = this.createElement('div');
        if (cssClass && cssClass.length > 0) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([ele], cssClass);
        }
        if (idValue) {
            ele.setAttribute('id', idValue);
        }
        return ele;
    }
    /**
     * To Initialize the control rendering.
     *
     * @returns void
     * @private
     */
    render() {
        this.initialize();
        this.isRenderComplete = true;
        if (this.showGridLines && !this.checkMediaQuery()) {
            this.initGridLines();
        }
        this.updateDragArea();
        this.renderComplete();
        this.renderReactTemplates();
    }
    initGridLines() {
        this.table = document.createElement('table');
        const tbody = document.createElement('tbody');
        this.table.classList.add('e-dashboard-gridline-table');
        for (let i = 0; i < this.maxRow(); i++) {
            const tr = document.createElement('tr');
            for (let j = 0; j < this.columns; j++) {
                const td = document.createElement('td');
                td.classList.add('e-dashboard-gridline');
                this.setAttributes({ value: { row: i.toString(), col: j.toString(), sizeX: '1', sizeY: '1' } }, td);
                td.setAttribute('id', '' + j);
                this.setPanelPosition(td, i, j);
                this.setHeightAndWidth(td, { row: i, col: j, sizeX: 1, sizeY: 1 });
                tr.appendChild(td);
            }
            tbody.appendChild(tr);
        }
        this.table.appendChild(tbody);
        this.element.appendChild(this.table);
        this.renderReactTemplates();
    }
    initialize() {
        this.updateRowHeight();
        if (this.element.childElementCount > 0 && this.element.querySelectorAll('.e-panel').length > 0) {
            const panelElements = [];
            this.setProperties({ panels: [] }, true);
            this.isInlineRendering = true;
            for (let i = 0; i < this.element.querySelectorAll('.e-panel').length; i++) {
                panelElements.push((this.element.querySelectorAll('.e-panel')[i]));
            }
            for (let i = 0; i < panelElements.length; i++) {
                const panelElement = panelElements[i];
                if (this.enableRtl) {
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([panelElement], 'e-rtl');
                }
                this.getInlinePanels(panelElement);
                this.maxCol();
                this.maxRow();
            }
            for (let i = 0; i < this.panels.length; i++) {
                const panelElement = this.element.querySelector('#' + this.panels[i].id);
                this.setMinMaxValues(this.panels[i]);
                if (this.maxColumnValue < this.panels[i].col || this.maxColumnValue < (this.panels[i].col + this.panels[i].sizeX)) {
                    const colValue = this.maxColumnValue - this.panels[i].sizeX;
                    this.panelPropertyChange(this.panels[i], { col: colValue < 0 ? 0 : colValue });
                }
                this.setXYAttributes(panelElement, this.panels[i]);
                const panel = this.renderPanels(panelElement, this.panels[i], this.panels[i].id, false);
                this.panelCollection.push(panel);
                this.setHeightAndWidth(panelElement, this.panels[i]);
                this.tempObject = this;
                if (this.mediaQuery && !window.matchMedia('(' + this.mediaQuery + ')').matches) {
                    this.setPanelPosition(panelElement, this.panels[i].row, this.panels[i].col);
                    this.mainElement = panelElement;
                    this.updatePanelLayout(panelElement, this.panels[i]);
                    this.mainElement = null;
                }
                this.setClasses([panelElement]);
            }
            this.updateOldRowColumn();
            if (this.checkMediaQuery()) {
                this.checkMediaQuerySizing();
            }
        }
        else {
            this.renderDashBoardCells(this.panels);
        }
        if (this.allowDragging && (this.mediaQuery ? !window.matchMedia('(' + this.mediaQuery + ')').matches : true)) {
            this.enableDraggingContent(this.panelCollection);
        }
        this.sortedPanel();
        this.bindEvents();
        this.updatePanels();
        this.updateCloneArrayObject();
        this.checkColumnValue = this.maxColumnValue;
        if (!(this.checkMediaQuery())) {
            this.panelResponsiveUpdate();
        }
        this.setEnableRtl();
    }
    checkMediaQuery() {
        return (this.mediaQuery && window.matchMedia('(' + this.mediaQuery + ')').matches);
    }
    calculateCellSize() {
        this.cellSize = [];
        if ((this.checkMediaQuery())) {
            this.cellSize[1] = this.element.parentElement
                && ((this.element.parentElement.offsetWidth)) / this.cellAspectRatio;
        }
        else {
            this.cellSize[0] = this.element.parentElement &&
                ((this.element.parentElement.offsetWidth));
            this.cellSize[0] = this.element.parentElement
                && ((this.element.parentElement.offsetWidth - ((this.maxCol() - 1) * this.cellSpacing[0]))
                    / (this.maxCol()));
            this.cellSize[1] = this.cellSize[0] / this.cellAspectRatio;
        }
    }
    maxRow(recheck) {
        let maxRow = 1;
        if (this.rows > 1 && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(recheck)) {
            maxRow = this.rows;
            return maxRow;
        }
        for (let i = 0; i < this.panels.length; i++) {
            if (this.panels[i].sizeY + this.panels[i].row > maxRow) {
                maxRow = this.panels[i].sizeY + this.panels[i].row;
            }
        }
        if (this.panels.length === 0) {
            maxRow = this.columns;
        }
        return maxRow;
    }
    maxCol() {
        let maxCol = 1;
        maxCol = this.columns;
        this.maxColumnValue = maxCol;
        return maxCol;
    }
    updateOldRowColumn() {
        for (let i = 0; i < this.panels.length; i++) {
            const id = this.panels[i].id;
            if (document.getElementById(id)) {
                const row = parseInt(document.getElementById(id).getAttribute('data-row'), 10);
                const col = parseInt(document.getElementById(id).getAttribute('data-col'), 10);
                this.oldRowCol[this.panels[i].id] = { row: row, col: col };
            }
            else {
                continue;
            }
        }
    }
    createSubElement(cssClass, idValue, className) {
        const element = this.createElement('div');
        if (className) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([element], [className]);
        }
        if (cssClass && cssClass.length > 0) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([element], cssClass);
        }
        if (idValue) {
            element.setAttribute('id', idValue);
        }
        return element;
    }
    // eslint-disable-next-line
    templateParser(template) {
        if (template) {
            try {
                if (document.querySelectorAll(template).length) {
                    return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(document.querySelector(template).innerHTML.trim());
                }
            }
            catch (error) {
                const sanitizedValue = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.sanitize(template);
                return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)((this.enableHtmlSanitizer && typeof (template) === 'string') ? sanitizedValue : template);
            }
        }
        return undefined;
    }
    renderTemplate(content, appendElement, type, isStringTemplate, prop) {
        // eslint-disable-next-line
        const templateFn = this.templateParser(content);
        const templateElements = [];
        if ((content[0] === '.' || content[0] === '#') &&
            document.querySelector(content).tagName !== 'SCRIPT') {
            const eleVal = document.querySelector(content);
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(eleVal)) {
                if (eleVal.style.display === 'none') {
                    eleVal.style.removeProperty('display');
                }
                if (eleVal.getAttribute('style') === '') {
                    eleVal.removeAttribute('style');
                }
                appendElement.appendChild(eleVal);
                return;
            }
            else {
                content = content.trim();
            }
        }
        else {
            // eslint-disable-next-line
            const compilerFn = templateFn({}, this, prop, type, isStringTemplate, null, appendElement);
            if (compilerFn) {
                for (const item of compilerFn) {
                    templateElements.push(item);
                }
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)([].slice.call(templateElements), appendElement);
            }
        }
    }
    renderPanels(cellElement, panelModel, panelId, isStringTemplate) {
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([cellElement], [panel, panelTransition]);
        const cssClass = panelModel.cssClass ? panelModel.cssClass.split(' ') : null;
        this.panelContent = cellElement.querySelector('.e-panel-container') ?
            cellElement.querySelector('.e-panel-container') :
            this.createSubElement(cssClass, cellElement.id + '_content', panelContainer);
        cellElement.appendChild(this.panelContent);
        if (!panelModel.enabled) {
            this.disablePanel(cellElement);
        }
        if (panelModel.header) {
            const headerTemplateElement = cellElement.querySelector('.e-panel-header') ?
                cellElement.querySelector('.e-panel-header') : this.createSubElement([], cellElement.id + 'template', '');
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([headerTemplateElement], [header]);
            if (!cellElement.querySelector('.e-panel-header')) {
                const id = this.element.id + 'HeaderTemplate' + panelId;
                this.renderTemplate(panelModel.header, headerTemplateElement, id, isStringTemplate, 'header');
                this.panelContent.appendChild(headerTemplateElement);
                this.renderReactTemplates();
            }
        }
        if (panelModel.content) {
            const cssClass = panelModel.cssClass ? panelModel.cssClass.split(' ') : null;
            this.panelBody = cellElement.querySelector('.e-panel-content') ? cellElement.querySelector('.e-panel-content') :
                this.createSubElement(cssClass, cellElement.id + '_body', panelContent);
            const headerHeight = this.panelContent.querySelector('.e-panel-header') ?
                window.getComputedStyle(this.panelContent.querySelector('.e-panel-header')).height : '0px';
            const contentHeightValue = 'calc( 100% - ' + headerHeight + ')';
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(this.panelBody, { height: contentHeightValue });
            if (!cellElement.querySelector('.e-panel-content')) {
                const id = this.element.id + 'ContentTemplate' + panelId;
                this.renderTemplate(panelModel.content, this.panelBody, id, isStringTemplate, 'content');
                this.panelContent.appendChild(this.panelBody);
                this.renderReactTemplates();
            }
        }
        return cellElement;
    }
    disablePanel(panelElement) {
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([panelElement], [disable]);
    }
    getInlinePanels(panelElement) {
        const model = {
            sizeX: panelElement.hasAttribute('data-sizex') ? parseInt(panelElement.getAttribute('data-sizex'), 10) : 1,
            sizeY: panelElement.hasAttribute('data-sizey') ? parseInt(panelElement.getAttribute('data-sizey'), 10) : 1,
            minSizeX: panelElement.hasAttribute('data-minsizex') ? parseInt(panelElement.getAttribute('data-minsizex'), 10) : 1,
            minSizeY: panelElement.hasAttribute('data-minsizey') ? parseInt(panelElement.getAttribute('data-minsizey'), 10) : 1,
            maxSizeX: panelElement.hasAttribute('data-maxsizex') ? parseInt(panelElement.getAttribute('data-maxsizex'), 10) : null,
            maxSizeY: panelElement.hasAttribute('data-maxsizey') ? parseInt(panelElement.getAttribute('data-maxsizey'), 10) : null,
            row: panelElement.hasAttribute('data-row') ? parseInt(panelElement.getAttribute('data-row'), 10) : 0,
            col: panelElement.hasAttribute('data-col') ? parseInt(panelElement.getAttribute('data-col'), 10) : 0,
            id: panelElement.getAttribute('id'),
            zIndex: panelElement.hasAttribute('data-zindex') ? parseInt(panelElement.getAttribute('data-zIndex'), 10) : 1000,
            header: panelElement.querySelector('.e-panel-header') && '.e-panel-header',
            content: panelElement.querySelector('.e-panel-content') && '.e-panel-content'
        };
        if (!model.id) {
            model.id = 'layout_' + this.panelID.toString();
            panelElement.setAttribute('id', model.id);
            this.panelID = this.panelID + 1;
        }
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(model.enabled)) {
            model.enabled = true;
        }
        panelElement.style.zIndex = '' + model.zIndex;
        // eslint-disable-next-line
        const panelProp = new Panel(this, 'panels', model, true);
        this.panels.push(panelProp);
    }
    resizeEvents() {
        if (this.allowResizing) {
            const panelElements = this.element.querySelectorAll('.e-panel .e-panel-container .e-resize');
            for (let i = 0; i < panelElements.length; i++) {
                const eventName = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie') ? 'mousedown pointerdown' : 'mousedown';
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(panelElements[i], eventName, this.downResizeHandler, this);
                if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name !== 'msie') {
                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(panelElements[i], 'touchstart', this.touchDownResizeHandler, this);
                }
            }
        }
    }
    bindEvents() {
        this.refreshListener = this.refresh.bind(this);
        // eslint-disable-next-line
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(window, 'resize', this.refreshListener);
        this.resizeEvents();
    }
    downResizeHandler(e) {
        this.downHandler(e);
        this.lastMouseX = e.pageX;
        this.lastMouseY = e.pageY;
        const moveEventName = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie') ? 'mousemove pointermove' : 'mousemove';
        const upEventName = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie') ? 'mouseup pointerup' : 'mouseup';
        if (!this.isMouseMoveBound) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(document, moveEventName, this.moveResizeHandler, this);
            this.isMouseMoveBound = true;
        }
        if (!this.isMouseUpBound) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(document, upEventName, this.upResizeHandler, this);
            this.isMouseUpBound = true;
        }
    }
    downHandler(e) {
        this.resizeCalled = false;
        this.panelsInitialModel = this.cloneModels(this.panels);
        const el = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)((e.currentTarget), '.e-panel');
        const args = { event: e, element: el, isInteracted: true };
        this.trigger('resizeStart', args);
        this.downTarget = e.currentTarget;
        this.shadowEle = document.createElement('div');
        this.shadowEle.classList.add('e-holder');
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], [preventSelect]);
        this.element.appendChild(this.shadowEle);
        this.renderReactTemplates();
        this.elementX = parseFloat(el.style.left);
        this.elementY = parseFloat(el.style.top);
        this.elementWidth = el.offsetWidth;
        this.elementHeight = el.offsetHeight;
        this.originalWidth = this.getCellInstance(el.id).sizeX;
        this.originalHeight = this.getCellInstance(el.id).sizeY;
        this.previousRow = this.getCellInstance(el.id).row;
    }
    touchDownResizeHandler(e) {
        this.downHandler(e);
        this.lastMouseX = e.changedTouches[0].pageX;
        this.lastMouseY = e.changedTouches[0].pageY;
        if (!this.isMouseMoveBound) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(document, 'touchmove', this.touchMoveResizeHandler, this);
            this.isMouseMoveBound = true;
        }
        if (!this.isMouseUpBound) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(document, 'touchend', this.upResizeHandler, this);
            this.isMouseUpBound = true;
        }
    }
    getCellSize() {
        return [this.cellSize[0], this.cellSize[1]];
    }
    updateMaxTopLeft(e) {
        this.moveTarget = this.downTarget;
        const el = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)((this.moveTarget), '.e-panel');
        const args = { event: e, element: el, isInteracted: true };
        this.trigger('resize', args);
    }
    updateResizeElement(el) {
        this.maxLeft = this.element.offsetWidth - 1;
        this.maxTop = this.cellSize[1] * this.maxRows - 1;
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([el], 'e-panel-transition');
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([el], [dragging]);
        const handleArray = [east, west, north, south, southEast, northEast, northWest, southWest];
        for (let i = 0; i < this.moveTarget.classList.length; i++) {
            if (handleArray.indexOf(this.moveTarget.classList[i]) !== -1) {
                this.handleClass = (this.moveTarget.classList[i]);
            }
        }
    }
    moveResizeHandler(e) {
        this.updateMaxTopLeft(e);
        const el = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)((this.moveTarget), '.e-panel');
        if (this.lastMouseX === e.pageX || this.lastMouseY === e.pageY) {
            return;
        }
        this.updateResizeElement(el);
        const panelModel = this.getCellInstance(el.getAttribute('id'));
        this.mouseX = e.pageX;
        this.mouseY = e.pageY;
        const diffY = this.mouseY - this.lastMouseY + this.mOffY;
        const diffX = this.mouseX - this.lastMouseX + this.mOffX;
        this.mOffX = this.mOffY = 0;
        this.lastMouseY = this.mouseY;
        this.lastMouseX = this.mouseX;
        this.resizingPanel(el, panelModel, diffX, diffY);
    }
    touchMoveResizeHandler(e) {
        this.updateMaxTopLeft(e);
        const el = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)((this.moveTarget), '.e-panel');
        if (this.lastMouseX === e.changedTouches[0].pageX || this.lastMouseY === e.changedTouches[0].pageY) {
            return;
        }
        this.updateResizeElement(el);
        const panelModel = this.getCellInstance(el.getAttribute('id'));
        this.mouseX = e.changedTouches[0].pageX;
        this.mouseY = e.changedTouches[0].pageY;
        const diffX = this.mouseX - this.lastMouseX + this.mOffX;
        const diffY = this.mouseY - this.lastMouseY + this.mOffY;
        this.mOffX = this.mOffY = 0;
        this.lastMouseX = this.mouseX;
        this.lastMouseY = this.mouseY;
        this.resizingPanel(el, panelModel, diffX, diffY);
    }
    /* istanbul ignore next */
    resizingPanel(el, panelModel, currentX, currentY) {
        let oldSizeX = this.getCellInstance(el.id).sizeX;
        let oldSizeY = this.getCellInstance(el.id).sizeY;
        const dY = currentY;
        const dX = currentX;
        if (this.handleClass.indexOf('north') >= 0) {
            if (this.elementHeight - dY < this.getMinHeight(panelModel)) {
                currentY = this.elementHeight - this.getMinHeight(panelModel);
                this.mOffY = dY - currentY;
            }
            else if (panelModel.maxSizeY && this.elementHeight - dY > this.getMaxHeight(panelModel)) {
                currentY = this.elementHeight - this.getMaxHeight(panelModel);
                this.mOffY = dY - currentY;
            }
            else if (this.elementY + dY < this.minTop) {
                currentY = this.minTop - this.elementY;
                this.mOffY = dY - currentY;
            }
            this.elementY += currentY;
            this.elementHeight -= currentY;
        }
        if (this.handleClass.indexOf('south') >= 0) {
            if (this.elementHeight + dY < this.getMinHeight(panelModel)) {
                currentY = this.getMinHeight(panelModel) - this.elementHeight;
                this.mOffY = dY - currentY;
            }
            else if (panelModel.maxSizeY && this.elementHeight + dY > this.getMaxHeight(panelModel)) {
                currentY = this.getMaxHeight(panelModel) - this.elementHeight;
                this.mOffY = dY - currentY;
            }
            this.elementHeight += currentY;
        }
        if (this.handleClass.indexOf('west') >= 0) {
            if (this.elementWidth - dX < this.getMinWidth(panelModel)) {
                currentX = this.elementWidth - this.getMinWidth(panelModel);
                this.mOffX = dX - currentX;
            }
            else if (panelModel.maxSizeX && this.elementWidth - dX > this.getMaxWidth(panelModel)) {
                currentX = this.elementWidth - this.getMaxWidth(panelModel);
                this.mOffX = dX - currentX;
            }
            else if (this.elementX + dX < this.minLeft) {
                currentX = this.minLeft - this.elementX;
                this.mOffX = dX - currentX;
            }
            this.elementX += currentX;
            this.elementWidth -= currentX;
        }
        if (this.handleClass.indexOf('east') >= 0) {
            if (this.elementWidth + dX < this.getMinWidth(panelModel)) {
                currentX = this.getMinWidth(panelModel) - this.elementWidth;
                this.mOffX = dX - currentX;
            }
            else if (panelModel.maxSizeX && this.elementWidth + dX > this.getMaxWidth(panelModel)) {
                currentX = this.getMaxWidth(panelModel) - this.elementWidth;
                this.mOffX = dX - currentX;
            }
            this.elementWidth += currentX;
        }
        el.style.top = this.elementY + 'px';
        el.style.left = this.elementX + 'px';
        el.style.width = this.elementWidth + 'px';
        el.style.height = this.elementHeight + 'px';
        const item = this.getResizeRowColumn(panelModel);
        if (item.col + item.sizeX > this.columns) {
            this.panelPropertyChange(item, { sizeX: item.sizeX - 1 });
        }
        this.shadowEle.style.top = ((item.row * this.getCellSize()[1] + (item.row * this.cellSpacing[1]))) + 'px';
        this.shadowEle.style.left = ((item.col * this.getCellSize()[0]) + ((item.col) * this.cellSpacing[0])) + 'px';
        this.shadowEle.style.height = ((item.sizeY * (this.getCellSize()[1] + (this.cellSpacing[1])))) + 'px';
        this.shadowEle.style.width = ((item.sizeX * (this.getCellSize()[0] + (this.cellSpacing[0])))) + 'px';
        if (oldSizeX !== item.sizeX || oldSizeY !== item.sizeY) {
            oldSizeX = item.sizeX;
            oldSizeY = item.sizeY;
            const model = this.getCellInstance(el.id);
            const value = {
                attributes: {
                    row: model.row.toString(),
                    col: model.col.toString(),
                    sizeX: model.sizeX.toString(),
                    sizeY: model.sizeY.toString()
                }
            };
            this.setAttributes(value, el);
            this.mainElement = el;
            this.updatePanelLayout(el, this.getCellInstance(el.id));
            this.updateOldRowColumn();
            this.sortedPanel();
        }
    }
    upResizeHandler(e) {
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.downTarget)) {
            return;
        }
        this.upTarget = this.downTarget;
        const el = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)((this.upTarget), '.e-panel');
        const args = { event: e, element: el, isInteracted: true };
        if (el) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([el], 'e-panel-transition');
            const moveEventName = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie') ? 'mousemove pointermove' : 'mousemove';
            const upEventName = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie') ? 'mouseup pointerup' : 'mouseup';
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(document, moveEventName, this.moveResizeHandler);
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(document, upEventName, this.upResizeHandler);
            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name !== 'msie') {
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(document, 'touchmove', this.touchMoveResizeHandler);
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(document, 'touchend', this.upResizeHandler);
            }
            this.isMouseUpBound = false;
            this.isMouseMoveBound = false;
            if (this.shadowEle) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.shadowEle);
            }
            this.shadowEle = null;
            const panelModel = this.getCellInstance(el.getAttribute('id'));
            this.setPanelPosition(el, panelModel.row, panelModel.col);
            this.setHeightAndWidth(el, panelModel);
        }
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([el], [dragging]);
        this.trigger('resizeStop', args);
        this.resizeCalled = false;
        this.lastMouseX = this.lastMouseY = undefined;
        this.mOffX = this.mOffY = 0;
        this.mainElement = null;
        if (this.allowFloating) {
            this.moveItemsUpwards();
        }
        this.updatePanels();
        this.updateCloneArrayObject();
        this.checkForChanges(true);
    }
    getResizeRowColumn(item) {
        let isChanged = false;
        let col = item.col;
        if (['e-west', 'e-south-west'].indexOf(this.handleClass) !== -1) {
            col = this.pixelsToColumns(this.elementX, false);
        }
        let row = item.row;
        if (['e-north'].indexOf(this.handleClass) !== -1) {
            row = this.pixelsToRows(this.elementY, false);
            if (this.previousRow !== row) {
                this.previousRow = row;
                isChanged = true;
            }
        }
        let sizeX = item.sizeX;
        if (['e-north', 'e-south'].indexOf(this.handleClass) === -1) {
            sizeX = this.pixelsToColumns(this.elementWidth - (sizeX) * this.cellSpacing[1], true);
        }
        let sizeY = item.sizeY;
        if (['e-east', 'e-west'].indexOf(this.handleClass) === -1) {
            if (this.handleClass === 'e-north' ? isChanged : true) {
                sizeY = this.pixelsToRows(this.elementHeight - (sizeY) * this.cellSpacing[0], true);
            }
        }
        if (item.col + item.sizeX > this.columns) {
            item.sizeX = item.sizeX - 1;
        }
        const canOccupy = row > -1 && col > -1 && sizeX + col <= this.maxCol() && sizeY + row <= this.maxRow();
        if (canOccupy && (this.collisions(row, col, sizeX, sizeY, this.getPanelBase(item.id)).length === 0)
            || this.allowPushing !== false) {
            this.panelPropertyChange(item, { row: row, col: col, sizeX: sizeX, sizeY: sizeY });
        }
        return item;
    }
    pixelsToColumns(pixels, isCeil) {
        const curColWidth = this.cellSize[0];
        if (isCeil) {
            return Math.ceil(pixels / curColWidth);
        }
        else {
            return Math.floor(pixels / curColWidth);
        }
    }
    pixelsToRows(pixels, isCeil) {
        if (isCeil) {
            return Math.round(pixels / this.cellSize[1]);
        }
        else {
            return Math.round(pixels / (this.cellSize[1] + this.cellSpacing[0]));
        }
    }
    getMinWidth(item) {
        return (item.minSizeX) * this.getCellSize()[0];
    }
    getMaxWidth(item) {
        return (item.maxSizeX) * this.getCellSize()[0];
    }
    getMinHeight(item) {
        return (item.minSizeY) * this.getCellSize()[1];
    }
    getMaxHeight(item) {
        return (item.maxSizeY) * this.getCellSize()[1];
    }
    sortedPanel() {
        this.sortedArray = [];
        for (let i = 0, l = this.panelCollection.length; i < l; ++i) {
            this.sortItem(this.panelCollection[i]);
        }
    }
    moveItemsUpwards() {
        if (this.allowFloating === false) {
            return;
        }
        for (let rowIndex = 0, l = this.sortedArray.length; rowIndex < l; ++rowIndex) {
            const columns = this.sortedArray[rowIndex];
            if (!columns) {
                continue;
            }
            for (let colIndex = 0, len = columns.length; colIndex < len; ++colIndex) {
                const item = columns[colIndex];
                if (item) {
                    this.moveItemUpwards(item);
                }
            }
        }
        this.updateGridLines();
    }
    moveItemUpwards(item) {
        if (this.allowFloating === false || item === this.mainElement) {
            return;
        }
        const colIndex = this.getCellInstance(item.id).col;
        const sizeY = parseInt(item.getAttribute('data-sizeY'), 10);
        const sizeX = parseInt(item.getAttribute('data-sizeX'), 10);
        let availableRow = null;
        let availableColumn = null;
        let rowIndex = parseInt(item.getAttribute('data-row'), 10) - 1;
        while (rowIndex > -1) {
            const items = this.collisions(rowIndex, colIndex, sizeX, sizeY, item);
            if (items.length !== 0) {
                break;
            }
            availableRow = rowIndex;
            availableColumn = colIndex;
            --rowIndex;
        }
        if (availableRow !== null) {
            this.sortItem(item, availableRow, availableColumn);
        }
    }
    sortItem(item, rowValue, columnValue) {
        this.overlapElement = [];
        const column = parseInt(item.getAttribute('data-col'), 10);
        const row = parseInt(item.getAttribute('data-row'), 10);
        if (!this.sortedArray[row]) {
            this.sortedArray[row] = [];
        }
        this.sortedArray[row][column] = item;
        if (item !== undefined && rowValue !== undefined && columnValue !== undefined) {
            if (this.oldRowCol[item.id] !== undefined && this.oldRowCol[item.id].row !== null &&
                typeof this.oldRowCol[item.id].col !== 'undefined') {
                {
                    const oldRow = this.sortedArray[this.oldRowCol[item.id].row];
                    if (this.oldRowCol[item.id] && oldRow[this.oldRowCol[item.id].col] === item) {
                        delete oldRow[this.oldRowCol[item.id].col];
                        this.updateOldRowColumn();
                        this.sortedPanel();
                    }
                }
            }
            this.oldRowCol[item.id].row = rowValue;
            this.oldRowCol[item.id].row = columnValue;
            if (!this.sortedArray[row]) {
                this.sortedArray[row] = [];
            }
            this.sortedArray[row][column] = item;
            if (this.allItems.indexOf(item) === -1) {
                this.allItems.push(item);
            }
            this.panelPropertyChange(this.getCellInstance(item.id), { row: rowValue, col: columnValue });
            const panelModel = this.getCellInstance(item.id);
            this.setAttributes({ value: { col: panelModel.col.toString(), row: panelModel.row.toString() } }, item);
            this.updateLayout(item, this.getCellInstance(item.id));
        }
    }
    updateLayout(element, panelModel) {
        this.setPanelPosition(element, panelModel.row, panelModel.col);
        this.setHeightAndWidth(element, panelModel);
        this.updateRowHeight();
        this.sortedPanel();
    }
    refresh() {
        this.panelsSizeY = 0;
        this.updateDragArea();
        if (this.checkMediaQuery()) {
            this.checkMediaQuerySizing();
        }
        else {
            if (this.element.classList.contains(responsive)) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], [responsive]);
                const internalPanels = this.element.querySelectorAll(((this.element.id) ? '#' + this.element.id + ' > ' : '') + '.e-panel');
                for (let i = 0; i < internalPanels.length; i++) {
                    const ele = internalPanels[i];
                    const cellInstance = this.getCellInstance(ele.id);
                    const row = parseInt(ele.getAttribute('data-row'), 10);
                    const col = parseInt(ele.getAttribute('data-col'), 10);
                    this.panelPropertyChange(cellInstance, { row: row, col: col });
                    this.setHeightAndWidth(ele, this.getCellInstance(ele.id));
                    this.setPanelPosition(ele, row, col);
                    this.updateRowHeight();
                }
            }
            this.panelResponsiveUpdate();
            this.updateGridLines();
        }
        this.removeResizeClasses(this.panelCollection);
        this.setClasses(this.panelCollection);
        this.resizeEvents();
        this.checkDragging(this.dragCollection);
    }
    updateGridLines() {
        if (this.element.querySelector('.e-dashboard-gridline-table')) {
            if (this.table) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.table);
            }
            this.initGridLines();
        }
    }
    checkDragging(dragCollection) {
        if (this.checkMediaQuery() || !this.allowDragging) {
            for (let i = 0; i < dragCollection.length; i++) {
                dragCollection[i].destroy();
            }
        }
        else {
            for (let i = 0; i < dragCollection.length; i++) {
                dragCollection[i].destroy();
            }
            this.enableDraggingContent(this.panelCollection);
        }
    }
    sortPanels() {
        const model = [];
        for (let row = 0; row <= this.rows; row++) {
            for (let col = 0; col < this.columns; col++) {
                this.panels.filter((panel) => {
                    if (panel.row === row && panel.col === col) {
                        model.push(panel);
                    }
                });
            }
        }
        return model;
    }
    checkMediaQuerySizing() {
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], [responsive]);
        let updatedPanel;
        if (this.isPanelRemoved && this.panels) {
            updatedPanel = this.panels;
        }
        else {
            updatedPanel = this.sortPanels();
        }
        this.updatedRows = updatedPanel.length;
        for (let i = 0; i < updatedPanel.length; i++) {
            const panelElement = document.getElementById(updatedPanel[i].id);
            // eslint-disable-next-line
            let updatedHeight;
            if (panelElement) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(panelElement, { 'width': '100%' });
                panelElement.style.height = ' ' + ((this.element.parentElement
                    && this.element.parentElement.offsetWidth / this.cellAspectRatio) * updatedPanel[i].sizeY) + 'px';
                if (updatedPanel[i].sizeY > 1) {
                    updatedHeight = ((this.element.parentElement
                        && this.element.parentElement.offsetWidth / this.cellAspectRatio) * updatedPanel[i].sizeY) +
                        // eslint-disable-next-line radix
                        parseInt((Math.round(updatedPanel[i].sizeY / 2) * this.cellSpacing[1]).toString(), 0);
                    panelElement.style.height = '' + updatedHeight + 'px';
                }
                this.resizeHeight = true;
                this.panelPropertyChange(updatedPanel[i], { row: i, col: 0 });
                this.setPanelPosition(panelElement, updatedPanel[i].row, updatedPanel[i].col);
                this.panelsSizeY = this.panelsSizeY + updatedPanel[i].sizeY;
                this.setClasses(this.panelCollection);
                this.checkDragging(this.dragCollection);
                this.removeResizeClasses(this.panelCollection);
            }
        }
        this.updateRowHeight();
    }
    panelResponsiveUpdate() {
        this.element.classList.add('e-responsive');
        this.calculateCellSize();
        for (let i = 0; i < this.element.querySelectorAll('.e-panel').length; i++) {
            const ele = this.element.querySelectorAll('.e-panel')[i];
            const panelModel = this.getCellInstance(ele.id);
            this.setHeightAndWidth(ele, panelModel);
        }
        for (let i = 0; i < this.panels.length; i++) {
            this.setPanelPosition(document.getElementById(this.panels[i].id), this.panels[i].row, this.panels[i].col);
        }
        this.updateRowHeight();
    }
    updateRowHeight() {
        this.getRowColumn();
        this.setHeightWidth();
    }
    setHeightWidth() {
        let heightValue;
        let widthValue;
        if (this.checkMediaQuery()) {
            heightValue = ((this.maxRow()) *
                (this.element.parentElement && ((this.element.parentElement.offsetWidth)) / this.cellAspectRatio) +
                (this.maxRow() - 1) * this.cellSpacing[1]) + 'px';
        }
        else {
            heightValue = ((this.maxRow()) *
                (this.cellSize[0] / this.cellAspectRatio) + (this.maxRow() - 1) * this.cellSpacing[1]) + 'px';
        }
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(this.element, { 'height': heightValue });
        // eslint-disable-next-line prefer-const
        widthValue = window.getComputedStyle(this.element).width;
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(this.element, { 'width': widthValue });
    }
    setHeightAndWidth(panelElement, panelModel) {
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(panelElement, { 'height': (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(this.setXYDimensions(panelModel)[0]) });
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(panelElement, { 'width': (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(this.setXYDimensions(panelModel)[1]) });
    }
    renderCell(panel, isStringTemplate, index) {
        let cellElement;
        this.dimensions = this.setXYDimensions(panel);
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isUndefined)(panel.enabled)) {
            panel.enabled = true;
        }
        if (this.contentTemplateChild.length > 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(index)) {
            cellElement = this.contentTemplateChild[index];
            if (panel.cssClass) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([cellElement], [panel.cssClass]);
            }
            if (panel.id) {
                cellElement.setAttribute('id', panel.id);
            }
        }
        else {
            cellElement = this.createPanelElement(panel.cssClass ? panel.cssClass.split(' ') : null, panel.id);
        }
        cellElement.style.zIndex = '' + panel.zIndex;
        this.element.appendChild(cellElement);
        this.renderReactTemplates();
        const dashBoardCell = this.renderPanels(cellElement, panel, panel.id, isStringTemplate);
        this.panelCollection.push(dashBoardCell);
        this.setXYAttributes(cellElement, panel);
        this.setHeightAndWidth(cellElement, panel);
        return cellElement;
    }
    setPanelPosition(cellElement, row, col) {
        if (!cellElement) {
            return;
        }
        if (this.checkMediaQuery()) {
            this.calculateCellSize();
        }
        const heightValue = this.getCellSize()[1];
        const widthValue = this.getCellSize()[0];
        const left = col === 0 ? 0 : (((col) * ((widthValue) + this.cellSpacing[0])));
        let top = row === 0 ? 0 : (((row) * ((heightValue) + this.cellSpacing[1])));
        if (this.checkMediaQuery()) {
            top = row === 0 ? 0 : ((this.panelsSizeY) * ((heightValue) + this.cellSpacing[1]));
        }
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(cellElement, { 'left': left + 'px', 'top': top + 'px' });
    }
    getRowColumn() {
        this.rows = null;
        if (this.element.querySelectorAll('.e-panel').length > 0 && !this.updatedRows) {
            const panelElements = this.element.querySelectorAll('.e-panel');
            for (let i = 0; i < panelElements.length; i++) {
                const panelElement = panelElements[i];
                const rowValue = parseInt(panelElement.getAttribute('data-row'), 10);
                const xValue = parseInt(panelElement.getAttribute('data-sizeY'), 10);
                this.rows = Math.max(this.rows, (rowValue + xValue));
            }
        }
        else {
            if (this.updatedRows) {
                this.rows = this.updatedRows;
                this.updatedRows = null;
            }
            for (let i = 0; i < this.panels.length; i++) {
                this.rows = Math.max(this.rows, this.panels[i].row);
            }
        }
    }
    setMinMaxValues(panel) {
        if (!panel.sizeX || panel.sizeX < panel.minSizeX) {
            this.panelPropertyChange(panel, { sizeX: panel.minSizeX });
        }
        else if ((panel.maxSizeX && panel.sizeX > panel.maxSizeX)) {
            this.panelPropertyChange(panel, { sizeX: panel.maxSizeX });
        }
        else if (panel.sizeX > this.columns) {
            this.panelPropertyChange(panel, { sizeX: this.columns });
        }
        else {
            this.panelPropertyChange(panel, { sizeX: panel.sizeX });
        }
        if (!panel.sizeY || panel.sizeY < panel.minSizeY) {
            this.panelPropertyChange(panel, { sizeY: panel.minSizeY });
        }
        else if (panel.maxSizeY && panel.sizeY > panel.maxSizeY) {
            this.panelPropertyChange(panel, { sizeY: panel.maxSizeY });
        }
        else {
            this.panelPropertyChange(panel, { sizeY: panel.sizeY });
        }
    }
    checkMinMaxValues(panel) {
        if (panel.col + panel.sizeX > this.columns) {
            this.panelPropertyChange(panel, { sizeX: panel.sizeX + (this.columns - (panel.col + panel.sizeX)) });
        }
    }
    panelPropertyChange(panel, value) {
        // eslint-disable-next-line
        panel.setProperties(value, true);
    }
    renderDashBoardCells(cells) {
        if (this.element.querySelectorAll('.e-panel').length > 0 || this.panels.length > 0) {
            for (let j = 0; j < cells.length; j++) {
                this.gridPanelCollection.push(cells[j]);
                this.setMinMaxValues(cells[j]);
                if (this.maxColumnValue < cells[j].col || this.maxColumnValue < (cells[j].col + cells[j].sizeX)) {
                    this.panelPropertyChange(cells[j], { col: this.maxColumnValue - cells[j].sizeX });
                }
                const cell = this.renderCell(cells[j], false, j);
                if (this.enableRtl) {
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([cell], 'e-rtl');
                }
                this.element.appendChild(cell);
                this.renderReactTemplates();
                if (this.checkMediaQuery() && j === cells.length - 1) {
                    this.checkMediaQuerySizing();
                }
                else {
                    this.setPanelPosition(cell, cells[j].row, cells[j].col);
                    this.mainElement = cell;
                    this.updatePanelLayout(cell, cells[j]);
                    this.mainElement = null;
                }
            }
        }
        this.setClasses(this.panelCollection);
    }
    collisions(row, col, sizeX, sizeY, ignore) {
        const items = [];
        if (!sizeX || !sizeY) {
            sizeX = sizeY = 1;
        }
        if (ignore && !(ignore instanceof Array)) {
            ignore = [ignore];
        }
        let item;
        for (let h = 0; h < sizeY; ++h) {
            for (let w = 0; w < sizeX; ++w) {
                item = this.getPanel(row + h, col + w, ignore);
                if (item && (!ignore || ignore.indexOf(document.getElementById(item.id)) === -1) &&
                    items.indexOf(document.getElementById(item.id)) === -1) {
                    items.push(document.getElementById(item.id));
                }
            }
        }
        return items;
    }
    rightWardsSpaceChecking(rowElements, col, ele) {
        const columns = [];
        let spacedColumns = [];
        rowElements.forEach((element) => {
            const columnValue = parseInt(element.getAttribute('data-col'), 10);
            const sizeXValue = parseInt(element.getAttribute('data-sizeX'), 10);
            if (col < this.columns && columnValue >= col) {
                if (sizeXValue > 1) {
                    for (let i = columnValue; i < columnValue + sizeXValue; i++) {
                        columns.push(i);
                    }
                }
                else {
                    columns.push(columnValue);
                }
            }
        });
        if (columns.length > 0) {
            for (let i = col + 1; i <= this.columns - 1; i++) {
                if (columns.indexOf(i) === -1 && i !== col) {
                    if (spacedColumns.indexOf(i) === -1) {
                        spacedColumns.push(i);
                    }
                }
            }
        }
        const occupiedValues = this.getOccupiedColumns(ele);
        occupiedValues.forEach((colValue) => {
            if (colValue > col && spacedColumns.indexOf(colValue) !== -1) {
                spacedColumns.splice(spacedColumns.indexOf(colValue), 1);
            }
        });
        const eleOccupiedValues = this.getOccupiedColumns(this.checkingElement);
        eleOccupiedValues.forEach((col) => {
            if (col > parseInt(ele.getAttribute('data-col'), 10) && occupiedValues.indexOf(col) === -1 &&
                spacedColumns.indexOf(col) === -1) {
                spacedColumns.push(col);
            }
        });
        spacedColumns = spacedColumns.sort((next, previous) => { return next - previous; });
        return spacedColumns;
    }
    getOccupiedColumns(element) {
        const occupiedItems = [];
        const sizeX = parseInt(element.getAttribute('data-sizeX'), 10);
        const col = parseInt(element.getAttribute('data-col'), 10);
        for (let i = col; (i < col + sizeX && i <= this.columns); i++) {
            occupiedItems.push(i);
        }
        return occupiedItems;
    }
    leftWardsSpaceChecking(rowElements, col, ele) {
        let spacedColumns = [];
        const columns = [];
        rowElements.forEach((element) => {
            const colValue = parseInt(element.getAttribute('data-col'), 10);
            const xValue = parseInt(element.getAttribute('data-sizeX'), 10);
            if (col <= this.columns && colValue <= col) {
                if (xValue > 1) {
                    for (let i = colValue; i < colValue + xValue; i++) {
                        columns.push(i);
                    }
                }
                else {
                    columns.push(colValue);
                }
            }
        });
        if (columns.length > 0) {
            for (let j = 0; j <= col; j++) {
                if (columns.indexOf(j) === -1 && j !== col) {
                    if (spacedColumns.indexOf(j) === -1) {
                        spacedColumns.push(j);
                    }
                }
            }
        }
        const occupiedValues = this.getOccupiedColumns(ele);
        occupiedValues.forEach((colValue) => {
            if (colValue < col && spacedColumns.indexOf(colValue) !== -1) {
                spacedColumns.splice(spacedColumns.indexOf(colValue), 1);
            }
        });
        const eleOccupiedValues = this.getOccupiedColumns(this.checkingElement);
        eleOccupiedValues.forEach((col) => {
            if (col < parseInt(ele.getAttribute('data-col'), 10) && occupiedValues.indexOf(col) === -1 &&
                spacedColumns.indexOf(col) === -1) {
                spacedColumns.push(col);
            }
        });
        spacedColumns = spacedColumns.sort((next, prev) => { return next - prev; });
        spacedColumns = spacedColumns.reverse();
        return spacedColumns;
    }
    adjustmentAvailable(row, col, sizeY, sizeX, ele) {
        this.leftAdjustable = undefined;
        this.rightAdjustable = undefined;
        let isAdjustable = false;
        let rightSpacing;
        let rowElement = [];
        this.topAdjustable = undefined;
        const eleSizeX = parseInt(ele.getAttribute('data-sizeX'), 10);
        const eleCol = parseInt(ele.getAttribute('data-col'), 10);
        rowElement = this.getRowElements(this.collisions(row, 0, this.columns, sizeY, []));
        if (rowElement.indexOf(ele) === -1) {
            rowElement.push(ele);
        }
        const leftSpacing = this.leftWardsSpaceChecking(rowElement, col, ele);
        if (leftSpacing.length > 0) {
            this.leftAdjustable = this.isLeftAdjustable(leftSpacing, ele, row, col, sizeX, sizeY);
            if (this.spacedColumnValue !== eleCol - this.getCellInstance(this.checkingElement.id).sizeX) {
                this.leftAdjustable = false;
            }
            if (this.leftAdjustable) {
                this.rightAdjustable = false;
            }
            else {
                this.leftAdjustable = false;
                rightSpacing = this.rightWardsSpaceChecking(rowElement, col, ele);
                this.rightAdjustable = rightSpacing.length > 0 ? this.isRightAdjustable(rightSpacing, ele, row, col, sizeX, sizeY) : false;
                if (this.spacedColumnValue !== eleSizeX + eleCol) {
                    this.rightAdjustable = false;
                }
                if (!this.rightAdjustable) {
                    this.rightAdjustable = false;
                }
            }
        }
        else {
            rightSpacing = this.rightWardsSpaceChecking(rowElement, col, ele);
            this.rightAdjustable = rightSpacing.length > 0 ? this.isRightAdjustable(rightSpacing, ele, row, col, sizeX, sizeY) : false;
            if (this.spacedColumnValue !== eleSizeX + eleCol) {
                this.rightAdjustable = false;
            }
            if (this.rightAdjustable) {
                this.leftAdjustable = false;
            }
        }
        if (!this.rightAdjustable && !this.leftAdjustable && row > 0) {
            const endRow = this.getCellInstance(ele.id).row;
            let topCheck = false;
            if (this.startRow !== endRow) {
                topCheck = true;
            }
            for (let rowValue = row; rowValue >= 0; rowValue--) {
                const element = (this.getCellInstance(ele.id).sizeY > 1 && topCheck) ? this.checkingElement : ele;
                if ((rowValue !== endRow) && (rowValue === endRow - sizeY) &&
                    this.collisions(rowValue, col, sizeX, sizeY, element).length === 0) {
                    topCheck = false;
                    this.topAdjustable = true;
                    this.spacedRowValue = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.spacedRowValue) ? rowValue : this.spacedRowValue;
                    this.spacedColumnValue = col;
                }
            }
        }
        if (this.rightAdjustable || this.leftAdjustable || this.topAdjustable) {
            isAdjustable = true;
            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.spacedRowValue)) {
                this.spacedRowValue = row;
            }
        }
        return isAdjustable;
    }
    isXSpacingAvailable(spacing, sizeX) {
        let isSpaceAvailable = false;
        let subSpacingColumns = [];
        for (let i = 0; i < spacing.length; i++) {
            if (spacing[i + 1] - spacing[i] === 1 || spacing[i + 1] - spacing[i] === -1) {
                subSpacingColumns.push(spacing[i]);
                if (sizeX === 2) {
                    subSpacingColumns.push(spacing[i + 1]);
                }
                if (i === spacing.length - 2) {
                    subSpacingColumns.push(spacing[i + 1]);
                    if (subSpacingColumns.length > sizeX) {
                        subSpacingColumns.splice(-1);
                    }
                }
                if (subSpacingColumns.length === sizeX) {
                    isSpaceAvailable = true;
                    this.spacedColumnValue = subSpacingColumns.sort((next, previous) => { return next - previous; })[0];
                    if (this.spacedColumnValue < 0) {
                        this.spacedColumnValue = 1;
                    }
                    return isSpaceAvailable;
                }
            }
            else {
                subSpacingColumns = [];
                continue;
            }
        }
        return isSpaceAvailable;
    }
    getRowElements(base) {
        const rowElements = [];
        for (let i = 0; i < base.length; i++) {
            rowElements.push(base[i]);
        }
        return rowElements;
    }
    isLeftAdjustable(spaces, ele, row, col, sizeX, sizeY) {
        let isLeftAdjudtable;
        if (sizeX === 1 && sizeY === 1 && spaces.length > 0) {
            this.spacedColumnValue = spaces[0];
            isLeftAdjudtable = true;
        }
        else if (sizeX > 1 && sizeY === 1) {
            isLeftAdjudtable = this.isXSpacingAvailable(spaces, sizeX);
        }
        else if (sizeY > 1) {
            if (sizeX === 1) {
                let xAdjust;
                if (spaces.length >= 1) {
                    xAdjust = true;
                }
                if (xAdjust) {
                    for (let i = 0; i < spaces.length; i++) {
                        const collisionValue = this.collisions(row, spaces[i], sizeX, sizeY, this.checkingElement);
                        if (collisionValue.length === 0) {
                            this.spacedColumnValue = spaces[i];
                            isLeftAdjudtable = true;
                            return isLeftAdjudtable;
                        }
                        else {
                            isLeftAdjudtable = false;
                        }
                    }
                }
            }
            else {
                isLeftAdjudtable = this.replacable(spaces, sizeX, row, sizeY, ele);
            }
        }
        return isLeftAdjudtable;
    }
    isRightAdjustable(spacing, ele, row, col, sizeX, sizeY) {
        let isRightAdjudtable;
        if (sizeX === 1 && sizeY === 1 && spacing.length > 0) {
            this.spacedColumnValue = spacing[0];
            isRightAdjudtable = true;
        }
        else if (sizeX > 1 && sizeY === 1) {
            isRightAdjudtable = this.isXSpacingAvailable(spacing, sizeX);
        }
        else if (sizeY > 1) {
            if (sizeX === 1) {
                let xAdjust;
                if (spacing.length >= 1) {
                    xAdjust = true;
                }
                if (xAdjust) {
                    for (let i = 0; i < spacing.length; i++) {
                        const collisionValue = this.collisions(row, spacing[i], sizeX, sizeY, this.checkingElement);
                        for (let collision = 0; collision < collisionValue.length; collision++) {
                            if (parseInt(ele.getAttribute('data-col'), 10) !== spacing[i]) {
                                collisionValue.splice(collisionValue.indexOf(collisionValue[collision]), 1);
                            }
                        }
                        if (collisionValue.length === 0) {
                            isRightAdjudtable = true;
                            this.spacedColumnValue = spacing[i];
                            return isRightAdjudtable;
                        }
                        else {
                            isRightAdjudtable = false;
                        }
                    }
                }
            }
            else {
                isRightAdjudtable = this.replacable(spacing, sizeX, row, sizeY, ele);
            }
        }
        return isRightAdjudtable;
    }
    replacable(spacing, sizeX, row, sizeY, ele) {
        let isRightAdjudtable;
        const updatedCollision = [];
        for (let j = 0; j < spacing.length; j++) {
            const xAdjust = this.isXSpacingAvailable(spacing, sizeX);
            if (xAdjust) {
                const exclusions = [];
                exclusions.push(this.checkingElement);
                exclusions.push(ele);
                if (updatedCollision.length === 0) {
                    isRightAdjudtable = true;
                    // eslint-disable-next-line no-self-assign
                    this.spacedColumnValue = this.spacedColumnValue;
                    return isRightAdjudtable;
                }
                else {
                    isRightAdjudtable = false;
                }
            }
        }
        return isRightAdjudtable;
    }
    sortCollisionItems(collisionItems) {
        const updatedCollision = [];
        let rowElements;
        for (let row = this.rows - 1; row >= 0; row--) {
            rowElements = [];
            collisionItems.forEach((element) => {
                if (element && element.getAttribute('data-row') === row.toString()) {
                    rowElements.push(element);
                }
            });
            for (let column = this.columns - 1; column >= 0; column--) {
                rowElements.forEach((item) => {
                    if (item && item.getAttribute('data-col') === column.toString()) {
                        updatedCollision.push(item);
                    }
                });
            }
        }
        return updatedCollision;
    }
    updatedModels(collisionItems, panelModel, ele) {
        const removeableElement = [];
        if (!this.mainElement) {
            this.sortedPanel();
        }
        collisionItems.forEach((element) => {
            this.checkingElement = element;
            const model = this.getCellInstance(element.id);
            const adjust = !this.adjustmentAvailable(model.row, model.col, model.sizeY, model.sizeX, ele);
            if (model.sizeX > 1 && adjust) {
                for (let rowValue = model.row; rowValue < panelModel.row + panelModel.sizeY; rowValue++) {
                    const collisions = this.collisions(rowValue, model.col, model.sizeX, model.sizeY, element);
                    collisions.forEach((item) => {
                        if (collisionItems.indexOf(item) >= 0 && removeableElement.indexOf(item) === -1) {
                            removeableElement.push(item);
                        }
                    });
                }
            }
        });
        removeableElement.forEach((item) => {
            if (removeableElement.indexOf(item) >= 0) {
                collisionItems.splice(collisionItems.indexOf(item), 1);
            }
        });
        return collisionItems;
    }
    resetLayout(model) {
        let collisions = this.collisions(model.row, model.col, model.sizeX, model.sizeY, this.mainElement);
        if (!this.mainElement || this.addPanelCalled || this.resizeCalled || this.movePanelCalled) {
            return collisions;
        }
        if (this.mainElement && this.oldRowCol !== this.cloneObject) {
            for (let i = 0; i < this.panels.length; i++) {
                const element = document.getElementById(this.panels[i].id);
                if (element === this.mainElement) {
                    continue;
                }
                const rowValue = this.cloneObject[element.id].row;
                const colValue = this.cloneObject[element.id].col;
                this.setPanelPosition(element, rowValue, colValue);
                this.panelPropertyChange(this.getCellInstance(element.id), { row: rowValue, col: colValue });
                this.setAttributes({ value: { col: colValue.toString(), row: rowValue.toString() } }, element);
                this.updateOldRowColumn();
            }
        }
        this.sortedArray = this.cloneArray;
        collisions = this.collisions(model.row, model.col, model.sizeX, model.sizeY, this.mainElement);
        this.sortedPanel();
        this.updateOldRowColumn();
        if (this.checkCollision && this.checkCollision.length > 0 && collisions.indexOf(this.checkCollision[0]) === -1 &&
            this.cloneObject[this.checkCollision[0].id].row === model.row) {
            collisions.push(this.checkCollision[0]);
        }
        return collisions;
    }
    swapAvailability(collisions, element) {
        let available = true;
        const eleModel = this.getCellInstance(element.id);
        for (let count = 0; count < collisions.length; count++) {
            const collideModel = this.getCellInstance(collisions[count].id);
            for (let i = 1; i < eleModel.sizeY; i++) {
                const excludeEle = [];
                excludeEle.push(element);
                excludeEle.push(collisions[count]);
                const collision = this.collisions(eleModel.row + i, collideModel.col, collideModel.sizeX, collideModel.sizeY, excludeEle);
                if (collision.length > 0) {
                    available = false;
                    return false;
                }
                else {
                    continue;
                }
            }
        }
        return available;
    }
    checkForSwapping(collisions, element) {
        if (!this.mainElement || collisions.length === 0) {
            return false;
        }
        let direction;
        const eleSwapRow = parseInt(collisions[0].getAttribute('data-row'), 10);
        if (this.startRow < eleSwapRow) {
            direction = 1;
        }
        else if (this.startRow > eleSwapRow) {
            direction = 0;
        }
        if (!this.swapAvailability(collisions, element)) {
            return false;
        }
        let isSwappable = false;
        for (let count1 = 0; count1 < collisions.length; count1++) {
            if (collisions.length >= 1 && this.cloneObject[this.mainElement.id].row === this.oldRowCol[this.mainElement.id].row) {
                return false;
            }
        }
        const updatedRow = direction === 0 ?
            this.getCellInstance(this.mainElement.id).row + this.getCellInstance(this.mainElement.id).sizeY
            : this.startRow;
        for (let count = 0; count < collisions.length; count++) {
            const collideInstance = this.getCellInstance(collisions[count].id);
            const elementinstance = this.getCellInstance(element.id);
            const ignore = [];
            if (collideInstance.sizeY === 1 && ignore.indexOf(collisions[count]) === -1) {
                ignore.push(collisions[count]);
            }
            else if (collideInstance.sizeY > 1 && ignore.indexOf(collisions[count]) === -1) {
                if (direction === 1 && elementinstance.row === (this.cloneObject[collideInstance.id].row + collideInstance.sizeY - 1)) {
                    ignore.push(collisions[count]);
                }
                else if (direction === 0 && elementinstance.row === (this.cloneObject[collideInstance.id].row)) {
                    ignore.push(collisions[count]);
                }
                else {
                    return false;
                }
            }
            if (collideInstance.sizeY <= elementinstance.sizeY && ignore.indexOf(collisions[count]) === -1) {
                ignore.push(collisions[count]);
            }
            ignore.push(this.mainElement);
            const swapCollision = this.collisions(updatedRow, collideInstance.col, collideInstance.sizeX, collideInstance.sizeY, ignore);
            if (swapCollision.length > 0) {
                isSwappable = false;
                return isSwappable;
            }
            else {
                if (count === collisions.length - 1) {
                    isSwappable = true;
                }
                continue;
            }
        }
        return isSwappable;
    }
    swapItems(collisions, element, panelModel) {
        let direction;
        const swappedElements = [];
        swappedElements.push(element);
        const eleSwapRow = parseInt(collisions[0].getAttribute('data-row'), 10);
        if (this.startRow < eleSwapRow) {
            direction = 1;
        }
        else if (this.startRow > eleSwapRow) {
            direction = 0;
        }
        const collisionItemsRow = direction === 0 ? eleSwapRow + panelModel.sizeY : this.startRow;
        if (!this.movePanelCalled) {
            const collisionInstance = this.getCellInstance(collisions[0].id);
            this.panelPropertyChange(panelModel, { row: direction === 0 ? eleSwapRow : collisionItemsRow + collisionInstance.sizeY });
        }
        for (let count = 0; count < collisions.length; count++) {
            swappedElements.push(collisions[count]);
            this.setPanelPosition(collisions[count], collisionItemsRow, (this.getCellInstance(collisions[count].id)).col);
            this.panelPropertyChange(this.getCellInstance(collisions[count].id), { row: collisionItemsRow });
            collisions[count].setAttribute('data-row', collisionItemsRow.toString());
        }
        element.setAttribute('data-row', panelModel.row.toString());
        this.setPanelPosition(this.shadowEle, panelModel.row, panelModel.col);
        for (let i = 0; i < this.panels.length; i++) {
            this.oldRowCol[this.panels[i].id] = { row: this.panels[i].row, col: this.panels[i].col };
        }
        this.startRow = panelModel.row;
        this.updateOldRowColumn();
        swappedElements.forEach((item) => {
            this.cloneObject[item.id] = this.oldRowCol[item.id];
            const itemModel = this.getCellInstance(item.id);
            for (let i = 0; i < this.sortedArray.length; i++) {
                if (!this.sortedArray[i]) {
                    continue;
                }
                for (let j = 0; j < this.sortedArray[i].length; j++) {
                    if (this.sortedArray[i][j] === item) {
                        this.sortedArray[i][j] = undefined;
                    }
                }
            }
            if (!this.sortedArray[itemModel.row]) {
                this.sortedArray[itemModel.row] = [];
            }
            this.sortedArray[itemModel.row][itemModel.col] = item;
            this.cloneArray = this.sortedArray;
        });
    }
    updatePanelLayout(element, panelModel) {
        this.collisionChecker = {};
        let initialModel = [];
        let checkForAdjustment;
        const collisionModels = [];
        let swappingAvailable;
        if (this.mainElement && this.isRenderComplete) {
            initialModel = this.resetLayout(panelModel);
        }
        else {
            initialModel = this.collisions(panelModel.row, panelModel.col, panelModel.sizeX, panelModel.sizeY, element);
        }
        if (initialModel.length > 0) {
            initialModel = this.sortCollisionItems(initialModel);
            initialModel = this.updatedModels(initialModel, panelModel, element);
            swappingAvailable = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.startRow) ? this.checkForSwapping(initialModel, element) : false;
            if (swappingAvailable) {
                this.swapItems(initialModel, element, panelModel);
            }
            else {
                for (let i = 0; i < initialModel.length; i++) {
                    const model = this.getCellInstance(initialModel[i].id);
                    this.checkingElement = initialModel[i];
                    this.spacedRowValue = null;
                    this.spacedColumnValue = null;
                    checkForAdjustment = this.adjustmentAvailable(model.row, model.col, model.sizeY, model.sizeX, element);
                    if (checkForAdjustment && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.spacedColumnValue)) {
                        this.setPanelPosition(initialModel[i], this.spacedRowValue, this.spacedColumnValue);
                        this.oldRowCol[(initialModel[i].id)] = { row: this.spacedRowValue, col: this.spacedColumnValue };
                        const value = {
                            attributes: {
                                row: this.spacedRowValue.toString(),
                                col: this.spacedColumnValue.toString()
                            }
                        };
                        this.setAttributes(value, initialModel[i]);
                        this.panelPropertyChange(model, { col: this.spacedColumnValue, row: this.spacedRowValue });
                        // updated the panel model array as inTopAdjustable case with floating enabled instead of dragging and extra row
                        if (this.topAdjustable && this.allowFloating) {
                            this.updatePanels();
                            this.updateCloneArrayObject();
                        }
                        this.spacedRowValue = null;
                        if (i < initialModel.length) {
                            continue;
                        }
                    }
                    else {
                        collisionModels.push(initialModel[i]);
                    }
                }
            }
        }
        if (collisionModels.length > 0) {
            // eslint-disable-next-line
            const proxy = this;
            collisionModels.forEach((item1) => {
                if (proxy.overlapElement.indexOf(item1) === -1) {
                    proxy.overlapElement.push(item1);
                }
            });
            if (this.overlapElement && this.overlapElement.indexOf(element) !== -1) {
                this.overlapElement.splice(this.overlapElement.indexOf(element), 1);
            }
            if (collisionModels.length > 0) {
                this.updateRowColumn(panelModel.row, this.overlapElement, element);
                this.checkForCompletePushing();
            }
        }
        if (!this.isSubValue) {
            this.sortedPanel();
        }
        this.updateRowHeight();
        this.updateGridLines();
    }
    checkForCompletePushing() {
        for (let i = 0; i < this.panels.length; i++) {
            if (this.collisionChecker[this.panels[i].id] && this.collisionChecker[this.panels[i].id] !== null) {
                this.overlapElement = [this.collisionChecker[this.panels[i].id].ele];
                const key = this.panels[i].id;
                this.updateRowColumn(this.collisionChecker[key].row, this.overlapElement, this.collisionChecker[key].srcEle);
            }
        }
    }
    updateCollisionChecked(item) {
        for (let count = 0; count < Object.keys(this.collisionChecker).length; count++) {
            this.collisionChecker[item.id] = null;
        }
    }
    updateRowColumn(row, ele, srcEle) {
        if (!srcEle) {
            return;
        }
        const eleSizeY = parseInt(srcEle.getAttribute('data-sizeY'), 10);
        const eleRow = parseInt(srcEle.getAttribute('data-row'), 10);
        this.overlapElementClone = this.overlapElement && !this.shouldRestrict ? this.overlapElement : this.overlapElement;
        for (let i = 0; i < this.overlapElementClone.length; i++) {
            if (this.overlapElementClone.length === 0) {
                return;
            }
            for (let i = 0; i < this.overlapElementClone.length; i++) {
                this.collisionChecker[this.overlapElementClone[i].id] = {
                    ele: this.overlapElementClone[i],
                    row: row,
                    srcEle: srcEle
                };
            }
            const updatedRow = eleRow + eleSizeY;
            const collisionY = parseInt(this.overlapElementClone[i].getAttribute('data-sizeY'), 10);
            const collisionCol = parseInt(this.overlapElementClone[i].getAttribute('data-col'), 10);
            const collisionX = parseInt(this.overlapElementClone[i].getAttribute('data-sizeX'), 10);
            let colValue;
            let collisionModels;
            if (this.overlapSubElementClone.indexOf(srcEle) === -1) {
                this.overlapSubElementClone.push(srcEle);
            }
            if (this.overlapSubElementClone.indexOf(this.overlapElementClone[i]) === -1) {
                this.overlapSubElementClone.push(this.overlapElementClone[i]);
            }
            if (collisionY > 1 || collisionX > 1) {
                const overlapElementModel = this.getCellInstance(this.overlapElementClone[i].id);
                colValue = overlapElementModel.col;
                const ele = document.getElementById(overlapElementModel.id);
                for (let k = overlapElementModel.row; k < eleRow + eleSizeY; k++) {
                    this.isSubValue = true;
                    this.panelPropertyChange(overlapElementModel, { row: overlapElementModel.row + 1 });
                    ele.setAttribute('data-row', overlapElementModel.row.toString());
                    this.setPanelPosition(ele, overlapElementModel.row, colValue);
                    this.updateCollisionChecked(ele);
                    this.oldRowCol[(ele.id)] = { row: overlapElementModel.row, col: colValue };
                    const panelModel = this.getCellInstance(ele.id);
                    this.panelPropertyChange(panelModel, { col: colValue, row: overlapElementModel.row });
                    const eleRow = parseInt(ele.getAttribute('data-row'), 10);
                    const eleCol = parseInt(ele.getAttribute('data-col'), 10);
                    const sizeX = parseInt(ele.getAttribute('data-sizeX'), 10);
                    const sizeY = parseInt(ele.getAttribute('data-sizeY'), 10);
                    const excludeElements = [];
                    excludeElements.push(ele);
                    excludeElements.push(srcEle);
                    collisionModels = this.collisions(eleRow, eleCol, sizeX, sizeY, excludeElements);
                    if (this.mainElement && collisionModels.indexOf(this.mainElement) !== -1) {
                        collisionModels.splice(collisionModels.indexOf(this.mainElement), 1);
                    }
                    this.collisionPanel(collisionModels, eleCol, eleRow, ele);
                }
                this.isSubValue = false;
            }
            else {
                if (this.addPanelCalled) {
                    this.addPanelCalled = false;
                }
                this.overlapElementClone[i].setAttribute('data-row', updatedRow.toString());
                const excludeEle = [];
                excludeEle.push(this.overlapElementClone[i]);
                excludeEle.push(srcEle);
                collisionModels = this.collisions(updatedRow, collisionCol, collisionX, collisionY, excludeEle);
                if (this.mainElement && collisionModels.indexOf(this.mainElement) !== -1) {
                    collisionModels.splice(collisionModels.indexOf(this.mainElement), 1);
                }
                colValue = parseInt(this.overlapElementClone[i].getAttribute('data-col'), 10);
                this.setPanelPosition(this.overlapElementClone[i], updatedRow, colValue);
                this.updateCollisionChecked(this.overlapElementClone[i]);
                this.oldRowCol[(this.overlapElementClone[i].id)] = { row: updatedRow, col: colValue };
                const panelModel = this.getCellInstance(this.overlapElementClone[i].id);
                this.panelPropertyChange(panelModel, { col: colValue, row: updatedRow });
                this.collisionPanel(collisionModels, colValue, updatedRow, this.overlapElementClone[i]);
            }
        }
    }
    collisionPanel(collisionModels, colValue, updatedRow, clone) {
        const panelModel = this.getCellInstance(clone.id);
        this.panelPropertyChange(panelModel, { row: updatedRow, col: colValue });
        if (collisionModels.length > 0) {
            // eslint-disable-next-line
            const proxy = this;
            this.overlapElement = [];
            this.shouldRestrict = true;
            collisionModels.forEach((item1) => {
                proxy.overlapElement.push(item1);
            });
            const overlapElementRow1 = parseInt(clone.getAttribute('data-row'), 10);
            for (let m = 0; m < this.overlapElement.length; m++) {
                this.updateRowColumn(overlapElementRow1, this.overlapElement, clone);
            }
            this.shouldRestrict = false;
        }
        else {
            if (!this.addPanelCalled) {
                this.sortedPanel();
            }
            if (this.overlapSubElementClone.length > 0) {
                for (let p = 0; p < this.overlapSubElementClone.length; p++) {
                    const rowVal = parseInt(this.overlapSubElementClone[p].getAttribute('data-row'), 10);
                    const colValue = parseInt(this.overlapSubElementClone[p].getAttribute('data-col'), 10);
                    const sizeX = parseInt(this.overlapSubElementClone[p].getAttribute('data-sizeX'), 10);
                    const sizeY = parseInt(this.overlapSubElementClone[p].getAttribute('data-sizeY'), 10);
                    const collisionModels1 = this.collisions(rowVal, colValue, sizeX, sizeY, this.overlapSubElementClone);
                    if (this.mainElement && collisionModels1.indexOf(this.mainElement) !== -1) {
                        collisionModels1.splice(collisionModels1.indexOf(this.mainElement), 1);
                    }
                    // eslint-disable-next-line
                    const proxy = this;
                    collisionModels1.forEach((item1) => {
                        proxy.overlapElement.push(item1);
                    });
                    if (collisionModels1.length > 0) {
                        this.updateRowColumn(rowVal, this.overlapElement, this.overlapSubElementClone[p]);
                    }
                }
            }
            this.overlapSubElementClone = [];
        }
    }
    removeResizeClasses(panelElements) {
        for (let i = 0; i < panelElements.length; i++) {
            const element = panelElements[i];
            const resizerElements = element.querySelectorAll('.e-resize');
            for (let i = 0; i < resizerElements.length; i++) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(resizerElements[i]);
            }
        }
    }
    ensureDrag() {
        this.checkDragging(this.dragCollection);
        const dragPanels = this.element.querySelectorAll('.' + drag);
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(dragPanels, [drag]);
        this.setClasses(this.panelCollection);
    }
    setClasses(panelCollection) {
        for (let i = 0; i < panelCollection.length; i++) {
            const element = panelCollection[i];
            const containerEle = panelCollection[i].querySelector('.e-panel-container');
            if (this.allowDragging) {
                if (this.draggableHandle && element.querySelectorAll(this.draggableHandle)[0]) {
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([element.querySelectorAll(this.draggableHandle)[0]], [drag]);
                }
                else {
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([element], [drag]);
                }
            }
            if (this.allowResizing &&
                this.mediaQuery ? !(this.checkMediaQuery()) : false) {
                this.setResizingClass(element, containerEle);
            }
        }
    }
    setResizingClass(ele, container) {
        this.availableClasses = this.resizableHandles;
        if (!ele.querySelector(".e-resize")) {
            for (let j = 0; j < this.availableClasses.length; j++) {
                const spanEle = this.createElement('span');
                let addClassValue;
                container.appendChild(spanEle);
                if (this.availableClasses[j] === 'e-east' || this.availableClasses[j] === 'e-west' ||
                    this.availableClasses[j] === 'e-north' || this.availableClasses[j] === 'e-south') {
                    addClassValue = single;
                }
                else {
                    addClassValue = double;
                }
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([spanEle], [addClassValue, this.availableClasses[j], resize, resizeicon]);
            }
        }
    }
    setXYAttributes(element, panelModel) {
        const value = {
            value: {
                sizeX: panelModel.sizeX.toString(),
                sizeY: panelModel.sizeY.toString(),
                minSizeX: panelModel.minSizeX.toString(),
                minSizeY: panelModel.minSizeY.toString(),
                maxSizeX: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(panelModel.maxSizeX) ? panelModel.maxSizeX.toString() : undefined,
                maxSizeY: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(panelModel.maxSizeY) ? panelModel.maxSizeY.toString() : undefined,
                row: panelModel.row.toString(),
                col: panelModel.col.toString()
            }
        };
        this.setAttributes(value, element);
    }
    setXYDimensions(panelModel) {
        const cellHeight = this.getCellSize()[1];
        const cellWidth = this.getCellSize()[0];
        let widthValue;
        let heigthValue;
        if (panelModel && typeof (cellWidth) === 'number' && typeof (panelModel.sizeX) === 'number' && panelModel.sizeX > 1) {
            widthValue = (panelModel.sizeX * cellWidth) + (panelModel.sizeX - 1) * this.cellSpacing[0];
        }
        else {
            widthValue = cellWidth;
        }
        if (panelModel && typeof (cellHeight) === 'number' && panelModel.sizeY > 1 && typeof (panelModel.sizeY) === 'number') {
            heigthValue = (panelModel.sizeY * cellHeight) + (panelModel.sizeY - 1) * this.cellSpacing[1];
        }
        else {
            heigthValue = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(cellHeight);
        }
        return [heigthValue, widthValue];
    }
    getRowColumnDragValues(args) {
        let value = [];
        const elementTop = parseFloat(args.element.style.top);
        const elementLeft = parseFloat(args.element.style.left);
        const row = Math.round(elementTop / (this.getCellSize()[1] + this.cellSpacing[1]));
        const col = Math.round(elementLeft / (this.getCellSize()[0] + +this.cellSpacing[0]));
        value = [row, col];
        return value;
    }
    checkForChanges(isInteracted, added, removed) {
        let changedPanels = [];
        if (this.removeAllCalled) {
            changedPanels = [];
        }
        else {
            for (let i = 0; i < this.panels.length; i++) {
                if (((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(added) ? (this.panels[i].id !== added[0].id) : true) &&
                    (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(removed) ? (this.panels[i].id !== removed[0].id) : true)) &&
                    (this.panels[i].row !== this.panelsInitialModel[i].row || this.panels[i].col !== this.panelsInitialModel[i].col)) {
                    changedPanels.push(this.panels[i]);
                }
            }
        }
        if (changedPanels.length > 0 || this.removeAllCalled) {
            const changedArgs = {
                changedPanels: changedPanels, isInteracted: isInteracted,
                addedPanels: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(added) ? added : [], removedPanels: !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(removed) ? removed : []
            };
            this.trigger('change', changedArgs);
        }
    }
    enableDraggingContent(collections) {
        for (let i = 0; i < collections.length; i++) {
            const abortArray = ['.e-resize', '.' + dragRestrict];
            const cellElement = collections[i];
            {
                this.dragobj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Draggable(cellElement, {
                    preventDefault: false,
                    clone: false,
                    dragArea: this.element,
                    isDragScroll: true,
                    handle: this.draggableHandle ? this.draggableHandle : '.e-panel',
                    abort: abortArray,
                    dragStart: this.onDraggingStart.bind(this),
                    dragStop: (args) => {
                        const model = this.getCellInstance(this.mainElement.id);
                        if (this.allowPushing &&
                            this.collisions(model.row, model.col, model.sizeX, model.sizeY, this.mainElement).length > 0) {
                            this.setHolderPosition(args);
                            this.setPanelPosition(this.mainElement, model.row, model.col);
                            this.updatePanelLayout(this.mainElement, model);
                        }
                        else {
                            this.setPanelPosition(this.mainElement, model.row, model.col);
                        }
                        this.mainElement = null;
                        const item = this.getPanelBase(args);
                        if (this.shadowEle) {
                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.shadowEle);
                        }
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], [preventSelect]);
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([args.element], [dragging]);
                        this.shadowEle = null;
                        args.element.classList.remove('e-dragging');
                        const row = this.getRowColumnDragValues(args)[0];
                        const col = this.getRowColumnDragValues(args)[1];
                        const panelModel = this.getCellInstance(args.element.id);
                        if (this.allowPushing &&
                            this.collisions(row, col, panelModel.sizeX, panelModel.sizeY, document.getElementById(item.id)).length === 0) {
                            this.panelPropertyChange(this.getCellInstance(args.element.id), { row: row, col: col });
                            this.oldRowCol[args.element.id].row = row;
                            this.oldRowCol[args.element.id].col = col;
                            this.setAttributes({ value: { col: col.toString(), row: row.toString() } }, args.element);
                            this.sortedPanel();
                        }
                        else {
                            this.panelPropertyChange(this.getCellInstance(args.element.id), {
                                row: this.oldRowCol[args.element.id].row,
                                col: this.oldRowCol[args.element.id].col
                            });
                            args.element.setAttribute('data-col', this.getCellInstance(args.element.id).col.toString());
                            args.element.setAttribute('data-row', this.getCellInstance(args.element.id).row.toString());
                            this.sortedPanel();
                        }
                        const panelInstance = this.getCellInstance(args.element.id);
                        this.setPanelPosition(args.element, panelInstance.row, panelInstance.col);
                        this.updatePanels();
                        this.updateCloneArrayObject();
                        this.checkForChanges(true);
                        this.dragStopEventArgs = { event: args.event, element: args.element };
                        this.trigger('dragStop', args);
                        this.resizeEvents();
                        this.rows = this.maxRow(true);
                        this.setHeightWidth();
                        this.updateDragArea();
                    },
                    drag: (args) => {
                        this.draggedEventArgs = {
                            event: args.event,
                            element: args.element,
                            target: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)((args.target), '.e-panel')
                        };
                        this.trigger('drag', this.draggedEventArgs);
                        this.onDragStart(args);
                    }
                });
                if (this.dragCollection.indexOf(this.dragobj) === -1) {
                    this.dragCollection.push(this.dragobj);
                }
            }
        }
    }
    updatePanels() {
        this.moveItemsUpwards();
        this.updateOldRowColumn();
        this.sortedPanel();
    }
    updateDragArea() {
        this.dragCollection.forEach((dragobj) => {
            // eslint-disable-next-line
            dragobj.setDragArea();
        });
    }
    updateRowsHeight(row, sizeY, addRows) {
        if (row + sizeY >= this.rows) {
            this.rows = this.rows + addRows;
            this.setHeightWidth();
        }
    }
    onDraggingStart(args) {
        const dragArgs = args;
        this.trigger('dragStart', dragArgs, (dragArgs) => {
        });
        this.panelsInitialModel = this.cloneModels(this.panels);
        this.mainElement = args.element;
        this.cloneObject = JSON.parse(JSON.stringify(this.cloneObject));
        const eleRowValue = this.startRow = parseInt(args.element.getAttribute('data-row'), 10);
        this.startCol = parseInt(args.element.getAttribute('data-col'), 10);
        const eleSizeY = parseInt(args.element.getAttribute('data-sizeY'), 10);
        this.updateRowsHeight(eleRowValue, eleSizeY, eleSizeY);
        this.updateDragArea();
        this.shadowEle = document.createElement('div');
        this.shadowEle.classList.add('e-holder');
        this.shadowEle.classList.add('e-holder-transition');
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(this.shadowEle, { 'position': 'absolute' });
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], [preventSelect]);
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([args.element], [dragging]);
        this.element.appendChild(this.shadowEle);
        this.renderReactTemplates();
        this.shadowEle = document.querySelector('.e-holder');
        this.shadowEle.style.height = (this.getCellInstance(args.element.id).sizeY * this.cellSize[1]) + 'px';
        this.shadowEle.style.width = (this.getCellInstance(args.element.id).sizeX * this.cellSize[0]) + 'px';
        const panelInstance = this.getCellInstance(args.element.id);
        this.setPanelPosition(this.shadowEle, panelInstance.row, panelInstance.col);
    }
    // eslint-disable-next-line
    cloneModels(source, target) {
        if (target === undefined) {
            target = [];
        }
        for (let i = 0; i < source.length; i++) {
            // tslint:disable-next-line
            if (!target[i]) {
                target[i] = {};
            }
            // eslint-disable-next-line guard-for-in
            for (const k in source[i]) {
                target[i][k] = source[i][k];
            }
        }
        return target;
    }
    onDragStart(args) {
        let endCol;
        let endRow;
        let dragCol;
        const col = dragCol = this.getRowColumnDragValues(args)[1];
        const row = this.getRowColumnDragValues(args)[0];
        if (col < 0 || row < 0) {
            return;
        }
        this.panelPropertyChange(this.getCellInstance(args.element.id), { row: row, col: col });
        const panelModel = this.getCellInstance(args.element.id);
        this.updateRowsHeight(panelModel.row, panelModel.sizeY, 1);
        this.updateDragArea();
        if (this.allowPushing) {
            this.setAttributes({ value: { col: col.toString(), row: row.toString() } }, args.element);
            this.panelPropertyChange(this.getCellInstance(args.element.id), { row: row, col: col });
            endCol = this.oldRowCol[(args.element.id)].col;
            endRow = this.oldRowCol[(args.element.id)].row;
            this.oldRowCol[(args.element.id)] = { row: row, col: col };
            this.updateOldRowColumn();
            if (this.startCol !== endCol || this.startRow !== endRow) {
                this.setHolderPosition(args);
                if (this.startCol !== endCol) {
                    this.startRow = endRow;
                }
                if (this.startRow !== endRow) {
                    this.startCol = endCol;
                }
                if (this.allowPushing) {
                    this.mainElement = args.element;
                    const model = panelModel;
                    this.checkCollision = this.collisions(model.row, model.col, model.sizeX, model.sizeY, args.element);
                    if (panelModel.col >= this.checkColumnValue) {
                        this.checkCollision = [];
                    }
                    this.updatePanelLayout(args.element, panelModel);
                    this.moveItemsUpwards();
                }
            }
        }
        if (this.allowPushing !== false) {
            this.panelPropertyChange(this.getCellInstance(args.element.id), { row: row, col: col });
        }
        if (this.oldRowCol[args.element.id].row !== row || this.oldRowCol[args.element.id].col !== col) {
            this.panelPropertyChange(this.getCellInstance(args.element.id), { row: row, col: col });
            this.setAttributes({ value: { col: col.toString(), row: row.toString() } }, args.element);
        }
        if (this.startCol !== dragCol) {
            this.startCol = endCol;
            this.moveItemsUpwards();
        }
        if (!this.allowPushing) {
            this.setHolderPosition(args);
        }
        this.removeResizeClasses(this.panelCollection);
        this.setClasses(this.panelCollection);
        if (this.allowPushing === false) {
            return;
        }
    }
    getPanelBase(args) {
        let item;
        for (let i = 0; i < this.panelCollection.length; i++) {
            if (this.panelCollection[i].id === ((args.element
                && args.element.id) || args)) {
                item = this.panelCollection[i];
            }
        }
        return item;
    }
    getPanel(row, column, excludeItems) {
        if (excludeItems && !(excludeItems instanceof Array)) {
            excludeItems = [excludeItems];
        }
        let sizeY = 1;
        while (row > -1) {
            let sizeX = 1;
            let col = column;
            while (col > -1) {
                const items = this.sortedArray[row];
                if (items) {
                    const item = items[col];
                    if (item && (!excludeItems ||
                        excludeItems.indexOf(item) === -1) && parseInt(item.getAttribute('data-sizeX'), 10) >= sizeX
                        && parseInt(item.getAttribute('data-sizeY'), 10) >= sizeY) {
                        return item;
                    }
                }
                ++sizeX;
                --col;
            }
            --row;
            ++sizeY;
        }
        return null;
    }
    setHolderPosition(args) {
        const sizeY = parseInt(args.element.getAttribute('data-sizeY'), 10);
        const col = parseInt(args.element.getAttribute('data-col'), 10);
        const row = parseInt(args.element.getAttribute('data-row'), 10);
        const sizeX = parseInt(args.element.getAttribute('data-sizeX'), 10);
        const widthValue = this.getCellSize()[0];
        const heightValue = this.getCellSize()[1];
        const top = row === 0 ? 0 : (((row) * (heightValue + this.cellSpacing[1])));
        const left = col === 0 ? 0 : (((col) * (widthValue + this.cellSpacing[0])));
        const cellSizeOne = this.getCellSize()[1];
        const cellSizeZero = this.getCellSize()[0];
        this.elementRef.top = this.shadowEle.style.top = top + 'px';
        this.elementRef.left = this.shadowEle.style.left = left + 'px';
        this.elementRef.height = this.shadowEle.style.height = ((sizeY * cellSizeOne) + ((sizeY - 1) * this.cellSpacing[1])) + 'px';
        this.elementRef.width = this.shadowEle.style.width = ((sizeX * cellSizeZero) + ((sizeX - 1) * this.cellSpacing[0])) + 'px';
    }
    getCellInstance(idValue) {
        let currentCellInstance;
        for (let i = 0; i < this.panels.length; i++) {
            if (this.panels[i].id === idValue) {
                currentCellInstance = this.panels[i];
            }
        }
        return currentCellInstance;
    }
    /**
     * Allows to add a panel to the Dashboardlayout.
     *
     * @param {panel} panel -  Defines the panel element.
     *
     * @returns void
     * @deprecated
     */
    addPanel(panel) {
        this.panelsSizeY = 0;
        this.maxCol();
        if (!panel.minSizeX) {
            panel.minSizeX = 1;
        }
        if (!panel.minSizeY) {
            panel.minSizeY = 1;
        }
        if (!panel.id) {
            panel.id = 'layout_' + this.panelID.toString();
            this.panelID = this.panelID + 1;
        }
        // eslint-disable-next-line
        const panelProp = new Panel(this, 'panels', panel, true);
        this.panels.push(panelProp);
        this.panelsInitialModel = this.cloneModels(this.panels);
        this.setMinMaxValues(panelProp);
        if (this.maxColumnValue < panelProp.col || this.maxColumnValue < (panelProp.col + panelProp.sizeX)) {
            this.panelPropertyChange(panelProp, { col: this.maxColumnValue - panelProp.sizeX });
        }
        const cell = this.renderCell(panelProp, true, null);
        this.oldRowCol[panelProp.id] = { row: panelProp.row, col: panelProp.col };
        this.cloneObject[panelProp.id] = { row: panelProp.row, col: panelProp.col };
        this.updateOldRowColumn();
        this.element.insertAdjacentElement('afterbegin', cell);
        this.addPanelCalled = true;
        if (this.checkMediaQuery()) {
            this.checkMediaQuerySizing();
            this.removeResizeClasses(this.panelCollection);
        }
        else {
            this.mainElement = cell;
            if (!this.checkCollision) {
                this.checkCollision = [];
            }
            this.setPanelPosition(cell, panelProp.row, panelProp.col);
            this.updatePanelLayout(cell, panelProp);
        }
        this.addPanelCalled = false;
        if (this.allowDragging &&
            this.mediaQuery ? !(this.checkMediaQuery()) : false) {
            this.enableDraggingContent([document.getElementById(panelProp.id)]);
        }
        this.setClasses([cell]);
        if (this.allowFloating) {
            this.mainElement = null;
            this.moveItemsUpwards();
        }
        this.updateOldRowColumn();
        this.sortedPanel();
        this.updateCloneArrayObject();
        if (this.allowResizing) {
            for (let i = 0; i < cell.querySelectorAll('.e-resize').length; i++) {
                const eventName = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie') ? 'mousedown pointerdown' : 'mousedown';
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(cell.querySelectorAll('.e-resize')[i], eventName, this.downResizeHandler, this);
                if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name !== 'msie') {
                    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(cell.querySelectorAll('.e-resize')[i], 'touchstart', this.touchDownResizeHandler, this);
                }
            }
        }
        this.checkForChanges(false, [panelProp]);
    }
    /**
     * Allows to update a panel in the DashboardLayout.
     *
     * @param {panel} panel - Defines the panel element.
     *
     * @returns void
     * @deprecated
     */
    updatePanel(panel) {
        this.panelsSizeY = 0;
        if (!panel.id) {
            return;
        }
        const panelInstance = this.getCellInstance(panel.id);
        if (!panelInstance) {
            return;
        }
        this.maxCol();
        panel.col = (panel.col < 1) ? 0 : ((panel.col > this.columns)) ? this.columns - 1 : panel.col;
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(panel.col)) {
            panel.col = panelInstance.col;
        }
        this.panelPropertyChange(panelInstance, panel);
        this.setMinMaxValues(panelInstance);
        const cell = document.getElementById(panel.id);
        this.mainElement = cell;
        const cssClass = panelInstance.cssClass ? panelInstance.cssClass.split(' ') : null;
        this.panelContent = cell.querySelector('.e-panel-container') ?
            cell.querySelector('.e-panel-container') :
            this.createSubElement(cssClass, cell.id + '_content', panelContainer);
        cell.appendChild(this.panelContent);
        if (panelInstance.header) {
            const headerTemplateElement = cell.querySelector('.e-panel-header') ?
                cell.querySelector('.e-panel-header') : this.createSubElement([], cell.id + 'template', '');
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([headerTemplateElement], [header]);
            headerTemplateElement.innerHTML = '';
            const id = this.element.id + 'HeaderTemplate' + panelInstance.id;
            this.renderTemplate(panelInstance.header, headerTemplateElement, id, true, 'header');
            this.panelContent.appendChild(headerTemplateElement);
            this.renderReactTemplates();
        }
        else {
            if (cell.querySelector('.e-panel-header')) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(cell.querySelector('.e-panel-header'));
            }
        }
        if (panelInstance.content) {
            const cssClass = panelInstance.cssClass ? panelInstance.cssClass.split(' ') : null;
            this.panelBody = cell.querySelector('.e-panel-content') ? cell.querySelector('.e-panel-content') :
                this.createSubElement(cssClass, cell.id + '_body', panelContent);
            this.panelBody.innerHTML = '';
            const headerHeight = this.panelContent.querySelector('.e-panel-header') ?
                window.getComputedStyle(this.panelContent.querySelector('.e-panel-header')).height : '0px';
            const contentHeightValue = 'calc( 100% - ' + headerHeight + ')';
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(this.panelBody, { height: contentHeightValue });
            const id = this.element.id + 'ContentTemplate' + panelInstance.id;
            this.renderTemplate(panelInstance.content, this.panelBody, id, true, 'content');
            this.panelContent.appendChild(this.panelBody);
            this.renderReactTemplates();
        }
        else {
            if (cell.querySelector('.e-panel-content')) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(cell.querySelector('.e-panel-content'));
            }
        }
        this.setXYAttributes(cell, panelInstance);
        this.setHeightAndWidth(cell, panelInstance);
        this.setPanelPosition(cell, panelInstance.row, panelInstance.col);
        this.updatePanelLayout(cell, panelInstance);
        if (this.checkMediaQuery()) {
            this.checkMediaQuerySizing();
        }
        this.mainElement = null;
        this.updatePanels();
        this.updateCloneArrayObject();
    }
    updateCloneArrayObject() {
        this.cloneArray = this.sortedArray;
        this.cloneObject = JSON.parse(JSON.stringify(this.oldRowCol));
    }
    /**
     * Returns the panels object of the DashboardLayout.
     *
     * @returns [`PanelModel[]`](./panelModel)
     */
    serialize() {
        const cloneModel = this.cloneModels(this.panels);
        const customObject = [];
        for (let i = 0; i < cloneModel.length; i++) {
            customObject.push({
                id: cloneModel[i].id, row: cloneModel[i].row, col: cloneModel[i].col, sizeX: cloneModel[i].sizeX,
                sizeY: cloneModel[i].sizeY, minSizeX: cloneModel[i].minSizeX, minSizeY: cloneModel[i].minSizeY,
                maxSizeX: cloneModel[i].maxSizeX, maxSizeY: cloneModel[i].maxSizeY
            });
        }
        return (customObject);
    }
    /**
     * Removes all the panels from the DashboardLayout.
     */
    removeAll() {
        this.removeAllCalled = true;
        for (let i = 0; i < this.panelCollection.length; i++) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.panelCollection[i]);
            this.clearTemplate();
        }
        this.removeAllPanel();
        this.rows = 0;
        this.gridPanelCollection = [];
        this.setHeightWidth();
        this.sortedPanel();
        this.sortedArray = [];
        this.overlapElementClone = [];
        this.overlapElement = [];
        this.overlapSubElementClone = [];
        this.panelCollection = [];
        this.oldRowCol = {};
        this.cloneObject = {};
        const clonedPanels = this.cloneModels(this.panels);
        this.setProperties({ panels: [] }, true);
        this.updatePanels();
        this.updateCloneArrayObject();
        this.checkForChanges(false, null, clonedPanels);
        this.removeAllCalled = false;
    }
    /**
     * Removes the panel from the DashboardLayout.
     *
     * @param {string} id -  Defines the panel ID.
     *
     * @returns void
     */
    removePanel(id) {
        this.panelsSizeY = 0;
        this.panelsInitialModel = this.cloneModels(this.panels);
        let removedPanel;
        for (let i = 0; i < this.panelCollection.length; i++) {
            if (this.panelCollection[i].id === id) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.panelCollection[i]);
                this.panelCollection.splice(i, 1);
            }
            if (this.panels[i].id === id) {
                removedPanel = this.panels[i];
                this.panels.splice(i, 1);
                this.panelsInitialModel.splice(i, 1);
                this.updateOldRowColumn();
                this.sortedPanel();
            }
        }
        this.updatePanels();
        if (this.checkMediaQuery()) {
            this.isPanelRemoved = true;
            this.checkMediaQuerySizing();
            this.isPanelRemoved = false;
        }
        this.gridPanelCollection.forEach((item) => {
            if (item.id === id) {
                this.gridPanelCollection.splice(this.gridPanelCollection.indexOf(item), 1);
            }
        });
        this.updateCloneArrayObject();
        this.checkForChanges(false, null, [removedPanel]);
    }
    /**
     *Moves the panel in the DashboardLayout.
     *
     * @param {string} id - Defines the panel ID.
     *
     * @param  {number} row - Defines the row of dashboard layout.
     *
     * @param {number} col - Defines the column of dashboard layout.
     *
     * @returns void
     */
    movePanel(id, row, col) {
        this.movePanelCalled = true;
        this.panelsInitialModel = this.cloneModels(this.panels);
        const panelInstance = this.getCellInstance(id);
        if ((isNaN(row) || row === null) || (isNaN(col) || col === null) || !panelInstance) {
            return;
        }
        if (col < 0) {
            col = 0;
        }
        else if (col > this.columns) {
            col = this.columns - panelInstance.sizeX;
        }
        this.panelPropertyChange(panelInstance, { row: row, col: col });
        const ele = document.getElementById(id);
        this.mainElement = ele;
        this.startRow = parseInt(ele.getAttribute('data-row'), 10);
        this.startCol = parseInt(ele.getAttribute('data-col'), 10);
        this.setAttributes({ value: { col: col.toString(), row: row.toString() } }, ele);
        this.updateOldRowColumn();
        this.setPanelPosition(ele, row, col);
        this.updatePanelLayout(ele, panelInstance);
        this.updateRowHeight();
        this.updatePanels();
        this.updateCloneArrayObject();
        this.mainElement = null;
        if (this.allowFloating) {
            this.moveItemsUpwards();
        }
        this.movePanelCalled = false;
        this.checkForChanges(false);
    }
    setAttributes(value, ele) {
        for (let i = 0; i < Object.keys(value).length; i++) {
            if (Object.keys(value)) {
                if (value[Object.keys(value)[i]].col) {
                    ele.setAttribute('data-col', value[Object.keys(value)[i]].col.toString());
                }
                if (value[Object.keys(value)[i]].row) {
                    ele.setAttribute('data-row', value[Object.keys(value)[i]].row.toString());
                }
                if (value[Object.keys(value)[i]].sizeX) {
                    ele.setAttribute('data-sizeX', value[Object.keys(value)[i]].sizeX.toString());
                }
                if (value[Object.keys(value)[i]].sizeY) {
                    ele.setAttribute('data-sizeY', value[Object.keys(value)[i]].sizeY.toString());
                }
                if (value[Object.keys(value)[i]].minSizeX) {
                    ele.setAttribute('data-minSizeX', value[Object.keys(value)[i]].minSizeX.toString());
                }
                if (value[Object.keys(value)[i]].minSizeY) {
                    ele.setAttribute('data-minSizeY', value[Object.keys(value)[i]].minSizeY.toString());
                }
                if (value[Object.keys(value)[i]].maxSizeX) {
                    ele.setAttribute('data-maxSizeY', value[Object.keys(value)[i]].maxSizeX.toString());
                }
                if (value[Object.keys(value)[i]].maxSizeY) {
                    ele.setAttribute('data-maxSizeY', value[Object.keys(value)[i]].maxSizeY.toString());
                }
            }
        }
    }
    /**
     * Resize the panel in the DashboardLayout.
     *
     * @param {string} id - Defines the panel ID.
     *
     * @param {number} sizeX - Defines the sizeX of dashboard layout.
     *
     * @param {number} sizeY - Defines the sizeY of dashboard layout.
     */
    resizePanel(id, sizeX, sizeY) {
        this.panelsInitialModel = this.cloneModels(this.panels);
        const panelInstance = this.getCellInstance(id);
        this.resizeCalled = true;
        const ele = document.getElementById(id);
        const args = { event: null, element: ele, isInteracted: false };
        this.trigger('resizeStart', args);
        this.panelPropertyChange(panelInstance, { sizeX: sizeX, sizeY: sizeY });
        this.setMinMaxValues(panelInstance);
        this.checkMinMaxValues(panelInstance);
        this.mainElement = ele;
        this.setAttributes({ value: { sizeX: panelInstance.sizeX.toString(), sizeY: panelInstance.sizeY.toString() } }, ele);
        this.setHeightAndWidth(ele, panelInstance);
        this.updatePanelLayout(ele, panelInstance);
        this.updatePanels();
        this.updateRowHeight();
        this.resizeCalled = false;
        this.trigger('resizeStop', args);
        this.checkForChanges(false);
    }
    /**
     * Destroys the DashboardLayout component
     *
     * @returns void
     */
    destroy() {
        // eslint-disable-next-line
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(window, 'resize', this.refreshListener);
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], ['e-dashboardlayout', 'e-lib', 'e-responsive', 'e-control']);
        this.element.removeAttribute('style');
        for (let i = 0; i < this.dragCollection.length; i++) {
            this.dragCollection[i].destroy();
        }
        this.removeAllPanel();
        super.destroy();
        this.clearTemplate();
        this.renderReactTemplates();
    }
    removeAllPanel() {
        while (this.element.firstElementChild) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.element.firstElementChild);
            this.clearTemplate();
        }
    }
    setEnableRtl() {
        if (this.enableRtl === true) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], 'e-rtl');
        }
        else {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], 'e-rtl');
        }
    }
    /**
     * Called internally if any of the property value changed.
     * returns void
     *
     * @private
     */
    updateCellSizeAndSpacing() {
        this.panelResponsiveUpdate();
        this.setHeightWidth();
        this.getRowColumn();
        for (let i = 0; i < this.element.querySelectorAll('.e-panel').length; i++) {
            const ele = this.element.querySelectorAll('.e-panel')[i];
            const panelModel = this.getCellInstance(ele.id);
            this.setHeightAndWidth(ele, panelModel);
            this.setPanelPosition(ele, panelModel.row, panelModel.col);
        }
    }
    updatePanelsDynamically(panels) {
        this.removeAll();
        this.setProperties({ panels: panels }, true);
        this.setOldRowCol();
        if (this.table) {
            this.table.remove();
        }
        this.initialize();
        if (this.checkMediaQuery()) {
            this.refresh();
        }
        if (this.showGridLines) {
            this.initGridLines();
        }
    }
    checkForIDValues(panels) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(panels) && panels.length > 0) {
            this.panelID = 0;
            panels.forEach((panel) => {
                if (!panel.id) {
                    this.panelPropertyChange(panel, { id: 'layout_' + this.panelID.toString() });
                    this.panelID = this.panelID + 1;
                }
            });
        }
        else {
            this.restrictDynamicUpdate = true;
        }
    }
    /**
     * Called internally if any of the property value changed.
     *
     * returns void
     *
     * @private
     */
    // eslint-disable-next-line
    onPropertyChanged(newProp, oldProp) {
        if (newProp.panels && newProp.panels.length > 0 && newProp.panels[0] instanceof Panel) {
            this.checkForIDValues(newProp.panels);
        }
        for (const prop of Object.keys(newProp)) {
            switch (prop) {
                case 'enableRtl':
                    this.setProperties({ enableRtl: newProp.enableRtl }, true);
                    this.setEnableRtl();
                    break;
                case 'mediaQuery':
                    this.setProperties({ mediaQuery: newProp.mediaQuery }, true);
                    if (this.checkMediaQuery()) {
                        this.checkMediaQuerySizing();
                    }
                    break;
                case 'allowDragging':
                    this.setProperties({ allowDragging: newProp.allowDragging }, true);
                    this.ensureDrag();
                    break;
                case 'allowResizing':
                    this.setProperties({ allowResizing: newProp.allowResizing }, true);
                    if (this.allowResizing) {
                        this.setClasses(this.panelCollection);
                        this.resizeEvents();
                    }
                    else {
                        const panelElements = this.element.querySelectorAll('.e-panel .e-panel-container .e-resize');
                        for (let i = 0; i < panelElements.length; i++) {
                            const eventName = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie') ? 'mousedown pointerdown' : 'mousedown';
                            const element = panelElements[i];
                            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(element, eventName, this.downResizeHandler);
                            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name !== 'msie') {
                                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(element, 'touchstart', this.touchDownResizeHandler);
                            }
                        }
                        this.removeResizeClasses(this.panelCollection);
                    }
                    break;
                case 'cellSpacing':
                    this.setProperties({ cellSpacing: newProp.cellSpacing }, true);
                    this.updateCellSizeAndSpacing();
                    this.updateGridLines();
                    break;
                case 'draggableHandle':
                    this.setProperties({ draggableHandle: newProp.draggableHandle }, true);
                    this.ensureDrag();
                    break;
                case 'allowFloating':
                    this.setProperties({ allowFloating: newProp.allowFloating }, true);
                    this.moveItemsUpwards();
                    break;
                case 'showGridLines':
                    if (this.showGridLines) {
                        this.setProperties({ showGridLines: newProp.showGridLines }, true);
                        this.initGridLines();
                    }
                    else {
                        if (this.table) {
                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.table);
                        }
                    }
                    break;
                case 'allowPushing':
                    this.setProperties({ allowPushing: newProp.allowPushing }, true);
                    break;
                case 'panels':
                    if (!newProp.columns && !this.restrictDynamicUpdate && (newProp.panels[0] && newProp.panels.length > 0)) {
                        this.isRenderComplete = false;
                        this.updatePanelsDynamically(newProp.panels);
                        this.isRenderComplete = true;
                    }
                    else if (!(newProp.panels[0] && newProp.panels.length)) {
                        this.isRenderComplete = false;
                        this.updatePanelsDynamically(this.panels);
                        this.isRenderComplete = true;
                    }
                    else {
                        this.restrictDynamicUpdate = false;
                    }
                    break;
                case 'columns':
                    this.isRenderComplete = false;
                    if (newProp.panels) {
                        this.updatePanelsDynamically(newProp.panels);
                    }
                    this.setProperties({ columns: newProp.columns }, true);
                    this.panelCollection = [];
                    this.maxColumnValue = this.columns;
                    this.calculateCellSize();
                    this.panels.forEach((panel) => {
                        this.setMinMaxValues(panel);
                        if (this.maxColumnValue < panel.col || this.maxColumnValue < (panel.col + panel.sizeX)) {
                            const colValue = this.maxColumnValue - panel.sizeX;
                            this.panelPropertyChange(panel, { col: colValue < 0 ? 0 : colValue });
                            this.setXYAttributes(document.getElementById(panel.id), panel);
                        }
                        this.setHeightAndWidth(document.getElementById(panel.id), panel);
                        this.panelCollection.push(document.getElementById(panel.id));
                        this.setPanelPosition(document.getElementById(panel.id), panel.row, panel.col);
                        this.mainElement = document.getElementById(panel.id);
                        this.updatePanelLayout(document.getElementById(panel.id), panel);
                        this.mainElement = null;
                    });
                    this.updatePanels();
                    this.updateCloneArrayObject();
                    this.isRenderComplete = true;
                    this.updateGridLines();
                    break;
            }
        }
    }
    /**
     * Gets the properties to be maintained upon browser refresh.
     *
     * @returns string
     * @private
     */
    getPersistData() {
        const keyEntity = ['panels'];
        return this.addOnPersist(keyEntity);
    }
    /* istanbul ignore next */
    mergePersistPanelData(persistedData) {
        const data = window.localStorage.getItem(this.getModuleName() + this.element.id);
        if (!((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data) || (data === '')) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(persistedData)) {
            const dataObj = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(persistedData) ? persistedData : JSON.parse(data);
            const keys = Object.keys(dataObj);
            this.isProtectedOnChange = true;
            for (const key of keys) {
                if ((typeof (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(key, this) === 'object' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(key, this)))) {
                    if (Array.isArray((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getValue)(key, this)) && key === 'panels') {
                        this.mergePanels(dataObj[key], this[key]);
                    }
                }
            }
            this.isProtectedOnChange = false;
        }
    }
    /* istanbul ignore next */
    mergePanels(sortedPanels, panels) {
        const storedColumns = sortedPanels;
        for (let i = 0; i < storedColumns.length; i++) {
            this.checkForIDValues(panels);
            const localPanel = panels.filter((pan) => pan.id === storedColumns[i].id)[0];
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(localPanel)) {
                storedColumns[i] = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(localPanel, storedColumns[i], {}, true);
            }
        }
    }
    /**
     * Returns the current module name.
     *
     * @returns string
     *
     * @private
     */
    getModuleName() {
        return 'DashboardLayout';
    }
};
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], DashboardLayout.prototype, "allowDragging", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], DashboardLayout.prototype, "allowResizing", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], DashboardLayout.prototype, "allowPushing", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], DashboardLayout.prototype, "enableHtmlSanitizer", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], DashboardLayout.prototype, "allowFloating", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1)
], DashboardLayout.prototype, "cellAspectRatio", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)([5, 5])
], DashboardLayout.prototype, "cellSpacing", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(1)
], DashboardLayout.prototype, "columns", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], DashboardLayout.prototype, "showGridLines", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], DashboardLayout.prototype, "draggableHandle", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('en-US')
], DashboardLayout.prototype, "locale", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('max-width: 600px')
], DashboardLayout.prototype, "mediaQuery", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Collection)([], Panel)
], DashboardLayout.prototype, "panels", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(['e-south-east'])
], DashboardLayout.prototype, "resizableHandles", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], DashboardLayout.prototype, "change", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], DashboardLayout.prototype, "dragStart", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], DashboardLayout.prototype, "drag", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], DashboardLayout.prototype, "dragStop", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], DashboardLayout.prototype, "resizeStart", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], DashboardLayout.prototype, "resize", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], DashboardLayout.prototype, "resizeStop", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], DashboardLayout.prototype, "created", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], DashboardLayout.prototype, "destroyed", void 0);
DashboardLayout = __decorate$1([
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.NotifyPropertyChanges
], DashboardLayout);

/**
 * dashboardlayout modules
 */

/**
 *     Layout all modules
 */


//# sourceMappingURL=ej2-layouts.es2015.js.map


/***/ }),

/***/ 38842:
/*!*******************************************************************************************!*\
  !*** ./node_modules/@syncfusion/ej2-richtexteditor/dist/es6/ej2-richtexteditor.es2015.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Toolbar": () => (/* binding */ Toolbar$2),
/* harmony export */   "KeyboardEvents": () => (/* binding */ KeyboardEvents$1),
/* harmony export */   "BaseToolbar": () => (/* binding */ BaseToolbar),
/* harmony export */   "BaseQuickToolbar": () => (/* binding */ BaseQuickToolbar),
/* harmony export */   "QuickToolbar": () => (/* binding */ QuickToolbar),
/* harmony export */   "Count": () => (/* binding */ Count),
/* harmony export */   "ColorPickerInput": () => (/* binding */ ColorPickerInput),
/* harmony export */   "MarkdownToolbarStatus": () => (/* binding */ MarkdownToolbarStatus),
/* harmony export */   "ExecCommandCallBack": () => (/* binding */ ExecCommandCallBack),
/* harmony export */   "ToolbarAction": () => (/* binding */ ToolbarAction),
/* harmony export */   "MarkdownEditor": () => (/* binding */ MarkdownEditor),
/* harmony export */   "HtmlEditor": () => (/* binding */ HtmlEditor),
/* harmony export */   "PasteCleanup": () => (/* binding */ PasteCleanup),
/* harmony export */   "Resize": () => (/* binding */ Resize),
/* harmony export */   "DropDownButtons": () => (/* binding */ DropDownButtons),
/* harmony export */   "FileManager": () => (/* binding */ FileManager$1),
/* harmony export */   "FullScreen": () => (/* binding */ FullScreen),
/* harmony export */   "setAttributes": () => (/* binding */ setAttributes),
/* harmony export */   "HtmlToolbarStatus": () => (/* binding */ HtmlToolbarStatus),
/* harmony export */   "XhtmlValidation": () => (/* binding */ XhtmlValidation),
/* harmony export */   "HTMLFormatter": () => (/* binding */ HTMLFormatter),
/* harmony export */   "Formatter": () => (/* binding */ Formatter),
/* harmony export */   "MarkdownFormatter": () => (/* binding */ MarkdownFormatter),
/* harmony export */   "ContentRender": () => (/* binding */ ContentRender),
/* harmony export */   "Render": () => (/* binding */ Render),
/* harmony export */   "ToolbarRenderer": () => (/* binding */ ToolbarRenderer),
/* harmony export */   "Link": () => (/* binding */ Link),
/* harmony export */   "Image": () => (/* binding */ Image),
/* harmony export */   "ViewSource": () => (/* binding */ ViewSource),
/* harmony export */   "Table": () => (/* binding */ Table),
/* harmony export */   "DialogRenderer": () => (/* binding */ DialogRenderer),
/* harmony export */   "IframeContentRender": () => (/* binding */ IframeContentRender),
/* harmony export */   "MarkdownRender": () => (/* binding */ MarkdownRender),
/* harmony export */   "PopupRenderer": () => (/* binding */ PopupRenderer),
/* harmony export */   "RichTextEditor": () => (/* binding */ RichTextEditor),
/* harmony export */   "RenderType": () => (/* binding */ RenderType),
/* harmony export */   "ToolbarType": () => (/* binding */ ToolbarType),
/* harmony export */   "DialogType": () => (/* binding */ DialogType),
/* harmony export */   "executeGroup": () => (/* binding */ executeGroup),
/* harmony export */   "created": () => (/* binding */ created),
/* harmony export */   "destroyed": () => (/* binding */ destroyed),
/* harmony export */   "load": () => (/* binding */ load),
/* harmony export */   "initialLoad": () => (/* binding */ initialLoad),
/* harmony export */   "contentChanged": () => (/* binding */ contentChanged),
/* harmony export */   "initialEnd": () => (/* binding */ initialEnd),
/* harmony export */   "iframeMouseDown": () => (/* binding */ iframeMouseDown),
/* harmony export */   "destroy": () => (/* binding */ destroy),
/* harmony export */   "toolbarClick": () => (/* binding */ toolbarClick),
/* harmony export */   "toolbarRefresh": () => (/* binding */ toolbarRefresh),
/* harmony export */   "refreshBegin": () => (/* binding */ refreshBegin),
/* harmony export */   "toolbarUpdated": () => (/* binding */ toolbarUpdated),
/* harmony export */   "bindOnEnd": () => (/* binding */ bindOnEnd),
/* harmony export */   "renderColorPicker": () => (/* binding */ renderColorPicker),
/* harmony export */   "htmlToolbarClick": () => (/* binding */ htmlToolbarClick),
/* harmony export */   "markdownToolbarClick": () => (/* binding */ markdownToolbarClick),
/* harmony export */   "destroyColorPicker": () => (/* binding */ destroyColorPicker),
/* harmony export */   "modelChanged": () => (/* binding */ modelChanged),
/* harmony export */   "keyUp": () => (/* binding */ keyUp),
/* harmony export */   "keyDown": () => (/* binding */ keyDown),
/* harmony export */   "mouseUp": () => (/* binding */ mouseUp),
/* harmony export */   "toolbarCreated": () => (/* binding */ toolbarCreated),
/* harmony export */   "toolbarRenderComplete": () => (/* binding */ toolbarRenderComplete),
/* harmony export */   "enableFullScreen": () => (/* binding */ enableFullScreen),
/* harmony export */   "disableFullScreen": () => (/* binding */ disableFullScreen),
/* harmony export */   "dropDownSelect": () => (/* binding */ dropDownSelect),
/* harmony export */   "beforeDropDownItemRender": () => (/* binding */ beforeDropDownItemRender),
/* harmony export */   "execCommandCallBack": () => (/* binding */ execCommandCallBack),
/* harmony export */   "imageToolbarAction": () => (/* binding */ imageToolbarAction),
/* harmony export */   "linkToolbarAction": () => (/* binding */ linkToolbarAction),
/* harmony export */   "windowResize": () => (/* binding */ windowResize),
/* harmony export */   "resizeStart": () => (/* binding */ resizeStart),
/* harmony export */   "onResize": () => (/* binding */ onResize),
/* harmony export */   "resizeStop": () => (/* binding */ resizeStop),
/* harmony export */   "undo": () => (/* binding */ undo),
/* harmony export */   "redo": () => (/* binding */ redo),
/* harmony export */   "insertLink": () => (/* binding */ insertLink),
/* harmony export */   "unLink": () => (/* binding */ unLink),
/* harmony export */   "editLink": () => (/* binding */ editLink),
/* harmony export */   "openLink": () => (/* binding */ openLink),
/* harmony export */   "actionBegin": () => (/* binding */ actionBegin),
/* harmony export */   "actionComplete": () => (/* binding */ actionComplete),
/* harmony export */   "updatedToolbarStatus": () => (/* binding */ updatedToolbarStatus),
/* harmony export */   "actionSuccess": () => (/* binding */ actionSuccess),
/* harmony export */   "updateToolbarItem": () => (/* binding */ updateToolbarItem),
/* harmony export */   "insertImage": () => (/* binding */ insertImage),
/* harmony export */   "insertCompleted": () => (/* binding */ insertCompleted),
/* harmony export */   "imageLeft": () => (/* binding */ imageLeft),
/* harmony export */   "imageRight": () => (/* binding */ imageRight),
/* harmony export */   "imageCenter": () => (/* binding */ imageCenter),
/* harmony export */   "imageBreak": () => (/* binding */ imageBreak),
/* harmony export */   "imageInline": () => (/* binding */ imageInline),
/* harmony export */   "imageLink": () => (/* binding */ imageLink),
/* harmony export */   "imageAlt": () => (/* binding */ imageAlt),
/* harmony export */   "imageDelete": () => (/* binding */ imageDelete),
/* harmony export */   "imageCaption": () => (/* binding */ imageCaption),
/* harmony export */   "imageSize": () => (/* binding */ imageSize),
/* harmony export */   "sourceCode": () => (/* binding */ sourceCode),
/* harmony export */   "updateSource": () => (/* binding */ updateSource),
/* harmony export */   "toolbarOpen": () => (/* binding */ toolbarOpen),
/* harmony export */   "beforeDropDownOpen": () => (/* binding */ beforeDropDownOpen),
/* harmony export */   "selectionSave": () => (/* binding */ selectionSave),
/* harmony export */   "selectionRestore": () => (/* binding */ selectionRestore),
/* harmony export */   "expandPopupClick": () => (/* binding */ expandPopupClick),
/* harmony export */   "count": () => (/* binding */ count),
/* harmony export */   "contentFocus": () => (/* binding */ contentFocus),
/* harmony export */   "contentBlur": () => (/* binding */ contentBlur),
/* harmony export */   "mouseDown": () => (/* binding */ mouseDown),
/* harmony export */   "sourceCodeMouseDown": () => (/* binding */ sourceCodeMouseDown),
/* harmony export */   "editAreaClick": () => (/* binding */ editAreaClick),
/* harmony export */   "scroll": () => (/* binding */ scroll),
/* harmony export */   "contentscroll": () => (/* binding */ contentscroll),
/* harmony export */   "colorPickerChanged": () => (/* binding */ colorPickerChanged),
/* harmony export */   "tableColorPickerChanged": () => (/* binding */ tableColorPickerChanged),
/* harmony export */   "focusChange": () => (/* binding */ focusChange),
/* harmony export */   "selectAll": () => (/* binding */ selectAll$1),
/* harmony export */   "selectRange": () => (/* binding */ selectRange),
/* harmony export */   "getSelectedHtml": () => (/* binding */ getSelectedHtml),
/* harmony export */   "renderInlineToolbar": () => (/* binding */ renderInlineToolbar),
/* harmony export */   "paste": () => (/* binding */ paste),
/* harmony export */   "imgModule": () => (/* binding */ imgModule),
/* harmony export */   "rtlMode": () => (/* binding */ rtlMode),
/* harmony export */   "createTable": () => (/* binding */ createTable),
/* harmony export */   "docClick": () => (/* binding */ docClick),
/* harmony export */   "tableToolbarAction": () => (/* binding */ tableToolbarAction),
/* harmony export */   "checkUndo": () => (/* binding */ checkUndo),
/* harmony export */   "readOnlyMode": () => (/* binding */ readOnlyMode),
/* harmony export */   "pasteClean": () => (/* binding */ pasteClean),
/* harmony export */   "enterHandler": () => (/* binding */ enterHandler),
/* harmony export */   "beforeDialogOpen": () => (/* binding */ beforeDialogOpen),
/* harmony export */   "clearDialogObj": () => (/* binding */ clearDialogObj),
/* harmony export */   "dialogOpen": () => (/* binding */ dialogOpen),
/* harmony export */   "beforeDialogClose": () => (/* binding */ beforeDialogClose),
/* harmony export */   "dialogClose": () => (/* binding */ dialogClose),
/* harmony export */   "beforeQuickToolbarOpen": () => (/* binding */ beforeQuickToolbarOpen),
/* harmony export */   "quickToolbarOpen": () => (/* binding */ quickToolbarOpen),
/* harmony export */   "quickToolbarClose": () => (/* binding */ quickToolbarClose),
/* harmony export */   "popupHide": () => (/* binding */ popupHide),
/* harmony export */   "imageSelected": () => (/* binding */ imageSelected),
/* harmony export */   "imageUploading": () => (/* binding */ imageUploading),
/* harmony export */   "imageUploadSuccess": () => (/* binding */ imageUploadSuccess),
/* harmony export */   "imageUploadFailed": () => (/* binding */ imageUploadFailed),
/* harmony export */   "imageRemoving": () => (/* binding */ imageRemoving),
/* harmony export */   "afterImageDelete": () => (/* binding */ afterImageDelete),
/* harmony export */   "drop": () => (/* binding */ drop),
/* harmony export */   "xhtmlValidation": () => (/* binding */ xhtmlValidation),
/* harmony export */   "beforeImageUpload": () => (/* binding */ beforeImageUpload),
/* harmony export */   "resizeInitialized": () => (/* binding */ resizeInitialized),
/* harmony export */   "renderFileManager": () => (/* binding */ renderFileManager),
/* harmony export */   "beforeImageDrop": () => (/* binding */ beforeImageDrop),
/* harmony export */   "dynamicModule": () => (/* binding */ dynamicModule),
/* harmony export */   "beforePasteCleanup": () => (/* binding */ beforePasteCleanup),
/* harmony export */   "afterPasteCleanup": () => (/* binding */ afterPasteCleanup),
/* harmony export */   "updateTbItemsStatus": () => (/* binding */ updateTbItemsStatus),
/* harmony export */   "showLinkDialog": () => (/* binding */ showLinkDialog),
/* harmony export */   "closeLinkDialog": () => (/* binding */ closeLinkDialog),
/* harmony export */   "showImageDialog": () => (/* binding */ showImageDialog),
/* harmony export */   "closeImageDialog": () => (/* binding */ closeImageDialog),
/* harmony export */   "showTableDialog": () => (/* binding */ showTableDialog),
/* harmony export */   "closeTableDialog": () => (/* binding */ closeTableDialog),
/* harmony export */   "CLS_RTE": () => (/* binding */ CLS_RTE),
/* harmony export */   "CLS_RTL": () => (/* binding */ CLS_RTL),
/* harmony export */   "CLS_CONTENT": () => (/* binding */ CLS_CONTENT),
/* harmony export */   "CLS_DISABLED": () => (/* binding */ CLS_DISABLED),
/* harmony export */   "CLS_SCRIPT_SHEET": () => (/* binding */ CLS_SCRIPT_SHEET),
/* harmony export */   "CLS_STYLE_SHEET": () => (/* binding */ CLS_STYLE_SHEET),
/* harmony export */   "CLS_TOOLBAR": () => (/* binding */ CLS_TOOLBAR),
/* harmony export */   "CLS_TB_FIXED": () => (/* binding */ CLS_TB_FIXED),
/* harmony export */   "CLS_TB_FLOAT": () => (/* binding */ CLS_TB_FLOAT),
/* harmony export */   "CLS_TB_ABS_FLOAT": () => (/* binding */ CLS_TB_ABS_FLOAT),
/* harmony export */   "CLS_INLINE": () => (/* binding */ CLS_INLINE),
/* harmony export */   "CLS_TB_INLINE": () => (/* binding */ CLS_TB_INLINE),
/* harmony export */   "CLS_RTE_EXPAND_TB": () => (/* binding */ CLS_RTE_EXPAND_TB),
/* harmony export */   "CLS_FULL_SCREEN": () => (/* binding */ CLS_FULL_SCREEN),
/* harmony export */   "CLS_QUICK_TB": () => (/* binding */ CLS_QUICK_TB),
/* harmony export */   "CLS_POP": () => (/* binding */ CLS_POP),
/* harmony export */   "CLS_TB_STATIC": () => (/* binding */ CLS_TB_STATIC),
/* harmony export */   "CLS_QUICK_POP": () => (/* binding */ CLS_QUICK_POP),
/* harmony export */   "CLS_QUICK_DROPDOWN": () => (/* binding */ CLS_QUICK_DROPDOWN),
/* harmony export */   "CLS_IMAGE_POP": () => (/* binding */ CLS_IMAGE_POP),
/* harmony export */   "CLS_INLINE_POP": () => (/* binding */ CLS_INLINE_POP),
/* harmony export */   "CLS_INLINE_DROPDOWN": () => (/* binding */ CLS_INLINE_DROPDOWN),
/* harmony export */   "CLS_DROPDOWN_POPUP": () => (/* binding */ CLS_DROPDOWN_POPUP),
/* harmony export */   "CLS_DROPDOWN_ICONS": () => (/* binding */ CLS_DROPDOWN_ICONS),
/* harmony export */   "CLS_DROPDOWN_ITEMS": () => (/* binding */ CLS_DROPDOWN_ITEMS),
/* harmony export */   "CLS_DROPDOWN_BTN": () => (/* binding */ CLS_DROPDOWN_BTN),
/* harmony export */   "CLS_RTE_CONTENT": () => (/* binding */ CLS_RTE_CONTENT),
/* harmony export */   "CLS_TB_ITEM": () => (/* binding */ CLS_TB_ITEM),
/* harmony export */   "CLS_TB_EXTENDED": () => (/* binding */ CLS_TB_EXTENDED),
/* harmony export */   "CLS_TB_WRAP": () => (/* binding */ CLS_TB_WRAP),
/* harmony export */   "CLS_POPUP": () => (/* binding */ CLS_POPUP),
/* harmony export */   "CLS_SEPARATOR": () => (/* binding */ CLS_SEPARATOR),
/* harmony export */   "CLS_MINIMIZE": () => (/* binding */ CLS_MINIMIZE),
/* harmony export */   "CLS_MAXIMIZE": () => (/* binding */ CLS_MAXIMIZE),
/* harmony export */   "CLS_BACK": () => (/* binding */ CLS_BACK),
/* harmony export */   "CLS_SHOW": () => (/* binding */ CLS_SHOW),
/* harmony export */   "CLS_HIDE": () => (/* binding */ CLS_HIDE),
/* harmony export */   "CLS_VISIBLE": () => (/* binding */ CLS_VISIBLE),
/* harmony export */   "CLS_FOCUS": () => (/* binding */ CLS_FOCUS),
/* harmony export */   "CLS_RM_WHITE_SPACE": () => (/* binding */ CLS_RM_WHITE_SPACE),
/* harmony export */   "CLS_IMGRIGHT": () => (/* binding */ CLS_IMGRIGHT),
/* harmony export */   "CLS_IMGLEFT": () => (/* binding */ CLS_IMGLEFT),
/* harmony export */   "CLS_IMGCENTER": () => (/* binding */ CLS_IMGCENTER),
/* harmony export */   "CLS_IMGBREAK": () => (/* binding */ CLS_IMGBREAK),
/* harmony export */   "CLS_CAPTION": () => (/* binding */ CLS_CAPTION),
/* harmony export */   "CLS_RTE_CAPTION": () => (/* binding */ CLS_RTE_CAPTION),
/* harmony export */   "CLS_CAPINLINE": () => (/* binding */ CLS_CAPINLINE),
/* harmony export */   "CLS_IMGINLINE": () => (/* binding */ CLS_IMGINLINE),
/* harmony export */   "CLS_COUNT": () => (/* binding */ CLS_COUNT),
/* harmony export */   "CLS_WARNING": () => (/* binding */ CLS_WARNING),
/* harmony export */   "CLS_ERROR": () => (/* binding */ CLS_ERROR),
/* harmony export */   "CLS_ICONS": () => (/* binding */ CLS_ICONS),
/* harmony export */   "CLS_ACTIVE": () => (/* binding */ CLS_ACTIVE),
/* harmony export */   "CLS_EXPAND_OPEN": () => (/* binding */ CLS_EXPAND_OPEN),
/* harmony export */   "CLS_RTE_ELEMENTS": () => (/* binding */ CLS_RTE_ELEMENTS),
/* harmony export */   "CLS_TB_BTN": () => (/* binding */ CLS_TB_BTN),
/* harmony export */   "CLS_HR_SEPARATOR": () => (/* binding */ CLS_HR_SEPARATOR),
/* harmony export */   "CLS_TB_IOS_FIX": () => (/* binding */ CLS_TB_IOS_FIX),
/* harmony export */   "CLS_LIST_PRIMARY_CONTENT": () => (/* binding */ CLS_LIST_PRIMARY_CONTENT),
/* harmony export */   "CLS_NUMBERFORMATLIST_TB_BTN": () => (/* binding */ CLS_NUMBERFORMATLIST_TB_BTN),
/* harmony export */   "CLS_BULLETFORMATLIST_TB_BTN": () => (/* binding */ CLS_BULLETFORMATLIST_TB_BTN),
/* harmony export */   "CLS_FORMATS_TB_BTN": () => (/* binding */ CLS_FORMATS_TB_BTN),
/* harmony export */   "CLS_FONT_NAME_TB_BTN": () => (/* binding */ CLS_FONT_NAME_TB_BTN),
/* harmony export */   "CLS_FONT_SIZE_TB_BTN": () => (/* binding */ CLS_FONT_SIZE_TB_BTN),
/* harmony export */   "CLS_FONT_COLOR_TARGET": () => (/* binding */ CLS_FONT_COLOR_TARGET),
/* harmony export */   "CLS_BACKGROUND_COLOR_TARGET": () => (/* binding */ CLS_BACKGROUND_COLOR_TARGET),
/* harmony export */   "CLS_COLOR_CONTENT": () => (/* binding */ CLS_COLOR_CONTENT),
/* harmony export */   "CLS_FONT_COLOR_DROPDOWN": () => (/* binding */ CLS_FONT_COLOR_DROPDOWN),
/* harmony export */   "CLS_BACKGROUND_COLOR_DROPDOWN": () => (/* binding */ CLS_BACKGROUND_COLOR_DROPDOWN),
/* harmony export */   "CLS_COLOR_PALETTE": () => (/* binding */ CLS_COLOR_PALETTE),
/* harmony export */   "CLS_FONT_COLOR_PICKER": () => (/* binding */ CLS_FONT_COLOR_PICKER),
/* harmony export */   "CLS_BACKGROUND_COLOR_PICKER": () => (/* binding */ CLS_BACKGROUND_COLOR_PICKER),
/* harmony export */   "CLS_RTE_READONLY": () => (/* binding */ CLS_RTE_READONLY),
/* harmony export */   "CLS_TABLE_SEL": () => (/* binding */ CLS_TABLE_SEL),
/* harmony export */   "CLS_TB_DASH_BOR": () => (/* binding */ CLS_TB_DASH_BOR),
/* harmony export */   "CLS_TB_ALT_BOR": () => (/* binding */ CLS_TB_ALT_BOR),
/* harmony export */   "CLS_TB_COL_RES": () => (/* binding */ CLS_TB_COL_RES),
/* harmony export */   "CLS_TB_ROW_RES": () => (/* binding */ CLS_TB_ROW_RES),
/* harmony export */   "CLS_TB_BOX_RES": () => (/* binding */ CLS_TB_BOX_RES),
/* harmony export */   "CLS_RTE_HIDDEN": () => (/* binding */ CLS_RTE_HIDDEN),
/* harmony export */   "CLS_RTE_PASTE_KEEP_FORMAT": () => (/* binding */ CLS_RTE_PASTE_KEEP_FORMAT),
/* harmony export */   "CLS_RTE_PASTE_REMOVE_FORMAT": () => (/* binding */ CLS_RTE_PASTE_REMOVE_FORMAT),
/* harmony export */   "CLS_RTE_PASTE_PLAIN_FORMAT": () => (/* binding */ CLS_RTE_PASTE_PLAIN_FORMAT),
/* harmony export */   "CLS_RTE_PASTE_OK": () => (/* binding */ CLS_RTE_PASTE_OK),
/* harmony export */   "CLS_RTE_PASTE_CANCEL": () => (/* binding */ CLS_RTE_PASTE_CANCEL),
/* harmony export */   "CLS_RTE_DIALOG_MIN_HEIGHT": () => (/* binding */ CLS_RTE_DIALOG_MIN_HEIGHT),
/* harmony export */   "CLS_RTE_RES_HANDLE": () => (/* binding */ CLS_RTE_RES_HANDLE),
/* harmony export */   "CLS_RTE_RES_EAST": () => (/* binding */ CLS_RTE_RES_EAST),
/* harmony export */   "CLS_RTE_IMAGE": () => (/* binding */ CLS_RTE_IMAGE),
/* harmony export */   "CLS_RESIZE": () => (/* binding */ CLS_RESIZE),
/* harmony export */   "CLS_IMG_FOCUS": () => (/* binding */ CLS_IMG_FOCUS),
/* harmony export */   "CLS_RTE_DRAG_IMAGE": () => (/* binding */ CLS_RTE_DRAG_IMAGE),
/* harmony export */   "CLS_RTE_UPLOAD_POPUP": () => (/* binding */ CLS_RTE_UPLOAD_POPUP),
/* harmony export */   "CLS_POPUP_OPEN": () => (/* binding */ CLS_POPUP_OPEN),
/* harmony export */   "CLS_IMG_RESIZE": () => (/* binding */ CLS_IMG_RESIZE),
/* harmony export */   "CLS_DROPAREA": () => (/* binding */ CLS_DROPAREA),
/* harmony export */   "CLS_IMG_INNER": () => (/* binding */ CLS_IMG_INNER),
/* harmony export */   "CLS_UPLOAD_FILES": () => (/* binding */ CLS_UPLOAD_FILES),
/* harmony export */   "CLS_RTE_DIALOG_UPLOAD": () => (/* binding */ CLS_RTE_DIALOG_UPLOAD),
/* harmony export */   "CLS_RTE_RES_CNT": () => (/* binding */ CLS_RTE_RES_CNT),
/* harmony export */   "CLS_CUSTOM_TILE": () => (/* binding */ CLS_CUSTOM_TILE),
/* harmony export */   "CLS_NOCOLOR_ITEM": () => (/* binding */ CLS_NOCOLOR_ITEM),
/* harmony export */   "CLS_TABLE": () => (/* binding */ CLS_TABLE),
/* harmony export */   "CLS_TABLE_BORDER": () => (/* binding */ CLS_TABLE_BORDER),
/* harmony export */   "CLS_RTE_TABLE_RESIZE": () => (/* binding */ CLS_RTE_TABLE_RESIZE),
/* harmony export */   "CLS_RTE_FIXED_TB_EXPAND": () => (/* binding */ CLS_RTE_FIXED_TB_EXPAND),
/* harmony export */   "CLS_RTE_TB_ENABLED": () => (/* binding */ CLS_RTE_TB_ENABLED),
/* harmony export */   "getIndex": () => (/* binding */ getIndex),
/* harmony export */   "hasClass": () => (/* binding */ hasClass),
/* harmony export */   "getDropDownValue": () => (/* binding */ getDropDownValue),
/* harmony export */   "isIDevice": () => (/* binding */ isIDevice),
/* harmony export */   "getFormattedFontSize": () => (/* binding */ getFormattedFontSize),
/* harmony export */   "pageYOffset": () => (/* binding */ pageYOffset),
/* harmony export */   "getTooltipText": () => (/* binding */ getTooltipText),
/* harmony export */   "setToolbarStatus": () => (/* binding */ setToolbarStatus),
/* harmony export */   "getCollection": () => (/* binding */ getCollection),
/* harmony export */   "getTBarItemsIndex": () => (/* binding */ getTBarItemsIndex),
/* harmony export */   "updateUndoRedoStatus": () => (/* binding */ updateUndoRedoStatus),
/* harmony export */   "dispatchEvent": () => (/* binding */ dispatchEvent),
/* harmony export */   "parseHtml": () => (/* binding */ parseHtml),
/* harmony export */   "getTextNodesUnder": () => (/* binding */ getTextNodesUnder),
/* harmony export */   "toObjectLowerCase": () => (/* binding */ toObjectLowerCase),
/* harmony export */   "getEditValue": () => (/* binding */ getEditValue),
/* harmony export */   "updateTextNode": () => (/* binding */ updateTextNode),
/* harmony export */   "getDefaultValue": () => (/* binding */ getDefaultValue),
/* harmony export */   "isEditableValueEmpty": () => (/* binding */ isEditableValueEmpty),
/* harmony export */   "decode": () => (/* binding */ decode),
/* harmony export */   "sanitizeHelper": () => (/* binding */ sanitizeHelper),
/* harmony export */   "convertToBlob": () => (/* binding */ convertToBlob),
/* harmony export */   "getLocaleFontFormat": () => (/* binding */ getLocaleFontFormat),
/* harmony export */   "updateDropDownFontFormatLocale": () => (/* binding */ updateDropDownFontFormatLocale),
/* harmony export */   "ServiceLocator": () => (/* binding */ ServiceLocator),
/* harmony export */   "RendererFactory": () => (/* binding */ RendererFactory),
/* harmony export */   "EditorManager": () => (/* binding */ EditorManager),
/* harmony export */   "IMAGE": () => (/* binding */ IMAGE),
/* harmony export */   "TABLE": () => (/* binding */ TABLE),
/* harmony export */   "LINK": () => (/* binding */ LINK),
/* harmony export */   "INSERT_ROW": () => (/* binding */ INSERT_ROW),
/* harmony export */   "INSERT_COLUMN": () => (/* binding */ INSERT_COLUMN),
/* harmony export */   "DELETEROW": () => (/* binding */ DELETEROW),
/* harmony export */   "DELETECOLUMN": () => (/* binding */ DELETECOLUMN),
/* harmony export */   "REMOVETABLE": () => (/* binding */ REMOVETABLE),
/* harmony export */   "TABLEHEADER": () => (/* binding */ TABLEHEADER),
/* harmony export */   "TABLE_VERTICAL_ALIGN": () => (/* binding */ TABLE_VERTICAL_ALIGN),
/* harmony export */   "TABLE_MERGE": () => (/* binding */ TABLE_MERGE),
/* harmony export */   "TABLE_VERTICAL_SPLIT": () => (/* binding */ TABLE_VERTICAL_SPLIT),
/* harmony export */   "TABLE_HORIZONTAL_SPLIT": () => (/* binding */ TABLE_HORIZONTAL_SPLIT),
/* harmony export */   "TABLE_MOVE": () => (/* binding */ TABLE_MOVE),
/* harmony export */   "ALIGNMENT_TYPE": () => (/* binding */ ALIGNMENT_TYPE),
/* harmony export */   "INDENT_TYPE": () => (/* binding */ INDENT_TYPE),
/* harmony export */   "DEFAULT_TAG": () => (/* binding */ DEFAULT_TAG),
/* harmony export */   "BLOCK_TAGS": () => (/* binding */ BLOCK_TAGS),
/* harmony export */   "IGNORE_BLOCK_TAGS": () => (/* binding */ IGNORE_BLOCK_TAGS),
/* harmony export */   "TABLE_BLOCK_TAGS": () => (/* binding */ TABLE_BLOCK_TAGS),
/* harmony export */   "SELECTION_TYPE": () => (/* binding */ SELECTION_TYPE),
/* harmony export */   "INSERTHTML_TYPE": () => (/* binding */ INSERTHTML_TYPE),
/* harmony export */   "INSERT_TEXT_TYPE": () => (/* binding */ INSERT_TEXT_TYPE),
/* harmony export */   "CLEAR_TYPE": () => (/* binding */ CLEAR_TYPE),
/* harmony export */   "CLASS_IMAGE_RIGHT": () => (/* binding */ CLASS_IMAGE_RIGHT),
/* harmony export */   "CLASS_IMAGE_LEFT": () => (/* binding */ CLASS_IMAGE_LEFT),
/* harmony export */   "CLASS_IMAGE_CENTER": () => (/* binding */ CLASS_IMAGE_CENTER),
/* harmony export */   "CLASS_IMAGE_BREAK": () => (/* binding */ CLASS_IMAGE_BREAK),
/* harmony export */   "CLASS_CAPTION": () => (/* binding */ CLASS_CAPTION),
/* harmony export */   "CLASS_RTE_CAPTION": () => (/* binding */ CLASS_RTE_CAPTION),
/* harmony export */   "CLASS_CAPTION_INLINE": () => (/* binding */ CLASS_CAPTION_INLINE),
/* harmony export */   "CLASS_IMAGE_INLINE": () => (/* binding */ CLASS_IMAGE_INLINE),
/* harmony export */   "Lists": () => (/* binding */ Lists),
/* harmony export */   "markerClassName": () => (/* binding */ markerClassName),
/* harmony export */   "DOMNode": () => (/* binding */ DOMNode),
/* harmony export */   "Alignments": () => (/* binding */ Alignments),
/* harmony export */   "Indents": () => (/* binding */ Indents),
/* harmony export */   "Formats": () => (/* binding */ Formats),
/* harmony export */   "LinkCommand": () => (/* binding */ LinkCommand),
/* harmony export */   "InsertMethods": () => (/* binding */ InsertMethods),
/* harmony export */   "InsertTextExec": () => (/* binding */ InsertTextExec),
/* harmony export */   "InsertHtmlExec": () => (/* binding */ InsertHtmlExec),
/* harmony export */   "InsertHtml": () => (/* binding */ InsertHtml),
/* harmony export */   "IsFormatted": () => (/* binding */ IsFormatted),
/* harmony export */   "MsWordPaste": () => (/* binding */ MsWordPaste),
/* harmony export */   "NodeCutter": () => (/* binding */ NodeCutter),
/* harmony export */   "ImageCommand": () => (/* binding */ ImageCommand),
/* harmony export */   "SelectionCommands": () => (/* binding */ SelectionCommands),
/* harmony export */   "SelectionBasedExec": () => (/* binding */ SelectionBasedExec),
/* harmony export */   "ClearFormatExec": () => (/* binding */ ClearFormatExec),
/* harmony export */   "UndoRedoManager": () => (/* binding */ UndoRedoManager),
/* harmony export */   "TableCommand": () => (/* binding */ TableCommand),
/* harmony export */   "statusCollection": () => (/* binding */ statusCollection),
/* harmony export */   "ToolbarStatus": () => (/* binding */ ToolbarStatus),
/* harmony export */   "NodeSelection": () => (/* binding */ NodeSelection),
/* harmony export */   "MarkdownParser": () => (/* binding */ MarkdownParser),
/* harmony export */   "LISTS_COMMAND": () => (/* binding */ LISTS_COMMAND),
/* harmony export */   "selectionCommand": () => (/* binding */ selectionCommand),
/* harmony export */   "LINK_COMMAND": () => (/* binding */ LINK_COMMAND),
/* harmony export */   "CLEAR_COMMAND": () => (/* binding */ CLEAR_COMMAND),
/* harmony export */   "MD_TABLE": () => (/* binding */ MD_TABLE),
/* harmony export */   "ClearFormat": () => (/* binding */ ClearFormat),
/* harmony export */   "MDLists": () => (/* binding */ MDLists),
/* harmony export */   "MDFormats": () => (/* binding */ MDFormats),
/* harmony export */   "MarkdownSelection": () => (/* binding */ MarkdownSelection),
/* harmony export */   "UndoRedoCommands": () => (/* binding */ UndoRedoCommands),
/* harmony export */   "MDSelectionFormats": () => (/* binding */ MDSelectionFormats),
/* harmony export */   "MDLink": () => (/* binding */ MDLink),
/* harmony export */   "MDTable": () => (/* binding */ MDTable),
/* harmony export */   "markdownFormatTags": () => (/* binding */ markdownFormatTags),
/* harmony export */   "markdownSelectionTags": () => (/* binding */ markdownSelectionTags),
/* harmony export */   "markdownListsTags": () => (/* binding */ markdownListsTags),
/* harmony export */   "htmlKeyConfig": () => (/* binding */ htmlKeyConfig),
/* harmony export */   "markdownKeyConfig": () => (/* binding */ markdownKeyConfig),
/* harmony export */   "pasteCleanupGroupingTags": () => (/* binding */ pasteCleanupGroupingTags),
/* harmony export */   "listConversionFilters": () => (/* binding */ listConversionFilters),
/* harmony export */   "selfClosingTags": () => (/* binding */ selfClosingTags),
/* harmony export */   "KEY_DOWN": () => (/* binding */ KEY_DOWN),
/* harmony export */   "ACTION": () => (/* binding */ ACTION),
/* harmony export */   "FORMAT_TYPE": () => (/* binding */ FORMAT_TYPE),
/* harmony export */   "KEY_DOWN_HANDLER": () => (/* binding */ KEY_DOWN_HANDLER),
/* harmony export */   "LIST_TYPE": () => (/* binding */ LIST_TYPE),
/* harmony export */   "KEY_UP_HANDLER": () => (/* binding */ KEY_UP_HANDLER),
/* harmony export */   "KEY_UP": () => (/* binding */ KEY_UP),
/* harmony export */   "MODEL_CHANGED_PLUGIN": () => (/* binding */ MODEL_CHANGED_PLUGIN),
/* harmony export */   "MODEL_CHANGED": () => (/* binding */ MODEL_CHANGED),
/* harmony export */   "MS_WORD_CLEANUP_PLUGIN": () => (/* binding */ MS_WORD_CLEANUP_PLUGIN),
/* harmony export */   "MS_WORD_CLEANUP": () => (/* binding */ MS_WORD_CLEANUP),
/* harmony export */   "ON_BEGIN": () => (/* binding */ ON_BEGIN),
/* harmony export */   "SPACE_ACTION": () => (/* binding */ SPACE_ACTION)
/* harmony export */ });
/* harmony import */ var _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @syncfusion/ej2-base */ 39232);
/* harmony import */ var _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @syncfusion/ej2-navigations */ 92664);
/* harmony import */ var _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @syncfusion/ej2-splitbuttons */ 87889);
/* harmony import */ var _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @syncfusion/ej2-popups */ 67417);
/* harmony import */ var _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @syncfusion/ej2-inputs */ 70052);
/* harmony import */ var _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @syncfusion/ej2-buttons */ 75760);
/* harmony import */ var _syncfusion_ej2_filemanager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @syncfusion/ej2-filemanager */ 95719);








/**
 * @hidden
 * @deprecated
 */
const created = 'create';
/**
 * @hidden
 * @deprecated
 */
const destroyed = 'destroy';
/**
 * @hidden
 * @deprecated
 */
const load = 'load';
/**
 * Specifies Rich Text Editor internal events
 */
/**
 * @hidden
 * @deprecated
 */
const initialLoad = 'initial-load';
/**
 * @hidden
 * @deprecated
 */
const contentChanged = 'content-changed';
/**
 * @hidden
 * @deprecated
 */
const initialEnd = 'initial-end';
/**
 * @hidden
 * @deprecated
 */
const iframeMouseDown = 'iframe-click';
/**
 * @hidden
 * @deprecated
 */
const destroy = 'destroy';
/**
 * @hidden
 * @deprecated
 */
const toolbarClick = 'toolbarClick';
/**
 * @hidden
 * @deprecated
 */
const toolbarRefresh = 'toolbar-refresh';
/**
 * @hidden
 * @deprecated
 */
const refreshBegin = 'refresh-begin';
/**
 * @hidden
 * @deprecated
 */
const toolbarUpdated = 'toolbar-updated';
/**
 * @hidden
 * @deprecated
 */
const bindOnEnd = 'bind-on-end';
/**
 * @hidden
 * @deprecated
 */
const renderColorPicker = 'render-color-picker';
/**
 * @hidden
 * @deprecated
 */
const htmlToolbarClick = 'html-toolbar-click';
/**
 * @hidden
 * @deprecated
 */
const markdownToolbarClick = 'markdown-toolbar-click';
/**
 * @hidden
 * @deprecated
 */
const destroyColorPicker = 'destroy-color-picker';
/**
 * @hidden
 * @deprecated
 */
const modelChanged = 'model-changed';
/**
 * @hidden
 * @deprecated
 */
const keyUp = 'keyUp';
/**
 * @hidden
 * @deprecated
 */
const keyDown = 'keyDown';
/**
 * @hidden
 * @deprecated
 */
const mouseUp = 'mouseUp';
/**
 * @hidden
 * @deprecated
 */
const toolbarCreated = 'toolbarCreated';
/**
 * @hidden
 * @deprecated
 */
const toolbarRenderComplete = 'toolbarRenderComplete';
/**
 * @hidden
 * @deprecated
 */
const enableFullScreen = 'enableFullScreen';
/**
 * @hidden
 * @deprecated
 */
const disableFullScreen = 'disableFullScreen';
/**
 * @hidden
 * @deprecated
 */
const dropDownSelect = 'dropDownSelect';
/**
 * @hidden
 * @deprecated
 */
const beforeDropDownItemRender = 'beforeDropDownItemRender';
/**
 * @hidden
 * @deprecated
 */
const execCommandCallBack = 'execCommandCallBack';
/**
 * @hidden
 * @deprecated
 */
const imageToolbarAction = 'image-toolbar-action';
/**
 * @hidden
 * @deprecated
 */
const linkToolbarAction = 'link-toolbar-action';
/**
 * @hidden
 * @deprecated
 */
const windowResize = 'resize';
/**
 * @hidden
 * @deprecated
 */
const resizeStart = 'resizeStart';
/**
 * @hidden
 * @deprecated
 */
const onResize = 'resizing';
/**
 * @hidden
 * @deprecated
 */
const resizeStop = 'resizeStop';
/**
 * @hidden
 * @deprecated
 */
const undo = 'undo';
/**
 * @hidden
 * @deprecated
 */
const redo = 'redo';
/**
 * @hidden
 * @deprecated
 */
const insertLink = 'insertLink';
/**
 * @hidden
 * @deprecated
 */
const unLink = 'unLink';
/**
 * @hidden
 * @deprecated
 */
const editLink = 'editLink';
/**
 * @hidden
 * @deprecated
 */
const openLink = 'openLink';
/**
 * @hidden
 * @deprecated
 */
const actionBegin = 'actionBegin';
/**
 * @hidden
 * @deprecated
 */
const actionComplete = 'actionComplete';
/**
 * @hidden
 * @deprecated
 */
const updatedToolbarStatus = 'updatedToolbarStatus';
/**
 * @hidden
 * @deprecated
 */
const actionSuccess = 'actionSuccess';
/**
 * @hidden
 * @deprecated
 */
const updateToolbarItem = 'updateToolbarItem';
/**
 * @hidden
 * @deprecated
 */
const insertImage = 'insertImage';
/**
 * @hidden
 * @deprecated
 */
const insertCompleted = 'insertCompleted';
/**
 * @hidden
 * @deprecated
 */
const imageLeft = 'justifyLeft';
/**
 * @hidden
 * @deprecated
 */
const imageRight = 'justifyRight';
/**
 * @hidden
 * @deprecated
 */
const imageCenter = 'justifyCenter';
/**
 * @hidden
 * @deprecated
 */
const imageBreak = 'break';
/**
 * @hidden
 * @deprecated
 */
const imageInline = 'inline';
/**
 * @hidden
 * @deprecated
 */
const imageLink = 'insertImgLink';
/**
 * @hidden
 * @deprecated
 */
const imageAlt = 'imgAltText';
/**
 * @hidden
 * @deprecated
 */
const imageDelete = 'delete';
/**
 * @hidden
 * @deprecated
 */
const imageCaption = 'caption';
/**
 * @hidden
 * @deprecated
 */
const imageSize = 'imageSize';
/**
 * @hidden
 * @deprecated
 */
const sourceCode = 'sourceCode';
/**
 * @hidden
 * @deprecated
 */
const updateSource = 'updateSource';
/**
 * @hidden
 * @deprecated
 */
const toolbarOpen = 'toolbarOpen';
/**
 * @hidden
 * @deprecated
 */
const beforeDropDownOpen = 'beforeDropDownOpen';
/**
 * @hidden
 * @deprecated
 */
const selectionSave = 'selection-save';
/**
 * @hidden
 * @deprecated
 */
const selectionRestore = 'selection-restore';
/**
 * @hidden
 * @deprecated
 */
const expandPopupClick = 'expandPopupClick';
/**
 * @hidden
 * @deprecated
 */
const count = 'count';
/**
 * @hidden
 * @deprecated
 */
const contentFocus = 'contentFocus';
/**
 * @hidden
 * @deprecated
 */
const contentBlur = 'contentBlur';
/**
 * @hidden
 * @deprecated
 */
const mouseDown = 'mouseDown';
/**
 * @hidden
 * @deprecated
 */
const sourceCodeMouseDown = 'sourceCodeMouseDown';
/**
 * @hidden
 * @deprecated
 */
const editAreaClick = 'editAreaClick';
/**
 * @hidden
 * @deprecated
 */
const scroll = 'scroll';
/**
 * @hidden
 * @deprecated
 */
const contentscroll = 'contentscroll';
/**
 * @hidden
 * @deprecated
 */
const colorPickerChanged = 'colorPickerChanged';
/**
 * @hidden
 * @deprecated
 */
const tableColorPickerChanged = 'tableColorPickerChanged';
/**
 * @hidden
 * @deprecated
 */
const focusChange = 'focusChange';
/**
 * @hidden
 * @deprecated
 */
const selectAll$1 = 'selectAll';
/**
 * @hidden
 * @deprecated
 */
const selectRange = 'selectRange';
/**
 * @hidden
 * @deprecated
 */
const getSelectedHtml = 'getSelectedHtml';
/**
 * @hidden
 * @deprecated
 */
const renderInlineToolbar = 'renderInlineToolbar';
/**
 * @hidden
 * @deprecated
 */
const paste = 'paste-content';
/**
 * @hidden
 * @deprecated
 */
const imgModule = 'imageModule';
/**
 * @hidden
 * @deprecated
 */
const rtlMode = 'rtl-mode';
/**
 * @hidden
 * @deprecated
 */
const createTable = 'createTable';
/**
 * @hidden
 * @deprecated
 */
const docClick = 'docClick';
/**
 * @hidden
 * @deprecated
 */
const tableToolbarAction = 'table-toolbar-action';
/**
 * @hidden
 * @deprecated
 */
const checkUndo = 'checkUndoStack';
/**
 * @hidden
 * @deprecated
 */
const readOnlyMode = 'readOnlyMode';
/**
 * @hidden
 * @deprecated
 */
const pasteClean = 'pasteClean';
/**
 * @hidden
 * @deprecated
 */
const enterHandler = 'enterHandler';
/**
 * @hidden
 * @deprecated
 */
const beforeDialogOpen = 'beforeDialogOpen';
/**
 * @hidden
 * @deprecated
 */
const clearDialogObj = 'clearDialogObj';
/**
 * @hidden
 * @deprecated
 */
const dialogOpen = 'dialogOpen';
/**
 * @hidden
 * @deprecated
 */
const beforeDialogClose = 'beforeDialogClose';
/**
 * @hidden
 * @deprecated
 */
const dialogClose = 'dialogClose';
/**
 * @hidden
 * @deprecated
 */
const beforeQuickToolbarOpen = 'beforeQuickToolbarOpen';
/**
 * @hidden
 * @deprecated
 */
const quickToolbarOpen = 'quickToolbarOpen';
/**
 * @hidden
 * @deprecated
 */
const quickToolbarClose = 'quickToolbarClose';
/**
 * @hidden
 * @deprecated
 */
const popupHide = 'popupHide';
/**
 * @hidden
 * @deprecated
 */
const imageSelected = 'imageSelected';
/**
 * @hidden
 * @deprecated
 */
const imageUploading = 'imageUploading';
/**
 * @hidden
 * @deprecated
 */
const imageUploadSuccess = 'imageUploadSuccess';
/**
 * @hidden
 * @deprecated
 */
const imageUploadFailed = 'imageUploadFailed';
/**
 * @hidden
 * @deprecated
 */
const imageRemoving = 'imageRemoving';
/**
 * @hidden
 * @deprecated
 */
const afterImageDelete = 'afterImageDelete';
/**
 * @hidden
 * @deprecated
 */
const drop = 'drop';
/**
 * @hidden
 * @deprecated
 */
const xhtmlValidation = 'xhtmlValidation';
/**
 * @hidden
 * @deprecated
 */
const beforeImageUpload = 'beforeImageUpload';
/**
 * @hidden
 * @deprecated
 */
const resizeInitialized = 'resizeInitialized';
/**
 * @hidden
 * @deprecated
 */
const renderFileManager = 'renderFileManager';
/**
 * @hidden
 * @deprecated
 */
const beforeImageDrop = 'beforeImageDrop';
/**
 * @hidden
 * @deprecated
 */
const dynamicModule = 'dynamicModule';
/**
 * @hidden
 * @deprecated
 */
const beforePasteCleanup = 'beforePasteCleanup';
/**
 * @hidden
 * @deprecated
 */
const afterPasteCleanup = 'afterPasteCleanup';
/**
 * @hidden
 * @deprecated
 */
const updateTbItemsStatus = 'updateTbItemsStatus';
/**
 * @hidden
 * @deprecated
 */
const showLinkDialog = 'showLinkDialog';
/**
 * @hidden
 * @deprecated
 */
const closeLinkDialog = 'closeLinkDialog';
/**
 * @hidden
 * @deprecated
 */
const showImageDialog = 'showImageDialog';
/**
 * @hidden
 * @deprecated
 */
const closeImageDialog = 'closeImageDialog';
/**
 * @hidden
 * @deprecated
 */
const showTableDialog = 'showTableDialog';
/**
 * @hidden
 * @deprecated
 */
const closeTableDialog = 'closeTableDialog';

/**
 * Rich Text Editor classes defined here.
 */
/**
 * @hidden
 * @deprecated
 */
const CLS_RTE = 'e-richtexteditor';
/**
 * @hidden
 * @deprecated
 */
const CLS_RTL = 'e-rtl';
/**
 * @hidden
 * @deprecated
 */
const CLS_CONTENT = 'e-content';
/**
 * @hidden
 * @deprecated
 */
const CLS_DISABLED = 'e-disabled';
/**
 * @hidden
 * @deprecated
 */
const CLS_SCRIPT_SHEET = 'rte-iframe-script-sheet';
/**
 * @hidden
 * @deprecated
 */
const CLS_STYLE_SHEET = 'rte-iframe-style-sheet';
/**
 * @hidden
 * @deprecated
 */
const CLS_TOOLBAR = 'e-rte-toolbar';
/**
 * @hidden
 * @deprecated
 */
const CLS_TB_FIXED = 'e-rte-tb-fixed';
/**
 * @hidden
 * @deprecated
 */
const CLS_TB_FLOAT = 'e-rte-tb-float';
/**
 * @hidden
 * @deprecated
 */
const CLS_TB_ABS_FLOAT = 'e-rte-tb-abs-float';
/**
 * @hidden
 * @deprecated
 */
const CLS_INLINE = 'e-rte-inline';
/**
 * @hidden
 * @deprecated
 */
const CLS_TB_INLINE = 'e-rte-tb-inline';
/**
 * @hidden
 * @deprecated
 */
const CLS_RTE_EXPAND_TB = 'e-rte-tb-expand';
/**
 * @hidden
 * @deprecated
 */
const CLS_FULL_SCREEN = 'e-rte-full-screen';
/**
 * @hidden
 * @deprecated
 */
const CLS_QUICK_TB = 'e-rte-quick-toolbar';
/**
 * @hidden
 * @deprecated
 */
const CLS_POP = 'e-rte-pop';
/**
 * @hidden
 * @deprecated
 */
const CLS_TB_STATIC = 'e-tb-static';
/**
 * @hidden
 * @deprecated
 */
const CLS_QUICK_POP = 'e-rte-quick-popup';
/**
 * @hidden
 * @deprecated
 */
const CLS_QUICK_DROPDOWN = 'e-quick-dropdown';
/**
 * @hidden
 * @deprecated
 */
const CLS_IMAGE_POP = 'e-rte-image-popup';
/**
 * @hidden
 * @deprecated
 */
const CLS_INLINE_POP = 'e-rte-inline-popup';
/**
 * @hidden
 * @deprecated
 */
const CLS_INLINE_DROPDOWN = 'e-rte-inline-dropdown';
/**
 * @hidden
 * @deprecated
 */
const CLS_DROPDOWN_POPUP = 'e-rte-dropdown-popup';
/**
 * @hidden
 * @deprecated
 */
const CLS_DROPDOWN_ICONS = 'e-rte-dropdown-icons';
/**
 * @hidden
 * @deprecated
 */
const CLS_DROPDOWN_ITEMS = 'e-rte-dropdown-items';
/**
 * @hidden
 * @deprecated
 */
const CLS_DROPDOWN_BTN = 'e-rte-dropdown-btn';
/**
 * @hidden
 * @deprecated
 */
const CLS_RTE_CONTENT = 'e-rte-content';
/**
 * @hidden
 * @deprecated
 */
const CLS_TB_ITEM = 'e-toolbar-item';
/**
 * @hidden
 * @deprecated
 */
const CLS_TB_EXTENDED = 'e-toolbar-extended';
/**
 * @hidden
 * @deprecated
 */
const CLS_TB_WRAP = 'e-toolbar-wrapper';
/**
 * @hidden
 * @deprecated
 */
const CLS_POPUP = 'e-popup';
/**
 * @hidden
 * @deprecated
 */
const CLS_SEPARATOR = 'e-separator';
/**
 * @hidden
 * @deprecated
 */
const CLS_MINIMIZE = 'e-minimize';
/**
 * @hidden
 * @deprecated
 */
const CLS_MAXIMIZE = 'e-maximize';
/**
 * @hidden
 * @deprecated
 */
const CLS_BACK = 'e-back';
/**
 * @hidden
 * @deprecated
 */
const CLS_SHOW = 'e-show';
/**
 * @hidden
 * @deprecated
 */
const CLS_HIDE = 'e-hide';
/**
 * @hidden
 * @deprecated
 */
const CLS_VISIBLE = 'e-visible';
/**
 * @hidden
 * @deprecated
 */
const CLS_FOCUS = 'e-focused';
/**
 * @hidden
 * @deprecated
 */
const CLS_RM_WHITE_SPACE = 'e-remove-white-space';
/**
 * @hidden
 * @deprecated
 */
const CLS_IMGRIGHT = 'e-imgright';
/**
 * @hidden
 * @deprecated
 */
const CLS_IMGLEFT = 'e-imgleft';
/**
 * @hidden
 * @deprecated
 */
const CLS_IMGCENTER = 'e-imgcenter';
/**
 * @hidden
 * @deprecated
 */
const CLS_IMGBREAK = 'e-imgbreak';
/**
 * @hidden
 * @deprecated
 */
const CLS_CAPTION = 'e-img-caption';
/**
 * @hidden
 * @deprecated
 */
const CLS_RTE_CAPTION = 'e-rte-img-caption';
/**
 * @hidden
 * @deprecated
 */
const CLS_CAPINLINE = 'e-caption-inline';
/**
 * @hidden
 * @deprecated
 */
const CLS_IMGINLINE = 'e-imginline';
/**
 * @hidden
 * @deprecated
 */
const CLS_COUNT = 'e-rte-character-count';
/**
 * @hidden
 * @deprecated
 */
const CLS_WARNING = 'e-warning';
/**
 * @hidden
 * @deprecated
 */
const CLS_ERROR = 'e-error';
/**
 * @hidden
 * @deprecated
 */
const CLS_ICONS = 'e-icons';
/**
 * @hidden
 * @deprecated
 */
const CLS_ACTIVE = 'e-active';
/**
 * @hidden
 * @deprecated
 */
const CLS_EXPAND_OPEN = 'e-expand-open';
/**
 * @hidden
 * @deprecated
 */
const CLS_RTE_ELEMENTS = 'e-rte-elements';
/**
 * @hidden
 * @deprecated
 */
const CLS_TB_BTN = 'e-tbar-btn';
/**
 * @hidden
 * @deprecated
 */
const CLS_HR_SEPARATOR = 'e-rte-horizontal-separator';
/**
 * @hidden
 * @deprecated
 */
const CLS_TB_IOS_FIX = 'e-tbar-ios-fixed';
/**
 * @hidden
 * @deprecated
 */
const CLS_LIST_PRIMARY_CONTENT = 'e-rte-list-primary-content';
/**
 * @hidden
 * @deprecated
 */
const CLS_NUMBERFORMATLIST_TB_BTN = 'e-rte-numberformatlist-dropdown';
/**
 * @hidden
 * @deprecated
 */
const CLS_BULLETFORMATLIST_TB_BTN = 'e-rte-bulletformatlist-dropdown';
/**
 * @hidden
 * @deprecated
 */
const CLS_FORMATS_TB_BTN = 'e-formats-tbar-btn';
/**
 * @hidden
 * @deprecated
 */
const CLS_FONT_NAME_TB_BTN = 'e-font-name-tbar-btn';
/**
 * @hidden
 * @deprecated
 */
const CLS_FONT_SIZE_TB_BTN = 'e-font-size-tbar-btn';
/**
 * @hidden
 * @deprecated
 */
const CLS_FONT_COLOR_TARGET = 'e-rte-fontcolor-element';
/**
 * @hidden
 * @deprecated
 */
const CLS_BACKGROUND_COLOR_TARGET = 'e-rte-backgroundcolor-element';
/**
 * @hidden
 * @deprecated
 */
const CLS_COLOR_CONTENT = 'e-rte-color-content';
/**
 * @hidden
 * @deprecated
 */
const CLS_FONT_COLOR_DROPDOWN = 'e-rte-fontcolor-dropdown';
/**
 * @hidden
 * @deprecated
 */
const CLS_BACKGROUND_COLOR_DROPDOWN = 'e-rte-backgroundcolor-dropdown';
/**
 * @hidden
 * @deprecated
 */
const CLS_COLOR_PALETTE = 'e-rte-square-palette';
/**
 * @hidden
 * @deprecated
 */
const CLS_FONT_COLOR_PICKER = 'e-rte-fontcolor-colorpicker';
/**
 * @hidden
 * @deprecated
 */
const CLS_BACKGROUND_COLOR_PICKER = 'e-rte-backgroundcolor-colorpicker';
/**
 * @hidden
 * @deprecated
 */
const CLS_RTE_READONLY = 'e-rte-readonly';
/**
 * @hidden
 * @deprecated
 */
const CLS_TABLE_SEL = 'e-cell-select';
/**
 * @hidden
 * @deprecated
 */
const CLS_TB_DASH_BOR = 'e-dashed-border';
/**
 * @hidden
 * @deprecated
 */
const CLS_TB_ALT_BOR = 'e-alternate-border';
/**
 * @hidden
 * @deprecated
 */
const CLS_TB_COL_RES = 'e-column-resize';
/**
 * @hidden
 * @deprecated
 */
const CLS_TB_ROW_RES = 'e-row-resize';
/**
 * @hidden
 * @deprecated
 */
const CLS_TB_BOX_RES = 'e-table-box';
/**
 * @hidden
 * @deprecated
 */
const CLS_RTE_HIDDEN = 'e-rte-hidden';
/**
 * @hidden
 * @deprecated
 */
const CLS_RTE_PASTE_KEEP_FORMAT = 'e-rte-keepformat';
/**
 * @hidden
 * @deprecated
 */
const CLS_RTE_PASTE_REMOVE_FORMAT = 'e-rte-removeformat';
/**
 * @hidden
 * @deprecated
 */
const CLS_RTE_PASTE_PLAIN_FORMAT = 'e-rte-plainformat';
/**
 * @hidden
 * @deprecated
 */
const CLS_RTE_PASTE_OK = 'e-rte-pasteok';
/**
 * @hidden
 * @deprecated
 */
const CLS_RTE_PASTE_CANCEL = 'e-rte-pastecancel';
/**
 * @hidden
 * @deprecated
 */
const CLS_RTE_DIALOG_MIN_HEIGHT = 'e-rte-dialog-minheight';
/**
 * @hidden
 * @deprecated
 */
const CLS_RTE_RES_HANDLE = 'e-resize-handle';
/**
 * @hidden
 * @deprecated
 */
const CLS_RTE_RES_EAST = 'e-south-east';
/**
 * @hidden
 * @deprecated
 */
const CLS_RTE_IMAGE = 'e-rte-image';
/**
 * @hidden
 * @deprecated
 */
const CLS_RESIZE = 'e-resize';
/**
 * @hidden
 * @deprecated
 */
const CLS_IMG_FOCUS = 'e-img-focus';
/**
 * @hidden
 * @deprecated
 */
const CLS_RTE_DRAG_IMAGE = 'e-rte-drag-image';
/**
 * @hidden
 * @deprecated
 */
const CLS_RTE_UPLOAD_POPUP = 'e-rte-upload-popup';
/**
 * @hidden
 * @deprecated
 */
const CLS_POPUP_OPEN = 'e-popup-open';
/**
 * @hidden
 * @deprecated
 */
const CLS_IMG_RESIZE = 'e-img-resize';
/**
 * @hidden
 * @deprecated
 */
const CLS_DROPAREA = 'e-droparea';
/**
 * @hidden
 * @deprecated
 */
const CLS_IMG_INNER = 'e-img-inner';
/**
 * @hidden
 * @deprecated
 */
const CLS_UPLOAD_FILES = 'e-upload-files';
/**
 * @hidden
 * @deprecated
 */
const CLS_RTE_DIALOG_UPLOAD = 'e-rte-dialog-upload';
/**
 * @hidden
 * @deprecated
 */
const CLS_RTE_RES_CNT = 'e-rte-resize';
/**
 * @hidden
 * @deprecated
 */
const CLS_CUSTOM_TILE = 'e-custom-tile';
/**
 * @hidden
 * @deprecated
 */
const CLS_NOCOLOR_ITEM = 'e-nocolor-item';
/**
 * @hidden
 * @deprecated
 */
const CLS_TABLE = 'e-rte-table';
/**
 * @hidden
 * @deprecated
 */
const CLS_TABLE_BORDER = 'e-rte-table-border';
/**
 * @hidden
 * @deprecated
 */
const CLS_RTE_TABLE_RESIZE = 'e-rte-table-resize';
/**
 * @hidden
 * @deprecated
 */
const CLS_RTE_FIXED_TB_EXPAND = 'e-rte-fixed-tb-expand';
/**
 * @hidden
 * @deprecated
 */
const CLS_RTE_TB_ENABLED = 'e-rte-toolbar-enabled';

/**
 * Defines types of Render
 *
 * @hidden
 * @deprecated
 */
var RenderType;
(function (RenderType) {
    /* eslint-disable */
    /** Defines RenderType as Toolbar */
    RenderType[RenderType["Toolbar"] = 0] = "Toolbar";
    /** Defines RenderType as Content */
    RenderType[RenderType["Content"] = 1] = "Content";
    /** Defines RenderType as Popup */
    RenderType[RenderType["Popup"] = 2] = "Popup";
    /** Defines RenderType as LinkToolbar */
    RenderType[RenderType["LinkToolbar"] = 3] = "LinkToolbar";
    /** Defines RenderType as TextToolbar */
    RenderType[RenderType["TextToolbar"] = 4] = "TextToolbar";
    /** Defines RenderType as ImageToolbar */
    RenderType[RenderType["ImageToolbar"] = 5] = "ImageToolbar";
    /** Defines RenderType as InlineToolbar */
    RenderType[RenderType["InlineToolbar"] = 6] = "InlineToolbar";
    /** Defines RenderType as TableToolbar */
    RenderType[RenderType["TableToolbar"] = 7] = "TableToolbar";
    /* eslint-enable */
})(RenderType || (RenderType = {}));
/**
 * Defines types to be used as Toolbar.
 */
var ToolbarType;
(function (ToolbarType) {
    /* eslint-disable */
    /** Defines ToolbarType as Standard */
    ToolbarType["Expand"] = "Expand";
    /** Defines ToolbarType as MultiRow */
    ToolbarType["MultiRow"] = "MultiRow";
    /** Defines ToolbarType as Scrollable */
    ToolbarType["Scrollable"] = "Scrollable";
    /* eslint-enable */
})(ToolbarType || (ToolbarType = {}));
/**
 * Defines the type of dialog, which open or close in the Rich Text Editor.
 */
var DialogType;
(function (DialogType) {
    /* eslint-disable */
    /** Defines ToolbarType as Standard */
    DialogType["InsertLink"] = "InsertLink";
    /** Defines ToolbarType as MultiRow */
    DialogType["InsertImage"] = "InsertImage";
    /** Defines ToolbarType as Scrollable */
    DialogType["InsertTable"] = "InsertTable";
    /* eslint-enable */
})(DialogType || (DialogType = {}));

/* eslint-disable */
/**
 * Export items model
 */
let templateItems = ['alignments', 'formats', 'fontname', 'fontsize', 'fontcolor', 'backgroundcolor', 'align', 'display', 'tablerows', 'tablecolumns', 'tablecell', 'tablecellhorizontalalign', 'tablecellverticalalign', 'styles', 'numberformatlist', 'bulletformatlist'];
let tools = {
    'alignments': {
        'id': 'Alignments',
        'icon': 'e-alignments',
        'tooltip': 'Alignments',
        'command': 'Alignments',
        'subCommand': 'Alignments'
    },
    'justifyleft': {
        'id': 'JustifyLeft',
        'icon': 'e-justify-left',
        'tooltip': 'JustifyLeft',
        'command': 'Alignments',
        'subCommand': 'JustifyLeft'
    },
    'justifycenter': {
        'id': 'JustifyCenter',
        'icon': 'e-justify-center',
        'tooltip': 'JustifyCenter',
        'command': 'Alignments',
        'subCommand': 'JustifyCenter'
    },
    'justifyright': {
        'id': 'JustifyRight',
        'icon': 'e-justify-right',
        'tooltip': 'JustifyRight',
        'command': 'Alignments',
        'subCommand': 'JustifyRight'
    },
    'justifyfull': {
        'id': 'JustifyFull',
        'icon': 'e-justify-full',
        'tooltip': 'JustifyFull',
        'command': 'Alignments',
        'subCommand': 'JustifyFull'
    },
    'fontname': {
        'id': 'FontName',
        'icon': 'e-font-name',
        'tooltip': 'Font Name',
        'command': 'Font',
        'subCommand': 'FontName'
    },
    'fontsize': {
        'id': 'FontSize',
        'icon': 'e-font-size',
        'tooltip': 'Font Size',
        'command': 'Font',
        'subCommand': 'FontSize'
    },
    'fontcolor': {
        'id': 'FontColor',
        'icon': 'e-font-color',
        'tooltip': 'Font Color',
        'command': 'Font',
        'subCommand': 'FontColor',
        'value': '#ff0000ff'
    },
    'backgroundcolor': {
        'id': 'BackgroundColor',
        'icon': 'e-background-color',
        'tooltip': 'Background Color',
        'command': 'Font',
        'subCommand': 'BackgroundColor',
        'value': '#ffff00ff'
    },
    'bold': {
        'id': 'Bold',
        'icon': 'e-bold',
        'tooltip': 'Bold',
        'command': 'Style',
        'subCommand': 'Bold'
    },
    'italic': {
        'id': 'Italic',
        'icon': 'e-italic',
        'tooltip': 'Italic',
        'command': 'Style',
        'subCommand': 'Italic'
    },
    'underline': {
        'id': 'Underline',
        'icon': 'e-underline',
        'tooltip': 'Underline',
        'command': 'Style',
        'subCommand': 'Underline'
    },
    'strikethrough': {
        'id': 'StrikeThrough',
        'icon': 'e-strike-through',
        'tooltip': 'StrikeThrough',
        'command': 'Style',
        'subCommand': 'StrikeThrough'
    },
    'clearformat': {
        'id': 'ClearFormat',
        'icon': 'e-clear-format',
        'tooltip': 'Clear Format',
        'command': 'Clear',
        'subCommand': 'ClearFormat'
    },
    'clearall': {
        'id': 'ClearAll',
        'icon': 'e-clear-all',
        'tooltip': 'Clear All',
        'command': 'Clear',
        'subCommand': 'ClearAll'
    },
    'cut': {
        'id': 'Cut',
        'icon': 'e-cut',
        'tooltip': 'Cut',
        'command': 'ClipBoard',
        'subCommand': 'Cut'
    },
    'copy': {
        'id': 'Copy',
        'icon': 'e-copy',
        'tooltip': 'Copy',
        'command': 'ClipBoard',
        'subCommand': 'Copy'
    },
    'paste': {
        'id': 'Paste',
        'icon': 'e-paste',
        'tooltip': 'Paste',
        'command': 'ClipBoard',
        'subCommand': 'Paste'
    },
    'unorderedlist': {
        'id': 'UnorderedList',
        'icon': 'e-unorder-list',
        'tooltip': 'Bulleted List',
        'command': 'Lists',
        'subCommand': 'UL'
    },
    'orderedlist': {
        'id': 'OrderedList',
        'icon': 'e-order-list',
        'tooltip': 'Numbered List',
        'command': 'Lists',
        'subCommand': 'OL'
    },
    'numberformatlist': {
        'id': 'NumberFormatList',
        'icon': 'e-order-list',
        'tooltip': 'Number Format List',
        'command': 'NumberFormatList',
        'subCommand': 'NumberFormatList'
    },
    'bulletformatlist': {
        'id': 'BulletFormatList',
        'icon': 'e-unorder-list',
        'tooltip': 'Bullet Format List',
        'command': 'BulletFormatList',
        'subCommand': 'BulletFormatList'
    },
    'indent': {
        'id': 'Indent',
        'icon': 'e-indent',
        'tooltip': 'Increase Indent',
        'command': 'Indents',
        'subCommand': 'Indent'
    },
    'outdent': {
        'id': 'Outdent',
        'icon': 'e-outdent',
        'tooltip': 'Decrease Indent',
        'command': 'Indents',
        'subCommand': 'Outdent'
    },
    'undo': {
        'id': 'Undo',
        'icon': 'e-undo',
        'tooltip': 'Undo',
        'command': 'Actions',
        'subCommand': 'Undo'
    },
    'redo': {
        'id': 'Redo',
        'icon': 'e-redo',
        'tooltip': 'Redo',
        'command': 'Actions',
        'subCommand': 'Redo'
    },
    'superscript': {
        'id': 'SuperScript',
        'icon': 'e-super-script',
        'tooltip': 'Superscript',
        'command': 'Effects',
        'subCommand': 'SuperScript'
    },
    'subscript': {
        'id': 'SubScript',
        'icon': 'e-sub-script',
        'tooltip': 'Subscript',
        'command': 'Effects',
        'subCommand': 'SubScript'
    },
    'createlink': {
        'id': 'CreateLink',
        'icon': 'e-create-link',
        'tooltip': 'Insert Hyperlink',
        'command': 'Links',
        'subCommand': 'CreateLink'
    },
    'openlink': {
        'id': 'OpenLink',
        'icon': 'e-open-link',
        'tooltip': 'Open Link',
        'command': 'Links',
        'subCommand': 'OpenLink'
    },
    'editlink': {
        'id': 'EditLink',
        'icon': 'e-edit-link',
        'tooltip': 'Edit Link',
        'command': 'Links',
        'subCommand': 'EditLink'
    },
    'removelink': {
        'id': 'RemoveLink',
        'icon': 'e-remove-link',
        'tooltip': 'Remove Link',
        'command': 'Links',
        'subCommand': 'RemoveLink'
    },
    'image': {
        'id': 'Image',
        'icon': 'e-image',
        'tooltip': 'Insert Image',
        'command': 'Images',
        'subCommand': 'Image'
    },
    'filemanager': {
        'id': 'FileManager',
        'icon': 'e-rte-file-manager',
        'tooltip': 'File Manager',
        'command': 'Files',
        'subCommand': 'File'
    },
    'createtable': {
        'id': 'CreateTable',
        'icon': 'e-create-table',
        'tooltip': 'Create Table',
        'command': 'Table',
        'subCommand': 'CreateTable'
    },
    'removetable': {
        'id': 'removeTable',
        'icon': 'e-remove-table',
        'tooltip': 'Remove Table',
        'command': 'removeTable',
        'subCommand': 'removeTable'
    },
    'replace': {
        'id': 'Replace',
        'icon': 'e-replace',
        'tooltip': 'Replace',
        'command': 'Images',
        'subCommand': 'Replace'
    },
    'align': {
        'id': 'Align',
        'icon': 'e-align',
        'tooltip': 'Align',
        'command': 'Images',
        'subCommand': 'Align'
    },
    'caption': {
        'id': 'Caption',
        'icon': 'e-caption',
        'tooltip': 'Image Caption',
        'command': 'Images',
        'subCommand': 'Caption'
    },
    'remove': {
        'id': 'Remove',
        'icon': 'e-remove',
        'tooltip': 'Remove',
        'command': 'Images',
        'subCommand': 'Remove'
    },
    'openimagelink': {
        'id': 'OpenImageLink',
        'icon': 'e-open-link',
        'tooltip': 'Open Link',
        'command': 'Images',
        'subCommand': 'OpenImageLink'
    },
    'editimagelink': {
        'id': 'EditImageLink',
        'icon': 'e-edit-link',
        'tooltip': 'Edit Link',
        'command': 'Images',
        'subCommand': 'EditImageLink'
    },
    'removeimagelink': {
        'id': 'RemoveImageLink',
        'icon': 'e-remove-link',
        'tooltip': 'Remove Link',
        'command': 'Images',
        'subCommand': 'RemoveImageLink'
    },
    'insertlink': {
        'id': 'InsertLink',
        'icon': 'e-insert-link',
        'tooltip': 'Insert Link',
        'command': 'Images',
        'subCommand': 'InsertLink'
    },
    'display': {
        'id': 'Display',
        'icon': 'e-display',
        'tooltip': 'Display',
        'command': 'Images',
        'subCommand': 'Display'
    },
    'alttext': {
        'id': 'AltText',
        'icon': 'e-alt-text',
        'tooltip': 'Alternative Text',
        'command': 'Images',
        'subCommand': 'AltText'
    },
    'dimension': {
        'id': 'Dimension',
        'icon': 'e-img-dimension',
        'tooltip': 'Change Size',
        'command': 'Images',
        'subCommand': 'Dimension'
    },
    'fullscreen': {
        'id': 'Maximize',
        'icon': 'e-maximize',
        'tooltip': 'Maximize',
        'command': 'View',
        'subCommand': 'Maximize'
    },
    'maximize': {
        'id': 'Maximize',
        'icon': 'e-maximize',
        'tooltip': 'Maximize',
        'command': 'FullScreen',
        'subCommand': 'Maximize'
    },
    'minimize': {
        'id': 'Minimize',
        'icon': 'e-minimize',
        'tooltip': 'Minimize',
        'command': 'FullScreen',
        'subCommand': 'Minimize'
    },
    'lowercase': {
        'id': 'LowerCase',
        'icon': 'e-lower-case',
        'tooltip': 'Lower Case',
        'command': 'Casing',
        'subCommand': 'LowerCase'
    },
    'uppercase': {
        'id': 'UpperCase',
        'icon': 'e-upper-case',
        'tooltip': 'Upper Case',
        'command': 'Casing',
        'subCommand': 'UpperCase'
    },
    'print': {
        'id': 'Print',
        'icon': 'e-print',
        'tooltip': 'Print',
        'command': 'Print',
        'subCommand': 'Print'
    },
    'formats': {
        'id': 'Formats',
        'icon': 'e-formats',
        'tooltip': 'Formats',
        'command': 'Formats',
        'subCommand': 'Formats'
    },
    'sourcecode': {
        'id': 'SourceCode',
        'icon': 'e-source-code',
        'tooltip': 'Source Code',
        'command': 'SourceCode',
        'subCommand': 'SourceCode'
    },
    'preview': {
        'id': 'Preview',
        'icon': 'e-preview',
        'tooltip': 'Preview',
        'command': 'Preview',
        'subCommand': 'Preview'
    },
    'viewside': {
        'id': 'ViewSide',
        'icon': 'e-view-side',
        'tooltip': 'ViewSide',
        'command': 'ViewSide',
        'subCommand': 'ViewSide'
    },
    'insertcode': {
        'id': 'InsertCode',
        'icon': 'e-insert-code',
        'tooltip': 'Insert Code',
        'command': 'Formats',
        'subCommand': 'Pre'
    },
    'tableheader': {
        'id': 'TableHeader',
        'icon': 'e-table-header',
        'tooltip': 'Table Header',
        'command': 'Table',
        'subCommand': 'TableHeader'
    },
    'tableremove': {
        'id': 'TableRemove',
        'icon': 'e-table-remove',
        'tooltip': 'Table Remove',
        'command': 'Table',
        'subCommand': 'TableRemove'
    },
    'tablerows': {
        'id': 'TableRows',
        'icon': 'e-table-rows',
        'tooltip': 'Table Rows',
        'command': 'Table',
        'subCommand': 'TableRows'
    },
    'tablecolumns': {
        'id': 'TableColumns',
        'icon': 'e-table-columns',
        'tooltip': 'Table Columns',
        'command': 'Table',
        'subCommand': 'TableColumns'
    },
    'tablecell': {
        'id': 'TableCell',
        'icon': 'e-table-cell',
        'tooltip': 'Table Cell',
        'command': 'Table',
        'subCommand': 'TableCell'
    },
    'tablecellbackground': {
        'id': 'TableCellBackground',
        'icon': 'e-table-cell-background',
        'tooltip': 'Table Cell Background',
        'command': 'Table',
        'subCommand': 'TableCellBackground'
    },
    'tablecellhorizontalalign': {
        'id': 'TableCellHorizontalAlign',
        'icon': 'e-table-cell-horizontalAlign',
        'tooltip': 'Table Cell HorizontalAlign',
        'command': 'Table',
        'subCommand': 'TableCellHorizontalAlign'
    },
    'tablecellverticalalign': {
        'id': 'TableCellVerticalAlign',
        'icon': 'e-table-cell-verticalAlign',
        'tooltip': 'Table Cell VerticalAlign',
        'command': 'Table',
        'subCommand': 'TableCellVerticalAlign'
    },
    'tableeditproperties': {
        'id': 'TableEditProperties',
        'icon': 'e-table-edit-properties',
        'tooltip': 'Table Edit Properties',
        'command': 'Table',
        'subCommand': 'TableEditProperties'
    },
    'styles': {
        'id': 'Styles',
        'icon': 'e-table-styles',
        'tooltip': 'Styles',
        'command': 'Table',
        'subCommand': 'Styles'
    }
};
let alignmentLocale = [
    { locale: 'alignmentsDropDownLeft', value: 'JustifyLeft' },
    { locale: 'alignmentsDropDownCenter', value: 'JustifyCenter' },
    { locale: 'alignmentsDropDownRight', value: 'JustifyRight' },
    { locale: 'alignmentsDropDownJustify', value: 'JustifyFull' }
];
let alignmentItems = [
    { iconCss: 'e-icons e-justify-left', text: 'Align Left', command: 'Alignments', subCommand: 'JustifyLeft' },
    { iconCss: 'e-icons e-justify-center', text: 'Align Center', command: 'Alignments', subCommand: 'JustifyCenter' },
    { iconCss: 'e-icons e-justify-right', text: 'Align Right', command: 'Alignments', subCommand: 'JustifyRight' },
    { iconCss: 'e-icons e-justify-full', text: 'Align Justify', command: 'Alignments', subCommand: 'JustifyFull' }
];
let imageAlignItems = [
    { iconCss: 'e-icons e-justify-left', command: 'Images', subCommand: 'JustifyLeft' },
    { iconCss: 'e-icons e-justify-center', command: 'Images', subCommand: 'JustifyCenter' },
    { iconCss: 'e-icons e-justify-right', command: 'Images', subCommand: 'JustifyRight' },
];
let displayLocale = [
    { locale: 'imageDisplayDropDownInline', value: 'Inline' },
    { locale: 'imageDisplayDropDownBreak', value: 'Break' }
];
let imageDisplayItems = [
    { text: 'Inline', cssClass: 'e-inline', command: 'Images', subCommand: 'Inline' },
    { text: 'Break', cssClass: 'e-break', command: 'Images', subCommand: 'Break' },
];
let tableCellItems = [
    { iconCss: 'e-icons e-cell-merge', text: 'Merge cells', command: 'Table', subCommand: 'Merge' },
    { iconCss: 'e-icons e-cell-horizontal-split', text: 'Horizontal split', command: 'Table', subCommand: 'HorizontalSplit' },
    { iconCss: 'e-icons e-cell-vertical-split', text: 'Vertical split', command: 'Table', subCommand: 'VerticalSplit' },
];
let tableRowLocale = [
    { locale: 'tableInsertRowDropDownBefore', value: 'InsertRowBefore' },
    { locale: 'tableInsertRowDropDownAfter', value: 'InsertRowAfter' },
    { locale: 'tableInsertRowDropDownDelete', value: 'DeleteRow' }
];
let tableRowsItems = [
    { iconCss: 'e-icons e-insert-row-before', text: 'Insert row before', command: 'Table', subCommand: 'InsertRowBefore' },
    { iconCss: 'e-icons e-insert-row-after', text: 'Insert row after', command: 'Table', subCommand: 'InsertRowAfter' },
    { iconCss: 'e-icons e-delete-row', text: 'Delete row', command: 'Table', subCommand: 'DeleteRow' },
];
let tableColumnLocale = [
    { locale: 'tableInsertColumnDropDownLeft', value: 'InsertColumnLeft' },
    { locale: 'tableInsertColumnDropDownRight', value: 'InsertColumnRight' },
    { locale: 'tableInsertColumnDropDownDelete', value: 'DeleteColumn' }
];
let tableColumnsItems = [
    { iconCss: 'e-icons e-insert-column-left', text: 'Insert column left', command: 'Table', subCommand: 'InsertColumnLeft' },
    { iconCss: 'e-icons e-insert-column-right', text: 'Insert column right', command: 'Table', subCommand: 'InsertColumnRight' },
    { iconCss: 'e-icons e-delete-column', text: 'Delete column', command: 'Table', subCommand: 'DeleteColumn' },
];
let tableVerticalLocale = [
    { locale: 'tableVerticalAlignDropDownTop', value: 'AlignTop' },
    { locale: 'tableVerticalAlignDropDownMiddle', value: 'AlignMiddle' },
    { locale: 'tableVerticalAlignDropDownBottom', value: 'AlignBottom' }
];
let TableCellVerticalAlignItems = [
    { iconCss: 'e-icons e-align-top', text: 'Align Top', command: 'Table', subCommand: 'AlignTop' },
    { iconCss: 'e-icons e-align-middle', text: 'Align Middle', command: 'Table', subCommand: 'AlignMiddle' },
    { iconCss: 'e-icons e-align-bottom', text: 'Align Bottom', command: 'Table', subCommand: 'AlignBottom' },
];
let tableStyleLocale = [
    { locale: 'tableStylesDropDownDashedBorder', value: 'Dashed' },
    { locale: 'tableStylesDropDownAlternateRows', value: 'Alternate' }
];
let TableStyleItems = [
    { text: 'Dashed Borders', cssClass: 'e-dashed-borders', command: 'Table', subCommand: 'Dashed' },
    { text: 'Alternate Rows', cssClass: 'e-alternate-rows', command: 'Table', subCommand: 'Alternate' }
];
const predefinedItems = ['Bold', 'Italic', 'Underline', '|', 'Formats', 'Alignments',
    'OrderedList', 'UnorderedList', '|', 'CreateLink', 'Image', '|', 'SourceCode', 'Undo', 'Redo'];
const fontFamily = [
    { cssClass: 'e-segoe-ui', text: 'Segoe UI', command: 'Font', subCommand: 'FontName', value: 'Segoe UI' },
    { cssClass: 'e-arial', text: 'Arial', command: 'Font', subCommand: 'FontName', value: 'Arial,Helvetica,sans-serif' },
    { cssClass: 'e-georgia', text: 'Georgia', command: 'Font', subCommand: 'FontName', value: 'Georgia,serif' },
    { cssClass: 'e-impact', text: 'Impact', command: 'Font', subCommand: 'FontName', value: 'Impact,Charcoal,sans-serif' },
    { cssClass: 'e-tahoma', text: 'Tahoma', command: 'Font', subCommand: 'FontName', value: 'Tahoma,Geneva,sans-serif' },
    { cssClass: 'e-times-new-roman', text: 'Times New Roman', command: 'Font', subCommand: 'FontName', value: 'Times New Roman,Times,serif' },
    { cssClass: 'e-verdana', text: 'Verdana', command: 'Font', subCommand: 'FontName', value: 'Verdana,Geneva,sans-serif' }
];
const fontSize = [
    { text: '8 pt', value: '8pt' },
    { text: '10 pt', value: '10pt' },
    { text: '12 pt', value: '12pt' },
    { text: '14 pt', value: '14pt' },
    { text: '18 pt', value: '18pt' },
    { text: '24 pt', value: '24pt' },
    { text: '36 pt', value: '36pt' }
];
const formatItems = [
    { cssClass: 'e-paragraph', text: 'Paragraph', command: 'Formats', subCommand: 'P', value: 'P' },
    { cssClass: 'e-code', text: 'Code', command: 'Formats', subCommand: 'Pre', value: 'Pre' },
    { cssClass: 'e-quote', text: 'Quotation', command: 'Formats', subCommand: 'BlockQuote', value: 'BlockQuote' },
    { cssClass: 'e-h1', text: 'Heading 1', command: 'Formats', subCommand: 'H1', value: 'H1' },
    { cssClass: 'e-h2', text: 'Heading 2', command: 'Formats', subCommand: 'H2', value: 'H2' },
    { cssClass: 'e-h3', text: 'Heading 3', command: 'Formats', subCommand: 'H3', value: 'H3' },
    { cssClass: 'e-h4', text: 'Heading 4', command: 'Formats', subCommand: 'H4', value: 'H4' }
];
const fontColor = {
    'Custom': [
        '', '#000000', '#e7e6e6', '#44546a', '#4472c4', '#ed7d31', '#a5a5a5', '#ffc000', '#70ad47', '#ff0000',
        '#f2f2f2', '#808080', '#cfcdcd', '#d5dce4', '#d9e2f3', '#fbe4d5', '#ededed', '#fff2cc', '#e2efd9', '#ffcccc',
        '#d9d9d9', '#595959', '#aeaaaa', '#acb9ca', '#b4c6e7', '#f7caac', '#dbdbdb', '#ffe599', '#c5e0b3', '#ff8080',
        '#bfbfbf', '#404040', '#747070', '#8496b0', '#8eaadb', '#f4b083', '#c9c9c9', '#ffd966', '#a8d08d', '#ff3333',
        '#a6a6a6', '#262626', '#3b3838', '#323e4f', '#2f5496', '#c45911', '#7b7b7b', '#bf8f00', '#538135', '#b30000',
        '#7f7f7f', '#0d0d0d', '#161616', '#212934', '#1f3763', '#823b0b', '#525252', '#7f5f00', '#375623', '#660000'
    ]
};
const backgroundColor = {
    'Custom': [
        '', '#000000', '#ffff00', '#00ff00', '#00ffff', '#0000ff', '#ff0000', '#000080', '#800080', '#996633',
        '#f2f2f2', '#808080', '#ffffcc', '#b3ffb3', '#ccffff', '#ccccff', '#ffcccc', '#ccccff', '#ff80ff', '#f2e6d9',
        '#d9d9d9', '#595959', '#ffff80', '#80ff80', '#b3ffff', '#8080ff', '#ff8080', '#8080ff', '#ff00ff', '#dfbf9f',
        '#bfbfbf', '#404040', '#ffff33', '#33ff33', '#33ffff', '#3333ff', '#ff3333', '#0000b3', '#b300b3', '#c68c53',
        '#a6a6a6', '#262626', '#e6e600', '#00b300', '#009999', '#000099', '#b30000', '#000066', '#660066', '#86592d',
        '#7f7f7f', '#0d0d0d', '#999900', '#006600', '#006666', '#000066', '#660000', '#00004d', '#4d004d', '#734d26'
    ]
};
const numberFormatList = [
    { text: 'None', command: 'Lists', subCommand: 'NumberFormatList', value: 'none' },
    { text: 'Number', command: 'Lists', subCommand: 'NumberFormatList', value: 'decimal' },
    { text: 'Lower Greek', command: 'Lists', subCommand: 'NumberFormatList', value: 'lowerGreek' },
    { text: 'Lower Roman', command: 'Lists', subCommand: 'NumberFormatList', value: 'lowerRoman' },
    { text: 'Upper Alpha', command: 'Lists', subCommand: 'NumberFormatList', value: 'upperAlpha' },
    { text: 'Lower Alpha', command: 'Lists', subCommand: 'NumberFormatList', value: 'lowerAlpha' },
    { text: 'Upper Roman', command: 'Lists', subCommand: 'NumberFormatList', value: 'upperRoman' },
];
const bulletFormatList = [
    { text: 'None', command: 'Lists', subCommand: 'BulletFormatList', value: 'none' },
    { text: 'Disc', command: 'Lists', subCommand: 'BulletFormatList', value: 'disc' },
    { text: 'Circle', command: 'Lists', subCommand: 'BulletFormatList', value: 'circle' },
    { text: 'Square', command: 'Lists', subCommand: 'BulletFormatList', value: 'square' },
];
function getLocale(self, localeItems, item) {
    for (let i = 0; localeItems.length > i; i++) {
        if (localeItems[i].value === item.subCommand) {
            return self.localeObj.getConstant(localeItems[i].locale);
        }
    }
    return item.text;
}
function updateDropDownLocale(self) {
    alignmentItems.forEach((item, i) => {
        alignmentItems[i].text = getLocale(self, alignmentLocale, alignmentItems[i]);
    });
    imageDisplayItems.forEach((item, i) => {
        imageDisplayItems[i].text = getLocale(self, displayLocale, imageDisplayItems[i]);
    });
    tableRowsItems.forEach((item, i) => {
        tableRowsItems[i].text = getLocale(self, tableRowLocale, tableRowsItems[i]);
    });
    tableColumnsItems.forEach((item, i) => {
        tableColumnsItems[i].text = getLocale(self, tableColumnLocale, tableColumnsItems[i]);
    });
    TableCellVerticalAlignItems.forEach((item, i) => {
        TableCellVerticalAlignItems[i].text = getLocale(self, tableVerticalLocale, TableCellVerticalAlignItems[i]);
    });
    TableStyleItems.forEach((item, i) => {
        TableStyleItems[i].text = getLocale(self, tableStyleLocale, TableStyleItems[i]);
    });
}

/* eslint-disable */
/**
 * Export default locale
 */
let defaultLocale = {
    'alignments': 'Alignments',
    'justifyLeft': 'Align Left',
    'justifyCenter': 'Align Center',
    'justifyRight': 'Align Right',
    'justifyFull': 'Align Justify',
    'fontName': 'Font Name',
    'fontSize': 'Font Size',
    'fontColor': 'Font Color',
    'backgroundColor': 'Background Color',
    'bold': 'Bold',
    'italic': 'Italic',
    'underline': 'Underline',
    'strikethrough': 'Strikethrough',
    'clearFormat': 'Clear Format',
    'clearAll': 'Clear All',
    'cut': 'Cut',
    'copy': 'Copy',
    'paste': 'Paste',
    'unorderedList': 'Bulleted List',
    'orderedList': 'Numbered List',
    'indent': 'Increase Indent',
    'outdent': 'Decrease Indent',
    'undo': 'Undo',
    'redo': 'Redo',
    'superscript': 'Superscript',
    'subscript': 'Subscript',
    'createLink': 'Insert Link',
    'openLink': 'Open Link',
    'editLink': 'Edit Link',
    'removeLink': 'Remove Link',
    'image': 'Insert Image',
    'replace': 'Replace',
    'align': 'Align',
    'caption': 'Image Caption',
    'remove': 'Remove',
    'insertLink': 'Insert Link',
    'display': 'Display',
    'altText': 'Alternative Text',
    'dimension': 'Change Size',
    'fullscreen': 'Maximize',
    'maximize': 'Maximize',
    'minimize': 'Minimize',
    'lowerCase': 'Lower Case',
    'upperCase': 'Upper Case',
    'print': 'Print',
    'formats': 'Formats',
    'sourcecode': 'Code View',
    'preview': 'Preview',
    'viewside': 'ViewSide',
    'insertCode': 'Insert Code',
    'linkText': 'Display Text',
    'linkTooltipLabel': 'Title',
    'linkWebUrl': 'Web Address',
    'linkTitle': 'Enter a title',
    'linkurl': 'http://example.com',
    'linkOpenInNewWindow': 'Open Link in New Window',
    'linkHeader': 'Insert Link',
    'dialogInsert': 'Insert',
    'dialogCancel': 'Cancel',
    'dialogUpdate': 'Update',
    'imageHeader': 'Insert Image',
    'imageLinkHeader': 'You can also provide a link from the web',
    'mdimageLink': 'Please provide a URL for your image',
    'imageUploadMessage': 'Drop image here or browse to upload',
    'imageDeviceUploadMessage': 'Click here to upload',
    'imageAlternateText': 'Alternate Text',
    'alternateHeader': 'Alternative Text',
    'browse': 'Browse',
    'imageUrl': 'http://example.com/image.png',
    'imageCaption': 'Caption',
    'imageSizeHeader': 'Image Size',
    'imageHeight': 'Height',
    'imageWidth': 'Width',
    'textPlaceholder': 'Enter Text',
    'inserttablebtn': 'Insert Table',
    'tabledialogHeader': 'Insert Table',
    'tableWidth': 'Width',
    'cellpadding': 'Cell Padding',
    'cellspacing': 'Cell Spacing',
    'columns': 'Number of columns',
    'rows': 'Number of rows',
    'tableRows': 'Table Rows',
    'tableColumns': 'Table Columns',
    'tableCellHorizontalAlign': 'Table Cell Horizontal Align',
    'tableCellVerticalAlign': 'Table Cell Vertical Align',
    'createTable': 'Create Table',
    'removeTable': 'Remove Table',
    'tableHeader': 'Table Header',
    'tableRemove': 'Table Remove',
    'tableCellBackground': 'Table Cell Background',
    'tableEditProperties': 'Table Edit Properties',
    'styles': 'Styles',
    'insertColumnLeft': 'Insert Column Left',
    'insertColumnRight': 'Insert Column Right',
    'deleteColumn': 'Delete Column',
    'insertRowBefore': 'Insert Row Before',
    'insertRowAfter': 'Insert Row After',
    'deleteRow': 'Delete Row',
    'tableEditHeader': 'Edit Table',
    'TableHeadingText': 'Heading',
    'TableColText': 'Col',
    'imageInsertLinkHeader': 'Insert Link',
    'editImageHeader': 'Edit Image',
    "alignmentsDropDownLeft": 'Align Left',
    "alignmentsDropDownCenter": 'Align Center',
    "alignmentsDropDownRight": 'Align Right',
    "alignmentsDropDownJustify": 'Align Justify',
    "imageDisplayDropDownInline": 'Inline',
    "imageDisplayDropDownBreak": 'Break',
    "tableInsertRowDropDownBefore": 'Insert row before',
    "tableInsertRowDropDownAfter": 'Insert row after',
    "tableInsertRowDropDownDelete": 'Delete row',
    "tableInsertColumnDropDownLeft": 'Insert column left',
    "tableInsertColumnDropDownRight": 'Insert column right',
    "tableInsertColumnDropDownDelete": 'Delete column',
    "tableVerticalAlignDropDownTop": 'Align Top',
    "tableVerticalAlignDropDownMiddle": 'Align Middle',
    "tableVerticalAlignDropDownBottom": 'Align Bottom',
    "tableStylesDropDownDashedBorder": 'Dashed Borders',
    "tableStylesDropDownAlternateRows": 'Alternate Rows',
    'pasteFormat': 'Paste Format',
    'pasteFormatContent': 'Choose the formatting action',
    'plainText': 'Plain Text',
    'cleanFormat': 'Clean',
    'keepFormat': 'Keep',
    'pasteDialogOk': 'OK',
    'pasteDialogCancel': 'Cancel',
    'fileManager': 'File Manager',
    'fileDialogHeader': 'File Browser',
    "formatsDropDownParagraph": 'Paragraph',
    'formatsDropDownCode': 'Code',
    'formatsDropDownQuotation': 'Quotation',
    'formatsDropDownHeading1': 'Heading 1',
    'formatsDropDownHeading2': 'Heading 2',
    'formatsDropDownHeading3': 'Heading 3',
    'formatsDropDownHeading4': 'Heading 4',
    'fontNameSegoeUI': 'Segoe UI',
    'fontNameArial': 'Arial',
    'fontNameGeorgia': 'Georgia',
    'fontNameImpact': 'Impact',
    'fontNameTahoma': 'Tahoma',
    'fontNameTimesNewRoman': 'Times New Roman',
    'fontNameVerdana': 'Verdana',
    'numberFormatListNumber': 'Number',
    'numberFormatListLowerAlpha': 'LowerAlpha',
    'numberFormatListUpperAlpha': 'UpperAlpha',
    'numberFormatListLowerRoman': 'LowerRoman',
    'numberFormatListUpperRoman': 'UpperRoman',
    'numberFormatListLowerGreek': 'LowerGreek',
    'bulletFormatListDisc': 'Disc',
    'bulletFormatListCircle': 'Circle',
    'bulletFormatListSquare': 'Square',
    'numberFormatListNone': 'None',
    'bulletFormatListNone': 'None'
};
let toolsLocale = {
    'alignments': 'alignments',
    'justifyleft': 'justifyLeft',
    'justifycenter': 'justifyCenter',
    'justifyright': 'justifyRight',
    'justifyfull': 'justifyFull',
    'fontname': 'fontName',
    'fontsize': 'fontSize',
    'fontcolor': 'fontColor',
    'backgroundcolor': 'backgroundColor',
    'bold': 'bold',
    'italic': 'italic',
    'underline': 'underline',
    'strikethrough': 'strikethrough',
    'clearformat': 'clearFormat',
    'clearall': 'clearAll',
    'cut': 'cut',
    'copy': 'copy',
    'paste': 'paste',
    'unorderedlist': 'unorderedList',
    'orderedlist': 'orderedList',
    'indent': 'indent',
    'outdent': 'outdent',
    'undo': 'undo',
    'redo': 'redo',
    'superscript': 'superscript',
    'subscript': 'subscript',
    'createlink': 'createLink',
    'openlink': 'openLink',
    'editlink': 'editLink',
    'removelink': 'removeLink',
    'openimagelink': 'openLink',
    'editimagelink': 'editLink',
    'removeimagelink': 'removeLink',
    'image': 'image',
    'replace': 'replace',
    'align': 'align',
    'caption': 'caption',
    'remove': 'remove',
    'insertlink': 'insertLink',
    'display': 'display',
    'alttext': 'altText',
    'dimension': 'dimension',
    'fullscreen': 'fullscreen',
    'maximize': 'maximize',
    'minimize': 'minimize',
    'lowercase': 'lowerCase',
    'uppercase': 'upperCase',
    'print': 'print',
    'formats': 'formats',
    'sourcecode': 'sourcecode',
    'preview': 'preview',
    'viewside': 'viewside',
    'insertcode': 'insertCode',
    'tablerows': 'tableRows',
    'tablecolumns': 'tableColumns',
    'tablecellhorizontalalign': 'tableCellHorizontalAlign',
    'tablecellverticalalign': 'tableCellVerticalAlign',
    'createtable': 'createTable',
    'removetable': 'removeTable',
    'tableheader': 'tableHeader',
    'tableremove': 'tableRemove',
    'tablecellbackground': 'tableCellBackground',
    'tableeditproperties': 'tableEditProperties',
    'styles': 'styles',
    'insertcolumnleft': 'insertColumnLeft',
    'insertcolumnright': 'insertColumnRight',
    'deletecolumn': 'deleteColumn',
    'aligntop': 'AlignTop',
    'alignmiddle': 'AlignMiddle',
    'alignbottom': 'AlignBottom',
    'insertrowbefore': 'insertRowBefore',
    'insertrowafter': 'insertRowAfter',
    'deleterow': 'deleteRow'
};
let fontNameLocale = [
    { locale: 'fontNameSegoeUI', value: 'Segoe UI' },
    { locale: 'fontNameArial', value: 'Arial,Helvetica,sans-serif' },
    { locale: 'fontNameGeorgia', value: 'Georgia,serif' },
    { locale: 'fontNameImpact', value: 'Impact,Charcoal,sans-serif' },
    { locale: 'fontNameTahoma', value: 'Tahoma,Geneva,sans-serif' },
    { locale: 'fontNameTimesNewRoman', value: 'Times New Roman,Times,serif' },
    { locale: 'fontNameVerdana', value: 'Verdana,Geneva,sans-serif' }
];
let formatsLocale = [
    { locale: 'formatsDropDownParagraph', value: 'P' },
    { locale: 'formatsDropDownCode', value: 'Pre' },
    { locale: 'formatsDropDownQuotation', value: 'BlockQuote' },
    { locale: 'formatsDropDownHeading1', value: 'H1' },
    { locale: 'formatsDropDownHeading2', value: 'H2' },
    { locale: 'formatsDropDownHeading3', value: 'H3' },
    { locale: 'formatsDropDownHeading4', value: 'H4' }
];
let numberFormatListLocale = [
    { locale: 'numberFormatListNone', value: 'none' },
    { locale: 'numberFormatListNumber', value: 'decimal' },
    { locale: 'numberFormatListLowerAlpha', value: 'lower-alpha' },
    { locale: 'numberFormatListUpperAlpha', value: 'upper-alpha' },
    { locale: 'numberFormatListLowerRoman', value: 'lower-roman' },
    { locale: 'numberFormatListUpperRoman', value: 'upper-roman' },
    { locale: 'numberFormatListLowerGreek', value: 'lower-greek' }
];
let bulletFormatListLocale = [
    { locale: 'bulletFormatListNone', value: 'none' },
    { locale: 'bulletFormatListDisc', value: 'disc' },
    { locale: 'bulletFormatListCircle', value: 'circle' },
    { locale: 'bulletFormatListSquare', value: 'square' },
];

/**
 * Defines util methods used by Rich Text Editor.
 */
const undoRedoItems = ['Undo', 'Redo'];
const inlineNode = ['a', 'abbr', 'acronym', 'audio', 'b', 'bdi', 'bdo', 'big', 'br', 'button',
    'canvas', 'cite', 'code', 'data', 'datalist', 'del', 'dfn', 'em', 'embed', 'font', 'i', 'iframe', 'img', 'input',
    'ins', 'kbd', 'label', 'map', 'mark', 'meter', 'noscript', 'object', 'output', 'picture', 'progress',
    'q', 'ruby', 's', 'samp', 'script', 'select', 'slot', 'small', 'span', 'strong', 'strike', 'sub', 'sup', 'svg',
    'template', 'textarea', 'time', 'u', 'tt', 'var', 'video', 'wbr'];
/**
 * @param {string} val - specifies the string value
 * @param {string} items - specifies the value
 * @returns {number} - returns the number value
 * @hidden
 */
function getIndex(val, items) {
    let index = -1;
    items.some((item, i) => {
        if (typeof item === 'string' && val === item.toLocaleLowerCase()) {
            index = i;
            return true;
        }
        return false;
    });
    return index;
}
/**
 * @param {Element} element - specifies the element
 * @param {string} className - specifies the string value
 * @returns {boolean} - returns the boolean value
 * @hidden
 */
function hasClass(element, className) {
    let hasClass = false;
    if (element.classList.contains(className)) {
        hasClass = true;
    }
    return hasClass;
}
/**
 * @param {IDropDownItemModel} items - specifies the item model
 * @param {string} value - specifies the string value
 * @param {string} type - specifies the string value
 * @param {string} returnType - specifies the return type
 * @returns {string} - returns the string value
 * @hidden
 */
function getDropDownValue(items, value, type, returnType) {
    let data;
    let result;
    for (let k = 0; k < items.length; k++) {
        if (type === 'value' && items[k].value.toLocaleLowerCase() === value.toLocaleLowerCase()) {
            data = items[k];
            break;
        }
        else if (type === 'text' && items[k].text.toLocaleLowerCase() === value.toLocaleLowerCase()) {
            data = items[k];
            break;
        }
        else if (type === 'subCommand' && items[k].subCommand.toLocaleLowerCase() === value.toLocaleLowerCase()) {
            data = items[k];
            break;
        }
    }
    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data)) {
        switch (returnType) {
            case 'text':
                result = data.text;
                break;
            case 'value':
                result = data.value;
                break;
            case 'iconCss':
                result = data.iconCss;
                break;
        }
    }
    return result;
}
/**
 * @returns {boolean} - returns the boolean value
 * @hidden
 */
function isIDevice() {
    let result = false;
    if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIos) {
        result = true;
    }
    return result;
}
/**
 * @param {string} value - specifies the value
 * @returns {string} - returns the string value
 * @hidden
 */
function getFormattedFontSize(value) {
    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(value)) {
        return '';
    }
    return value;
}
/**
 * @param {MouseEvent} e - specifies the mouse event
 * @param {HTMLElement} parentElement - specifies the parent element
 * @param {boolean} isIFrame - specifies the boolean value
 * @returns {number} - returns the number
 * @hidden
 */
function pageYOffset(e, parentElement, isIFrame) {
    let y = 0;
    if (isIFrame) {
        y = window.pageYOffset + parentElement.getBoundingClientRect().top + e.clientY;
    }
    else {
        y = e.pageY;
    }
    return y;
}
/**
 * @param {string} item - specifies the string
 * @param {ServiceLocator} serviceLocator - specifies the service locator
 * @returns {string} - returns the string
 * @hidden
 */
function getTooltipText(item, serviceLocator) {
    const i10n = serviceLocator.getService('rteLocale');
    const itemLocale = toolsLocale[item];
    const tooltipText = i10n.getConstant(itemLocale);
    return tooltipText;
}
/**
 * @param {ISetToolbarStatusArgs} e - specifies the e element
 * @param {boolean} isPopToolbar - specifies the boolean value
 * @param {IRichTextEditor} self - specifies the parent element
 * @returns {void}
 * @hidden
 */
function setToolbarStatus(e, isPopToolbar, self) {
    updateDropDownFontFormatLocale(self);
    const dropDown = e.dropDownModule;
    const data = e.args;
    const keys = Object.keys(e.args);
    for (const key of keys) {
        for (let j = 0; j < e.tbItems.length; j++) {
            const item = e.tbItems[j].subCommand;
            const itemStr = item && item.toLocaleLowerCase();
            if (item && (itemStr === key) || (item === 'UL' && key === 'unorderedlist') || (item === 'OL' && key === 'orderedlist') ||
                (itemStr === 'pre' && key === 'insertcode')) {
                if (typeof data[key] === 'boolean') {
                    if (data[key] === true) {
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([e.tbElements[j]], [CLS_ACTIVE]);
                    }
                    else {
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([e.tbElements[j]], [CLS_ACTIVE]);
                    }
                }
                else if ((typeof data[key] === 'string' || data[key] === null) &&
                    getIndex(key, e.parent.toolbarSettings.items) > -1) {
                    const value = ((data[key]) ? data[key] : '');
                    let result = '';
                    switch (key) {
                        case 'formats': {
                            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropDown.formatDropDown) || isPopToolbar ||
                                (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropDown.formatDropDown) && dropDown.formatDropDown.isDestroyed)) {
                                break;
                            }
                            const formatItems$$1 = e.parent.format.types;
                            const formatContent = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.parent.format.default) ? formatItems$$1[0].text :
                                e.parent.format.default;
                            result = getDropDownValue(formatItems$$1, value, 'subCommand', 'text');
                            dropDown.formatDropDown.content = ('<span style="display: inline-flex;' +
                                'width:' + e.parent.format.width + '" >' +
                                '<span class="e-rte-dropdown-btn-text">'
                                + ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(result) ? formatContent : result) +
                                '</span></span>');
                            dropDown.formatDropDown.dataBind();
                            break;
                        }
                        case 'alignments': {
                            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropDown.alignDropDown) ||
                                (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropDown.alignDropDown) && dropDown.alignDropDown.isDestroyed)) {
                                break;
                            }
                            const alignItems = alignmentItems;
                            result = getDropDownValue(alignItems, value, 'subCommand', 'iconCss');
                            dropDown.alignDropDown.iconCss = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(result) ? 'e-icons e-justify-left' : result;
                            dropDown.alignDropDown.dataBind();
                            break;
                        }
                        case 'fontname': {
                            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropDown.fontNameDropDown) || isPopToolbar ||
                                (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropDown.fontNameDropDown) && dropDown.fontNameDropDown.isDestroyed)) {
                                break;
                            }
                            const fontNameItems = e.parent.fontFamily.items;
                            result = getDropDownValue(fontNameItems, value, 'value', 'text');
                            const fontNameContent = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.parent.fontFamily.default) ? fontNameItems[0].text :
                                e.parent.fontFamily.default;
                            const name = ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(result) ? fontNameContent : result);
                            e.tbElements[j].title = name;
                            dropDown.fontNameDropDown.content = ('<span style="display: inline-flex;' +
                                'width:' + e.parent.fontFamily.width + '" >' +
                                '<span class="e-rte-dropdown-btn-text">'
                                + name + '</span></span>');
                            dropDown.fontNameDropDown.dataBind();
                            break;
                        }
                        case 'fontsize': {
                            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropDown.fontSizeDropDown) ||
                                (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropDown.fontSizeDropDown) && dropDown.fontSizeDropDown.isDestroyed)) {
                                break;
                            }
                            const fontSizeItems = e.parent.fontSize.items;
                            const fontSizeContent = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.parent.fontSize.default) ? fontSizeItems[1].text :
                                e.parent.fontSize.default;
                            result = getDropDownValue(fontSizeItems, (value === '' ? fontSizeContent.replace(/\s/g, '') : value), 'value', 'text');
                            dropDown.fontSizeDropDown.content = ('<span style="display: inline-flex;' +
                                'width:' + e.parent.fontSize.width + '" >' +
                                '<span class="e-rte-dropdown-btn-text">'
                                + getFormattedFontSize(result) + '</span></span>');
                            dropDown.fontSizeDropDown.dataBind();
                            break;
                        }
                    }
                }
            }
        }
    }
}
/**
 * @param {string} items - specifies the string value
 * @returns {string[]} - returns the array value
 * @hidden
 */
function getCollection(items) {
    if (typeof items === 'object') {
        return items;
    }
    else {
        return [items];
    }
}
/**
 * @param {string[]} items - specifies the array of string value
 * @param {IToolbarItemModel} toolbarItems - specifies the tool bar model
 * @returns {number} - returns the number
 * @hidden
 */
function getTBarItemsIndex(items, toolbarItems) {
    const itemsIndex = [];
    for (let i = 0; i < items.length; i++) {
        for (let j = 0; j < toolbarItems.length; j++) {
            if (toolbarItems[j].type === 'Separator') {
                continue;
            }
            else {
                if (items[i] === 'OrderedList' && toolbarItems[j].subCommand === 'OL') {
                    itemsIndex.push(j);
                    break;
                }
                else if (items[i] === 'UnorderedList' && toolbarItems[j].subCommand === 'UL') {
                    itemsIndex.push(j);
                    break;
                }
                else if (items[i] === 'InsertCode' && toolbarItems[j].subCommand === 'Pre') {
                    itemsIndex.push(j);
                    break;
                }
                else if (items[i] === 'FileManager' && toolbarItems[j].subCommand === 'File') {
                    itemsIndex.push(j);
                    break;
                }
                else if (typeof (items[i]) === 'object' && items[i].command === 'Custom') {
                    itemsIndex.push(i);
                    break;
                }
                else if (items[i] === toolbarItems[j].subCommand) {
                    itemsIndex.push(j);
                    break;
                }
            }
        }
    }
    return itemsIndex;
}
/**
 * @param {BaseToolbar} baseToolbar - specifies the base
 * @param {boolean} undoRedoStatus - specifies the boolean value
 * @returns {void}
 * @hidden
 */
function updateUndoRedoStatus(baseToolbar, undoRedoStatus) {
    let i = 0;
    const trgItems = getTBarItemsIndex(getCollection(undoRedoItems), baseToolbar.toolbarObj.items);
    const tbItems = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + CLS_TB_ITEM, baseToolbar.toolbarObj.element);
    const keys = Object.keys(undoRedoStatus);
    for (const key of keys) {
        const target = tbItems[trgItems[i]];
        if (target) {
            baseToolbar.toolbarObj.enableItems(target, undoRedoStatus[key]);
        }
        i++;
    }
}
/**
 * To dispatch the event manually
 *
 * @param {Element} element - specifies the element.
 * @param {string} type - specifies the string type.
 * @returns {void}
 * @hidden
 * @deprecated
 */
function dispatchEvent(element, type) {
    const evt = document.createEvent('HTMLEvents');
    evt.initEvent(type, false, true);
    element.dispatchEvent(evt);
}
/**
 * To parse the HTML
 *
 * @param {string} value - specifies the string value
 * @returns {DocumentFragment} - returns the document
 * @hidden
 */
function parseHtml(value) {
    const tempNode = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('template');
    tempNode.innerHTML = value;
    if (tempNode.content instanceof DocumentFragment) {
        return tempNode.content;
    }
    else {
        return document.createRange().createContextualFragment(value);
    }
}
/**
 * @param {Document} docElement - specifies the document element
 * @param {Element} node - specifies the node
 * @returns {Node[]} - returns the node array
 * @hidden
 */
function getTextNodesUnder(docElement, node) {
    let nodes = [];
    for (node = node.firstChild; node; node = node.nextSibling) {
        if (node.nodeType === 3) {
            nodes.push(node);
        }
        else {
            nodes = nodes.concat(getTextNodesUnder(docElement, node));
        }
    }
    return nodes;
}
/**
 * @param {IToolsItemConfigs} obj - specifies the configuration
 * @returns {void}
 * @hidden
 */
function toObjectLowerCase(obj) {
    const convertedValue = {};
    const keys = Object.keys(obj);
    for (let i = 0; i < Object.keys(obj).length; i++) {
        convertedValue[keys[i].toLocaleLowerCase()] = obj[keys[i]];
    }
    return convertedValue;
}
/**
 * @param {string} value - specifies the string value
 * @param {IRichTextEditor} rteObj - specifies the rte object
 * @returns {string} - returns the string
 * @hidden
 */
function getEditValue(value, rteObj) {
    let val;
    if (value !== null && value !== '') {
        val = rteObj.enableHtmlEncode ? updateTextNode(decode(value), rteObj) : updateTextNode(value, rteObj);
        rteObj.setProperties({ value: val }, true);
    }
    else {
        if (rteObj.enterKey === 'DIV') {
            val = rteObj.enableHtmlEncode ? '&lt;div&gt;&lt;br/&gt;&lt;/div&gt;' : '<div><br/></div>';
        }
        else if (rteObj.enterKey === 'BR') {
            val = rteObj.enableHtmlEncode ? '&lt;br/&gt;' : '<br/>';
        }
        else {
            val = rteObj.enableHtmlEncode ? '&lt;p&gt;&lt;br/&gt;&lt;/p&gt;' : '<p><br/></p>';
        }
    }
    return val;
}
/**
 * @param {string} value - specifies the value
 * @param {IRichTextEditor} rteObj - specifies the rich text editor instance.
 * @returns {string} - returns the string
 * @hidden
 */
function updateTextNode(value, rteObj) {
    const tempNode = document.createElement('div');
    const resultElm = document.createElement('div');
    const childNodes = tempNode.childNodes;
    tempNode.innerHTML = value;
    tempNode.setAttribute('class', 'tempDiv');
    if (childNodes.length > 0) {
        let isPreviousInlineElem;
        let previousParent;
        let insertElem;
        while (tempNode.firstChild) {
            if (rteObj.enterKey !== 'BR' && ((tempNode.firstChild.nodeName === '#text' &&
                (tempNode.firstChild.textContent.indexOf('\n') < 0 || tempNode.firstChild.textContent.trim() !== '')) ||
                inlineNode.indexOf(tempNode.firstChild.nodeName.toLocaleLowerCase()) >= 0)) {
                if (!isPreviousInlineElem) {
                    if (rteObj.enterKey === 'DIV') {
                        insertElem = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div');
                    }
                    else {
                        insertElem = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('p');
                    }
                    resultElm.appendChild(insertElem);
                    insertElem.appendChild(tempNode.firstChild);
                }
                else {
                    previousParent.appendChild(tempNode.firstChild);
                }
                previousParent = insertElem;
                isPreviousInlineElem = true;
            }
            else if (tempNode.firstChild.nodeName === '#text' && (tempNode.firstChild.textContent === '\n' ||
                (tempNode.firstChild.textContent.indexOf('\n') >= 0 && tempNode.firstChild.textContent.trim() === ''))) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(tempNode.firstChild);
            }
            else {
                resultElm.appendChild(tempNode.firstChild);
                isPreviousInlineElem = false;
            }
        }
        const imageElm = resultElm.querySelectorAll('img');
        for (let i = 0; i < imageElm.length; i++) {
            if (!imageElm[i].classList.contains(CLS_RTE_IMAGE)) {
                imageElm[i].classList.add(CLS_RTE_IMAGE);
            }
            if (!(imageElm[i].classList.contains(CLS_IMGINLINE) ||
                imageElm[i].classList.contains(CLS_IMGBREAK))) {
                imageElm[i].classList.add(CLS_IMGINLINE);
            }
        }
    }
    return resultElm.innerHTML;
}
/**
 * @param {IRichTextEditor} rteObj - specifies the rte object
 * @returns {string} - returns the value based on enter configuration.
 * @hidden
 */
function getDefaultValue(rteObj) {
    let currentVal;
    if (rteObj.enterKey === 'DIV') {
        currentVal = rteObj.enableHtmlEncode ? '&lt;div&gt;&lt;br/&gt;&lt;/div&gt;' : '<div><br/></div>';
    }
    else if (rteObj.enterKey === 'BR') {
        currentVal = rteObj.enableHtmlEncode ? '&lt;br/&gt;' : '<br/>';
    }
    else {
        currentVal = rteObj.enableHtmlEncode ? '&lt;p&gt;&lt;br/&gt;&lt;/p&gt;' : '<p><br/></p>';
    }
    return currentVal;
}
/**
 * @param {string} value - specifies the value
 * @returns {boolean} - returns the boolean value
 * @hidden
 */
function isEditableValueEmpty(value) {
    return (value === '<p><br></p>' || value === '&lt;p&gt;&lt;br&gt;&lt;/p&gt;'
        || value === '<div><br></div>' || value === '&lt;div&gt;&lt;br&gt;&lt;/div&gt;'
        || value === '<br>' || value === '&lt;br&gt;'
        || value === '') ? true : false;
}
/**
 * @param {string} value - specifies the string value
 * @returns {string} - returns the string
 * @hidden
 */
function decode(value) {
    return value.replace(/&amp;/g, '&').replace(/&amp;lt;/g, '<')
        .replace(/&lt;/g, '<').replace(/&amp;gt;/g, '>')
        .replace(/&gt;/g, '>').replace(/&nbsp;/g, ' ')
        .replace(/&amp;nbsp;/g, ' ').replace(/&quot;/g, '');
}
/**
 * @param {string} value - specifies the string value
 * @param {IRichTextEditor} parent - specifies the rte
 * @returns {string} - returns the string value
 * @hidden
 */
function sanitizeHelper(value, parent) {
    if (parent.enableHtmlSanitizer) {
        const item = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.beforeSanitize();
        const beforeEvent = {
            cancel: false,
            helper: null
        };
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(item, item, beforeEvent);
        parent.trigger('beforeSanitizeHtml', item);
        if (item.cancel && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item.helper)) {
            value = item.helper(value);
        }
        else if (!item.cancel) {
            value = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.SanitizeHtmlHelper.serializeValue(item, value);
        }
    }
    return value;
}
/**
 * @param {string} dataUrl - specifies the string value
 * @returns {BaseToolbar} - returns the value
 * @hidden
 */
//Converting the base64 url to blob
function convertToBlob(dataUrl) {
    const arr = dataUrl.split(',');
    const mime = arr[0].match(/:(.*?);/)[1];
    const bstr = atob(arr[1]);
    let n = bstr.length;
    const u8arr = new Uint8Array(n);
    while (n--) {
        u8arr[n] = bstr.charCodeAt(n);
    }
    return new Blob([u8arr], { type: mime });
}
/**
 * @param {IRichTextEditor} self - specifies the rte
 * @param {string} localeItems - specifies the locale items
 * @param {IDropDownItemModel} item - specifies the dropdown item
 * @returns {string} - returns the value
 * @hidden
 */
function getLocaleFontFormat(self, localeItems, item) {
    for (let i = 0; localeItems.length > i; i++) {
        if (localeItems[i].value === item.value || localeItems[i].value === item.subCommand) {
            return self.localeObj.getConstant(localeItems[i].locale);
        }
    }
    return item.text;
}
/**
 * @param {IRichTextEditor} self - specifies the rte
 * @returns {void}
 * @hidden
 */
function updateDropDownFontFormatLocale(self) {
    fontFamily.forEach((item, i) => {
        fontFamily[i].text = getLocaleFontFormat(self, fontNameLocale, fontFamily[i]);
    });
    formatItems.forEach((item, i) => {
        formatItems[i].text = getLocaleFontFormat(self, formatsLocale, formatItems[i]);
    });
    numberFormatList.forEach((item, i) => {
        numberFormatList[i].text = getLocaleFontFormat(self, numberFormatListLocale, numberFormatList[i]);
    });
    bulletFormatList.forEach((item, i) => {
        bulletFormatList[i].text = getLocaleFontFormat(self, bulletFormatListLocale, bulletFormatList[i]);
    });
}

/**
 * `Toolbar renderer` module is used to render toolbar in RichTextEditor.
 *
 * @hidden
 * @deprecated
 */
class ToolbarRenderer {
    /**
     * Constructor for toolbar renderer module
     *
     * @param {IRichTextEditor} parent - specifies the parent element.
     */
    constructor(parent) {
        this.parent = parent;
        this.wireEvent();
    }
    wireEvent() {
        this.parent.on(destroy, this.unWireEvent, this);
    }
    unWireEvent() {
        this.parent.off(destroy, this.unWireEvent);
        if (this.popupOverlay) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.popupOverlay, 'click touchmove', this.onPopupOverlay);
        }
        this.removePopupContainer();
    }
    toolbarBeforeCreate(e) {
        if (this.mode === 'Extended') {
            e.enableCollision = false;
        }
    }
    toolbarCreated() {
        this.parent.notify(toolbarCreated, this);
    }
    toolbarClicked(args) {
        if (!this.parent.enabled) {
            return;
        }
        if (!this.parent.readonly || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.item)) {
            this.parent.notify(toolbarClick, args);
        }
        this.parent.trigger('toolbarClick', args);
    }
    dropDownSelected(args) {
        this.parent.notify(dropDownSelect, args);
        this.onPopupOverlay();
    }
    beforeDropDownItemRender(args) {
        if (this.parent.readonly || !this.parent.enabled) {
            return;
        }
        this.parent.notify(beforeDropDownItemRender, args);
    }
    dropDownOpen(args) {
        if (args.element.parentElement.getAttribute('id').indexOf('TableCell') > -1 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.element.parentElement.querySelector('.e-cell-merge')) &&
            (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.element.parentElement.querySelector('.e-cell-horizontal-split')) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.element.parentElement.querySelector('.e-cell-vertical-split')))) {
            const listEle = args.element.querySelectorAll('li');
            if (this.parent.inputElement.querySelectorAll('.e-cell-select').length === 1) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([listEle[0]], 'e-disabled');
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([listEle[1], listEle[2]], 'e-disabled');
            }
            else if (this.parent.inputElement.querySelectorAll('.e-cell-select').length > 1) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([listEle[0]], 'e-disabled');
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([listEle[1], listEle[2]], 'e-disabled');
            }
        }
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !args.element.parentElement.classList.contains(CLS_QUICK_DROPDOWN)) {
            this.popupModal(args.element.parentElement);
        }
        this.parent.notify(selectionSave, args);
    }
    dropDownClose(args) {
        this.removePopupContainer();
        this.parent.notify(selectionRestore, args);
    }
    removePopupContainer() {
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.popupContainer)) {
            const popupEle = this.popupContainer.querySelector('.e-dropdown-popup.e-tbar-btn.e-control');
            if (popupEle) {
                this.popupContainer.parentNode.insertBefore(popupEle, this.popupContainer.nextSibling);
                popupEle.style.removeProperty('position');
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([popupEle], 'e-popup-modal');
            }
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.popupContainer);
            this.popupContainer = undefined;
        }
    }
    /**
     * renderToolbar method
     *
     * @param {IToolbarOptions} args - specifies the arguments.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    renderToolbar(args) {
        this.setPanel(args.target);
        this.renderPanel();
        this.mode = args.overflowMode;
        args.rteToolbarObj.toolbarObj = new _syncfusion_ej2_navigations__WEBPACK_IMPORTED_MODULE_1__.Toolbar({
            items: args.items,
            width: '100%',
            overflowMode: args.overflowMode,
            beforeCreate: this.toolbarBeforeCreate.bind(this),
            created: this.toolbarCreated.bind(this),
            clicked: this.toolbarClicked.bind(this),
            enablePersistence: args.enablePersistence,
            enableRtl: args.enableRtl
        });
        args.rteToolbarObj.toolbarObj.isStringTemplate = true;
        args.rteToolbarObj.toolbarObj.createElement = this.parent.createElement;
        args.rteToolbarObj.toolbarObj.appendTo(args.target);
    }
    /**
     * renderDropDownButton method
     *
     * @param {IDropDownModel} args - specifies the the arguments.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    renderDropDownButton(args) {
        let css;
        args.element.classList.add(CLS_DROPDOWN_BTN);
        css = args.cssClass + ' ' + CLS_RTE_ELEMENTS + ' ' + CLS_TB_BTN;
        if (this.parent.inlineMode.enable && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {
            css = css + ' ' + CLS_INLINE_DROPDOWN;
        }
        // eslint-disable-next-line
        let proxy = this;
        const dropDown = new _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_2__.DropDownButton({
            items: args.items,
            iconCss: args.iconCss,
            cssClass: css,
            content: args.content,
            enablePersistence: this.parent.enablePersistence,
            enableRtl: this.parent.enableRtl,
            select: this.dropDownSelected.bind(this),
            beforeOpen: (args) => {
                if (proxy.parent.readonly || !proxy.parent.enabled) {
                    args.cancel = true;
                    return;
                }
                // eslint-disable-next-line
                for (let index = 0; index < args.element.childNodes.length; index++) {
                    const divNode = this.parent.createElement('div');
                    divNode.innerHTML = dropDown.content.trim();
                    if (divNode.textContent.trim() !== ''
                        && args.element.childNodes[index].textContent.trim() === divNode.textContent.trim()) {
                        if (!args.element.childNodes[index].classList.contains('e-active')) {
                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([args.element.childNodes[index]], 'e-active');
                        }
                    }
                    else {
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([args.element.childNodes[index]], 'e-active');
                    }
                }
                proxy.parent.notify(beforeDropDownOpen, args);
            },
            close: this.dropDownClose.bind(this),
            open: this.dropDownOpen.bind(this),
            beforeItemRender: this.beforeDropDownItemRender.bind(this)
        });
        dropDown.isStringTemplate = true;
        dropDown.createElement = proxy.parent.createElement;
        dropDown.appendTo(args.element);
        args.element.tabIndex = -1;
        const popupElement = document.getElementById(dropDown.element.id + '-popup');
        popupElement.setAttribute('aria-owns', this.parent.getID());
        return dropDown;
    }
    /**
     * renderListDropDown method
     *
     * @param {IDropDownModel} args - specifies the the arguments.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    renderListDropDown(args) {
        // eslint-disable-next-line
        const proxy = this;
        let css = CLS_RTE_ELEMENTS + ' ' + CLS_TB_BTN + ((this.parent.inlineMode) ? (' ' + CLS_INLINE_DROPDOWN) : '');
        css += (' ' + ((args.itemName === 'NumberFormatList') ? CLS_NUMBERFORMATLIST_TB_BTN : CLS_BULLETFORMATLIST_TB_BTN));
        const content = proxy.parent.createElement('span', { className: CLS_LIST_PRIMARY_CONTENT });
        const inlineEle = proxy.parent.createElement('span', { className: args.cssClass });
        content.appendChild(inlineEle);
        const dropDown = new _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_2__.DropDownButton({
            items: args.items,
            cssClass: css,
            content: args.content,
            enablePersistence: this.parent.enablePersistence,
            enableRtl: this.parent.enableRtl,
            select: this.dropDownSelected.bind(this),
            beforeOpen: (args) => {
                if (proxy.parent.readonly || !proxy.parent.enabled) {
                    args.cancel = true;
                    return;
                }
                const element = (args.event) ? args.event.target : null;
                proxy.currentElement = dropDown.element;
                proxy.currentDropdown = dropDown;
                if (args.event && args.event.type === 'click' && (element.classList.contains(CLS_LIST_PRIMARY_CONTENT)
                    || element.parentElement.classList.contains(CLS_LIST_PRIMARY_CONTENT))) {
                    args.cancel = true;
                    return;
                }
                proxy.parent.notify(beforeDropDownOpen, args);
            },
            close: this.dropDownClose.bind(this),
            open: this.dropDownOpen.bind(this),
            beforeItemRender: this.beforeDropDownItemRender.bind(this)
        });
        dropDown.isStringTemplate = true;
        dropDown.createElement = proxy.parent.createElement;
        dropDown.appendTo(args.element);
        args.element.tabIndex = -1;
        const popupElement = document.getElementById(dropDown.element.id + '-popup');
        popupElement.setAttribute('aria-owns', this.parent.getID());
        if (args.element.childElementCount === 1) {
            dropDown.element.insertBefore(content, dropDown.element.querySelector('.e-caret'));
        }
        args.element.tabIndex = -1;
        dropDown.element.removeAttribute('type');
        return dropDown;
    }
    // eslint-disable-next-line
    onPopupOverlay(args) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.popupOverlay)) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.popupOverlay, '.e-popup-container').style.display = 'none';
            this.popupOverlay.style.display = 'none';
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.popupOverlay], 'e-popup-overlay');
        }
    }
    setIsModel(element) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(element, '.e-popup-container')) {
            this.popupContainer = this.parent.createElement('div', {
                className: 'e-rte-modal-popup e-popup-container e-center'
            });
            element.parentNode.insertBefore(this.popupContainer, element);
            this.popupContainer.appendChild(element);
            this.popupContainer.style.zIndex = element.style.zIndex;
            this.popupContainer.style.display = 'flex';
            element.style.position = 'relative';
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([element], 'e-popup-modal');
            this.popupOverlay = this.parent.createElement('div', { className: 'e-popup-overlay' });
            // eslint-disable-next-line
            this.popupOverlay.style.zIndex = (parseInt(element.style.zIndex, null) - 1).toString();
            this.popupOverlay.style.display = 'block';
            this.popupContainer.appendChild(this.popupOverlay);
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.popupOverlay, 'click touchmove', this.onPopupOverlay, this);
        }
        else {
            element.parentElement.style.display = 'flex';
            this.popupOverlay = element.nextElementSibling;
            this.popupOverlay.style.display = 'block';
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.popupOverlay], 'e-popup-overlay');
        }
    }
    paletteSelection(dropDownArgs, currentElement) {
        const ele = dropDownArgs.element.querySelector('.e-control.e-colorpicker');
        const colorbox = [].slice.call((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.e-tile', ele.parentElement));
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(colorbox, 'e-selected');
        const style = currentElement.querySelector('.' + CLS_RTE_ELEMENTS).style.borderBottomColor;
        (colorbox.filter((colorbox) => {
            if (colorbox.style.backgroundColor === style) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([colorbox], 'e-selected');
            }
        }));
    }
    /**
     * renderColorPickerDropDown method
     *
     * @param {IColorPickerModel} args - specifies the arguments.
     * @param {string} item - specifies the item.
     * @param {ColorPicker} colorPicker - specifies the colorpicker.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    renderColorPickerDropDown(args, item, colorPicker, defaultColor) {
        // eslint-disable-next-line
        const proxy = this;
        let css = CLS_RTE_ELEMENTS + ' ' + CLS_TB_BTN + ((this.parent.inlineMode) ? (' ' + CLS_INLINE_DROPDOWN) : '');
        css += (' ' + ((item === 'backgroundcolor') ? CLS_BACKGROUND_COLOR_DROPDOWN : CLS_FONT_COLOR_DROPDOWN));
        const content = proxy.parent.createElement('span', { className: CLS_COLOR_CONTENT });
        const inlineEle = proxy.parent.createElement('span', { className: args.cssClass });
        let range;
        let initialBackgroundColor = ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(defaultColor)) ? proxy.parent.backgroundColor.default : defaultColor;
        inlineEle.style.borderBottomColor = (item === 'backgroundcolor') ?
            initialBackgroundColor : proxy.parent.fontColor.default;
        content.appendChild(inlineEle);
        const dropDown = new _syncfusion_ej2_splitbuttons__WEBPACK_IMPORTED_MODULE_2__.DropDownButton({
            target: colorPicker.element.parentElement, cssClass: css,
            enablePersistence: this.parent.enablePersistence, enableRtl: this.parent.enableRtl,
            beforeOpen: (dropDownArgs) => {
                if (proxy.parent.readonly || !proxy.parent.enabled) {
                    dropDownArgs.cancel = true;
                    return;
                }
                const element = (dropDownArgs.event) ? dropDownArgs.event.target : null;
                proxy.currentElement = dropDown.element;
                proxy.currentDropdown = dropDown;
                proxy.paletteSelection(dropDownArgs, proxy.currentElement);
                if (dropDownArgs.event && dropDownArgs.event.type === 'click' && (element.classList.contains(CLS_COLOR_CONTENT)
                    || element.parentElement.classList.contains(CLS_COLOR_CONTENT))) {
                    dropDownArgs.cancel = true;
                    const colorpickerValue = element.classList.contains(CLS_RTE_ELEMENTS) ? element.style.borderBottomColor :
                        element.querySelector('.' + CLS_RTE_ELEMENTS).style.borderBottomColor;
                    proxy.parent.notify(selectionRestore, {});
                    range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.parent.contentModule.getDocument());
                    const parentNode = range.startContainer.parentNode;
                    if ((range.startContainer.nodeName === 'TD' || range.startContainer.nodeName === 'TH' ||
                        ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(range.startContainer.parentNode, 'td,th')) ||
                        (proxy.parent.iframeSettings.enable && !hasClass(parentNode.ownerDocument.querySelector('body'), 'e-lib')))
                        && range.collapsed && args.subCommand === 'BackgroundColor') {
                        proxy.parent.notify(tableColorPickerChanged, {
                            item: { command: args.command, subCommand: args.subCommand,
                                value: colorpickerValue }
                        });
                    }
                    else {
                        proxy.parent.notify(colorPickerChanged, { item: { command: args.command, subCommand: args.subCommand,
                                value: colorpickerValue }
                        });
                    }
                    return;
                }
                else {
                    const ele = dropDownArgs.element.querySelector('.e-control.e-colorpicker');
                    const inst = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)(ele, _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_3__.ColorPicker);
                    inst.showButtons = (dropDownArgs.element.querySelector('.e-color-palette')) ? false : true;
                    inst.dataBind();
                }
                dropDownArgs.element.onclick = (args) => {
                    if (args.target.classList.contains('e-cancel')) {
                        dropDown.toggle();
                    }
                };
            },
            open: (dropDownArgs) => {
                this.setColorPickerContentWidth(colorPicker);
                let focusEle;
                const ele = dropDownArgs.element.querySelector('.e-control.e-colorpicker');
                if (dropDownArgs.element.querySelector('.e-color-palette')) {
                    focusEle = ele.parentElement.querySelector('.e-palette');
                }
                else {
                    focusEle = ele.parentElement.querySelector('e-handler');
                }
                if (focusEle) {
                    focusEle.focus();
                }
                if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {
                    this.popupModal(dropDownArgs.element.parentElement);
                }
                this.pickerRefresh(dropDownArgs);
            },
            beforeClose: (dropDownArgs) => {
                const element = (dropDownArgs.event) ? dropDownArgs.event.target : null;
                if (dropDownArgs.event && dropDownArgs.event.type === 'click' && (element.classList.contains(CLS_COLOR_CONTENT)
                    || element.parentElement.classList.contains(CLS_COLOR_CONTENT))) {
                    const colorpickerValue = element.classList.contains(CLS_RTE_ELEMENTS) ? element.style.borderBottomColor :
                        element.querySelector('.' + CLS_RTE_ELEMENTS).style.borderBottomColor;
                    range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.parent.contentModule.getDocument());
                    if ((range.startContainer.nodeName === 'TD' || range.startContainer.nodeName === 'TH' ||
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(range.startContainer.parentNode, 'td,th')) && range.collapsed) {
                        proxy.parent.notify(tableColorPickerChanged, { item: {
                                command: args.command, subCommand: args.subCommand,
                                value: colorpickerValue
                            }
                        });
                    }
                    else {
                        proxy.parent.notify(colorPickerChanged, { item: { command: args.command, subCommand: args.subCommand,
                                value: colorpickerValue }
                        });
                    }
                    return;
                }
            },
            close: (dropDownArgs) => {
                proxy.parent.notify(selectionRestore, {});
                const dropElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(dropDownArgs.element.parentElement, '.e-popup-container');
                if (dropElement) {
                    dropElement.style.display = 'none';
                    dropElement.lastElementChild.style.display = 'none';
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([dropElement.lastElementChild], 'e-popup-overlay');
                }
                if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(dropElement)) {
                    const popupEle = dropElement.querySelector('.e-dropdown-popup.e-tbar-btn.e-control');
                    if (popupEle) {
                        dropElement.parentNode.insertBefore(popupEle, dropElement.nextSibling);
                        popupEle.style.removeProperty('position');
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([popupEle], 'e-popup-modal');
                    }
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(dropElement);
                    proxy.popupContainer = undefined;
                }
            }
        });
        dropDown.isStringTemplate = true;
        dropDown.createElement = proxy.parent.createElement;
        args.element.setAttribute('role', 'button');
        dropDown.appendTo(args.element);
        const popupElement = document.getElementById(dropDown.element.id + '-popup');
        popupElement.setAttribute('aria-owns', this.parent.getID());
        dropDown.element.insertBefore(content, dropDown.element.querySelector('.e-caret'));
        args.element.tabIndex = -1;
        dropDown.element.removeAttribute('type');
        dropDown.element.onmousedown = () => {
            proxy.parent.notify(selectionSave, {});
        };
        dropDown.element.onkeydown = () => {
            proxy.parent.notify(selectionSave, {});
        };
        return dropDown;
    }
    pickerRefresh(dropDownArgs) {
        if (this.parent.backgroundColor.mode === 'Picker') {
            const popupElem = dropDownArgs.element.parentElement;
            popupElem.style.width = (popupElem.offsetWidth + 5).toString() + 'px';
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)(popupElem, _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_4__.Popup).refreshPosition(popupElem);
            popupElem.style.width = (popupElem.offsetWidth - 5).toString() + 'px';
        }
    }
    popupModal(element) {
        const popupInst = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getInstance)(element, _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_4__.Popup);
        popupInst.relateTo = document.body;
        popupInst.position = { X: 0, Y: 0 };
        popupInst.targetType = 'container';
        popupInst.collision = { X: 'fit', Y: 'fit' };
        popupInst.offsetY = 4;
        popupInst.dataBind();
        this.setIsModel(element);
    }
    setColorPickerContentWidth(colorPicker) {
        const colorPickerContent = colorPicker.element.nextSibling;
        if (colorPickerContent.style.width === '0px') {
            colorPickerContent.style.width = '';
            const borderWidth = parseInt(getComputedStyle(colorPickerContent).borderBottomWidth, 10);
            colorPickerContent.style.width = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(colorPickerContent.children[0].offsetWidth
                + borderWidth + borderWidth);
        }
    }
    /**
     * renderColorPicker method
     *
     * @param {IColorPickerModel} args - specifies the arguments
     * @param {string} item - specifies the string values
     * @returns {void}
     * @hidden
     * @deprecated
     */
    renderColorPicker(args, item) {
        // eslint-disable-next-line
        let proxy = this;
        let value;
        const colorPicker = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_3__.ColorPicker({
            enablePersistence: this.parent.enablePersistence,
            enableRtl: this.parent.enableRtl,
            inline: true,
            value: '#fff',
            created: () => {
                const value = (item === 'backgroundcolor') ? proxy.parent.backgroundColor.default : proxy.parent.fontColor.default;
                colorPicker.setProperties({ value: value });
            },
            mode: ((item === 'backgroundcolor') ? proxy.parent.backgroundColor.mode : proxy.parent.fontColor.mode),
            modeSwitcher: ((item === 'backgroundcolor') ? proxy.parent.backgroundColor.modeSwitcher : proxy.parent.fontColor.modeSwitcher),
            beforeTileRender: (args) => {
                args.element.classList.add(CLS_COLOR_PALETTE);
                args.element.classList.add(CLS_CUSTOM_TILE);
                if (args.value === '') {
                    args.element.classList.add(CLS_NOCOLOR_ITEM);
                }
            },
            change: (colorPickerArgs) => {
                const colorpickerValue = colorPickerArgs.currentValue.rgba;
                colorPickerArgs.item = {
                    command: args.command,
                    subCommand: args.subCommand,
                    value: colorpickerValue
                };
                proxy.parent.notify(selectionRestore, {});
                proxy.currentElement.querySelector('.' + CLS_RTE_ELEMENTS).style.borderBottomColor = colorpickerValue;
                const range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.parent.contentModule.getDocument());
                if ((range.startContainer.nodeName === 'TD' || range.startContainer.nodeName === 'TH' || range.startContainer.nodeName === 'BODY' ||
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(range.startContainer.parentNode, 'td,th')) && range.collapsed && args.subCommand === 'BackgroundColor') {
                    proxy.parent.notify(tableColorPickerChanged, colorPickerArgs);
                }
                else {
                    proxy.parent.notify(colorPickerChanged, colorPickerArgs);
                }
                proxy.currentDropdown.toggle();
            },
            beforeModeSwitch: (args) => {
                value = colorPicker.value;
                if (value === '') {
                    colorPicker.setProperties({ value: ((args.mode === 'Picker') ? '#008000ff' : '') }, true);
                }
                colorPicker.showButtons = args.mode === 'Palette' ? false : true;
            }
        });
        colorPicker.isStringTemplate = true;
        colorPicker.columns = (item === 'backgroundcolor') ? this.parent.backgroundColor.columns : this.parent.fontColor.columns;
        colorPicker.presetColors = (item === 'backgroundcolor') ? this.parent.backgroundColor.colorCode :
            this.parent.fontColor.colorCode;
        colorPicker.cssClass = (item === 'backgroundcolor') ? CLS_BACKGROUND_COLOR_PICKER : CLS_FONT_COLOR_PICKER;
        colorPicker.createElement = this.parent.createElement;
        colorPicker.appendTo(document.getElementById(args.target));
        return colorPicker;
    }
    /**
     * The function is used to render Rich Text Editor toolbar
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    renderPanel() {
        this.getPanel().classList.add(CLS_TOOLBAR);
    }
    /**
     * Get the toolbar element of RichTextEditor
     *
     * @returns {Element} - specifies the element.
     * @hidden
     * @deprecated
     */
    getPanel() {
        return this.toolbarPanel;
    }
    /**
     * Set the toolbar element of RichTextEditor
     *
     * @returns {void}
     * @param  {Element} panel - specifies the element.
     * @hidden
     * @deprecated
     */
    setPanel(panel) {
        this.toolbarPanel = panel;
    }
}

/**
 * `Toolbar` module is used to handle Toolbar actions.
 */
class BaseToolbar {
    constructor(parent, serviceLocator) {
        this.tools = {};
        this.parent = parent;
        this.locator = serviceLocator;
        this.renderFactory = this.locator.getService('rendererFactory');
        this.addEventListener();
        if (this.parent.toolbarSettings && Object.keys(this.parent.toolbarSettings.itemConfigs).length > 0) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(this.tools, tools, toObjectLowerCase(this.parent.toolbarSettings.itemConfigs), true);
        }
        else {
            this.tools = tools;
        }
    }
    addEventListener() {
        this.parent.on(rtlMode, this.setRtl, this);
        this.parent.on(destroy, this.removeEventListener, this);
    }
    removeEventListener() {
        this.parent.off(rtlMode, this.setRtl);
        this.parent.off(destroy, this.removeEventListener);
    }
    setRtl(args) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.toolbarObj)) {
            this.toolbarObj.setProperties({ enableRtl: args.enableRtl });
        }
    }
    getClass(item) {
        let classes;
        switch (item) {
            case 'fontsize':
                classes = 'e-rte-inline-size-template';
                break;
            case 'fontcolor':
            case 'backgroundcolor':
                classes = 'e-rte-inline-color-template';
                break;
            default:
                classes = 'e-rte-inline-template';
                break;
        }
        return classes;
    }
    getTemplateObject(itemStr, container) {
        let tagName;
        switch (itemStr) {
            case 'fontcolor':
            case 'backgroundcolor':
            case 'numberformatlist':
            case 'bulletformatlist':
                tagName = 'span';
                break;
            default:
                tagName = 'button';
                break;
        }
        return {
            command: this.tools[itemStr.toLocaleLowerCase()].command,
            subCommand: this.tools[itemStr.toLocaleLowerCase()].subCommand,
            template: this.parent.createElement(tagName, {
                id: this.parent.getID() + '_' + container
                    + '_' + this.tools[itemStr.toLocaleLowerCase()].id
            }).outerHTML,
            cssClass: this.parent.inlineMode.enable ? this.getClass(itemStr) : '',
            tooltipText: getTooltipText(itemStr, this.locator)
        };
    }
    /**
     * getObject method
     *
     * @param {string} item - specifies the string value
     * @param {string} container - specifies the value of string
     * @returns {IToolbarItemModel} - returns the model element
     * @hidden
     * @deprecated
     */
    getObject(item, container) {
        const itemStr = item.toLowerCase();
        if (templateItems.indexOf(itemStr) !== -1) {
            return this.getTemplateObject(itemStr, container);
        }
        else {
            switch (itemStr) {
                case '|':
                    return { type: 'Separator' };
                case '-':
                    return { type: 'Separator', cssClass: CLS_HR_SEPARATOR };
                default:
                    return {
                        id: this.parent.getID() + '_' + container + '_' + this.tools[itemStr.toLocaleLowerCase()].id,
                        prefixIcon: this.tools[itemStr.toLocaleLowerCase()].icon,
                        tooltipText: getTooltipText(itemStr, this.locator),
                        command: this.tools[itemStr.toLocaleLowerCase()].command,
                        subCommand: this.tools[itemStr.toLocaleLowerCase()].subCommand
                    };
            }
        }
    }
    /**
     * @param {string} tbItems - specifies the string value
     * @param {string} container - specifies the container value
     * @returns {ItemModel} - retunrs the model element
     * @hidden
     * @deprecated
     */
    getItems(tbItems, container) {
        if (this.parent.toolbarSettings.items.length < 1) {
            return [];
        }
        const items = [];
        for (const item of tbItems) {
            switch (typeof item) {
                case 'string':
                    items.push(this.getObject(item, container));
                    break;
                default:
                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item.click)) {
                        const proxy = item;
                        const callback = proxy.click;
                        proxy.click = () => {
                            if (proxy.undo && this.parent.formatter.getUndoRedoStack().length === 0) {
                                this.parent.formatter.saveData();
                            }
                            callback.call(this);
                            if ((this.parent.formatter.getUndoRedoStack()[this.parent.formatter.getUndoRedoStack().length - 1].text.trim()
                                === this.parent.inputElement.innerHTML.trim())) {
                                return;
                            }
                            if (proxy.undo) {
                                this.parent.formatter.saveData();
                            }
                        };
                    }
                    items.push(item);
            }
        }
        return items;
    }
    getToolbarOptions(args) {
        return {
            target: args.target,
            rteToolbarObj: this,
            items: this.getItems(args.items, args.container),
            overflowMode: args.mode,
            enablePersistence: this.parent.enablePersistence,
            enableRtl: this.parent.enableRtl
        };
    }
    /**
     * render method
     *
     * @param {IToolbarRenderOptions} args - specifies the toolbar options
     * @returns {void}
     * @hidden
     * @deprecated
     */
    render(args) {
        this.toolbarRenderer = this.renderFactory.getRenderer(RenderType.Toolbar);
        this.toolbarRenderer.renderToolbar(this.getToolbarOptions(args));
    }
}

/**
 * `Toolbar` module is used to handle Toolbar actions.
 */
class DropDownButtons {
    constructor(parent, serviceLocator) {
        this.parent = parent;
        this.locator = serviceLocator;
        this.renderFactory = this.locator.getService('rendererFactory');
        this.addEventListener();
    }
    initializeInstance() {
        this.toolbarRenderer = this.renderFactory.getRenderer(RenderType.Toolbar);
    }
    beforeRender(args) {
        const item = args.item;
        if (item.cssClass) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([args.element], item.cssClass);
        }
        if (item.command === 'Alignments' || item.subCommand === 'JustifyLeft'
            || item.subCommand === 'JustifyRight' || item.subCommand === 'JustifyCenter') {
            args.element.setAttribute('title', getTooltipText(item.subCommand.toLocaleLowerCase(), this.locator));
        }
    }
    dropdownContent(width, type, content) {
        return ('<span style="display: inline-flex;' + 'width:' + ((type === 'quick') ? 'auto' : width) + '" >' +
            '<span class="e-rte-dropdown-btn-text">' + content + '</span></span>');
    }
    /**
     * renderDropDowns method
     *
     * @param {IDropDownRenderArgs} args - specifies the arguments
     * @returns {void}
     * @hidden
     * @deprecated
     */
    renderDropDowns(args) {
        this.initializeInstance();
        const type = args.containerType;
        const tbElement = args.container;
        templateItems.forEach((item) => {
            let targetElement = undefined;
            if (getIndex(item, args.items) !== -1) {
                switch (item) {
                    case 'numberformatlist': {
                        targetElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parent.getID() + '_' + type + '_NumberFormatList', tbElement);
                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(targetElement) || targetElement.classList.contains(CLS_DROPDOWN_BTN)) {
                            return;
                        }
                        const formatOLItem = this.parent.numberFormatList.types.slice();
                        formatOLItem.forEach((item) => {
                            Object.defineProperties(item, {
                                command: { value: 'Lists', enumerable: true }, subCommand: { value: 'NumberFormatList', enumerable: true }
                            });
                        });
                        this.numberFormatListDropDown = this.toolbarRenderer.renderListDropDown({
                            cssClass: 'e-order-list' + ' ' + CLS_RTE_ELEMENTS + ' ' + CLS_ICONS,
                            itemName: 'NumberFormatList', items: formatOLItem, element: targetElement
                        });
                        break;
                    }
                    case 'bulletformatlist': {
                        targetElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parent.getID() + '_' + type + '_BulletFormatList', tbElement);
                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(targetElement) || targetElement.classList.contains(CLS_DROPDOWN_BTN)) {
                            return;
                        }
                        const formatULItem = this.parent.bulletFormatList.types.slice();
                        formatULItem.forEach((item) => {
                            Object.defineProperties(item, {
                                command: { value: 'Lists', enumerable: true }, subCommand: { value: 'BulletFormatList', enumerable: true }
                            });
                        });
                        this.bulletFormatListDropDown = this.toolbarRenderer.renderListDropDown({
                            cssClass: 'e-unorder-list' + ' ' + CLS_RTE_ELEMENTS + ' ' + CLS_ICONS,
                            itemName: 'BulletFormatList', items: formatULItem, element: targetElement
                        });
                        break;
                    }
                    case 'formats': {
                        targetElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parent.getID() + '_' + type + '_Formats', tbElement);
                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(targetElement) || targetElement.classList.contains(CLS_DROPDOWN_BTN)) {
                            return;
                        }
                        const formatItem = this.parent.format.types.slice();
                        formatItem.forEach((item) => {
                            Object.defineProperties(item, {
                                command: { value: 'Formats', enumerable: true }, subCommand: { value: item.value, enumerable: true }
                            });
                        });
                        const formatContent = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.format.default) ? formatItem[0].text :
                            this.parent.format.default;
                        this.formatDropDown = this.toolbarRenderer.renderDropDownButton({
                            iconCss: ((type === 'quick') ? 'e-formats e-icons' : ''),
                            content: this.dropdownContent(this.parent.format.width, type, ((type === 'quick') ? '' : getDropDownValue(formatItem, formatContent, 'text', 'text'))),
                            cssClass: CLS_DROPDOWN_POPUP + ' ' + CLS_DROPDOWN_ITEMS + ' ' + CLS_FORMATS_TB_BTN,
                            itemName: 'Formats', items: formatItem, element: targetElement
                        });
                        break;
                    }
                    case 'fontname': {
                        targetElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parent.getID() + '_' + type + '_FontName', tbElement);
                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(targetElement) || targetElement.classList.contains(CLS_DROPDOWN_BTN)) {
                            return;
                        }
                        const fontItem = this.parent.fontFamily.items.slice();
                        fontItem.forEach((item) => {
                            Object.defineProperties(item, {
                                command: { value: 'Font', enumerable: true }, subCommand: { value: 'FontName', enumerable: true }
                            });
                        });
                        const fontNameContent = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.fontFamily.default) ? fontItem[0].text :
                            this.parent.fontFamily.default;
                        this.fontNameDropDown = this.toolbarRenderer.renderDropDownButton({
                            iconCss: ((type === 'quick') ? 'e-font-name e-icons' : ''),
                            content: this.dropdownContent(this.parent.fontFamily.width, type, ((type === 'quick') ? '' : getDropDownValue(fontItem, fontNameContent, 'text', 'text'))),
                            cssClass: CLS_DROPDOWN_POPUP + ' ' + CLS_DROPDOWN_ITEMS + ' ' + CLS_FONT_NAME_TB_BTN,
                            itemName: 'FontName', items: fontItem, element: targetElement
                        });
                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.fontFamily.default)) {
                            this.getEditNode().style.fontFamily = this.parent.fontFamily.default;
                        }
                        break;
                    }
                    case 'fontsize': {
                        targetElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parent.getID() + '_' + type + '_FontSize', tbElement);
                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(targetElement) || targetElement.classList.contains(CLS_DROPDOWN_BTN)) {
                            return;
                        }
                        const fontsize = this.parent.fontSize.items.slice();
                        fontsize.forEach((item) => {
                            Object.defineProperties(item, {
                                command: { value: 'Font', enumerable: true }, subCommand: { value: 'FontSize', enumerable: true }
                            });
                        });
                        const fontSizeContent = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.fontSize.default) ? fontsize[1].text :
                            this.parent.fontSize.default;
                        this.fontSizeDropDown = this.toolbarRenderer.renderDropDownButton({
                            content: this.dropdownContent(this.parent.fontSize.width, type, getFormattedFontSize(getDropDownValue(fontsize, fontSizeContent.replace(/\s/g, ''), 'value', 'text'))),
                            cssClass: CLS_DROPDOWN_POPUP + ' ' + CLS_DROPDOWN_ITEMS + ' ' + CLS_FONT_SIZE_TB_BTN,
                            itemName: 'FontSize', items: fontsize, element: targetElement
                        });
                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.fontSize.default)) {
                            this.getEditNode().style.fontSize = this.parent.fontSize.default;
                        }
                        break;
                    }
                    case 'alignments':
                        targetElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parent.getID() + '_' + type + '_Alignments', tbElement);
                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(targetElement) || targetElement.classList.contains(CLS_DROPDOWN_BTN)) {
                            return;
                        }
                        this.alignDropDown = this.toolbarRenderer.renderDropDownButton({
                            iconCss: 'e-justify-left e-icons',
                            cssClass: CLS_DROPDOWN_POPUP + ' ' + CLS_DROPDOWN_ITEMS,
                            itemName: 'Alignments', items: alignmentItems, element: targetElement
                        });
                        break;
                    case 'align':
                        this.imageAlignmentDropDown(type, tbElement, targetElement);
                        break;
                    case 'display':
                        this.imageDisplayDropDown(type, tbElement, targetElement);
                        break;
                    case 'tablerows':
                        this.rowDropDown(type, tbElement, targetElement);
                        break;
                    case 'tablecolumns':
                        this.columnDropDown(type, tbElement, targetElement);
                        break;
                    case 'tablecell':
                        this.cellDropDown(type, tbElement, targetElement);
                        break;
                    case 'tablecellverticalalign':
                        this.verticalAlignDropDown(type, tbElement, targetElement);
                        break;
                    case 'styles':
                        this.tableStylesDropDown(type, tbElement, targetElement);
                        break;
                }
            }
        });
    }
    getUpdateItems(items, value) {
        const dropDownItems = items.slice();
        dropDownItems.forEach((item) => {
            Object.defineProperties(item, {
                command: { value: (value === 'Format' ? 'Formats' : 'Font'), enumerable: true },
                subCommand: { value: (value === 'Format' ? item.value : value), enumerable: true }
            });
        });
        return dropDownItems;
    }
    onPropertyChanged(model) {
        const newProp = model.newProp;
        let type;
        let content;
        for (const prop of Object.keys(newProp)) {
            switch (prop) {
                case 'fontFamily':
                    if (this.fontNameDropDown) {
                        for (const fontFamily$$1 of Object.keys(newProp.fontFamily)) {
                            switch (fontFamily$$1) {
                                case 'default':
                                case 'width': {
                                    const fontItems = this.fontNameDropDown.items;
                                    type = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.fontNameDropDown.element, '.' + CLS_QUICK_TB)) ?
                                        'quick' : 'toolbar';
                                    const fontNameContent = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.fontFamily.default) ? fontItems[0].text :
                                        this.parent.fontFamily.default;
                                    content = this.dropdownContent(this.parent.fontFamily.width, type, ((type === 'quick') ? '' : getDropDownValue(fontItems, fontNameContent, 'text', 'text')));
                                    this.fontNameDropDown.setProperties({ content: content });
                                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.fontFamily.default)) {
                                        this.getEditNode().style.fontFamily = this.parent.fontFamily.default;
                                    }
                                    else {
                                        this.getEditNode().style.removeProperty('font-family');
                                    }
                                    break;
                                }
                                case 'items':
                                    this.fontNameDropDown.setProperties({
                                        items: this.getUpdateItems(newProp.fontFamily.items, 'FontName')
                                    });
                                    break;
                            }
                        }
                    }
                    break;
                case 'fontSize':
                    if (this.fontSizeDropDown) {
                        for (const fontSize$$1 of Object.keys(newProp.fontSize)) {
                            switch (fontSize$$1) {
                                case 'default':
                                case 'width': {
                                    const fontsize = this.fontSizeDropDown.items;
                                    type = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.fontSizeDropDown.element, '.' + CLS_QUICK_TB)) ? 'quick' : 'toolbar';
                                    const fontSizeContent = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.fontSize.default) ? fontsize[1].text :
                                        this.parent.fontSize.default;
                                    content = this.dropdownContent(this.parent.fontSize.width, type, getFormattedFontSize(getDropDownValue(fontsize, fontSizeContent.replace(/\s/g, ''), 'value', 'text')));
                                    this.fontSizeDropDown.setProperties({ content: content });
                                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.fontSize.default)) {
                                        this.getEditNode().style.fontSize = this.parent.fontSize.default;
                                    }
                                    else {
                                        this.getEditNode().style.removeProperty('font-size');
                                    }
                                    break;
                                }
                                case 'items':
                                    this.fontSizeDropDown.setProperties({
                                        items: this.getUpdateItems(newProp.fontSize.items, 'FontSize')
                                    });
                                    break;
                            }
                        }
                    }
                    break;
                case 'format':
                    if (this.formatDropDown) {
                        for (const format of Object.keys(newProp.format)) {
                            switch (format) {
                                case 'default':
                                case 'width': {
                                    const formatItems$$1 = this.formatDropDown.items;
                                    type = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.formatDropDown.element, '.' + CLS_QUICK_TB)) ? 'quick' : 'toolbar';
                                    const formatContent = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.format.default) ? formatItems$$1[0].text :
                                        this.parent.format.default;
                                    content = this.dropdownContent(this.parent.format.width, type, ((type === 'quick') ? '' : getDropDownValue(formatItems$$1, formatContent, 'text', 'text')));
                                    this.formatDropDown.setProperties({ content: content });
                                    break;
                                }
                                case 'types':
                                    this.formatDropDown.setProperties({
                                        items: this.getUpdateItems(newProp.format.types, 'Format')
                                    });
                                    break;
                            }
                        }
                    }
                    break;
            }
        }
    }
    getEditNode() {
        return this.parent.contentModule.getEditPanel();
    }
    rowDropDown(type, tbElement, targetElement) {
        targetElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parent.getID() + '_' + type + '_TableRows', tbElement);
        if (targetElement.classList.contains(CLS_DROPDOWN_BTN)) {
            return;
        }
        this.tableRowsDropDown = this.toolbarRenderer.renderDropDownButton({
            iconCss: 'e-table-rows e-icons',
            cssClass: CLS_DROPDOWN_POPUP + ' ' + CLS_DROPDOWN_ITEMS + ' ' + CLS_QUICK_DROPDOWN,
            itemName: 'TableRows',
            items: tableRowsItems,
            element: targetElement
        });
    }
    columnDropDown(type, tbElement, targetElement) {
        targetElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parent.getID() + '_' + type + '_TableColumns', tbElement);
        if (targetElement.classList.contains(CLS_DROPDOWN_BTN)) {
            return;
        }
        this.tableColumnsDropDown = this.toolbarRenderer.renderDropDownButton({
            iconCss: 'e-table-columns e-icons',
            cssClass: CLS_DROPDOWN_POPUP + ' ' + CLS_DROPDOWN_ITEMS + ' ' + CLS_QUICK_DROPDOWN,
            itemName: 'TableColumns',
            items: tableColumnsItems,
            element: targetElement
        });
    }
    cellDropDown(type, tbElement, targetElement) {
        targetElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parent.getID() + '_' + type + '_TableCell', tbElement);
        if (targetElement.classList.contains(CLS_DROPDOWN_BTN)) {
            return;
        }
        this.tableRowsDropDown = this.toolbarRenderer.renderDropDownButton({
            iconCss: 'e-table-cell e-icons',
            cssClass: CLS_DROPDOWN_POPUP + ' ' + CLS_DROPDOWN_ITEMS + ' ' + CLS_QUICK_DROPDOWN,
            itemName: 'TableCell',
            items: tableCellItems,
            element: targetElement
        });
    }
    verticalAlignDropDown(type, tbElement, targetElement) {
        targetElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parent.getID() + '_' + type + '_TableCellVerticalAlign', tbElement);
        if (targetElement.classList.contains(CLS_DROPDOWN_BTN)) {
            return;
        }
        this.tableCellVerticalAlignDropDown = this.toolbarRenderer.renderDropDownButton({
            iconCss: 'e-table-cell-ver-align e-icons',
            cssClass: CLS_DROPDOWN_POPUP + ' ' + CLS_DROPDOWN_ITEMS + ' ' + CLS_QUICK_DROPDOWN,
            itemName: 'TableCellVerticalAlign',
            items: TableCellVerticalAlignItems,
            element: targetElement
        });
    }
    imageDisplayDropDown(type, tbElement, targetElement) {
        targetElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parent.getID() + '_' + type + '_Display', tbElement);
        if (targetElement.classList.contains(CLS_DROPDOWN_BTN)) {
            return;
        }
        this.displayDropDown = this.toolbarRenderer.renderDropDownButton({
            iconCss: 'e-display e-icons',
            cssClass: CLS_DROPDOWN_POPUP + ' ' + CLS_DROPDOWN_ITEMS + ' ' + CLS_QUICK_DROPDOWN,
            itemName: 'Display',
            items: imageDisplayItems,
            element: targetElement
        });
    }
    imageAlignmentDropDown(type, tbElement, targetElement) {
        targetElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parent.getID() + '_' + type + '_Align', tbElement);
        if (targetElement.classList.contains(CLS_DROPDOWN_BTN)) {
            return;
        }
        this.imageAlignDropDown = this.toolbarRenderer.renderDropDownButton({
            iconCss: 'e-justify-left e-icons',
            cssClass: CLS_DROPDOWN_POPUP + ' ' + CLS_DROPDOWN_ICONS + ' ' + CLS_QUICK_DROPDOWN,
            itemName: 'Align',
            items: imageAlignItems,
            element: targetElement
        });
    }
    tableStylesDropDown(type, tbElement, targetElement) {
        targetElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parent.getID() + '_' + type + '_Styles', tbElement);
        if (targetElement.classList.contains(CLS_DROPDOWN_BTN)) {
            return;
        }
        this.imageAlignDropDown = this.toolbarRenderer.renderDropDownButton({
            iconCss: 'e-style e-icons',
            cssClass: CLS_DROPDOWN_POPUP + ' ' + CLS_DROPDOWN_ICONS + ' ' + CLS_QUICK_DROPDOWN,
            itemName: 'Styles',
            items: this.parent.tableSettings.styles,
            element: targetElement
        });
    }
    removeDropDownClasses(target) {
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([target], [
            CLS_DROPDOWN_BTN,
            CLS_DROPDOWN_POPUP,
            CLS_DROPDOWN_ICONS,
            CLS_DROPDOWN_ITEMS
        ]);
    }
    /**
     * destroyDropDowns method
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    destroyDropDowns() {
        if (this.formatDropDown) {
            this.removeDropDownClasses(this.formatDropDown.element);
            this.formatDropDown.destroy();
        }
        if (this.fontNameDropDown) {
            this.removeDropDownClasses(this.fontNameDropDown.element);
            this.fontNameDropDown.destroy();
        }
        if (this.fontSizeDropDown) {
            this.removeDropDownClasses(this.fontSizeDropDown.element);
            this.fontSizeDropDown.destroy();
        }
        if (this.alignDropDown) {
            this.removeDropDownClasses(this.alignDropDown.element);
            this.alignDropDown.destroy();
        }
        if (this.imageAlignDropDown) {
            this.removeDropDownClasses(this.imageAlignDropDown.element);
            this.imageAlignDropDown.destroy();
        }
        if (this.displayDropDown) {
            this.removeDropDownClasses(this.displayDropDown.element);
            this.displayDropDown.destroy();
        }
        if (this.tableRowsDropDown) {
            this.removeDropDownClasses(this.tableRowsDropDown.element);
            this.tableRowsDropDown.destroy();
        }
        if (this.tableColumnsDropDown) {
            this.removeDropDownClasses(this.tableColumnsDropDown.element);
            this.tableColumnsDropDown.destroy();
        }
        if (this.tableCellVerticalAlignDropDown) {
            this.removeDropDownClasses(this.tableCellVerticalAlignDropDown.element);
            this.tableCellVerticalAlignDropDown.destroy();
        }
        if (this.numberFormatListDropDown) {
            this.removeDropDownClasses(this.numberFormatListDropDown.element);
            this.numberFormatListDropDown.destroy();
        }
        if (this.bulletFormatListDropDown) {
            this.removeDropDownClasses(this.bulletFormatListDropDown.element);
            this.bulletFormatListDropDown.destroy();
        }
    }
    setRtl(args) {
        if (this.formatDropDown) {
            this.formatDropDown.setProperties({ enableRtl: args.enableRtl });
        }
        if (this.fontNameDropDown) {
            this.fontNameDropDown.setProperties({ enableRtl: args.enableRtl });
        }
        if (this.fontSizeDropDown) {
            this.fontSizeDropDown.setProperties({ enableRtl: args.enableRtl });
        }
        if (this.alignDropDown) {
            this.alignDropDown.setProperties({ enableRtl: args.enableRtl });
        }
        if (this.imageAlignDropDown) {
            this.imageAlignDropDown.setProperties({ enableRtl: args.enableRtl });
        }
        if (this.displayDropDown) {
            this.displayDropDown.setProperties({ enableRtl: args.enableRtl });
        }
        if (this.numberFormatListDropDown) {
            this.numberFormatListDropDown.setProperties({ enableRtl: args.enableRtl });
        }
        if (this.bulletFormatListDropDown) {
            this.bulletFormatListDropDown.setProperties({ enableRtl: args.enableRtl });
        }
    }
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(beforeDropDownItemRender, this.beforeRender, this);
        this.parent.on(iframeMouseDown, this.onIframeMouseDown, this);
        this.parent.on(rtlMode, this.setRtl, this);
        this.parent.on(destroy, this.removeEventListener, this);
        this.parent.on(modelChanged, this.onPropertyChanged, this);
    }
    onIframeMouseDown() {
        dispatchEvent(document, 'mousedown');
    }
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(iframeMouseDown, this.onIframeMouseDown);
        this.parent.off(rtlMode, this.setRtl);
        this.parent.off(beforeDropDownItemRender, this.beforeRender);
        this.parent.off(destroy, this.removeEventListener);
        this.parent.off(modelChanged, this.onPropertyChanged);
    }
}

/**
 * ServiceLocator
 *
 * @hidden
 * @deprecated
 */
class ServiceLocator {
    constructor() {
        this.services = {};
    }
    /* eslint-disable */
    /**
     * register method
     *
     * @param {string} name - specifies the name.
     * @param {T} type - specifies the type.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    /* eslint-enable */
    register(name, type) {
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.services[name])) {
            this.services[name] = type;
        }
    }
    /**
     * getService method
     *
     * @param {string} name - specifies the name.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getService(name) {
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.services[name])) {
            // eslint-disable-next-line
            throw `The service ${name} is not registered`;
        }
        return this.services[name];
    }
}

/**
 * RendererFactory
 *
 * @hidden
 * @deprecated
 */
class RendererFactory {
    constructor() {
        this.rendererMap = {};
    }
    /**
     * addRenderer method
     *
     * @param {RenderType} name - specifies the render type
     * @param {IRenderer} type - specifies the renderer.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    addRenderer(name, type) {
        const rName = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getEnumValue)(RenderType, name);
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.rendererMap[rName])) {
            this.rendererMap[rName] = type;
        }
    }
    /**
     * getRenderer method
     *
     * @param {RenderType} name - specifies the render type
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getRenderer(name) {
        const rName = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getEnumValue)(RenderType, name);
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.rendererMap[rName])) {
            // eslint-disable-next-line
            throw `The renderer ${rName} is not found`;
        }
        else {
            return this.rendererMap[rName];
        }
    }
}

/**
 * `ToolbarAction` module is used to toolbar click action
 */
class ToolbarAction {
    constructor(parent) {
        this.parent = parent;
        this.addEventListener();
        this.serviceLocator = new ServiceLocator;
        this.serviceLocator.register('rendererFactory', new RendererFactory);
    }
    addEventListener() {
        this.parent.on(toolbarClick, this.toolbarClick, this);
        this.parent.on(dropDownSelect, this.dropDownSelect, this);
        this.parent.on(colorPickerChanged, this.renderSelection, this);
        this.parent.on(destroy, this.removeEventListener, this);
    }
    toolbarClick(args) {
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.item)) {
            return;
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.item.controlParent)) {
            // eslint-disable-next-line
            let activeEle = args.item.controlParent
                .activeEle;
            if (activeEle) {
                activeEle.tabIndex = -1;
            }
        }
        if (args.item.command === 'NumberFormatList' || args.item.command === 'BulletFormatList') {
            if (args.originalEvent.target.classList.contains('e-order-list') || args.originalEvent.target.classList.contains('e-unorder-list')) {
                args.item.command = 'Lists';
                args.item.subCommand = args.item.subCommand === 'NumberFormatList' ? 'OL' : 'UL';
            }
        }
        if (args.item.command === 'Lists') {
            if (args.originalEvent.target.classList.contains('e-caret') &&
                (args.originalEvent.target.parentElement.classList.contains('e-rte-bulletformatlist-dropdown') || args.originalEvent.target.parentElement.classList.contains('e-rte-numberformatlist-dropdown'))) {
                args.item.command = args.item.subCommand = null;
            }
        }
        this.parent.notify(htmlToolbarClick, args);
        this.parent.notify(markdownToolbarClick, args);
    }
    dropDownSelect(e) {
        this.parent.notify(selectionRestore, {});
        if (!(document.body.contains(document.body.querySelector('.e-rte-quick-toolbar'))
            && e.item && (e.item.command === 'Images' || e.item.command === 'Display' || e.item.command === 'Table'))) {
            const value = e.item.controlParent && this.parent.quickToolbarModule && this.parent.quickToolbarModule.tableQTBar
                && this.parent.quickToolbarModule.tableQTBar.element.contains(e.item.controlParent.element) ? 'Table' : null;
            if (e.item.command === 'Lists') {
                const listItem = { listStyle: e.item.value, listImage: e.item.listImage, type: e.item.subCommand };
                this.parent.formatter.process(this.parent, e, e.originalEvent, listItem);
            }
            else {
                this.parent.formatter.process(this.parent, e, e.originalEvent, value);
            }
        }
        this.parent.notify(selectionSave, {});
    }
    renderSelection(args) {
        this.parent.notify(selectionRestore, {});
        this.parent.formatter.process(this.parent, args, args.originalEvent, null);
        this.parent.notify(selectionSave, {});
    }
    removeEventListener() {
        this.parent.off(toolbarClick, this.toolbarClick);
        this.parent.off(dropDownSelect, this.dropDownSelect);
        this.parent.off(colorPickerChanged, this.renderSelection);
        this.parent.off(destroy, this.removeEventListener);
    }
}

/**
 * `Toolbar` module is used to handle Toolbar actions.
 */
class Toolbar$2 {
    constructor(parent, serviceLocator) {
        this.parent = parent;
        this.isToolbar = false;
        this.locator = serviceLocator;
        this.isTransformChild = false;
        this.renderFactory = this.locator.getService('rendererFactory');
        updateDropDownLocale(this.parent);
        updateDropDownFontFormatLocale(this.parent);
        this.renderFactory.addRenderer(RenderType.Toolbar, new ToolbarRenderer(this.parent));
        this.toolbarRenderer = this.renderFactory.getRenderer(RenderType.Toolbar);
        this.baseToolbar = new BaseToolbar(this.parent, this.locator);
        this.addEventListener();
        if (this.parent.toolbarSettings && Object.keys(this.parent.toolbarSettings.itemConfigs).length > 0) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(this.tools, tools, toObjectLowerCase(this.parent.toolbarSettings.itemConfigs), true);
        }
        else {
            this.tools = tools;
        }
    }
    initializeInstance() {
        this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);
        this.editableElement = this.contentRenderer.getEditPanel();
        this.editPanel = this.contentRenderer.getPanel();
    }
    toolbarBindEvent() {
        if (!this.parent.inlineMode.enable) {
            this.keyBoardModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.KeyboardEvents(this.getToolbarElement(), {
                keyAction: this.toolBarKeyDown.bind(this), keyConfigs: this.parent.formatter.keyConfig, eventName: 'keydown'
            });
        }
    }
    toolBarKeyDown(e) {
        switch (e.action) {
            case 'escape':
                this.parent.contentModule.getEditPanel().focus();
                break;
        }
    }
    createToolbarElement() {
        this.tbElement = this.parent.createElement('div', { id: this.parent.getID() + '_toolbar' });
        if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && this.parent.inlineMode.enable && isIDevice()) {
            return;
        }
        else {
            if (this.parent.toolbarSettings.enableFloating && !this.parent.inlineMode.enable) {
                this.tbWrapper = this.parent.createElement('div', {
                    id: this.parent.getID() + '_toolbar_wrapper',
                    innerHTML: this.tbElement.outerHTML,
                    className: CLS_TB_WRAP
                });
                this.tbElement = this.tbWrapper.firstElementChild;
                this.parent.element.insertBefore(this.tbWrapper, this.editPanel);
            }
            else {
                this.parent.element.insertBefore(this.tbElement, this.editPanel);
            }
        }
    }
    getToolbarMode() {
        let tbMode;
        switch (this.parent.toolbarSettings.type) {
            case ToolbarType.Expand:
                tbMode = 'Extended';
                break;
            case ToolbarType.Scrollable:
                tbMode = 'Scrollable';
                break;
            default:
                tbMode = 'MultiRow';
        }
        if (isIDevice() && this.parent.toolbarSettings.type === ToolbarType.Expand) {
            tbMode = ToolbarType.Scrollable;
        }
        return tbMode;
    }
    checkToolbarResponsive(ele) {
        if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || isIDevice()) {
            return false;
        }
        let tBarMode;
        if (this.parent.toolbarSettings.type === ToolbarType.Expand) {
            tBarMode = ToolbarType.MultiRow;
        }
        else {
            tBarMode = this.parent.toolbarSettings.type;
        }
        this.baseToolbar.render({
            container: ((this.parent.inlineMode.enable) ? 'quick' : 'toolbar'),
            items: this.parent.toolbarSettings.items,
            mode: tBarMode,
            target: ele
        });
        if (this.parent.toolbarSettings.type === ToolbarType.Expand) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([ele], ['e-rte-tb-mobile']);
            if (this.parent.inlineMode.enable) {
                this.addFixedTBarClass();
            }
            else {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([ele], [CLS_TB_STATIC]);
            }
        }
        this.wireEvents();
        this.dropDownModule.renderDropDowns({
            container: ele,
            containerType: ((this.parent.inlineMode.enable) ? 'quick' : 'toolbar'),
            items: this.parent.toolbarSettings.items
        });
        this.parent.notify(renderColorPicker, {
            container: this.tbElement,
            containerType: ((this.parent.inlineMode.enable) ? 'quick' : 'toolbar'),
            items: this.parent.toolbarSettings.items
        });
        return true;
    }
    checkIsTransformChild() {
        this.isTransformChild = false;
        const transformElements = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('[style*="transform"]', document);
        for (let i = 0; i < transformElements.length; i++) {
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(transformElements[i].contains) && transformElements[i].contains(this.parent.element)) {
                this.isTransformChild = true;
                break;
            }
        }
    }
    toggleFloatClass(e) {
        let topValue;
        let isBody = false;
        let isFloat = false;
        let scrollParent;
        const floatOffset = this.parent.floatingToolbarOffset;
        if (e && this.parent.iframeSettings.enable && this.parent.inputElement.ownerDocument === e.target) {
            scrollParent = e.target.body;
        }
        else if (e && e.target !== document) {
            scrollParent = e.target;
        }
        else {
            isBody = true;
            scrollParent = document.body;
        }
        const tbHeight = this.getToolbarHeight() + this.getExpandTBarPopHeight();
        if (this.isTransformChild) {
            topValue = 0;
            let scrollParentRelativeTop = 0;
            const trgHeight = this.parent.element.offsetHeight;
            if (isBody) {
                const bodyStyle = window.getComputedStyle(scrollParent);
                scrollParentRelativeTop = parseFloat(bodyStyle.marginTop.split('px')[0]) + parseFloat(bodyStyle.paddingTop.split('px')[0]);
            }
            const targetTop = this.parent.element.getBoundingClientRect().top;
            const scrollParentYOffset = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isMSPointer && isBody) ? window.pageYOffset : scrollParent.parentElement.scrollTop;
            const scrollParentRect = scrollParent.getBoundingClientRect();
            const scrollParentTop = (!isBody) ? scrollParentRect.top : (scrollParentRect.top + scrollParentYOffset);
            const outOfRange = ((targetTop - ((!isBody) ? scrollParentTop : 0))
                + trgHeight > tbHeight + floatOffset) ? false : true;
            if (targetTop > (scrollParentTop + floatOffset) || targetTop < -trgHeight || ((targetTop < 0) ? outOfRange : false)) {
                isFloat = false;
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.tbElement], [CLS_TB_ABS_FLOAT]);
            }
            else if (targetTop < (scrollParentTop + floatOffset)) {
                if (targetTop < 0) {
                    topValue = (-targetTop) + scrollParentTop;
                }
                else {
                    topValue = scrollParentTop - targetTop;
                }
                topValue = (isBody) ? topValue - scrollParentRelativeTop : topValue;
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.tbElement], [CLS_TB_ABS_FLOAT]);
                isFloat = true;
            }
        }
        else {
            const parent = this.parent.element.getBoundingClientRect();
            if (window.innerHeight < parent.top) {
                return;
            }
            topValue = (e && e.target !== document) ? scrollParent.getBoundingClientRect().top : 0;
            if ((parent.bottom < (floatOffset + tbHeight + topValue)) || parent.bottom < 0 || parent.top > floatOffset + topValue) {
                isFloat = false;
            }
            else if (parent.top < floatOffset) {
                isFloat = true;
            }
        }
        if (!isFloat) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.tbElement], [CLS_TB_FLOAT]);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(this.tbElement, { top: 0 + 'px', width: '100%' });
        }
        else {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.tbElement], [CLS_TB_FLOAT]);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(this.tbElement, { width: this.parent.element.offsetWidth + 'px', top: (floatOffset + topValue) + 'px' });
        }
    }
    renderToolbar() {
        this.initializeInstance();
        this.createToolbarElement();
        if (this.checkToolbarResponsive(this.tbElement)) {
            return;
        }
        if (this.parent.inlineMode.enable) {
            this.parent.notify(renderInlineToolbar, {});
        }
        else {
            this.baseToolbar.render({
                container: 'toolbar',
                items: this.parent.toolbarSettings.items,
                mode: this.getToolbarMode(),
                target: this.tbElement
            });
            if (!this.parent.inlineMode.enable) {
                if (this.parent.toolbarSettings.enableFloating) {
                    this.checkIsTransformChild();
                    this.toggleFloatClass();
                }
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.parent.element], [CLS_RTE_TB_ENABLED]);
                if (this.parent.toolbarSettings.type === ToolbarType.Expand) {
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.parent.element], [CLS_RTE_EXPAND_TB]);
                }
            }
        }
        this.wireEvents();
        if (this.parent.inlineMode.enable && !isIDevice()) {
            this.addFixedTBarClass();
        }
        if (!this.parent.inlineMode.enable) {
            this.dropDownModule.renderDropDowns({
                container: this.tbElement,
                containerType: 'toolbar',
                items: this.parent.toolbarSettings.items
            });
            this.parent.notify(renderColorPicker, {
                container: this.tbElement,
                containerType: 'toolbar',
                items: this.parent.toolbarSettings.items
            });
            this.refreshToolbarOverflow();
        }
        const divEle = this.parent.element.querySelector('.e-rte-srctextarea');
        const iframeEle = this.parent.element.querySelector('.e-source-content');
        if ((!this.parent.iframeSettings.enable && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(divEle) && divEle.style.display === 'block')) ||
            (this.parent.iframeSettings.enable && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(iframeEle) && iframeEle.style.display === 'block'))) {
            this.parent.notify(updateToolbarItem, {
                targetItem: 'SourceCode', updateItem: 'Preview',
                baseToolbar: this.parent.getBaseToolbarObject()
            });
            this.parent.disableToolbarItem(this.parent.toolbarSettings.items);
        }
    }
    /**
     * addFixedTBarClass method
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    addFixedTBarClass() {
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.tbElement], [CLS_TB_FIXED]);
    }
    /**
     * removeFixedTBarClass method
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    removeFixedTBarClass() {
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.tbElement], [CLS_TB_FIXED]);
    }
    showFixedTBar() {
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.tbElement], [CLS_SHOW]);
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIos) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.tbElement], [CLS_TB_IOS_FIX]);
        }
    }
    hideFixedTBar() {
        // eslint-disable-next-line
        (!this.isToolbar) ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.tbElement], [CLS_SHOW, CLS_TB_IOS_FIX]) : this.isToolbar = false;
    }
    /**
     * updateItem method
     *
     * @param {IUpdateItemsModel} args - specifies the arguments.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    updateItem(args) {
        const item = this.tools[args.updateItem.toLocaleLowerCase()];
        const trgItem = this.tools[args.targetItem.toLocaleLowerCase()];
        const index = getTBarItemsIndex(getCollection(trgItem.subCommand), args.baseToolbar.toolbarObj.items)[0];
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(index)) {
            const prefixId = this.parent.inlineMode.enable ? '_quick_' : '_toolbar_';
            args.baseToolbar.toolbarObj.items[index].id = this.parent.getID() + prefixId + item.id;
            args.baseToolbar.toolbarObj.items[index].prefixIcon = item.icon;
            args.baseToolbar.toolbarObj.items[index].tooltipText = item.tooltip;
            args.baseToolbar.toolbarObj.items[index].subCommand = item.subCommand;
            args.baseToolbar.toolbarObj.dataBind();
        }
        else {
            this.addTBarItem(args, 0);
        }
    }
    updateToolbarStatus(args) {
        if (!this.tbElement || (this.parent.inlineMode.enable && (isIDevice() || !_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice))) {
            return;
        }
        const options = {
            args: args,
            dropDownModule: this.dropDownModule,
            parent: this.parent,
            tbElements: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + CLS_TB_ITEM, this.tbElement),
            tbItems: this.baseToolbar.toolbarObj.items
        };
        setToolbarStatus(options, (this.parent.inlineMode.enable ? true : false), this.parent);
    }
    fullScreen(e) {
        this.parent.fullScreenModule.showFullScreen(e);
    }
    hideScreen(e) {
        this.parent.fullScreenModule.hideFullScreen(e);
    }
    /**
     * getBaseToolbar method
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getBaseToolbar() {
        return this.baseToolbar;
    }
    /**
     * addTBarItem method
     *
     * @param {IUpdateItemsModel} args - specifies the arguments.
     * @param {number} index - specifies the index value.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    addTBarItem(args, index) {
        args.baseToolbar.toolbarObj.addItems([args.baseToolbar.getObject(args.updateItem, 'toolbar')], index);
    }
    /**
     * enableTBarItems method
     *
     * @param {BaseToolbar} baseToolbar - specifies the toolbar.
     * @param {string} items - specifies the string value.
     * @param {boolean} isEnable - specifies the boolean value.
     * @param {boolean} muteToolbarUpdate - specifies the toolbar.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    enableTBarItems(baseToolbar, items, isEnable, muteToolbarUpdate) {
        const trgItems = getTBarItemsIndex(getCollection(items), baseToolbar.toolbarObj.items);
        this.tbItems = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + CLS_TB_ITEM, baseToolbar.toolbarObj.element);
        for (let i = 0; i < trgItems.length; i++) {
            const item = this.tbItems[trgItems[i]];
            if (item) {
                baseToolbar.toolbarObj.enableItems(item, isEnable);
            }
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.e-rte-srctextarea', this.parent.element) && !muteToolbarUpdate) {
            updateUndoRedoStatus(baseToolbar, this.parent.formatter.editorManager.undoRedoManager.getUndoStatus());
        }
    }
    /**
     * removeTBarItems method
     *
     * @param {string} items - specifies the string value.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    removeTBarItems(items) {
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.baseToolbar.toolbarObj)) {
            this.baseToolbar = this.parent.getBaseToolbarObject();
        }
        const trgItems = getTBarItemsIndex(getCollection(items), this.baseToolbar.toolbarObj.items);
        this.tbItems = (this.parent.inlineMode.enable) ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + CLS_TB_ITEM, this.baseToolbar.toolbarObj.element)
            : (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + CLS_TB_ITEM, this.parent.element);
        for (let i = 0; i < trgItems.length; i++) {
            this.baseToolbar.toolbarObj.removeItems(this.tbItems[trgItems[i]]);
        }
    }
    /**
     * getExpandTBarPopHeight method
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getExpandTBarPopHeight() {
        let popHeight = 0;
        if (this.parent.toolbarSettings.type === ToolbarType.Expand && this.tbElement.classList.contains('e-extended-toolbar')) {
            const expandPopup = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.e-toolbar-extended', this.tbElement);
            if (expandPopup && this.tbElement.classList.contains('e-expand-open')
                || expandPopup && expandPopup.classList.contains('e-popup-open')) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([expandPopup], [CLS_VISIBLE]);
                popHeight = popHeight + expandPopup.offsetHeight;
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([expandPopup], [CLS_VISIBLE]);
            }
            else {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.tbElement], [CLS_EXPAND_OPEN]);
            }
        }
        return popHeight;
    }
    /**
     * getToolbarHeight method
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getToolbarHeight() {
        return this.tbElement.offsetHeight;
    }
    /**
     * getToolbarElement method
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getToolbarElement() {
        return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + CLS_TOOLBAR, this.parent.element);
    }
    /**
     * refreshToolbarOverflow method
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    refreshToolbarOverflow() {
        this.baseToolbar.toolbarObj.refreshOverflow();
    }
    isToolbarDestroyed() {
        return this.baseToolbar.toolbarObj && !this.baseToolbar.toolbarObj.isDestroyed;
    }
    destroyToolbar() {
        if (this.isToolbarDestroyed()) {
            this.parent.unWireScrollElementsEvents();
            this.unWireEvents();
            this.parent.notify(destroyColorPicker, {});
            this.dropDownModule.destroyDropDowns();
            this.baseToolbar.toolbarObj.destroy();
            this.removeEventListener();
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.parent.element], [CLS_RTE_TB_ENABLED]);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.parent.element], [CLS_RTE_EXPAND_TB]);
            const tbWrapper = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + CLS_TB_WRAP, this.parent.element);
            const tbElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + CLS_TOOLBAR, this.parent.element);
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(tbWrapper)) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(tbWrapper);
            }
            else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(tbElement)) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(tbElement);
            }
        }
    }
    /**
     * Destroys the ToolBar.
     *
     * @function destroy
     * @returns {void}
     * @hidden
     * @deprecated
     */
    destroy() {
        if (this.isToolbarDestroyed()) {
            this.destroyToolbar();
            if (this.keyBoardModule) {
                this.keyBoardModule.destroy();
            }
        }
    }
    scrollHandler(e) {
        if (!this.parent.inlineMode.enable) {
            if (this.parent.toolbarSettings.enableFloating && this.getDOMVisibility(this.tbElement)) {
                this.toggleFloatClass(e.args);
            }
        }
    }
    getDOMVisibility(el) {
        if (!el.offsetParent && el.offsetWidth === 0 && el.offsetHeight === 0) {
            return false;
        }
        return true;
    }
    mouseDownHandler() {
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && this.parent.inlineMode.enable && !isIDevice()) {
            this.showFixedTBar();
        }
    }
    focusChangeHandler() {
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && this.parent.inlineMode.enable && !isIDevice()) {
            this.isToolbar = false;
            this.hideFixedTBar();
        }
    }
    dropDownBeforeOpenHandler() {
        this.isToolbar = true;
    }
    // eslint-disable-next-line
    tbFocusHandler(e) {
        const activeElm = document.activeElement;
        const isToolbaractive = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(activeElm, '.e-rte-toolbar');
        if (activeElm === this.parent.getToolbarElement() || isToolbaractive === this.parent.getToolbarElement()) {
            const toolbarItem = this.parent.getToolbarElement().querySelectorAll('.e-expended-nav');
            for (let i = 0; i < toolbarItem.length; i++) {
                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.getToolbarElement().querySelector('.e-insert-table-btn'))) {
                    toolbarItem[i].setAttribute('tabindex', '0');
                }
                else {
                    toolbarItem[i].setAttribute('tabindex', '1');
                }
            }
        }
    }
    tbKeydownHandler(e) {
        if (e.target.classList.contains('e-dropdown-btn') ||
            e.target.getAttribute('id') === this.parent.getID() + '_toolbar_CreateTable') {
            e.target.setAttribute('tabindex', '0');
        }
    }
    toolbarClickHandler(e) {
        const trg = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.originalEvent.target, '.e-hor-nav');
        if (trg && this.parent.toolbarSettings.type === ToolbarType.Expand && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(trg)) {
            if (!trg.classList.contains('e-nav-active')) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.tbElement], [CLS_EXPAND_OPEN]);
                this.parent.setContentHeight('toolbar', false);
            }
            else {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.tbElement], [CLS_EXPAND_OPEN]);
                this.parent.setContentHeight('toolbar', true);
            }
        }
        else if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || this.parent.inlineMode.enable) {
            this.isToolbar = true;
        }
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(trg) && this.parent.toolbarSettings.type === ToolbarType.Expand) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.tbElement], [CLS_EXPAND_OPEN]);
        }
    }
    wireEvents() {
        if (this.parent.inlineMode.enable && isIDevice()) {
            return;
        }
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.tbElement, 'focusin', this.tbFocusHandler, this);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.tbElement, 'keydown', this.tbKeydownHandler, this);
    }
    unWireEvents() {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.tbElement, 'focusin', this.tbFocusHandler);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.tbElement, 'keydown', this.tbKeydownHandler);
    }
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.dropDownModule = new DropDownButtons(this.parent, this.locator);
        this.toolbarActionModule = new ToolbarAction(this.parent);
        this.parent.on(initialEnd, this.renderToolbar, this);
        this.parent.on(scroll, this.scrollHandler, this);
        this.parent.on(bindOnEnd, this.toolbarBindEvent, this);
        this.parent.on(toolbarUpdated, this.updateToolbarStatus, this);
        this.parent.on(modelChanged, this.onPropertyChanged, this);
        this.parent.on(refreshBegin, this.onRefresh, this);
        this.parent.on(destroy, this.destroy, this);
        this.parent.on(enableFullScreen, this.fullScreen, this);
        this.parent.on(disableFullScreen, this.hideScreen, this);
        this.parent.on(updateToolbarItem, this.updateItem, this);
        this.parent.on(beforeDropDownOpen, this.dropDownBeforeOpenHandler, this);
        this.parent.on(expandPopupClick, this.parent.setContentHeight, this.parent);
        this.parent.on(focusChange, this.focusChangeHandler, this);
        this.parent.on(mouseDown, this.mouseDownHandler, this);
        this.parent.on(sourceCodeMouseDown, this.mouseDownHandler, this);
        if (!this.parent.inlineMode.enable && !isIDevice()) {
            this.parent.on(toolbarClick, this.toolbarClickHandler, this);
        }
    }
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(initialEnd, this.renderToolbar);
        this.parent.off(scroll, this.scrollHandler);
        this.parent.off(bindOnEnd, this.toolbarBindEvent);
        this.parent.off(toolbarUpdated, this.updateToolbarStatus);
        this.parent.off(modelChanged, this.onPropertyChanged);
        this.parent.off(refreshBegin, this.onRefresh);
        this.parent.off(destroy, this.destroy);
        this.parent.off(enableFullScreen, this.parent.fullScreenModule.showFullScreen);
        this.parent.off(disableFullScreen, this.parent.fullScreenModule.hideFullScreen);
        this.parent.off(updateToolbarItem, this.updateItem);
        this.parent.off(beforeDropDownOpen, this.dropDownBeforeOpenHandler);
        this.parent.off(expandPopupClick, this.parent.setContentHeight);
        this.parent.off(focusChange, this.focusChangeHandler);
        this.parent.off(mouseDown, this.mouseDownHandler);
        this.parent.off(sourceCodeMouseDown, this.mouseDownHandler);
        if (!this.parent.inlineMode.enable && !isIDevice()) {
            this.parent.off(toolbarClick, this.toolbarClickHandler);
        }
    }
    onRefresh() {
        this.refreshToolbarOverflow();
        this.parent.setContentHeight('', true);
    }
    /**
     * Called internally if any of the property value changed.
     *
     * @param {RichTextEditorModel} e - specifies the string value
     * @returns {void}
     * @hidden
     * @deprecated
     */
    onPropertyChanged(e) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.newProp.inlineMode)) {
            for (const prop of Object.keys(e.newProp.inlineMode)) {
                switch (prop) {
                    case 'enable':
                        this.refreshToolbar();
                        break;
                }
            }
        }
        if (e.module !== this.getModuleName()) {
            return;
        }
        this.refreshToolbar();
    }
    refreshToolbar() {
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.baseToolbar.toolbarObj)) {
            this.baseToolbar = this.parent.getBaseToolbarObject();
        }
        const tbWrapper = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + CLS_TB_WRAP, this.parent.element);
        const tbElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + CLS_TOOLBAR, this.parent.element);
        if (tbElement || tbWrapper) {
            this.destroyToolbar();
        }
        if (this.parent.toolbarSettings.enable) {
            this.addEventListener();
            this.renderToolbar();
            this.parent.wireScrollElementsEvents();
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.e-rte-srctextarea', this.parent.element)) {
                updateUndoRedoStatus(this.baseToolbar, this.parent.formatter.editorManager.undoRedoManager.getUndoStatus());
            }
            this.parent.notify(dynamicModule, {});
        }
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {void}
     * @hidden
     */
    getModuleName() {
        return 'toolbar';
    }
}

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var KeyboardEvents_1;
const keyCode = {
    'backspace': 8,
    'tab': 9,
    'enter': 13,
    'shift': 16,
    'control': 17,
    'alt': 18,
    'pause': 19,
    'capslock': 20,
    'space': 32,
    'escape': 27,
    'pageup': 33,
    'pagedown': 34,
    'end': 35,
    'home': 36,
    'leftarrow': 37,
    'uparrow': 38,
    'rightarrow': 39,
    'downarrow': 40,
    'insert': 45,
    'delete': 46,
    'f1': 112,
    'f2': 113,
    'f3': 114,
    'f4': 115,
    'f5': 116,
    'f6': 117,
    'f7': 118,
    'f8': 119,
    'f9': 120,
    'f10': 121,
    'f11': 122,
    'f12': 123,
    'semicolon': 186,
    'plus': 187,
    'comma': 188,
    'minus': 189,
    'dot': 190,
    'forwardslash': 191,
    'graveaccent': 192,
    'openbracket': 219,
    'backslash': 220,
    'closebracket': 221,
    'singlequote': 222,
    ']': 221,
    '[': 219,
    '=': 187
};
/**
 * KeyboardEvents class enables you to bind key action desired key combinations for ex., Ctrl+A, Delete, Alt+Space etc.
 * ```html
 * <div id='testEle'>  </div>;
 * <script>
 *   let node: HTMLElement = document.querySelector('#testEle');
 *   let kbInstance = new KeyboardEvents({
 *       element: node,
 *       keyConfigs:{ selectAll : 'ctrl+a' },
 *       keyAction: function (e:KeyboardEvent, action:string) {
 *           // handler function code
 *       }
 *   });
 * </script>
 * ```
 *
 * @hidden
 * @deprecated
 */
let KeyboardEvents$1 = KeyboardEvents_1 = class KeyboardEvents$$1 extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Base {
    /**
     * Initializes the KeyboardEvents
     *
     * @param {HTMLElement} element - specifies the elements.
     * @param {KeyboardEventsModel} options - specify the options
     */
    constructor(element, options) {
        super(options, element);
        /**
         * To handle a key press event returns null
         *
         * @param {KeyboardEventArgs} e - specifies the event arguments.
         * @returns {void}
         */
        this.keyPressHandler = (e) => {
            /* eslint-disable */
            const isAltKey = e.altKey;
            const isCtrlKey = e.ctrlKey;
            const isShiftKey = e.shiftKey;
            const isMetaKey = e.metaKey;
            /* eslint-enable */
            const curkeyCode = e.which;
            const keys = Object.keys(this.keyConfigs);
            for (const key of keys) {
                const configCollection = this.keyConfigs[key].split(',');
                for (const rconfig of configCollection) {
                    const rKeyObj = KeyboardEvents_1.getKeyConfigData(rconfig.trim());
                    if (isAltKey === rKeyObj.altKey && (isCtrlKey === rKeyObj.ctrlKey || isMetaKey) &&
                        isShiftKey === rKeyObj.shiftKey && curkeyCode === rKeyObj.keyCode) {
                        e.action = key;
                    }
                }
            }
            if (this.keyAction) {
                this.keyAction(e);
            }
        };
        this.bind();
    }
    /**
     * Unwire bound events and destroy the instance.
     *
     * @returns {void}
     */
    destroy() {
        this.unwireEvents();
        super.destroy();
    }
    /**
     * Function can be used to specify certain action if a property is changed
     *
     * @param {KeyboardEventsModel} newProp - specifies the keyboard event.
     * @param {KeyboardEventsModel} oldProp - specifies the old property.
     * @returns {void}
     * @private
     */
    // eslint-disable-next-line
    onPropertyChanged(newProp, oldProp) {
        // No code are needed
    }
    bind() {
        this.wireEvents();
    }
    /**
     * To get the module name, returns 'keyboard'.
     *
     * @returns {void}
     */
    getModuleName() {
        return 'keyboard';
    }
    /**
     * Wiring event handlers to events
     *
     * @returns {void}
     */
    wireEvents() {
        this.element.addEventListener(this.eventName, this.keyPressHandler);
    }
    /**
     * Unwiring event handlers to events
     *
     * @returns {void}
     */
    unwireEvents() {
        this.element.removeEventListener(this.eventName, this.keyPressHandler);
    }
    /**
     * To get the key configuration data
     *
     * @param {string} config - configuration data
     * @returns {KeyData} - specifies the key data
     */
    static getKeyConfigData(config) {
        if (config in this.configCache) {
            return this.configCache[config];
        }
        const keys = config.toLowerCase().split('+');
        const keyData = {
            altKey: (keys.indexOf('alt') !== -1 ? true : false),
            ctrlKey: (keys.indexOf('ctrl') !== -1 ? true : false),
            shiftKey: (keys.indexOf('shift') !== -1 ? true : false),
            keyCode: null
        };
        if (keys[keys.length - 1].length > 1 && !!Number(keys[keys.length - 1])) {
            keyData.keyCode = Number(keys[keys.length - 1]);
        }
        else {
            keyData.keyCode = KeyboardEvents_1.getKeyCode(keys[keys.length - 1]);
        }
        KeyboardEvents_1.configCache[config] = keyData;
        return keyData;
    }
    // Return the keycode value as string
    static getKeyCode(keyVal) {
        return keyCode[keyVal] || keyVal.toUpperCase().charCodeAt(0);
    }
};
KeyboardEvents$1.configCache = {};
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)({})
], KeyboardEvents$1.prototype, "keyConfigs", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('keyup')
], KeyboardEvents$1.prototype, "eventName", void 0);
__decorate([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], KeyboardEvents$1.prototype, "keyAction", void 0);
KeyboardEvents$1 = KeyboardEvents_1 = __decorate([
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.NotifyPropertyChanges
], KeyboardEvents$1);

/**
 * `Color Picker` module is used to handle ColorPicker actions.
 */
class ColorPickerInput {
    constructor(parent, serviceLocator) {
        this.tools = {};
        this.parent = parent;
        this.locator = serviceLocator;
        this.renderFactory = this.locator.getService('rendererFactory');
        this.addEventListener();
        if (this.parent.toolbarSettings && Object.keys(this.parent.toolbarSettings.itemConfigs).length > 0) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(this.tools, tools, toObjectLowerCase(this.parent.toolbarSettings.itemConfigs), true);
        }
        else {
            this.tools = tools;
        }
    }
    initializeInstance() {
        this.toolbarRenderer = this.renderFactory.getRenderer(RenderType.Toolbar);
    }
    /**
     * renderColorPickerInput method
     *
     * @param {IColorPickerRenderArgs} args - specify the arguments.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    renderColorPickerInput(args) {
        this.initializeInstance();
        const suffixID = args.containerType;
        const tbElement = args.container;
        let targetID;
        let options;
        templateItems.forEach((item) => {
            if (getIndex(item, args.items) !== -1) {
                switch (item) {
                    case 'fontcolor': {
                        targetID = this.parent.getID() + '_' + suffixID + '_FontColor_Target';
                        const fontNode = this.parent.createElement('input');
                        fontNode.id = targetID;
                        fontNode.classList.add(CLS_FONT_COLOR_TARGET);
                        document.body.appendChild(fontNode);
                        options = {
                            cssClass: this.tools[item.toLocaleLowerCase()].icon
                                + ' ' + CLS_RTE_ELEMENTS + ' ' + CLS_ICONS,
                            value: this.tools[item.toLocaleLowerCase()].value,
                            command: this.tools[item.toLocaleLowerCase()].command,
                            subCommand: this.tools[item.toLocaleLowerCase()].subCommand,
                            element: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parent.getID() + '_' + suffixID + '_FontColor', tbElement),
                            target: (targetID)
                        };
                        this.fontColorPicker = this.toolbarRenderer.renderColorPicker(options, 'fontcolor');
                        this.fontColorDropDown = this.toolbarRenderer.renderColorPickerDropDown(options, 'fontcolor', this.fontColorPicker);
                        break;
                    }
                    case 'backgroundcolor': {
                        targetID = this.parent.getID() + '_' + suffixID + '_BackgroundColor_Target';
                        const backNode = this.parent.createElement('input');
                        backNode.id = targetID;
                        backNode.classList.add(CLS_BACKGROUND_COLOR_TARGET);
                        document.body.appendChild(backNode);
                        options = {
                            cssClass: this.tools[item.toLocaleLowerCase()].icon
                                + ' ' + CLS_RTE_ELEMENTS + ' ' + CLS_ICONS,
                            value: this.tools[item.toLocaleLowerCase()].value,
                            command: this.tools[item.toLocaleLowerCase()].command,
                            subCommand: this.tools[item.toLocaleLowerCase()].subCommand,
                            element: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('#' + this.parent.getID() + '_' + suffixID + '_BackgroundColor', tbElement),
                            target: (targetID)
                        };
                        this.backgroundColorPicker = this.toolbarRenderer.renderColorPicker(options, 'backgroundcolor');
                        this.backgroundColorDropDown = this.toolbarRenderer.renderColorPickerDropDown(options, 'backgroundcolor', this.backgroundColorPicker, this.defaultColorPicker);
                        break;
                    }
                }
            }
        });
    }
    destroy() {
        this.removeEventListener();
        this.destroyColorPicker();
    }
    /**
     * destroyColorPicker method
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    destroyColorPicker() {
        if (this.fontColorPicker && !this.fontColorPicker.isDestroyed) {
            this.fontColorPicker.destroy();
        }
        if (this.backgroundColorPicker && !this.backgroundColorPicker.isDestroyed) {
            this.backgroundColorPicker.destroy();
        }
        if (this.fontColorDropDown && !this.fontColorDropDown.isDestroyed) {
            const innerEle = this.fontColorDropDown.element.querySelector('.e-rte-color-content');
            if (innerEle) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(innerEle);
            }
            this.fontColorDropDown.destroy();
        }
        if (this.backgroundColorDropDown && !this.backgroundColorDropDown.isDestroyed) {
            const innerEle = this.backgroundColorDropDown.element.querySelector('.e-rte-color-content');
            if (innerEle) {
                this.defaultColorPicker = innerEle.children[0].style.borderBottomColor;
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(innerEle);
            }
            this.backgroundColorDropDown.destroy();
        }
    }
    setRtl(args) {
        if (this.fontColorPicker) {
            this.fontColorPicker.setProperties({ enableRtl: args.enableRtl });
            this.fontColorDropDown.setProperties({ enableRtl: args.enableRtl });
        }
        if (this.backgroundColorPicker) {
            this.backgroundColorPicker.setProperties({ enableRtl: args.enableRtl });
            this.backgroundColorDropDown.setProperties({ enableRtl: args.enableRtl });
        }
    }
    addEventListener() {
        this.parent.on(toolbarRenderComplete, this.renderColorPickerInput, this);
        this.parent.on(rtlMode, this.setRtl, this);
        this.parent.on(destroy, this.destroy, this);
        this.parent.on(destroyColorPicker, this.destroyColorPicker, this);
        this.parent.on(modelChanged, this.onPropertyChanged, this);
    }
    onPropertyChanged(model) {
        const newProp = model.newProp;
        let element;
        for (const prop of Object.keys(newProp)) {
            switch (prop) {
                case 'fontColor':
                    if (this.fontColorPicker) {
                        for (const font of Object.keys(newProp.fontColor)) {
                            switch (font) {
                                case 'default': {
                                    this.fontColorPicker.setProperties({ value: newProp.fontColor.default });
                                    element = this.fontColorDropDown.element;
                                    const fontBorder = element.querySelector('.' + this.tools['fontcolor'].icon);
                                    fontBorder.style.borderBottomColor = newProp.fontColor.default;
                                    break;
                                }
                                case 'mode':
                                    this.fontColorPicker.setProperties({ mode: newProp.fontColor.mode });
                                    break;
                                case 'columns':
                                    this.fontColorPicker.setProperties({ columns: newProp.fontColor.columns });
                                    break;
                                case 'colorCode':
                                    this.fontColorPicker.setProperties({ presetColors: newProp.fontColor.colorCode });
                                    break;
                                case 'modeSwitcher':
                                    this.fontColorPicker.setProperties({ modeSwitcher: newProp.fontColor.modeSwitcher });
                                    break;
                            }
                        }
                    }
                    break;
                case 'backgroundColor':
                    if (this.backgroundColorPicker) {
                        for (const background of Object.keys(newProp.backgroundColor)) {
                            switch (background) {
                                case 'default': {
                                    this.backgroundColorPicker.setProperties({ value: newProp.backgroundColor.default });
                                    element = this.backgroundColorDropDown.element;
                                    const backgroundBorder = element.querySelector('.' + this.tools['backgroundcolor'].icon);
                                    backgroundBorder.style.borderBottomColor = newProp.backgroundColor.default;
                                    break;
                                }
                                case 'mode':
                                    this.backgroundColorPicker.setProperties({ mode: newProp.backgroundColor.mode });
                                    break;
                                case 'columns':
                                    this.backgroundColorPicker.setProperties({ columns: newProp.backgroundColor.columns });
                                    break;
                                case 'colorCode':
                                    this.backgroundColorPicker.setProperties({ presetColors: newProp.backgroundColor.colorCode });
                                    break;
                                case 'modeSwitcher':
                                    this.backgroundColorPicker.setProperties({ modeSwitcher: newProp.backgroundColor.modeSwitcher });
                                    break;
                            }
                        }
                    }
                    break;
            }
        }
    }
    removeEventListener() {
        this.parent.off(toolbarRenderComplete, this.renderColorPickerInput);
        this.parent.off(destroy, this.destroy);
        this.parent.off(rtlMode, this.setRtl);
        this.parent.off(destroyColorPicker, this.destroyColorPicker);
        this.parent.off(modelChanged, this.onPropertyChanged);
    }
}

/**
 * `Quick toolbar` module is used to handle Quick toolbar actions.
 */
class BaseQuickToolbar {
    constructor(parent, locator) {
        this.parent = parent;
        this.locator = locator;
        this.isDOMElement = false;
        this.renderFactory = this.locator.getService('rendererFactory');
        this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);
        this.popupRenderer = this.renderFactory.getRenderer(RenderType.Popup);
        this.dropDownButtons = new DropDownButtons(this.parent, this.locator);
        this.colorPickerObj = new ColorPickerInput(this.parent, this.locator);
    }
    appendPopupContent() {
        this.toolbarElement = this.parent.createElement('div', { className: CLS_QUICK_TB });
        this.element.appendChild(this.toolbarElement);
    }
    /**
     * render method
     *
     * @param {IQuickToolbarOptions} args - specifies the arguments
     * @returns {void}
     * @hidden
     * @deprecated
     */
    render(args) {
        let className;
        if (args.popupType === 'Image') {
            className = CLS_IMAGE_POP;
        }
        else if (args.popupType === 'Inline') {
            className = CLS_INLINE_POP;
        }
        else {
            className = '';
        }
        const popupId = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getUniqueID)(args.popupType + '_Quick_Popup');
        this.stringItems = args.toolbarItems;
        this.element = this.parent.createElement('div', { id: popupId, className: className + ' ' + CLS_RTE_ELEMENTS });
        this.element.setAttribute('aria-owns', this.parent.getID());
        this.appendPopupContent();
        this.createToolbar(args.toolbarItems, args.mode);
        this.popupRenderer.renderPopup(this);
        this.addEventListener();
    }
    createToolbar(items, mode) {
        this.quickTBarObj = new BaseToolbar(this.parent, this.locator);
        this.quickTBarObj.render({
            container: 'quick',
            target: this.toolbarElement,
            items: items,
            mode: mode
        });
        this.quickTBarObj.toolbarObj.refresh();
    }
    setPosition(e) {
        let x;
        let y;
        const imgWrapper = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, '.e-img-caption');
        const target = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(imgWrapper) ? imgWrapper : e.target;
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.toolbarElement], [CLS_RM_WHITE_SPACE]);
        const targetOffsetTop = target.offsetTop;
        const parentOffsetTop = window.pageYOffset + e.parentData.top;
        if ((targetOffsetTop - e.editTop) > e.popHeight) {
            y = parentOffsetTop + e.tBarElementHeight + (targetOffsetTop - e.editTop) - e.popHeight - 5;
        }
        else if (((e.editTop + e.editHeight) - (targetOffsetTop + target.offsetHeight)) > e.popHeight) {
            y = parentOffsetTop + e.tBarElementHeight + (targetOffsetTop - e.editTop) + target.offsetHeight + 5;
        }
        else {
            y = e.y;
        }
        if (target.offsetWidth > e.popWidth) {
            x = (target.offsetWidth / 2) - (e.popWidth / 2) + e.parentData.left + target.offsetLeft;
        }
        else {
            x = e.parentData.left + target.offsetLeft;
        }
        this.popupObj.position.X = ((x + e.popWidth) > e.parentData.right) ? e.parentData.right - e.popWidth : x;
        this.popupObj.position.Y = (y >= 0) ? y : e.y + 5;
        this.popupObj.dataBind();
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.toolbarElement], [CLS_RM_WHITE_SPACE]);
    }
    checkCollision(e, viewPort, type) {
        let x;
        let y;
        const parentTop = e.parentData.top;
        const contentTop = e.windowY + parentTop + e.tBarElementHeight;
        let collision = [];
        if (viewPort === 'document') {
            collision = (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_4__.isCollide)(e.popup);
        }
        else {
            collision = (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_4__.isCollide)(e.popup, e.parentElement);
        }
        for (let i = 0; i < collision.length; i++) {
            switch (collision[i]) {
                case 'top':
                    if (viewPort === 'document') {
                        y = e.windowY;
                    }
                    else {
                        y = (window.pageYOffset + parentTop) + e.tBarElementHeight;
                    }
                    break;
                case 'bottom': {
                    let posY;
                    if (viewPort === 'document') {
                        if (type === 'inline') {
                            posY = (e.y - e.popHeight - 10);
                        }
                        else {
                            if ((e.windowHeight - (parentTop + e.tBarElementHeight)) > e.popHeight) {
                                if ((contentTop - e.windowHeight) > e.popHeight) {
                                    posY = (contentTop + (e.windowHeight - parentTop)) - e.popHeight;
                                }
                                else {
                                    posY = contentTop;
                                }
                            }
                            else {
                                posY = e.windowY + (parentTop + e.tBarElementHeight);
                            }
                        }
                    }
                    else {
                        if (e.target.tagName !== 'IMG') {
                            posY = (e.parentData.bottom + window.pageYOffset) - e.popHeight - 10;
                        }
                        else {
                            posY = (e.parentData.bottom + window.pageYOffset) - e.popHeight - 5;
                        }
                    }
                    y = posY;
                    break;
                }
                case 'right':
                    if (type === 'inline') {
                        x = window.pageXOffset + (e.windowWidth - (e.popWidth + e.bodyRightSpace + 10));
                    }
                    else {
                        x = e.x - e.popWidth;
                    }
                    break;
                case 'left':
                    if (type === 'inline') {
                        x = 0;
                    }
                    else {
                        x = e.parentData.left;
                    }
                    break;
            }
        }
        this.popupObj.position.X = (x) ? x : this.popupObj.position.X;
        this.popupObj.position.Y = (y) ? y : this.popupObj.position.Y;
        this.popupObj.dataBind();
    }
    /**
     * showPopup method
     *
     * @param {number} x - specifies the x value
     * @param {number} y - specifies the y value
     * @param {Element} target - specifies the element
     * @returns {void}
     * @hidden
     * @deprecated
     */
    showPopup(x, y, target) {
        const eventArgs = { popup: this.popupObj, cancel: false, targetElement: target };
        this.parent.trigger(beforeQuickToolbarOpen, eventArgs, (beforeQuickToolbarArgs) => {
            if (!beforeQuickToolbarArgs.cancel) {
                let editPanelTop;
                let editPanelHeight;
                const bodyStyle = window.getComputedStyle(document.body);
                const bodyRight = parseFloat(bodyStyle.marginRight.split('px')[0]) + parseFloat(bodyStyle.paddingRight.split('px')[0]);
                const windowHeight = window.innerHeight;
                const windowWidth = window.innerWidth;
                const parent = this.parent.element;
                const toolbarAvail = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.getToolbar());
                const tbHeight = toolbarAvail && this.parent.toolbarModule.getToolbarHeight();
                const expTBHeight = toolbarAvail && this.parent.toolbarModule.getExpandTBarPopHeight();
                const tBarHeight = (toolbarAvail) ? (tbHeight + expTBHeight) : 0;
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], [CLS_HIDE]);
                if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !isIDevice()) {
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.parent.getToolbar()], [CLS_HIDE]);
                }
                if (this.parent.iframeSettings.enable) {
                    const cntEle = this.contentRenderer.getPanel().contentWindow;
                    editPanelTop = cntEle.pageYOffset;
                    editPanelHeight = cntEle.innerHeight;
                }
                else {
                    const cntEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.' + CLS_RTE_CONTENT);
                    editPanelTop = (cntEle) ? cntEle.scrollTop : 0;
                    editPanelHeight = (cntEle) ? cntEle.offsetHeight : 0;
                }
                if (!this.parent.inlineMode.enable && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'table')) {
                    this.parent.disableToolbarItem(this.parent.toolbarSettings.items);
                    this.parent.enableToolbarItem(['Undo', 'Redo']);
                }
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)([this.element], document.body);
                this.popupObj.position.X = x + 20;
                this.popupObj.position.Y = y + 20;
                this.popupObj.dataBind();
                this.popupObj.element.classList.add('e-popup-open');
                this.dropDownButtons.renderDropDowns({
                    container: this.toolbarElement,
                    containerType: 'quick',
                    items: this.stringItems
                });
                this.colorPickerObj.renderColorPickerInput({
                    container: this.toolbarElement,
                    containerType: 'quick',
                    items: this.stringItems
                });
                const showPopupData = {
                    x: x, y: y,
                    target: target,
                    editTop: editPanelTop,
                    editHeight: editPanelHeight,
                    popup: this.popupObj.element,
                    popHeight: this.popupObj.element.offsetHeight,
                    popWidth: this.popupObj.element.offsetWidth,
                    parentElement: parent,
                    bodyRightSpace: bodyRight,
                    windowY: window.pageYOffset,
                    windowHeight: windowHeight,
                    windowWidth: windowWidth,
                    parentData: parent.getBoundingClientRect(),
                    tBarElementHeight: tBarHeight
                };
                if (target.tagName === 'IMG') {
                    this.setPosition(showPopupData);
                }
                if (!this.parent.inlineMode.enable) {
                    this.checkCollision(showPopupData, 'parent', '');
                }
                this.checkCollision(showPopupData, 'document', ((this.parent.inlineMode.enable) ? 'inline' : ''));
                this.popupObj.element.classList.remove('e-popup-open');
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], [CLS_HIDE]);
                this.popupObj.show({ name: 'ZoomIn', duration: (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE ? 250 : 400) });
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(this.element, {
                    maxWidth: window.outerWidth + 'px'
                });
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], [CLS_POP]);
                this.isDOMElement = true;
            }
        });
    }
    /**
     * hidePopup method
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    hidePopup() {
        const viewSourcePanel = this.parent.sourceCodeModule.getViewPanel();
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && !isIDevice()) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.parent.getToolbar()], [CLS_HIDE]);
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.getToolbar()) && !this.parent.inlineMode.enable) {
            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(viewSourcePanel) || viewSourcePanel.style.display === 'none') {
                this.parent.enableToolbarItem(this.parent.toolbarSettings.items);
            }
        }
        this.removeEleFromDOM();
        this.isDOMElement = false;
    }
    /**
     * @param {string} item - specifies the string value
     * @param {number} index - specifies the index value
     * @returns {void}
     * @hidden
     * @deprecated
     */
    addQTBarItem(item, index) {
        this.quickTBarObj.toolbarObj.addItems(this.quickTBarObj.getItems(item, 'toolbar'), index);
    }
    /**
     * @param {number} index - specifies the index value
     * @returns {void}
     * @hidden
     * @deprecated
     */
    removeQTBarItem(index) {
        this.quickTBarObj.toolbarObj.removeItems(index);
    }
    removeEleFromDOM() {
        const element = this.popupObj.element;
        if (this.isDOMElement) {
            this.dropDownButtons.destroyDropDowns();
            this.colorPickerObj.destroyColorPicker();
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], [CLS_POP]);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(element);
            const args = this.popupObj;
            this.parent.trigger(quickToolbarClose, args);
        }
    }
    updateStatus(args) {
        const options = {
            args: args,
            dropDownModule: this.dropDownButtons,
            parent: this.parent,
            tbElements: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + CLS_TB_ITEM, this.element),
            tbItems: this.quickTBarObj.toolbarObj.items
        };
        setToolbarStatus(options, true, this.parent);
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.e-rte-srctextarea', this.parent.element)) {
            updateUndoRedoStatus(this.parent.getBaseToolbarObject(), this.parent.formatter.editorManager.undoRedoManager.getUndoStatus());
        }
    }
    /**
     * Destroys the Quick toolbar.
     *
     * @function destroy
     * @returns {void}
     * @hidden
     * @deprecated
     */
    destroy() {
        if (this.popupObj && !this.popupObj.isDestroyed) {
            this.popupObj.destroy();
            this.removeEleFromDOM();
        }
        this.removeEventListener();
    }
    /**
     * addEventListener method
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(destroy, this.destroy, this);
        this.parent.on(modelChanged, this.onPropertyChanged, this);
        if (this.parent.inlineMode.enable) {
            this.parent.on(toolbarUpdated, this.updateStatus, this);
        }
    }
    /**
     * Called internally if any of the property value changed.
     *
     * @param {RichTextEditorModel} e - specifies the model element
     * @returns {void}
     * @hidden
     * @deprecated
     */
    onPropertyChanged(e) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.newProp.inlineMode)) {
            for (const prop of Object.keys(e.newProp.inlineMode)) {
                switch (prop) {
                    case 'enable':
                        if (e.newProp.inlineMode.enable) {
                            this.parent.on(toolbarUpdated, this.updateStatus, this);
                        }
                        else {
                            this.parent.off(toolbarUpdated, this.updateStatus);
                        }
                        break;
                }
            }
        }
    }
    /**
     * removeEventListener method
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(destroy, this.destroy);
        this.parent.off(modelChanged, this.onPropertyChanged);
        if (this.parent.inlineMode.enable) {
            this.parent.off(toolbarUpdated, this.updateStatus);
        }
    }
}

/**
 * `Popup renderer` module is used to render popup in RichTextEditor.
 *
 * @hidden
 * @deprecated
 */
class PopupRenderer {
    /**
     * Constructor for popup renderer module
     *
     * @param {IRichTextEditor} parent - specifies the parent.
     */
    constructor(parent) {
        this.parent = parent;
    }
    quickToolbarOpen() {
        const args = this.popupObj;
        this.parent.trigger(quickToolbarOpen, args);
    }
    /**
     * renderPopup method
     *
     * @param {BaseQuickToolbar} args - specifies  the arguments.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    renderPopup(args) {
        this.setPanel(args.element);
        this.renderPanel();
        args.popupObj = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_4__.Popup(args.element, {
            targetType: 'relative',
            relateTo: this.parent.element,
            open: this.quickToolbarOpen.bind(this)
        });
        this.popupObj = args.popupObj;
        args.popupObj.hide();
    }
    /**
     * The function is used to add popup class in Quick Toolbar
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    renderPanel() {
        this.getPanel().classList.add(CLS_QUICK_POP);
    }
    /**
     * Get the popup element of RichTextEditor
     *
     * @returns {Element} - specifies the element
     * @hidden
     * @deprecated
     */
    getPanel() {
        return this.popupPanel;
    }
    /**
     * Set the popup element of RichTextEditor
     *
     * @returns {void}
     * @param  {Element} panel - specifies the element
     * @hidden
     * @deprecated
     */
    setPanel(panel) {
        this.popupPanel = panel;
    }
}

/**
 * `Quick toolbar` module is used to handle Quick toolbar actions.
 */
class QuickToolbar {
    constructor(parent, locator) {
        this.parent = parent;
        this.locator = locator;
        this.renderFactory = this.locator.getService('rendererFactory');
        this.renderFactory.addRenderer(RenderType.Popup, new PopupRenderer(this.parent));
        this.addEventListener();
    }
    formatItems(items) {
        const formattedItems = [];
        items.forEach((item) => {
            if (typeof item === 'string') {
                switch (item.toLocaleLowerCase()) {
                    case 'open':
                        formattedItems.push('openLink');
                        break;
                    case 'edit':
                        formattedItems.push('editLink');
                        break;
                    case 'unlink':
                        formattedItems.push('removeLink');
                        break;
                    default:
                        formattedItems.push(item);
                        break;
                }
            }
            else {
                formattedItems.push(item);
            }
        });
        return formattedItems;
    }
    getQTBarOptions(popType, mode, items, type) {
        return {
            popupType: popType,
            toolbarItems: items,
            mode: mode,
            renderType: type
        };
    }
    /**
     * createQTBar method
     *
     * @param {string} popupType - specifies the string value
     * @param {string} mode - specifies the string value.
     * @param {string} items - specifies the string.
     * @param {RenderType} type - specifies the render type.
     * @returns {BaseQuickToolbar} - specifies the quick toolbar
     * @hidden
     * @deprecated
     */
    createQTBar(popupType, mode, items, type) {
        if (items.length < 1) {
            return null;
        }
        const qTBar = new BaseQuickToolbar(this.parent, this.locator);
        qTBar.render(this.getQTBarOptions(popupType, mode, this.formatItems(items), type));
        return qTBar;
    }
    initializeQuickToolbars() {
        this.parent.quickToolbarModule = this;
        this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);
        if (this.parent.inlineMode.enable && this.parent.inlineMode.onSelection && isIDevice()) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.contentRenderer.getDocument(), 'selectionchange', this.selectionChangeHandler, this);
        }
    }
    // eslint-disable-next-line
    onMouseDown(e) {
        this.parent.isBlur = false;
        this.parent.isRTE = true;
    }
    keyUpQT(e) {
        if (e.which == 27) {
            this.hideQuickToolbars();
        }
    }
    renderQuickToolbars() {
        if (this.linkQTBar || this.imageQTBar || this.textQTBar || this.tableQTBar) {
            return;
        }
        this.linkQTBar = this.createQTBar('Link', 'Scrollable', this.parent.quickToolbarSettings.link, RenderType.LinkToolbar);
        this.renderFactory.addRenderer(RenderType.LinkToolbar, this.linkQTBar);
        this.textQTBar = this.createQTBar('Text', 'Scrollable', this.parent.quickToolbarSettings.text, RenderType.TextToolbar);
        this.renderFactory.addRenderer(RenderType.TextToolbar, this.textQTBar);
        this.imageQTBar = this.createQTBar('Image', 'MultiRow', this.parent.quickToolbarSettings.image, RenderType.ImageToolbar);
        this.renderFactory.addRenderer(RenderType.ImageToolbar, this.imageQTBar);
        this.tableQTBar = this.createQTBar('Table', 'MultiRow', this.parent.quickToolbarSettings.table, RenderType.TableToolbar);
        this.renderFactory.addRenderer(RenderType.TableToolbar, this.tableQTBar);
        if (this.linkQTBar) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.linkQTBar.element, 'mousedown', this.onMouseDown, this);
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.linkQTBar.element, 'keyup', this.keyUpQT, this);
        }
        if (this.imageQTBar) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.imageQTBar.element, 'mousedown', this.onMouseDown, this);
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.imageQTBar.element, 'keyup', this.keyUpQT, this);
        }
        if (this.textQTBar) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.textQTBar.element, 'mousedown', this.onMouseDown, this);
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.textQTBar.element, 'keyup', this.keyUpQT, this);
        }
        if (this.tableQTBar) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.tableQTBar.element, 'mousedown', this.onMouseDown, this);
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.tableQTBar.element, 'keyup', this.keyUpQT, this);
        }
    }
    renderInlineQuickToolbar() {
        if (this.parent.inlineMode.enable && (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || isIDevice())) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.parent.element], [CLS_INLINE]);
            this.inlineQTBar = this.createQTBar('Inline', 'MultiRow', this.parent.toolbarSettings.items, RenderType.InlineToolbar);
            this.renderFactory.addRenderer(RenderType.InlineToolbar, this.inlineQTBar);
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.inlineQTBar.element, 'mousedown', this.onMouseDown, this);
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.inlineQTBar.element, 'keyup', this.keyUpQT, this);
        }
    }
    /**
     * Method for showing the inline quick toolbar
     *
     * @param {number} x -specifies the value of x.
     * @param {number} y - specifies the y valu.
     * @param {HTMLElement} target - specifies the target element.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    showInlineQTBar(x, y, target) {
        if (this.parent.readonly || target.tagName.toLowerCase() === "img") {
            return;
        }
        this.inlineQTBar.showPopup(x, y, target);
    }
    /**
     * Method for hidding the inline quick toolbar
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    hideInlineQTBar() {
        if (this.inlineQTBar && !hasClass(this.inlineQTBar.element, 'e-popup-close')) {
            this.inlineQTBar.hidePopup();
        }
    }
    /**
     * Method for hidding the quick toolbar
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    hideQuickToolbars() {
        if (this.linkQTBar && !hasClass(this.linkQTBar.element, 'e-popup-close') && document.body.contains(this.linkQTBar.element)) {
            this.linkQTBar.hidePopup();
        }
        if (this.textQTBar && !hasClass(this.textQTBar.element, 'e-popup-close') && document.body.contains(this.textQTBar.element)) {
            this.textQTBar.hidePopup();
        }
        if (this.imageQTBar && !hasClass(this.imageQTBar.element, 'e-popup-close') && document.body.contains(this.imageQTBar.element)) {
            this.imageQTBar.hidePopup();
        }
        if (this.tableQTBar && !hasClass(this.tableQTBar.element, 'e-popup-close') && document.body.contains(this.tableQTBar.element)) {
            this.tableQTBar.hidePopup();
        }
        if (this.parent.inlineMode.enable && (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || isIDevice())) {
            this.hideInlineQTBar();
        }
    }
    deBounce(x, y, target) {
        clearTimeout(this.deBouncer);
        this.deBouncer = window.setTimeout(() => {
            this.showInlineQTBar(x, y, target);
        }, 1000);
    }
    mouseUpHandler(e) {
        if (this.parent.inlineMode.enable && (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || isIDevice())) {
            const args = e.args.touches ?
                e.args.changedTouches[0] : e.args;
            const range = this.parent.getRange();
            let target = e.args.target;
            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + CLS_INLINE_POP, document.body))) {
                if (isIDevice() && e.touchData && e.touchData.prevClientX !== e.touchData.clientX
                    && e.touchData.prevClientY !== e.touchData.clientY) {
                    return;
                }
                this.hideInlineQTBar();
                const parentLeft = this.parent.element.getBoundingClientRect().left;
                this.offsetX = this.parent.iframeSettings.enable ? window.pageXOffset + parentLeft + args.clientX : args.pageX;
                this.offsetY = pageYOffset(args, this.parent.element, this.parent.iframeSettings.enable);
                if (target.nodeName === 'TEXTAREA') {
                    this.showInlineQTBar(this.offsetX, this.offsetY, target);
                }
                else {
                    const closestAnchor = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'a');
                    target = closestAnchor ? closestAnchor : target;
                    const startNode = this.parent.getRange().startContainer.parentElement;
                    const endNode = this.parent.getRange().endContainer.parentElement;
                    if (((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(startNode, 'A')) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(endNode, 'A'))) && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'td,th') || !range.collapsed) &&
                        (target.tagName !== 'IMG' || this.parent.getRange().startOffset !== this.parent.getRange().endOffset)) {
                        if (this.parent.inlineMode.onSelection && range.collapsed) {
                            return;
                        }
                        this.target = target;
                        this.showInlineQTBar(this.offsetX, this.offsetY, target);
                    }
                }
            }
        }
    }
    keyDownHandler() {
        if ((this.parent.inlineMode.enable && (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || isIDevice()))
            && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + CLS_INLINE_POP, document))) {
            this.hideInlineQTBar();
        }
    }
    inlineQTBarMouseDownHandler() {
        if ((this.parent.inlineMode.enable && (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || isIDevice()))
            && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + CLS_INLINE_POP, document))) {
            this.hideInlineQTBar();
        }
    }
    keyUpHandler(e) {
        if (this.parent.inlineMode.enable && !_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {
            if (this.parent.inlineMode.onSelection) {
                return;
            }
            const args = e.args;
            this.deBounce(this.offsetX, this.offsetY, args.target);
        }
    }
    selectionChangeHandler(e) {
        clearTimeout(this.deBouncer);
        this.deBouncer = window.setTimeout(() => {
            this.onSelectionChange(e);
        }, 1000);
    }
    onSelectionChange(e) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + CLS_INLINE_POP, document.body))) {
            return;
        }
        const selection = this.contentRenderer.getDocument().getSelection();
        if (!selection.isCollapsed) {
            this.mouseUpHandler({ args: e });
        }
    }
    /**
     * getInlineBaseToolbar method
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getInlineBaseToolbar() {
        return this.inlineQTBar && this.inlineQTBar.quickTBarObj;
    }
    /**
     * Destroys the ToolBar.
     *
     * @function destroy
     * @returns {void}
     * @hidden
     * @deprecated
     */
    destroy() {
        if (this.linkQTBar) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.linkQTBar.element, 'mousedown', this.onMouseDown);
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.linkQTBar.element, 'keyup', this.keyUpQT);
            this.linkQTBar.destroy();
        }
        if (this.textQTBar) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.textQTBar.element, 'mousedown', this.onMouseDown);
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.textQTBar.element, 'keyup', this.keyUpQT);
            this.textQTBar.destroy();
        }
        if (this.imageQTBar) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.imageQTBar.element, 'mousedown', this.onMouseDown);
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.imageQTBar.element, 'keyup', this.keyUpQT);
            this.imageQTBar.destroy();
        }
        if (this.tableQTBar) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.tableQTBar.element, 'mousedown', this.onMouseDown);
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.tableQTBar.element, 'keyup', this.keyUpQT);
            this.tableQTBar.destroy();
        }
        if (this.inlineQTBar) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.inlineQTBar.element, 'mousedown', this.onMouseDown);
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.inlineQTBar.element, 'keyup', this.keyUpQT);
            if (isIDevice()) {
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(document, 'selectionchange', this.selectionChangeHandler);
            }
            this.inlineQTBar.destroy();
        }
        this.removeEventListener();
    }
    wireInlineQTBarEvents() {
        this.parent.on(mouseUp, this.mouseUpHandler, this);
        this.parent.on(mouseDown, this.inlineQTBarMouseDownHandler, this);
        this.parent.on(keyDown, this.keyDownHandler, this);
        this.parent.on(keyUp, this.keyUpHandler, this);
        this.parent.on(sourceCodeMouseDown, this.mouseUpHandler, this);
        this.parent.on(renderInlineToolbar, this.renderInlineQuickToolbar, this);
    }
    unWireInlineQTBarEvents() {
        this.parent.off(mouseUp, this.mouseUpHandler);
        this.parent.off(mouseDown, this.inlineQTBarMouseDownHandler);
        this.parent.off(keyDown, this.keyDownHandler);
        this.parent.off(keyUp, this.keyUpHandler);
        this.parent.off(sourceCodeMouseDown, this.mouseUpHandler);
        this.parent.off(renderInlineToolbar, this.renderInlineQuickToolbar);
    }
    // eslint-disable-next-line
    toolbarUpdated(args) {
        if (this.linkQTBar && !hasClass(this.linkQTBar.element, 'e-popup-close')) {
            this.linkQTBar.hidePopup();
        }
        if (this.imageQTBar && !hasClass(this.imageQTBar.element, 'e-popup-close')) {
            this.imageQTBar.hidePopup();
        }
        if (this.tableQTBar && !hasClass(this.tableQTBar.element, 'e-popup-close')) {
            this.tableQTBar.hidePopup();
        }
    }
    /**
     * addEventListener
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(initialEnd, this.initializeQuickToolbars, this);
        this.parent.on(mouseDown, this.renderQuickToolbars, this);
        this.parent.on(toolbarUpdated, this.toolbarUpdated, this);
        this.parent.on(drop, this.renderQuickToolbars, this);
        this.wireInlineQTBarEvents();
        this.parent.on(modelChanged, this.onPropertyChanged, this);
        if (this.parent.quickToolbarSettings.actionOnScroll === 'hide') {
            this.parent.on(scroll, this.hideQuickToolbars, this);
            this.parent.on(contentscroll, this.hideQuickToolbars, this);
        }
        this.parent.on(focusChange, this.hideQuickToolbars, this);
        this.parent.on(iframeMouseDown, this.onIframeMouseDown, this);
        this.parent.on(destroy, this.destroy, this);
        this.parent.on(keyDown, this.onKeyDown, this);
        this.parent.on(rtlMode, this.setRtl, this);
    }
    onKeyDown(e) {
        const args = e.args;
        if (args.which === 8 || args.which === 46) {
            if (this.imageQTBar && !hasClass(this.imageQTBar.element, 'e-popup-close')) {
                this.imageQTBar.hidePopup();
            }
        }
    }
    onIframeMouseDown() {
        this.hideQuickToolbars();
        this.hideInlineQTBar();
    }
    setRtl(args) {
        if (this.inlineQTBar) {
            this.inlineQTBar.quickTBarObj.toolbarObj.setProperties({ enableRtl: args.enableRtl });
        }
        if (this.imageQTBar) {
            this.imageQTBar.quickTBarObj.toolbarObj.setProperties({ enableRtl: args.enableRtl });
        }
        if (this.linkQTBar) {
            this.imageQTBar.quickTBarObj.toolbarObj.setProperties({ enableRtl: args.enableRtl });
        }
    }
    /**
     * removeEventListener
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(initialEnd, this.initializeQuickToolbars);
        this.parent.off(mouseDown, this.renderQuickToolbars);
        this.parent.off(toolbarUpdated, this.toolbarUpdated);
        this.parent.off(drop, this.renderQuickToolbars);
        this.unWireInlineQTBarEvents();
        this.parent.off(modelChanged, this.onPropertyChanged);
        if (this.parent.quickToolbarSettings.actionOnScroll === 'hide') {
            this.parent.off(scroll, this.hideQuickToolbars);
            this.parent.off(contentscroll, this.hideQuickToolbars);
        }
        this.parent.off(focusChange, this.hideQuickToolbars);
        this.parent.off(destroy, this.destroy);
        this.parent.off(iframeMouseDown, this.onIframeMouseDown);
        this.parent.off(keyDown, this.onKeyDown);
        this.parent.off(rtlMode, this.setRtl);
    }
    /**
     * Called internally if any of the property value changed.
     *
     * @param {RichTextEditorModel} e - specifies the element.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    onPropertyChanged(e) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.newProp.quickToolbarSettings)) {
            for (const prop of Object.keys(e.newProp.quickToolbarSettings)) {
                switch (prop) {
                    case 'actionOnScroll':
                        if (e.newProp.quickToolbarSettings.actionOnScroll === 'none') {
                            this.parent.off(scroll, this.hideQuickToolbars);
                            this.parent.off(contentscroll, this.hideQuickToolbars);
                        }
                        else {
                            this.parent.on(scroll, this.hideQuickToolbars, this);
                            this.parent.on(contentscroll, this.hideQuickToolbars, this);
                        }
                        break;
                }
            }
        }
        if (e.module !== this.getModuleName()) {
            return;
        }
        if (this.inlineQTBar) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.parent.element], [CLS_INLINE]);
            this.unWireInlineQTBarEvents();
            this.hideInlineQTBar();
        }
        if (this.parent.inlineMode.enable && (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || isIDevice())) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.parent.element], [CLS_INLINE]);
            this.wireInlineQTBarEvents();
        }
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {void}
     * @hidden
     */
    getModuleName() {
        return 'quickToolbar';
    }
}

/**
 * `Count` module is used to handle Count actions.
 */
class Count {
    constructor(parent, serviceLocator) {
        this.parent = parent;
        this.locator = serviceLocator;
        this.renderFactory = this.locator.getService('rendererFactory');
        this.addEventListener();
    }
    initializeInstance() {
        this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);
        this.editPanel = this.contentRenderer.getEditPanel();
        this.addEventListener();
    }
    /**
     * renderCount method
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    renderCount() {
        this.initializeInstance();
        this.element = this.parent.createElement('span', { className: CLS_COUNT });
        this.contentRenderer.getPanel().parentElement.appendChild(this.element);
        this.appendCount();
        if (this.parent.maxLength !== -1) {
            this.charCountBackground(this.htmlLength);
        }
    }
    appendCount() {
        const htmlText = this.parent.editorMode === 'Markdown' ? this.editPanel.value.trim() :
            this.editPanel.textContent.trim();
        if (this.parent.editorMode !== 'Markdown' && htmlText.indexOf('\u200B') !== -1) {
            this.htmlLength = htmlText.replace(/\u200B/g, '').length;
        }
        else {
            this.htmlLength = htmlText.length;
        }
        const string = this.parent.maxLength === -1 ? this.htmlLength : this.htmlLength + ' / ' + this.parent.maxLength;
        this.element.innerHTML = string;
    }
    charCountBackground(htmlLength) {
        const percentage = (htmlLength / this.parent.maxLength) * 100;
        if (percentage < 85) {
            this.element.classList.remove(CLS_WARNING);
            this.element.classList.remove(CLS_ERROR);
        }
        else if (percentage > 85 && percentage <= 90) {
            this.element.classList.remove(CLS_ERROR);
            this.element.classList.add(CLS_WARNING);
        }
        else if (percentage > 90) {
            this.element.classList.remove(CLS_WARNING);
            this.element.classList.add(CLS_ERROR);
        }
    }
    /**
     * @returns {void}
     * @hidden
     * @deprecated
     */
    refresh() {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.editPanel)) {
            this.appendCount();
            if (this.parent.maxLength !== -1) {
                this.charCountBackground(this.htmlLength);
            }
        }
    }
    /**
     * Destroys the Count.
     *
     * @function destroy
     * @returns {void}
     * @hidden
     * @deprecated
     */
    destroy() {
        if (this.element && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.element.querySelector('.' + CLS_COUNT))) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.element);
        }
        this.removeEventListener();
    }
    toggle(e) {
        this.element.style.display = (e.member === 'viewSource') ? 'none' : 'block';
    }
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(initialEnd, this.renderCount, this);
        this.parent.on(keyUp, this.refresh, this);
        this.parent.on(count, this.refresh, this);
        this.parent.on(refreshBegin, this.refresh, this);
        this.parent.on(mouseDown, this.refresh, this);
        this.parent.on(destroy, this.destroy, this);
        this.parent.on(sourceCode, this.toggle, this);
        this.parent.on(updateSource, this.toggle, this);
    }
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(initialEnd, this.renderCount);
        this.parent.off(keyUp, this.refresh);
        this.parent.off(refreshBegin, this.refresh);
        this.parent.off(count, this.refresh);
        this.parent.off(mouseDown, this.refresh);
        this.parent.off(destroy, this.destroy);
        this.parent.off(sourceCode, this.toggle);
        this.parent.off(updateSource, this.toggle);
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} - returns the string value
     */
    getModuleName() {
        return 'count';
    }
}

/**
 * MarkdownSelection internal module
 *
 * @hidden
 * @deprecated
 */
class MarkdownSelection {
    /**
     * markdown getLineNumber method
     *
     * @param {HTMLTextAreaElement} textarea - specifies the text area element
     * @param {number} point - specifies the number value
     * @returns {number} - returns the value
     * @hidden
     * @deprecated
     */
    getLineNumber(textarea, point) {
        return textarea.value.substr(0, point).split('\n').length;
    }
    /**
     * markdown getSelectedText method
     *
     * @param {HTMLTextAreaElement} textarea - specifies the text area element
     * @returns {string} - specifies the string value
     * @hidden
     * @deprecated
     */
    getSelectedText(textarea) {
        const start = textarea.selectionStart;
        const end = textarea.selectionEnd;
        return textarea.value.substring(start, end);
    }
    /**
     * markdown getAllParents method
     *
     * @param {string} value - specifies the string value
     * @returns {string[]} - returns the string value
     * @hidden
     * @deprecated
     */
    getAllParents(value) {
        return value.split('\n');
    }
    /**
     * markdown getSelectedLine method
     *
     * @param {HTMLTextAreaElement} textarea - specifies the text area element
     * @returns {string} - returns the string value
     * @hidden
     * @deprecated
     */
    getSelectedLine(textarea) {
        const lines = this.getAllParents(textarea.value);
        const index = this.getLineNumber(textarea, textarea.selectionStart);
        return lines[index - 1];
    }
    /**
     * markdown getLine method
     *
     * @param {HTMLTextAreaElement} textarea - specifies the text area element
     * @param {number} index - specifies the number value
     * @returns {string} - returns the string value
     * @hidden
     * @deprecated
     */
    getLine(textarea, index) {
        const lines = this.getAllParents(textarea.value);
        return lines[index];
    }
    /**
     * markdown getSelectedParentPoints method
     *
     * @param {HTMLTextAreaElement} textarea - specifies the text area element
     * @returns {string} - returns the string value
     * @hidden
     * @deprecated
     */
    getSelectedParentPoints(textarea) {
        const lines = this.getAllParents(textarea.value);
        const start = this.getLineNumber(textarea, textarea.selectionStart);
        const end = this.getLineNumber(textarea, textarea.selectionEnd);
        const parents = this.getSelectedText(textarea).split('\n');
        const selectedPoints = [];
        const selectedLine = lines[start - 1];
        const startLength = lines.slice(0, start - 1).join('').length;
        const firstPoint = {};
        firstPoint.line = start - 1;
        firstPoint.start = startLength + firstPoint.line;
        firstPoint.end = selectedLine !== '' ? firstPoint.start +
            selectedLine.length + 1 : firstPoint.start + selectedLine.length;
        firstPoint.text = selectedLine;
        selectedPoints.push(firstPoint);
        if (parents.length > 1) {
            for (let i = 1; i < parents.length - 1; i++) {
                const points = {};
                points.line = selectedPoints[i - 1].line + 1;
                points.start = parents[i] !== '' ? selectedPoints[i - 1].end : selectedPoints[i - 1].end;
                points.end = points.start + parents[i].length + 1;
                points.text = parents[i];
                selectedPoints.push(points);
            }
            const lastPoint = {};
            lastPoint.line = selectedPoints[selectedPoints.length - 1].line + 1;
            lastPoint.start = selectedPoints[selectedPoints.length - 1].end;
            lastPoint.end = lastPoint.start + lines[end - 1].length + 1;
            lastPoint.text = lines[end - 1];
            selectedPoints.push(lastPoint);
        }
        return selectedPoints;
    }
    /**
     * markdown setSelection method
     *
     * @param {HTMLTextAreaElement} textarea - specifies the text area element
     * @param {number} start - specifies the start vaulue
     * @param {number} end - specifies the end value
     * @returns {void}
     * @hidden
     * @deprecated
     */
    setSelection(textarea, start, end) {
        textarea.setSelectionRange(start, end);
        textarea.focus();
    }
    /**
     * markdown save method
     *
     * @param {number} start - specifies the start vaulue
     * @param {number} end - specifies the end value
     * @returns {void}
     * @hidden
     * @deprecated
     */
    save(start, end) {
        this.selectionStart = start;
        this.selectionEnd = end;
    }
    /**
     * markdown restore method
     *
     * @param {HTMLTextAreaElement} textArea - specifies the text area element
     * @returns {void}
     * @hidden
     * @deprecated
     */
    restore(textArea) {
        this.setSelection(textArea, this.selectionStart, this.selectionEnd);
    }
    /**
     * markdown isStartWith method
     *
     * @param {string} line - specifies the string value
     * @param {string} command - specifies the string value
     * @returns {boolean} - returns the boolean value
     * @hidden
     * @deprecated
     */
    isStartWith(line, command) {
        let isStart = false;
        if (line) {
            const reg = line.trim() === command.trim() ?
                new RegExp('^(' + this.replaceSpecialChar(command.trim()) + ')', 'gim') :
                new RegExp('^(' + this.replaceSpecialChar(command) + ')', 'gim');
            isStart = reg.test(line.trim());
        }
        return isStart;
    }
    /**
     * markdown replaceSpecialChar method
     *
     * @param {string} value - specifies the string value
     * @returns {string} - returns the value
     * @hidden
     * @deprecated
     */
    replaceSpecialChar(value) {
        // eslint-disable-next-line
        return value.replace(/[`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/g, '\\$&');
    }
    /**
     * markdown isClear method
     *
     * @param {string} parents - specifies the parent element
     * @param {string} regex - specifies the regex value
     * @returns {boolean} - returns the boolean value
     * @hidden
     * @deprecated
     */
    isClear(parents, regex) {
        const isClear = false;
        for (let i = 0; i < parents.length; i++) {
            if (new RegExp(regex, 'gim').test(parents[i].text)) {
                return true;
            }
        }
        return isClear;
    }
    /**
     * markdown getSelectedInlinePoints method
     *
     * @param {HTMLTextAreaElement} textarea - specifies the text area
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getSelectedInlinePoints(textarea) {
        const start = textarea.selectionStart;
        const end = textarea.selectionEnd;
        const selection = this.getSelectedText(textarea);
        return { start: start, end: end, text: selection };
    }
}

/**
 * Defines common util methods used by Rich Text Editor.
 */
const inlineNode$1 = ['a', 'abbr', 'acronym', 'audio', 'b', 'bdi', 'bdo', 'big', 'br', 'button',
    'canvas', 'cite', 'code', 'data', 'datalist', 'del', 'dfn', 'em', 'embed', 'font', 'i', 'iframe', 'img', 'input',
    'ins', 'kbd', 'label', 'map', 'mark', 'meter', 'noscript', 'object', 'output', 'picture', 'progress',
    'q', 'ruby', 's', 'samp', 'script', 'select', 'slot', 'small', 'span', 'strong', 'strike', 'sub', 'sup', 'svg',
    'template', 'textarea', 'time', 'u', 'tt', 'var', 'video', 'wbr'];
/**
 * @returns {void}
 * @hidden
 */
function isIDevice$1() {
    let result = false;
    if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIos) {
        result = true;
    }
    return result;
}
/**
 * @param {Element} editableElement - specifies the editable element.
 * @param {string} selector - specifies the string values.
 * @returns {void}
 * @hidden
 */
function setEditFrameFocus(editableElement, selector) {
    if (editableElement.nodeName === 'BODY' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(selector)) {
        const iframe = top.window.document.querySelector(selector);
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(iframe)) {
            iframe.contentWindow.focus();
        }
    }
}
/**
 * @param {string} value - specifies the string value
 * @returns {void}
 * @hidden
 */
function updateTextNode$1(value) {
    const tempNode = document.createElement('div');
    tempNode.innerHTML = value;
    tempNode.setAttribute('class', 'tempDiv');
    const resultElm = document.createElement('div');
    const childNodes = tempNode.childNodes;
    if (childNodes.length > 0) {
        let isPreviousInlineElem;
        let previousParent;
        let paraElm;
        while (tempNode.firstChild) {
            if ((tempNode.firstChild.nodeName === '#text' &&
                (tempNode.firstChild.textContent.indexOf('\n') < 0 || tempNode.firstChild.textContent.trim() !== '')) ||
                inlineNode$1.indexOf(tempNode.firstChild.nodeName.toLocaleLowerCase()) >= 0) {
                if (!isPreviousInlineElem) {
                    paraElm = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('p');
                    resultElm.appendChild(paraElm);
                    paraElm.appendChild(tempNode.firstChild);
                }
                else {
                    previousParent.appendChild(tempNode.firstChild);
                }
                previousParent = paraElm;
                isPreviousInlineElem = true;
            }
            else if (tempNode.firstChild.nodeName === '#text' && (tempNode.firstChild.textContent === '\n' ||
                (tempNode.firstChild.textContent.indexOf('\n') >= 0 && tempNode.firstChild.textContent.trim() === ''))) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(tempNode.firstChild);
            }
            else {
                resultElm.appendChild(tempNode.firstChild);
                isPreviousInlineElem = false;
            }
        }
        const tableElm = resultElm.querySelectorAll('table');
        for (let i = 0; i < tableElm.length; i++) {
            if (tableElm[i].getAttribute('border') === '0') {
                tableElm[i].removeAttribute('border');
            }
            const tdElm = tableElm[i].querySelectorAll('td');
            for (let j = 0; j < tdElm.length; j++) {
                if (tdElm[j].style.borderLeft === 'none') {
                    tdElm[j].style.removeProperty('border-left');
                }
                if (tdElm[j].style.borderRight === 'none') {
                    tdElm[j].style.removeProperty('border-right');
                }
                if (tdElm[j].style.borderBottom === 'none') {
                    tdElm[j].style.removeProperty('border-bottom');
                }
                if (tdElm[j].style.borderTop === 'none') {
                    tdElm[j].style.removeProperty('border-top');
                }
                if (tdElm[j].style.border === 'none') {
                    tdElm[j].style.removeProperty('border');
                }
            }
            if (!tableElm[i].classList.contains(CLS_TABLE)) {
                tableElm[i].classList.add(CLS_TABLE);
            }
        }
        const imageElm = resultElm.querySelectorAll('img');
        for (let i = 0; i < imageElm.length; i++) {
            if (!imageElm[i].classList.contains(CLS_RTE_IMAGE)) {
                imageElm[i].classList.add(CLS_RTE_IMAGE);
            }
            if (!(imageElm[i].classList.contains(CLS_IMGINLINE) ||
                imageElm[i].classList.contains(CLS_IMGBREAK))) {
                imageElm[i].classList.add(CLS_IMGINLINE);
            }
        }
    }
    return resultElm.innerHTML;
}
/**
 * @param {Node} startChildNodes - specifies the node
 * @returns {void}
 * @hidden
 */
function getLastTextNode(startChildNodes) {
    let finalNode = startChildNodes;
    do {
        if (finalNode.childNodes.length > 0) {
            finalNode = finalNode.childNodes[0];
        }
    } while (finalNode.childNodes.length > 0);
    return finalNode;
}
/**
 * @returns {void}
 * @hidden
 */
function getDefaultHtmlTbStatus() {
    return {
        bold: false,
        italic: false,
        subscript: false,
        superscript: false,
        strikethrough: false,
        orderedlist: false,
        unorderedlist: false,
        underline: false,
        alignments: null,
        backgroundcolor: null,
        fontcolor: null,
        fontname: null,
        fontsize: null,
        formats: null,
        createlink: false,
        insertcode: false
    };
}
/**
 * @returns {void}
 * @hidden
 */
function getDefaultMDTbStatus() {
    return {
        bold: false,
        italic: false,
        subscript: false,
        superscript: false,
        strikethrough: false,
        orderedlist: false,
        uppercase: false,
        lowercase: false,
        inlinecode: false,
        unorderedlist: false,
        formats: null
    };
}

/**
 * MarkdownToolbarStatus module for refresh the toolbar status
 */
class MarkdownToolbarStatus {
    constructor(parent) {
        this.toolbarStatus = this.prevToolbarStatus = getDefaultMDTbStatus();
        this.selection = new MarkdownSelection();
        this.parent = parent;
        this.element = this.parent.contentModule.getEditPanel();
        this.addEventListener();
    }
    addEventListener() {
        this.parent.on(toolbarRefresh, this.onRefreshHandler, this);
        this.parent.on(destroy, this.removeEventListener, this);
    }
    removeEventListener() {
        this.parent.off(toolbarRefresh, this.onRefreshHandler);
        this.parent.off(destroy, this.removeEventListener);
    }
    onRefreshHandler(args) {
        const parentsLines = this.selection.getSelectedParentPoints(this.element);
        this.toolbarStatus = {
            orderedlist: args.documentNode ? false : this.isListsApplied(parentsLines, 'OL'),
            unorderedlist: args.documentNode ? false : this.isListsApplied(parentsLines, 'UL'),
            formats: this.currentFormat(parentsLines, args.documentNode),
            bold: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('Bold'),
            italic: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('Italic'),
            inlinecode: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('InlineCode'),
            strikethrough: args.documentNode ? false :
                this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('StrikeThrough'),
            subscript: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('SubScript'),
            superscript: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('SuperScript'),
            uppercase: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('UpperCase')
        };
        if (this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('InlineCode')) {
            this.toolbarStatus.formats = 'pre';
        }
        const tbStatusString = JSON.stringify(this.toolbarStatus);
        this.parent.notify(toolbarUpdated, this.toolbarStatus);
        if (JSON.stringify(this.prevToolbarStatus) !== tbStatusString) {
            this.parent.notify(updateTbItemsStatus, { html: null, markdown: JSON.parse(tbStatusString) });
            this.prevToolbarStatus = JSON.parse(tbStatusString);
        }
    }
    isListsApplied(lines, type) {
        let isApply = true;
        if (type === 'OL') {
            for (let i = 0; i < lines.length; i++) {
                const lineSplit = lines[i].text.trim().split(' ', 2)[0] + ' ';
                if (!/^[\d.]+[ ]+$/.test(lineSplit)) {
                    isApply = false;
                    break;
                }
            }
        }
        else {
            for (let i = 0; i < lines.length; i++) {
                if (!this.selection.isStartWith(lines[i].text, this.parent.formatter.listTags[type])) {
                    isApply = false;
                    break;
                }
            }
        }
        return isApply;
    }
    currentFormat(lines, documentNode) {
        let format = 'p';
        const keys = Object.keys(this.parent.formatter.formatTags);
        const direction = this.element.selectionDirection;
        const checkLine = direction === 'backward' ? lines[0].text : lines[lines.length - 1].text;
        for (let i = 0; !documentNode && i < keys.length; i++) {
            if (keys[i] !== 'pre' && this.selection.isStartWith(checkLine, this.parent.formatter.formatTags[keys[i]])) {
                format = keys[i];
                break;
            }
            else if (keys[i] === 'pre') {
                if (this.codeFormat()) {
                    format = keys[i];
                    break;
                }
            }
        }
        return format;
    }
    codeFormat() {
        let isFormat = false;
        const textArea = this.parent.inputElement;
        const start = textArea.selectionStart;
        const splitAt = (index) => (x) => [x.slice(0, index), x.slice(index)];
        const splitText = splitAt(start)(textArea.value);
        const cmdPre = this.parent.formatter.formatTags.pre;
        const selectedText = this.getSelectedText(textArea);
        if (selectedText !== '' && selectedText === selectedText.toLocaleUpperCase()) {
            return true;
        }
        else if (selectedText === '') {
            const beforeText = textArea.value.substr(splitText[0].length - 1, 1);
            const afterText = splitText[1].substr(0, 1);
            if ((beforeText !== '' && afterText !== '' && beforeText.match(/[a-z]/i)) &&
                beforeText === beforeText.toLocaleUpperCase() && afterText === afterText.toLocaleUpperCase()) {
                return true;
            }
        }
        if ((this.isCode(splitText[0], cmdPre) && this.isCode(splitText[1], cmdPre)) &&
            (splitText[0].match(this.multiCharRegx(cmdPre)).length % 2 === 1 &&
                splitText[1].match(this.multiCharRegx(cmdPre)).length % 2 === 1)) {
            isFormat = true;
        }
        return isFormat;
    }
    getSelectedText(textarea) {
        return textarea.value.substring(textarea.selectionStart, textarea.selectionEnd);
    }
    isCode(text, cmd) {
        return text.search('\\' + cmd + '') !== -1;
    }
    multiCharRegx(cmd) {
        return new RegExp('(\\' + cmd + ')', 'g');
    }
}

/**
 * `ExecCommandCallBack` module is used to run the editor manager command
 */
class ExecCommandCallBack {
    constructor(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    addEventListener() {
        this.parent.on(execCommandCallBack, this.commandCallBack, this);
        this.parent.on(destroy, this.removeEventListener, this);
    }
    commandCallBack(args) {
        if (args.requestType !== 'Undo' && args.requestType !== 'Redo') {
            this.parent.formatter.saveData();
        }
        this.parent.notify(toolbarRefresh, { args: args });
        this.parent.notify(count, {});
    }
    removeEventListener() {
        this.parent.off(execCommandCallBack, this.commandCallBack);
        this.parent.off(destroy, this.removeEventListener);
    }
}

/**
 * Constant values for Common
 */
/**
 * Keydown event trigger
 *
 * @hidden
 */
const KEY_DOWN = 'keydown';
/**
 * Undo and Redo action HTML plugin events
 *
 * @hidden
 */
const ACTION = 'action';
/**
 * Formats plugin events
 *
 * @hidden
 */
const FORMAT_TYPE = 'format-type';
/**
 * Keydown handler event trigger
 *
 * @hidden
 */
const KEY_DOWN_HANDLER = 'keydown-handler';
/**
 * List plugin events
 *
 * @hidden
 */
const LIST_TYPE = 'list-type';
/**
 * Keyup handler event trigger
 *
 * @hidden
 */
const KEY_UP_HANDLER = 'keyup-handler';
/**
 * Keyup event trigger
 *
 * @hidden
 */
const KEY_UP = 'keyup';
/**
 * Model changed plugin event trigger
 *
 * @hidden
 */
const MODEL_CHANGED_PLUGIN = 'model_changed_plugin';
/**
 * Model changed event trigger
 *
 * @hidden
 */
const MODEL_CHANGED = 'model_changed';
/**
 * PasteCleanup plugin for MSWord content
 *
 * @hidden
 */
const MS_WORD_CLEANUP_PLUGIN = 'ms_word_cleanup_plugin';
/**
 * PasteCleanup for MSWord content
 *
 * @hidden
 */
const MS_WORD_CLEANUP = 'ms_word_cleanup';
/**
 * ActionBegin event callback
 *
 * @hidden
 */
const ON_BEGIN = 'onBegin';
/**
 * Callback for spacelist action
 *
 * @hidden
 */
const SPACE_ACTION = 'actionBegin';

/**
 * Formatter
 *
 * @hidden
 * @deprecated
 */
class Formatter {
    /**
     * To execute the command
     *
     * @param  {IRichTextEditor} self - specifies the self element.
     * @param  {ActionBeginEventArgs} args - specifies the event arguments.
     * @param  {MouseEvent|KeyboardEvent} event - specifies the keyboard event.
     * @param  {IItemCollectionArgs} value - specifies the collection arguments
     * @returns {void}
     * @hidden
     * @deprecated
     */
    process(self, args, event, value) {
        const selection = self.contentModule.getDocument().getSelection();
        const range = (selection.rangeCount > 0) ? selection.getRangeAt(selection.rangeCount - 1) : null;
        let saveSelection;
        if (self.editorMode === 'HTML') {
            saveSelection = this.editorManager.nodeSelection.save(range, self.contentModule.getDocument());
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args)
            && args.item.command
            && args.item.command !== 'Table'
            && args.item.command !== 'Actions'
            && args.item.command !== 'Links'
            && args.item.command !== 'Images'
            && args.item.command !== 'Files'
            && range
            && !(self.contentModule.getEditPanel().contains(this.getAncestorNode(range.commonAncestorContainer))
                || self.contentModule.getEditPanel() === range.commonAncestorContainer
                || self.contentModule.getPanel() === range.commonAncestorContainer)) {
            return;
        }
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args)) {
            const action = event.action;
            if (action !== 'tab' && action !== 'enter' && action !== 'space' && action !== 'escape') {
                args = {};
                if (self.editorMode === 'Markdown' && action === 'insert-table') {
                    value = {
                        'headingText': self.localeObj.getConstant('TableHeadingText'),
                        'colText': self.localeObj.getConstant('TableColText')
                    };
                }
                const items = {
                    originalEvent: event, cancel: false,
                    requestType: action || (event.key + 'Key'),
                    itemCollection: value
                };
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(args, args, items, true);
                self.trigger(actionBegin, args, (actionBeginArgs) => {
                    if (actionBeginArgs.cancel) {
                        if (action === 'paste' || action === 'cut' || action === 'copy') {
                            event.preventDefault();
                        }
                    }
                });
            }
            const isTableModule = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(self.tableModule) ? true : self.tableModule ?
                self.tableModule.ensureInsideTableList : false;
            if ((event.which === 9 && isTableModule) || event.which !== 9) {
                if (event.which === 13 && self.editorMode === 'HTML') {
                    value = {
                        'enterAction': self.enterKey
                    };
                }
                this.editorManager.observer.notify((event.type === 'keydown' ? KEY_DOWN : KEY_UP), {
                    event: event,
                    callBack: this.onSuccess.bind(this, self),
                    value: value,
                    enterAction: self.enterKey
                });
            }
        }
        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args) && args.item.command && args.item.subCommand && ((args.item.command !== args.item.subCommand
            && args.item.command !== 'Font')
            || ((args.item.subCommand === 'FontName' || args.item.subCommand === 'FontSize') && args.name === 'dropDownSelect')
            || ((args.item.subCommand === 'BackgroundColor' || args.item.subCommand === 'FontColor')
                && args.name === 'colorPickerChanged'))) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(args, args, { requestType: args.item.subCommand, cancel: false, itemCollection: value, selectType: args.name }, true);
            self.trigger(actionBegin, args, (actionBeginArgs) => {
                if (!actionBeginArgs.cancel) {
                    if (this.getUndoRedoStack().length === 0 && actionBeginArgs.item.command !== 'Links'
                        && actionBeginArgs.item.command !== 'Images') {
                        this.saveData();
                    }
                    self.isBlur = false;
                    self.contentModule.getEditPanel().focus();
                    if (self.editorMode === 'HTML') {
                        saveSelection.restore();
                    }
                    const command = actionBeginArgs.item.subCommand.toLocaleLowerCase();
                    if (command === 'paste' || command === 'cut' || command === 'copy') {
                        self.clipboardAction(command, event);
                    }
                    else {
                        this.editorManager.observer.notify(checkUndo, { subCommand: actionBeginArgs.item.subCommand });
                        this.editorManager.execCommand(actionBeginArgs.item.command, actionBeginArgs.item.subCommand, event, this.onSuccess.bind(this, self), actionBeginArgs.item.value, actionBeginArgs.item.subCommand === 'Pre' && actionBeginArgs.selectType === 'dropDownSelect' ?
                            { name: actionBeginArgs.selectType } : value, ('#' + self.getID() + ' iframe'), self.enterKey);
                    }
                }
            });
        }
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(event) || event && event.action !== 'copy') {
            this.enableUndo(self);
        }
    }
    getAncestorNode(node) {
        node = node.nodeType === 3 ? node.parentNode : node;
        return node;
    }
    /**
     * onKeyHandler method
     *
     * @param {IRichTextEditor} self - specifies the self element.
     * @param {KeyboardEvent} e - specifies the keyboard event.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    onKeyHandler(self, e) {
        this.editorManager.observer.notify(KEY_UP, {
            event: e, callBack: () => {
                self.notify(contentChanged, {});
                this.enableUndo(self);
            }
        });
    }
    /**
     * onSuccess method
     *
     * @param {IRichTextEditor} self - specifies the self element.
     * @param {IMarkdownFormatterCallBack} events - specifies the event call back
     * @returns {void}
     * @hidden
     * @deprecated
     */
    onSuccess(self, events) {
        self.notify(contentChanged, {});
        if (events && ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(events.event) || events.event.action !== 'copy')) {
            this.enableUndo(self);
            self.notify(execCommandCallBack, events);
        }
        self.trigger(actionComplete, events, (callbackArgs) => {
            self.setPlaceHolder();
            if (callbackArgs.requestType === 'Images' || callbackArgs.requestType === 'Links' && self.editorMode === 'HTML') {
                const args = callbackArgs;
                if (callbackArgs.requestType === 'Links' && callbackArgs.event &&
                    callbackArgs.event.type === 'keydown' &&
                    callbackArgs.event.keyCode === 32) {
                    return;
                }
                self.notify(insertCompleted, {
                    args: args.event, type: callbackArgs.requestType, isNotify: true,
                    elements: args.elements
                });
            }
            self.autoResize();
        });
    }
    /**
     * Save the data for undo and redo action.
     *
     * @param {KeyboardEvent} e - specifies the keyboard event.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    saveData(e) {
        this.editorManager.undoRedoManager.saveData(e);
    }
    /**
     * getUndoStatus method
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getUndoStatus() {
        return this.editorManager.undoRedoManager.getUndoStatus();
    }
    /* eslint-disable */
    /**
     * getUndoRedoStack method
     *
     * @param {IHtmlUndoRedoData}  - specifies the redo data.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    /* eslint-enable */
    getUndoRedoStack() {
        return this.editorManager.undoRedoManager.undoRedoStack;
    }
    /**
     * enableUndo method
     *
     * @param {IRichTextEditor} self - specifies the self element.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    enableUndo(self) {
        const status = this.getUndoStatus();
        if (self.inlineMode.enable && (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || isIDevice())) {
            updateUndoRedoStatus(self.quickToolbarModule.inlineQTBar.quickTBarObj, status);
        }
        else {
            if (self.toolbarModule) {
                updateUndoRedoStatus(self.toolbarModule.baseToolbar, status);
            }
        }
    }
}

/**
 * Constant values for Markdown Parser
 */
/**
 * List plugin events
 *
 * @hidden
 */
const LISTS_COMMAND = 'lists-commands';
/**
 * selectioncommand plugin events
 *
 * @hidden
 */
const selectionCommand = 'command-type';
/**
 * Link plugin events
 *
 * @hidden
 */
const LINK_COMMAND = 'link-commands';
/**
 * Clear plugin events
 *
 * @hidden
 */
const CLEAR_COMMAND = 'clear-commands';
/**
 * Table plugin events
 *
 * @hidden
 */
const MD_TABLE = 'insert-table';

/**
 * Lists internal component
 *
 * @hidden
 */
class MDLists {
    /**
     * Constructor for creating the Lists plugin
     *
     * @param {IMDFormats} options - specifies the options
     * @hidden
     */
    constructor(options) {
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(this, this, options, true);
        this.selection = this.parent.markdownSelection;
        this.addEventListener();
    }
    addEventListener() {
        this.parent.observer.on(LISTS_COMMAND, this.applyListsHandler, this);
        this.parent.observer.on(KEY_DOWN_HANDLER, this.keyDownHandler, this);
        this.parent.observer.on(KEY_UP_HANDLER, this.keyUpHandler, this);
    }
    keyDownHandler(event) {
        switch (event.event.which) {
            case 9:
                this.tabKey(event);
                break;
        }
        switch (event.event.action) {
            case 'ordered-list':
                this.applyListsHandler({ subCommand: 'OL', callBack: event.callBack });
                event.event.preventDefault();
                break;
            case 'unordered-list':
                this.applyListsHandler({ subCommand: 'UL', callBack: event.callBack });
                event.event.preventDefault();
                break;
        }
    }
    keyUpHandler(event) {
        switch (event.event.which) {
            case 13:
                this.enterKey(event);
                break;
        }
    }
    tabKey(event) {
        const textArea = this.parent.element;
        this.selection.save(textArea.selectionStart, textArea.selectionEnd);
        let start = textArea.selectionStart;
        const end = textArea.selectionEnd;
        const parents = this.selection.getSelectedParentPoints(textArea);
        let addedLength = 0;
        const isNotFirst = this.isNotFirstLine(textArea, parents[0]);
        if (!isNotFirst && !event.event.shiftKey) {
            this.restore(textArea, start, end + addedLength, event);
            return;
        }
        const listFormat = this.olListType();
        const regex = this.getListRegex();
        this.currentAction = this.getAction(parents[0].text);
        for (let i = 0; i < parents.length; i++) {
            let prevIndex = event.event.shiftKey ? parents[i].line - 1 : parents[i].line - 1;
            let prevLine = this.selection.getLine(textArea, prevIndex);
            if (prevLine && (!event.event.shiftKey && isNotFirst || (event.event.shiftKey))) {
                const prevLineSplit = prevLine.split('. ');
                const tabSpace = '\t';
                const tabSpaceLength = event.event.shiftKey ? -tabSpace.length : tabSpace.length;
                const splitTab = parents[i].text.split('\t');
                if (event.event.shiftKey && splitTab.length === 1) {
                    break;
                }
                if (this.currentAction === 'OL' && /^\d+$/.test(prevLineSplit[0].trim()) && listFormat) {
                    event.event.preventDefault();
                    parents[i].text = event.event.shiftKey ? splitTab.splice(1, splitTab.length).join('\t') : tabSpace + parents[i].text;
                    const curTabSpace = this.getTabSpace(parents[i].text);
                    let prevTabSpace = this.getTabSpace(prevLine);
                    const splitText = parents[i].text.split('. ');
                    if (curTabSpace === prevTabSpace) {
                        this.changeTextAreaValue(splitText, this.nextOrderedListValue(prevLineSplit[0].trim()), event, textArea, parents, i, end);
                    }
                    else if (prevTabSpace < curTabSpace) {
                        this.changeTextAreaValue(splitText, '1. ', event, textArea, parents, i, end);
                    }
                    else {
                        for (; prevTabSpace.length > curTabSpace.length; null) {
                            prevIndex = prevIndex - 1;
                            prevLine = this.selection.getLine(textArea, prevIndex);
                            const prevLineSplit = prevLine.trim().split('. ');
                            if (/^\d+$/.test(prevLineSplit[0])) {
                                prevTabSpace = this.getTabSpace(prevLine);
                                if (prevTabSpace.length <= curTabSpace.length) {
                                    this.changeTextAreaValue(splitText, this.nextOrderedListValue(prevLineSplit[0]), event, textArea, parents, i, end);
                                    break;
                                }
                            }
                        }
                    }
                }
                else if (this.currentAction === 'UL' && regex.test(prevLine.trim()) || !listFormat) {
                    event.event.preventDefault();
                    parents[i].text = event.event.shiftKey ? splitTab.splice(1, splitTab.length).join('\t') : tabSpace + parents[i].text;
                    textArea.value = textArea.value.substr(0, parents[i].start) + parents[i].text + '\n' +
                        textArea.value.substr(parents[i].end, textArea.value.length);
                }
                start = i === 0 ? start + tabSpaceLength : start;
                addedLength += tabSpaceLength;
                if (parents.length !== 1) {
                    for (let j = i; j < parents.length; j++) {
                        parents[j].start = j !== 0 ? parents[j].start + tabSpaceLength : parents[j].start;
                        parents[j].end = parents[j].end + tabSpaceLength;
                    }
                }
            }
        }
        this.restore(textArea, start, end + addedLength, event);
    }
    changeTextAreaValue(splitText, prefixValue, event, 
    // eslint-disable-next-line
    textArea, parents, k, end) {
        const prefix = prefixValue;
        splitText.splice(0, 1);
        const textAreaLength = this.selection.getAllParents(textArea.value).length;
        let changedList = '';
        const curTabSpace = this.getTabSpace(parents[k].text);
        // eslint-disable-next-line
        let prefixNumber = parseInt(prefix.split('.')[0], null);
        let nestedTabSpace = this.getTabSpace(parents[k].text);
        let nestedlistorder = true;
        let nestedListStart = true;
        let curTabSpaceLength;
        let nextPrefixValue = -1;
        let traversIncreased = true;
        let nextLineLength = 0;
        let lineBreak = '';
        changedList = (this.selection.getLine(textArea, parents[0].line + 1) !== '') ?
            '' : changedList + textArea.value.substr(parents[0].end, textArea.value.length);
        for (let i = 1; i < textAreaLength &&
            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.selection.getLine(textArea, parents[0].line + i))
            && this.selection.getLine(textArea, parents[0].line + i) !== ''; i++) {
            const nextLine = this.selection.getLine(textArea, parents[0].line + i);
            const nextTabSpace = this.getTabSpace(nextLine);
            const nextLineSplit = nextLine.split('. ');
            if (nextLineSplit.length === 1) {
                changedList += textArea.value.substr(parents[0].end + nextLineLength, textArea.value.length);
                break;
            }
            else {
                nextLineLength += nextLine.length;
                let shiftTabTargetList = false;
                curTabSpaceLength = event.event.shiftKey ? curTabSpace.length + 1 : curTabSpace.length - 1;
                if (nextTabSpace.length > nestedTabSpace.length) {
                    traversIncreased = false;
                }
                if (curTabSpace.length !== nextTabSpace.length && nextTabSpace.length < nestedTabSpace.length) {
                    nestedListStart = true;
                    nestedlistorder = false;
                    shiftTabTargetList = event.event.shiftKey &&
                        curTabSpace.length === nextTabSpace.length ? (nestedListStart = false, true) : false;
                }
                else if (traversIncreased && event.event.shiftKey &&
                    curTabSpace.length === nextTabSpace.length && nextTabSpace.length === nestedTabSpace.length) {
                    nestedListStart = false;
                    shiftTabTargetList = true;
                }
                lineBreak = changedList === '' ? '' : '\n';
                if (curTabSpaceLength === nextTabSpace.length && nestedListStart) {
                    const nextPrefix = event.event.shiftKey ?
                        (nextPrefixValue++, this.nextOrderedListValue(nextPrefixValue.toString()))
                        : this.previousOrderedListValue(nextLineSplit[0]);
                    nextLineSplit.splice(0, 1);
                    changedList = changedList + lineBreak + nextTabSpace + nextPrefix + nextLineSplit.join('. ');
                }
                else if (curTabSpace.length === nextTabSpace.length && nestedlistorder || shiftTabTargetList) {
                    const nextPrefix = this.nextOrderedListValue(prefixNumber.toString());
                    prefixNumber++;
                    nextLineSplit.splice(0, 1);
                    changedList = changedList + lineBreak + nextTabSpace + nextPrefix + nextLineSplit.join('. ');
                }
                else {
                    changedList = changedList + lineBreak + nextLine;
                    nestedListStart = false;
                }
                nestedTabSpace = this.getTabSpace(nextLine);
            }
        }
        parents[k].text = this.getTabSpace(parents[k].text) + prefix + splitText.join('. ') + '\n';
        textArea.value = textArea.value.substr(0, parents[k].start) + parents[k].text + changedList;
    }
    getTabSpace(line) {
        const split = line.split('\t');
        let tabs = '';
        for (let i = 0; i < split.length; i++) {
            if (split[i] === '') {
                tabs += '\t';
            }
            else {
                break;
            }
        }
        return tabs;
    }
    isNotFirstLine(textArea, points) {
        const currentLine = points.text;
        let prevIndex = points.line - 1;
        let prevLine = this.selection.getLine(textArea, prevIndex);
        const regex = this.getListRegex();
        let isNotFirst = false;
        let regexFirstCondition;
        if (prevLine) {
            this.currentAction = this.getAction(prevLine);
            const prevLineSplit = prevLine.split('. ');
            regexFirstCondition = this.currentAction === 'OL' ? /^\d+$/.test(prevLineSplit[0].trim()) : regex.test(prevLine.trim());
        }
        if (prevLine && regexFirstCondition) {
            const curTabSpace = this.getTabSpace(currentLine);
            let prevTabSpace = this.getTabSpace(prevLine);
            isNotFirst = curTabSpace === prevTabSpace ? true : isNotFirst;
            for (; prevTabSpace.length > curTabSpace.length; null) {
                prevIndex = prevIndex - 1;
                prevLine = this.selection.getLine(textArea, prevIndex);
                const prevLineSplit = prevLine.trim().split('. ');
                const regexSecondCondition = this.currentAction === 'OL' ?
                    /^\d+$/.test(prevLineSplit[0]) : regex.test(prevLine.trim());
                if (regexSecondCondition) {
                    prevTabSpace = this.getTabSpace(prevLine);
                    if (prevTabSpace.length <= curTabSpace.length) {
                        isNotFirst = true;
                        break;
                    }
                }
            }
        }
        return isNotFirst;
    }
    getAction(line) {
        const ol = line.split('. ')[0];
        // eslint-disable-next-line
        const currentState = /^\d+$/.test(ol.trim());
        const ul = line.trim().split(new RegExp('^(' + this.selection.replaceSpecialChar(this.syntax.UL).trim() + ')'))[1];
        return (currentState ? 'OL' : ul ? 'UL' : 'NOTLIST');
    }
    nextOrderedListValue(previousLine) {
        // eslint-disable-next-line
        const currentValue = parseInt(previousLine, null);
        const nextValue = currentValue + 1;
        return nextValue.toString() + '. ';
    }
    previousOrderedListValue(previousLine) {
        // eslint-disable-next-line
        const currentValue = parseInt(previousLine, null);
        const nextValue = currentValue - 1;
        return nextValue.toString() + '. ';
    }
    enterKey(event) {
        const textArea = this.parent.element;
        this.selection.save(textArea.selectionStart, textArea.selectionEnd);
        let start = textArea.selectionStart;
        const end = textArea.selectionEnd;
        const parents = this.selection.getSelectedParentPoints(textArea);
        const prevLine = this.selection.getLine(textArea, parents[0].line - 1);
        const listFormat = this.olListType();
        const regex = this.getListRegex();
        let prevLineSplit = [];
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(prevLine)) {
            prevLineSplit = prevLine.split('. ');
            this.currentAction = this.getAction(prevLine);
        }
        let addedLength = 0;
        if (this.currentAction === 'OL' && prevLineSplit.length > 1 && /^\d+$/.test(prevLineSplit[0].trim()) && listFormat
            && prevLineSplit[1] !== '') {
            const tabSpace = this.getTabSpace(prevLine);
            this.currentAction = this.getAction(prevLine);
            const prefix = this.nextOrderedListValue(prevLineSplit[0]);
            parents[0].text = tabSpace + prefix + parents[0].text;
            const textAreaLength = this.selection.getAllParents(textArea.value).length;
            let changedList = '\n';
            const curTabSpace = this.getTabSpace(prevLine);
            let nestedTabSpace = this.getTabSpace(parents[0].text);
            let nestedListOrder = true;
            for (let i = 1; i < textAreaLength &&
                textArea.value.substr(parents[0].end, textArea.value.length) !== ''; i++) {
                const nextLine = this.selection.getLine(textArea, parents[0].line + i);
                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(nextLine)) {
                    changedList = changedList + '';
                }
                else {
                    const nextLineSplit = nextLine.split('. ');
                    const nextTabSpace = this.getTabSpace(nextLine);
                    if (nextTabSpace.length < nestedTabSpace.length) {
                        nestedListOrder = false;
                    }
                    if (nextLineSplit.length > 1 && /^\d+$/.test(nextLineSplit[0].trim()) &&
                        curTabSpace.length === nextTabSpace.length && nestedListOrder) {
                        const nextPrefix = this.nextOrderedListValue(nextLineSplit[0]);
                        nextLineSplit.splice(0, 1);
                        changedList = changedList + nextTabSpace + nextPrefix + nextLineSplit.join('. ') + '\n';
                    }
                    else {
                        changedList = changedList + nextLine + '\n';
                        nestedTabSpace = this.getTabSpace(nextLine);
                    }
                }
            }
            textArea.value = textArea.value.substr(0, parents[0].start) + curTabSpace +
                prefix + this.selection.getLine(textArea, parents[0].line) + changedList;
            start = start + prefix.length + tabSpace.length;
            addedLength += prefix.length + tabSpace.length;
        }
        else if (this.currentAction === 'UL' && (prevLine && regex.test(prevLine.trim())) &&
            prevLine.trim().replace(regex, '') !== '' || this.currentAction === 'OL' && !listFormat) {
            const tabSpace = this.getTabSpace(prevLine);
            const prefix = this.syntax[this.currentAction];
            parents[0].text = tabSpace + prefix + parents[0].text +
                (parents[0].text.trim().length > 0 ? '\n' : '');
            textArea.value = textArea.value.substr(0, parents[0].start) + parents[0].text +
                textArea.value.substr(parents[0].end, textArea.value.length);
            start = start + prefix.length + tabSpace.length;
            addedLength += prefix.length + tabSpace.length;
        }
        this.restore(textArea, start, end + addedLength, event);
    }
    olListType() {
        const olSyntaxList = this.syntax.OL.split('.,');
        const listType = olSyntaxList.length === 1 ? null :
            // eslint-disable-next-line
            parseInt(olSyntaxList[2].trim(), null) - parseInt(olSyntaxList[0].trim(), null);
        if (listType) {
            return 1;
        }
        else {
            return 0;
        }
    }
    applyListsHandler(e) {
        const textArea = this.parent.element;
        this.selection.save(textArea.selectionStart, textArea.selectionEnd);
        this.currentAction = e.subCommand;
        let start = textArea.selectionStart;
        const end = textArea.selectionEnd;
        let addedLength = 0;
        let startLength = 0;
        let endLength = 0;
        const parents = this.selection.getSelectedParentPoints(textArea);
        let prefix = '';
        const listFormat = this.olListType();
        let regex;
        const perfixObj = {};
        for (let i = 0; i < parents.length; i++) {
            if (listFormat) {
                regex = this.currentAction === 'OL' ? i + listFormat + '. ' : this.syntax[this.currentAction];
            }
            else {
                regex = this.currentAction === 'OL' ? this.syntax.OL : this.syntax[this.currentAction];
            }
            if (!this.selection.isStartWith(parents[i].text, regex)) {
                if (parents[i].text === '' && i === 0) {
                    this.selection.save(start, end);
                    if (parents.length !== 1) {
                        for (let j = i; j < parents.length; j++) {
                            parents[j].start = j !== 0 ? 1 + parents[j].start : parents[j].start;
                            parents[j].end = 1 + parents[j].end;
                        }
                    }
                }
                const preLineTabSpaceLength = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parents[i - 1]) ?
                    this.getTabSpace(parents[i - 1].text).length : 0;
                const replace = this.appliedLine(parents[i].text, regex, perfixObj, preLineTabSpaceLength);
                prefix = replace.line ? prefix : regex;
                parents[i].text = replace.line ? replace.line : prefix + parents[i].text;
                replace.space = replace.space ? replace.space : 0;
                textArea.value = textArea.value.substr(0, parents[i].start + endLength) + parents[i].text + '\n' +
                    textArea.value.substr(parents[i].end, textArea.value.length);
                start = i === 0 ? (start + prefix.length + replace.space) > 0 ?
                    start + prefix.length + replace.space : 0 : start;
                addedLength += prefix.length + replace.space;
                if (parents.length !== 1) {
                    for (let j = i; j < parents.length; j++) {
                        parents[j].start = j !== 0 ? prefix.length +
                            parents[j].start + replace.space : parents[j].start;
                        parents[j].end = prefix.length + parents[j].end + replace.space;
                    }
                }
                this.restore(textArea, start, end + addedLength, null);
            }
            else {
                parents[i].text = parents[i].text.replace(regex, '');
                textArea.value = textArea.value.substr(0, parents[i].start + endLength) + parents[i].text + '\n' +
                    textArea.value.substr(parents[i].end + endLength, textArea.value.length);
                endLength -= regex.length;
                startLength = regex.length;
                this.restore(textArea, start - startLength, end + endLength, null);
            }
        }
        this.restore(textArea, null, null, e);
    }
    appliedLine(line, prefixPattern, perfixObj, preTabSpaceLength) {
        const points = {};
        const regex = new RegExp('^[' + this.syntax.UL.trim() + ']');
        const lineSplit = line.split('. ');
        const currentPrefix = lineSplit[0] + '. ';
        const isExist = regex.test(line.trim()) || line.trim() === this.syntax.OL.trim()
            || line.trim() === this.syntax.UL.trim() || /^\d+$/.test(lineSplit[0].trim());
        const listFormat = this.olListType();
        const curTabSpaceLength = this.getTabSpace(line).length;
        if (this.currentAction === 'OL' && listFormat) {
            perfixObj[curTabSpaceLength.toString()] = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(perfixObj[curTabSpaceLength.toString()]) ?
                perfixObj[curTabSpaceLength.toString()].valueOf() + 1 : 1;
            prefixPattern = perfixObj[curTabSpaceLength.toString()].valueOf().toString() + '. ';
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(preTabSpaceLength) && preTabSpaceLength > curTabSpaceLength) {
                perfixObj[preTabSpaceLength.toString()] = 0;
            }
        }
        if (isExist) {
            let replace;
            let pattern;
            // eslint-disable-next-line
            if (regex.test(line.trim())) {
                pattern = this.syntax.UL;
                replace = prefixPattern;
                points.space = prefixPattern.trim().length - this.syntax.UL.trim().length;
            }
            else if (/^\d+$/.test(lineSplit[0].trim()) && listFormat) {
                pattern = lineSplit[0].trim() + '. ';
                replace = prefixPattern;
                points.space = this.syntax.UL.trim().length - currentPrefix.trim().length;
            }
            else if (/^\d+$/.test(lineSplit[0].trim())) {
                pattern = lineSplit[0].trim() + '. ';
                replace = this.syntax.UL;
                points.space = this.syntax.UL.trim().length - currentPrefix.trim().length;
            }
            points.line = line.replace(pattern, replace);
        }
        return points;
    }
    restore(textArea, start, end, event) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(start) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(start)) {
            this.selection.save(start, end);
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(event)) {
            this.selection.restore(textArea);
        }
        if (event && event.callBack) {
            event.callBack({
                requestType: this.currentAction,
                selectedText: this.selection.getSelectedText(textArea),
                editorMode: 'Markdown',
                event: event.event
            });
        }
    }
    getListRegex() {
        let regex = '';
        const configKey = Object.keys(this.syntax);
        for (let j = 0; j < configKey.length; j++) {
            const syntax = this.selection.replaceSpecialChar(this.syntax[configKey[j]]);
            regex += regex === '' ? '^(' + syntax + ')|^(' + syntax.trim() + ')' :
                '|^(' + syntax + ')|^(' + syntax.trim() + ')';
        }
        return new RegExp(regex);
    }
}

/**
 * MDFormats internal plugin
 *
 * @hidden
 * @deprecated
 */
class MDFormats {
    /**
     * Constructor for creating the Formats plugin
     *
     * @param {IMDFormats} options - specifies the formats
     * @hidden
     * @deprecated
     */
    constructor(options) {
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(this, this, options, true);
        this.selection = this.parent.markdownSelection;
        this.addEventListener();
    }
    addEventListener() {
        this.parent.observer.on(FORMAT_TYPE, this.applyFormats, this);
    }
    applyFormats(e) {
        e.subCommand = e.subCommand.toLowerCase();
        const textArea = this.parent.element;
        this.selection.save(textArea.selectionStart, textArea.selectionEnd);
        let parents = this.selection.getSelectedParentPoints(textArea);
        if (this.isAppliedFormat(parents) === e.subCommand) {
            if (e.subCommand === 'pre') {
                if (parents.length > 1) {
                    this.applyCodeBlock(textArea, e, parents);
                }
                else {
                    return;
                }
            }
            this.cleanFormat(textArea);
            this.restore(textArea, textArea.selectionStart, textArea.selectionEnd, e);
            return;
        }
        if (e.subCommand === 'p') {
            this.cleanFormat(textArea);
            this.restore(textArea, textArea.selectionStart, textArea.selectionEnd, e);
            return;
        }
        else {
            if ((e.subCommand === 'pre' && parents.length !== 1) || e.subCommand !== 'pre') {
                this.cleanFormat(textArea, e.subCommand);
            }
        }
        let start = textArea.selectionStart;
        const end = textArea.selectionEnd;
        let addedLength = 0;
        parents = this.selection.getSelectedParentPoints(textArea);
        if (e.subCommand === 'pre') {
            if (parents.length > 1) {
                this.applyCodeBlock(textArea, e, parents);
            }
            else {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(e, e, { subCommand: 'InlineCode' }, true);
                this.parent.observer.notify(selectionCommand, e);
            }
            return;
        }
        for (let i = 0; i < parents.length; i++) {
            if (parents[i].text !== '' && !this.selection.isStartWith(parents[i].text, '\\' + this.syntax[e.subCommand])) {
                parents[i].text = this.syntax[e.subCommand] + parents[i].text;
                textArea.value = textArea.value.substr(0, parents[i].start) + parents[i].text + '\n' +
                    textArea.value.substr(parents[i].end, textArea.value.length);
                start = i === 0 ? start + this.syntax[e.subCommand].length : start;
                addedLength += this.syntax[e.subCommand].length;
                if (parents.length !== 1) {
                    for (let j = i; j < parents.length; j++) {
                        parents[j].start = j !== 0 ?
                            this.syntax[e.subCommand].length + parents[j].start : parents[j].start;
                        parents[j].end = this.syntax[e.subCommand].length + parents[j].end;
                    }
                }
            }
            else if (parents[i].text === '' && i === 0) {
                this.selection.save(start, end);
                if (this.selection.getSelectedText(textArea).length === 0) {
                    parents[i].text = this.syntax[e.subCommand];
                    textArea.value = textArea.value.substr(0, parents[i].start) + this.syntax[e.subCommand] +
                        textArea.value.substr(parents[i].end, textArea.value.length);
                    start = i === 0 ? start + this.syntax[e.subCommand].length : start;
                    addedLength += this.syntax[e.subCommand].length;
                }
                if (parents.length !== 1) {
                    for (let j = i; j < parents.length; j++) {
                        parents[j].start = j !== 0 ? 1 + parents[j].start : parents[j].start;
                        parents[j].end = 1 + parents[j].end;
                    }
                }
            }
        }
        this.restore(textArea, start, end + addedLength, e);
    }
    clearRegex() {
        let regex = '';
        const configKey = Object.keys(this.syntax);
        for (let j = 0; j < configKey.length && configKey[j] !== 'pre' && configKey[j] !== 'p'; j++) {
            regex += regex === '' ? '^(' + this.selection.replaceSpecialChar(this.syntax[configKey[j]].trim()) + ')' :
                '|^(' + this.selection.replaceSpecialChar(this.syntax[configKey[j]].trim()) + ')';
        }
        return regex;
    }
    cleanFormat(textArea, command) {
        const parents = this.selection.getSelectedParentPoints(textArea);
        let start = textArea.selectionStart;
        const end = textArea.selectionEnd;
        let removeLength = 0;
        if (this.selection.isClear(parents, this.clearRegex())) {
            for (let i = 0; i < parents.length; i++) {
                const configKey = Object.keys(this.syntax);
                for (let j = 0; parents[i].text !== '' && j < configKey.length; j++) {
                    const removeText = this.syntax[configKey[j]];
                    if (configKey[j] === command) {
                        continue;
                    }
                    const regex = new RegExp('^(' + this.selection.replaceSpecialChar(removeText) + ')', 'gim');
                    if (regex.test(parents[i].text)) {
                        parents[i].text = parents[i].text.replace(regex, '');
                        textArea.value = textArea.value.substr(0, parents[i].start) + parents[i].text + '\n' +
                            textArea.value.substr(parents[i].end, textArea.value.length);
                        start = i === 0 ? (start - (removeText.length)) > 0 ? start - (removeText.length) : 0 : start;
                        removeLength += removeText.length;
                        if (parents.length !== 1) {
                            for (let k = 0; k < parents.length; k++) {
                                parents[k].start = k !== 0 ?
                                    parents[k].start - removeText.length : parents[k].start;
                                parents[k].end = parents[k].end - removeText.length;
                            }
                        }
                        break;
                    }
                }
                if (parents[i].text === '' && i === 0) {
                    this.selection.save(start, end);
                    if (parents.length !== 1) {
                        for (let j = i; j < parents.length; j++) {
                            parents[j].start = j !== 0 ? 1 + parents[j].start : parents[j].start;
                            parents[j].end = 1 + parents[j].end;
                        }
                    }
                }
            }
            this.restore(textArea, start, end - removeLength);
        }
    }
    applyCodeBlock(textArea, event, parents) {
        const command = event.subCommand;
        let start = parents[0].start;
        let end = parents[parents.length - 1].end;
        const parentLines = this.selection.getAllParents(textArea.value);
        const firstPrevText = parentLines[parents[0].line - 1];
        const lastNextText = parentLines[(parents.length + 1) + 1];
        // eslint-disable-next-line
        if (!this.selection.isStartWith(firstPrevText, this.syntax.pre.split('\n')[0]) &&
            !this.selection.isStartWith(lastNextText, this.syntax.pre.split('\n')[0])) {
            const lines = textArea.value.substring(start, end).split('\n');
            const lastLine = lines[lines.length - 1] === '' ? '' : '\n';
            textArea.value = textArea.value.substr(0, start) + this.syntax[command] + textArea.value.substring(start, end) +
                lastLine + this.syntax[command] +
                textArea.value.substr(end, textArea.value.length);
            start = this.selection.selectionStart + this.syntax[command].length;
            end = this.selection.selectionEnd + this.syntax[command].length - 1;
        }
        else {
            const cmd = this.syntax[command];
            const selection = this.parent.markdownSelection.getSelectedInlinePoints(textArea);
            const startNo = textArea.value.substr(0, textArea.selectionStart).lastIndexOf(cmd);
            let endNo = textArea.value.substr(textArea.selectionEnd, textArea.selectionEnd).indexOf(cmd);
            endNo = endNo + selection.end;
            const repStartText = this.replaceAt(textArea.value.substr(0, selection.start), cmd, '', startNo, selection.start);
            const repEndText = this.replaceAt(textArea.value.substr(selection.end, textArea.value.length), cmd, '', 0, endNo);
            textArea.value = repStartText + selection.text + repEndText;
            start = this.selection.selectionStart - cmd.length;
            end = this.selection.selectionEnd - cmd.length;
        }
        this.restore(textArea, start, end, event);
    }
    replaceAt(input, search, replace, start, end) {
        return input.slice(0, start)
            + input.slice(start, end).replace(search, replace)
            + input.slice(end);
    }
    restore(textArea, start, end, event) {
        this.selection.save(start, end);
        this.selection.restore(textArea);
        if (event && event.callBack) {
            event.callBack({
                requestType: event.subCommand,
                selectedText: this.selection.getSelectedText(textArea),
                editorMode: 'Markdown',
                event: event.event
            });
        }
    }
    isAppliedFormat(lines, documentNode) {
        let format = 'p';
        // eslint-disable-next-line
        const configKey = Object.keys(this.syntax);
        const keys = Object.keys(this.syntax);
        const direction = this.parent.element.selectionDirection;
        const checkLine = direction === 'backward' ? lines[0].text : lines[lines.length - 1].text;
        for (let i = 0; !documentNode && i < keys.length; i++) {
            if (keys[i] !== 'pre' && this.selection.isStartWith(checkLine, this.syntax[keys[i]])) {
                format = keys[i];
                break;
            }
            else if (keys[i] === 'pre') {
                const parentLines = this.selection.getAllParents(this.parent.element.value);
                const firstPrevText = parentLines[lines[0].line - 1];
                const lastNextText = parentLines[lines.length + 1];
                if (this.selection.isStartWith(firstPrevText, this.syntax[keys[i]].split('\n')[0]) &&
                    this.selection.isStartWith(lastNextText, this.syntax[keys[i]].split('\n')[0])) {
                    format = keys[i];
                    break;
                }
            }
        }
        return format;
    }
}

/**
 * SelectionCommands internal component
 *
 * @hidden
 * @deprecated
 */
class MDSelectionFormats {
    constructor(parent) {
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(this, this, parent, true);
        this.selection = this.parent.markdownSelection;
        this.addEventListener();
    }
    addEventListener() {
        this.parent.observer.on(selectionCommand, this.applyCommands, this);
        this.parent.observer.on(KEY_DOWN_HANDLER, this.keyDownHandler, this);
    }
    keyDownHandler(e) {
        switch (e.event.action) {
            case 'bold':
                this.applyCommands({ subCommand: 'Bold', callBack: e.callBack });
                e.event.preventDefault();
                break;
            case 'italic':
                this.applyCommands({ subCommand: 'Italic', callBack: e.callBack });
                e.event.preventDefault();
                break;
            case 'strikethrough':
                this.applyCommands({ subCommand: 'StrikeThrough', callBack: e.callBack });
                e.event.preventDefault();
                break;
            case 'uppercase':
                this.applyCommands({ subCommand: 'UpperCase', callBack: e.callBack });
                e.event.preventDefault();
                break;
            case 'lowercase':
                this.applyCommands({ subCommand: 'LowerCase', callBack: e.callBack });
                e.event.preventDefault();
                break;
            case 'superscript':
                this.applyCommands({ subCommand: 'SuperScript', callBack: e.callBack });
                e.event.preventDefault();
                break;
            case 'subscript':
                this.applyCommands({ subCommand: 'SubScript', callBack: e.callBack });
                e.event.preventDefault();
                break;
        }
    }
    isBold(text, cmd) {
        return text.search('\\' + cmd + '\\' + cmd + '') !== -1;
    }
    isItalic(text, cmd) {
        return text.search('\\' + cmd) !== -1;
    }
    isMatch(text, cmd) {
        let matchText = [''];
        switch (cmd) {
            case this.syntax.Italic:
                matchText = text.match(this.singleCharRegx(cmd));
                break;
            case this.syntax.InlineCode:
                matchText = text.match(this.singleCharRegx(cmd));
                break;
            case this.syntax.StrikeThrough:
                matchText = text.match(this.singleCharRegx(cmd));
                break;
        }
        return matchText;
    }
    multiCharRegx(cmd) {
        return new RegExp('(\\' + cmd + '\\' + cmd + ')', 'g');
    }
    singleCharRegx(cmd) {
        return new RegExp('(\\' + cmd + ')', 'g');
    }
    isAppliedCommand(cmd) {
        // eslint-disable-next-line
        let isFormat = false;
        const textArea = this.parent.element;
        const start = textArea.selectionStart;
        const splitAt = (index) => (x) => [x.slice(0, index), x.slice(index)];
        const splitText = splitAt(start)(textArea.value);
        const cmdB = this.syntax.Bold.substr(0, 1);
        const cmdI = this.syntax.Italic;
        const selectedText = this.parent.markdownSelection.getSelectedText(textArea);
        if (selectedText !== '' && selectedText === selectedText.toLocaleUpperCase() && cmd === 'UpperCase') {
            return true;
        }
        else if (selectedText === '') {
            const beforeText = textArea.value.substr(splitText[0].length - 1, 1);
            const afterText = splitText[1].substr(0, 1);
            if ((beforeText !== '' && afterText !== '' && beforeText.match(/[a-z]/i)) &&
                beforeText === beforeText.toLocaleUpperCase() && afterText === afterText.toLocaleUpperCase() && cmd === 'UpperCase') {
                return true;
            }
        }
        if (!(this.isBold(splitText[0], cmdB)) && !(this.isItalic(splitText[0], cmdI)) && !(this.isBold(splitText[1], cmdB)) &&
            !(this.isItalic(splitText[1], cmdI))) {
            if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.isMatch(splitText[0], this.syntax.StrikeThrough)) &&
                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.isMatch(splitText[1], this.syntax.StrikeThrough))) &&
                (this.isMatch(splitText[0], this.syntax.StrikeThrough).length % 2 === 1 &&
                    this.isMatch(splitText[1], this.syntax.StrikeThrough).length % 2 === 1) && cmd === 'StrikeThrough') {
                isFormat = true;
            }
            if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.isMatch(splitText[0], this.syntax.InlineCode)) &&
                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.isMatch(splitText[1], this.syntax.InlineCode))) &&
                (this.isMatch(splitText[0], this.syntax.InlineCode).length % 2 === 1 &&
                    this.isMatch(splitText[1], this.syntax.InlineCode).length % 2 === 1) && cmd === 'InlineCode') {
                isFormat = true;
            }
            /* eslint-disable */
            if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(splitText[0].match(/\<sub>/g)) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(splitText[1].match(/\<\/sub>/g))) &&
                (splitText[0].match(/\<sub>/g).length % 2 === 1 &&
                    splitText[1].match(/\<\/sub>/g).length % 2 === 1) && cmd === 'SubScript') {
                isFormat = true;
            }
            if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(splitText[0].match(/\<sup>/g)) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(splitText[1].match(/\<\/sup>/g))) &&
                (splitText[0].match(/\<sup>/g).length % 2 === 1 && splitText[1].match(/\<\/sup>/g).length % 2 === 1) &&
                cmd === 'SuperScript') {
                isFormat = true;
            }
            /* eslint-enable */
        }
        if ((this.isBold(splitText[0], cmdB) && this.isBold(splitText[1], cmdB)) &&
            (splitText[0].match(this.multiCharRegx(cmdB)).length % 2 === 1 &&
                splitText[1].match(this.multiCharRegx(cmdB)).length % 2 === 1) && cmd === 'Bold') {
            isFormat = true;
        }
        splitText[0] = this.isBold(splitText[0], cmdB) ? splitText[0].replace(this.multiCharRegx(cmdB), '$%@') : splitText[0];
        splitText[1] = this.isBold(splitText[1], cmdB) ? splitText[1].replace(this.multiCharRegx(cmdB), '$%@') : splitText[1];
        if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.isMatch(splitText[0], this.syntax.Italic)) &&
            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.isMatch(splitText[1], this.syntax.Italic))) &&
            (this.isMatch(splitText[0], this.syntax.Italic).length % 2 === 1 &&
                this.isMatch(splitText[1], this.syntax.Italic).length % 2 === 1) && cmd === 'Italic') {
            isFormat = true;
        }
        if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.isMatch(splitText[0], this.syntax.StrikeThrough)) &&
            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.isMatch(splitText[1], this.syntax.StrikeThrough))) &&
            (this.isMatch(splitText[0], this.syntax.StrikeThrough).length % 2 === 1 &&
                this.isMatch(splitText[1], this.syntax.StrikeThrough).length % 2 === 1) && cmd === 'StrikeThrough') {
            isFormat = true;
        }
        if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.isMatch(splitText[0], this.syntax.InlineCode)) &&
            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.isMatch(splitText[1], this.syntax.InlineCode))) &&
            (this.isMatch(splitText[0], this.syntax.InlineCode).length % 2 === 1 &&
                this.isMatch(splitText[1], this.syntax.InlineCode).length % 2 === 1) && cmd === 'InlineCode') {
            isFormat = true;
        }
        /* eslint-disable */
        if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(splitText[0].match(/\<sub>/g)) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(splitText[1].match(/\<\/sub>/g))) &&
            (splitText[0].match(/\<sub>/g).length % 2 === 1 && splitText[1].match(/\<\/sub>/g).length % 2 === 1) && cmd === 'SubScript') {
            isFormat = true;
        }
        if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(splitText[0].match(/\<sup>/g)) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(splitText[1].match(/\<\/sup>/g))) &&
            (splitText[0].match(/\<sup>/g).length % 2 === 1 && splitText[1].match(/\<\/sup>/g).length % 2 === 1) && cmd === 'SuperScript') {
            isFormat = true;
            /* eslint-enable */
        }
        return isFormat;
    }
    applyCommands(e) {
        this.currentAction = e.subCommand;
        const textArea = this.parent.element;
        this.selection.save(textArea.selectionStart, textArea.selectionEnd);
        const start = textArea.selectionStart;
        const end = textArea.selectionEnd;
        let addedLength = 0;
        const selection = this.parent.markdownSelection.getSelectedInlinePoints(textArea);
        if (this.isAppliedCommand(e.subCommand) && selection.text !== '') {
            const startCmd = this.syntax[e.subCommand];
            const endCmd = e.subCommand === 'SubScript' ? '</sub>' :
                e.subCommand === 'SuperScript' ? '</sup>' : this.syntax[e.subCommand];
            const startLength = (e.subCommand === 'UpperCase' || e.subCommand === 'LowerCase') ? 0 : startCmd.length;
            const startNo = textArea.value.substr(0, selection.start).lastIndexOf(startCmd);
            let endNo = textArea.value.substr(selection.end, textArea.value.length).indexOf(endCmd);
            endNo = endNo + selection.end;
            const repStartText = this.replaceAt(textArea.value.substr(0, selection.start), startCmd, '', startNo, selection.start);
            const repEndText = this.replaceAt(textArea.value.substr(selection.end, textArea.value.length), endCmd, '', 0, endNo);
            textArea.value = repStartText + selection.text + repEndText;
            this.restore(textArea, start - startLength, end - startLength, e);
            return;
        }
        if (selection.text !== '' && !this.isApplied(selection, e.subCommand)) {
            addedLength = (e.subCommand === 'UpperCase' || e.subCommand === 'LowerCase') ? 0 :
                this.syntax[e.subCommand].length;
            const repStart = textArea.value.substr(selection.start - this.syntax[e.subCommand].length, this.syntax[e.subCommand].length);
            let repEnd;
            if ((repStart === e.subCommand) || ((selection.start - this.syntax[e.subCommand].length ===
                textArea.value.indexOf(this.syntax[e.subCommand])) && (selection.end === textArea.value.lastIndexOf(this.syntax[e.subCommand]) || selection.end === textArea.value.lastIndexOf('</' + this.syntax[e.subCommand].substring(1, 5))))) {
                if (e.subCommand === 'SubScript' || e.subCommand === 'SuperScript') {
                    repEnd = textArea.value.substr(selection.end, this.syntax[e.subCommand].length + 1);
                }
                else {
                    repEnd = textArea.value.substr(selection.end, this.syntax[e.subCommand].length);
                }
                const repStartText = this.replaceAt(textArea.value.substr(0, selection.start), repStart, '', selection.start - this.syntax[e.subCommand].length, selection.start);
                const repEndText = this.replaceAt(textArea.value.substr(selection.end, textArea.value.length), repEnd, '', 0, repEnd.length);
                textArea.value = repStartText + selection.text + repEndText;
                this.restore(textArea, start - addedLength, end - addedLength, e);
            }
            else {
                if (e.subCommand === 'SubScript' || e.subCommand === 'SuperScript') {
                    selection.text = this.syntax[e.subCommand] + selection.text
                        + '</' + this.syntax[e.subCommand].substring(1, 5);
                }
                else if (e.subCommand === 'UpperCase' || e.subCommand === 'LowerCase') {
                    selection.text = (e.subCommand === 'UpperCase') ? selection.text.toUpperCase()
                        : selection.text.toLowerCase();
                }
                else {
                    selection.text = this.syntax[e.subCommand] + selection.text + this.syntax[e.subCommand];
                }
                textArea.value = textArea.value.substr(0, selection.start) + selection.text +
                    textArea.value.substr(selection.end, textArea.value.length);
                this.restore(textArea, start + addedLength, end + addedLength, e);
            }
        }
        else if (e.subCommand !== 'UpperCase' && e.subCommand !== 'LowerCase') {
            if (e.subCommand === 'SubScript' || e.subCommand === 'SuperScript') {
                selection.text = this.textReplace(selection.text, e.subCommand);
                selection.text = this.syntax[e.subCommand] + selection.text
                    + '</' + this.syntax[e.subCommand].substring(1, 5);
            }
            else {
                selection.text = this.textReplace(selection.text, e.subCommand);
                selection.text = this.syntax[e.subCommand] + selection.text + this.syntax[e.subCommand];
            }
            textArea.value = textArea.value.substr(0, selection.start)
                + selection.text + textArea.value.substr(selection.end, textArea.value.length);
            addedLength = this.syntax[e.subCommand].length;
            if (selection.start === selection.end) {
                this.restore(textArea, start + addedLength, end + addedLength, e);
            }
            else {
                this.restore(textArea, start + addedLength, end - addedLength, e);
            }
        }
        else {
            this.restore(textArea, start, end, e);
        }
        this.parent.undoRedoManager.saveData();
    }
    replaceAt(input, search, replace, start, end) {
        return input.slice(0, start)
            + input.slice(start, end).replace(search, replace)
            + input.slice(end);
    }
    restore(textArea, start, end, event) {
        this.selection.save(start, end);
        this.selection.restore(textArea);
        if (event && event.callBack) {
            event.callBack({
                requestType: this.currentAction,
                selectedText: this.selection.getSelectedText(textArea),
                editorMode: 'Markdown',
                event: event.event
            });
        }
    }
    textReplace(text, command) {
        let regx = this.singleCharRegx(this.syntax[command]);
        switch (command) {
            case 'Bold':
                regx = this.multiCharRegx(this.syntax[command].substr(0, 1));
                text = text.replace(regx, '');
                break;
            case 'Italic':
                if (!this.isBold(text, this.syntax[command].substr(0, 1))) {
                    text = text.replace(regx, '');
                }
                else {
                    const regxB = this.multiCharRegx(this.syntax[command].substr(0, 1));
                    let repText = text;
                    repText = repText.replace(regxB, '$%@').replace(regx, '');
                    const regxTemp = new RegExp('\\$%@', 'g');
                    text = repText.replace(regxTemp, this.syntax[command].substr(0, 1) + this.syntax[command].substr(0, 1));
                }
                break;
            case 'StrikeThrough':
                text = text.replace(regx, '');
                break;
            case 'InlineCode':
                text = text.replace(regx, '');
                break;
            case 'SubScript':
                text = text.replace(/<sub>/g, '').replace(/<\/sub>/g, '');
                break;
            case 'SuperScript':
                text = text.replace(/<sup>/g, '').replace(/<\/sup>/g, '');
                break;
        }
        return text;
    }
    isApplied(line, command) {
        let regx = this.singleCharRegx(this.syntax[command]);
        switch (command) {
            case 'SubScript':
            case 'SuperScript':
                regx = this.singleCharRegx(this.syntax[command]);
                return regx.test(line.text);
            case 'Bold':
            case 'StrikeThrough':
                regx = this.multiCharRegx(this.syntax[command].substr(0, 1));
                return regx.test(line.text);
            case 'UpperCase':
            case 'LowerCase':
                regx = new RegExp('^[' + this.syntax[command] + ']*$', 'g');
                return regx.test(line.text);
            case 'Italic': {
                let regTest;
                const regxB = this.multiCharRegx(this.syntax[command].substr(0, 1));
                if (regxB.test(line.text)) {
                    let repText = line.text;
                    repText = repText.replace(regxB, '$%#');
                    regTest = regx.test(repText);
                }
                else {
                    regTest = regx.test(line.text);
                }
                return regTest;
            }
            case 'InlineCode':
                return regx.test(line.text);
        }
    }
}

/**
 * Default Markdown formats config for adapter
 */
const markdownFormatTags = {
    'h6': '###### ',
    'h5': '##### ',
    'h4': '#### ',
    'h3': '### ',
    'h2': '## ',
    'h1': '# ',
    'blockquote': '> ',
    'pre': '```\n',
    'p': ''
};
/**
 * Default selection formats config for adapter
 */
const markdownSelectionTags = {
    'Bold': '**',
    'Italic': '*',
    'StrikeThrough': '~~',
    'InlineCode': '`',
    'SubScript': '<sub>',
    'SuperScript': '<sup>',
    'UpperCase': 'A-Z',
    'LowerCase': 'a-z'
};
/**
 * Default Markdown lists config for adapter
 */
const markdownListsTags = {
    'OL': '1. ',
    'UL': '- '
};
/**
 * Default html key config for adapter
 */
const htmlKeyConfig = {
    'toolbar-focus': 'alt+f10',
    'escape': '27',
    'insert-link': 'ctrl+k',
    'insert-image': 'ctrl+shift+i',
    'insert-table': 'ctrl+shift+e',
    'undo': 'ctrl+z',
    'redo': 'ctrl+y',
    'copy': 'ctrl+c',
    'cut': 'ctrl+x',
    'paste': 'ctrl+v',
    'bold': 'ctrl+b',
    'italic': 'ctrl+i',
    'underline': 'ctrl+u',
    'strikethrough': 'ctrl+shift+s',
    'uppercase': 'ctrl+shift+u',
    'lowercase': 'ctrl+shift+l',
    'superscript': 'ctrl+shift+=',
    'subscript': 'ctrl+=',
    'indents': 'ctrl+]',
    'outdents': 'ctrl+[',
    'html-source': 'ctrl+shift+h',
    'full-screen': 'ctrl+shift+f',
    'decrease-fontsize': 'ctrl+shift+<',
    'increase-fontsize': 'ctrl+shift+>',
    'justify-center': 'ctrl+e',
    'justify-full': 'ctrl+j',
    'justify-left': 'ctrl+l',
    'justify-right': 'ctrl+r',
    'clear-format': 'ctrl+shift+r',
    'ordered-list': 'ctrl+shift+o',
    'unordered-list': 'ctrl+alt+o',
    'space': '32',
    'enter': '13',
    'tab': 'tab',
    'delete': '46'
};
/**
 * Default  markdown key config for adapter
 */
const markdownKeyConfig = {
    'toolbar-focus': 'alt+f10',
    'escape': '27',
    'insert-link': 'ctrl+k',
    'insert-image': 'ctrl+shift+i',
    'insert-table': 'ctrl+shift+e',
    'undo': 'ctrl+z',
    'redo': 'ctrl+y',
    'copy': 'ctrl+c',
    'cut': 'ctrl+x',
    'paste': 'ctrl+v',
    'bold': 'ctrl+b',
    'italic': 'ctrl+i',
    'strikethrough': 'ctrl+shift+s',
    'uppercase': 'ctrl+shift+u',
    'lowercase': 'ctrl+shift+l',
    'superscript': 'ctrl+shift+=',
    'subscript': 'ctrl+=',
    'full-screen': 'ctrl+shift+f',
    'ordered-list': 'ctrl+shift+o',
    'unordered-list': 'ctrl+alt+o'
};
/**
 * PasteCleanup Grouping of similar functionality tags
 */
const pasteCleanupGroupingTags = {
    'b': ['strong'],
    'strong': ['b'],
    'i': ['emp', 'cite'],
    'emp': ['i', 'cite'],
    'cite': ['i', 'emp']
};
/**
 * PasteCleanup Grouping of similar functionality tags
 */
const listConversionFilters = {
    'first': 'MsoListParagraphCxSpFirst',
    'middle': 'MsoListParagraphCxSpMiddle',
    'last': 'MsoListParagraphCxSpLast'
};
/**
 * Dom-Node Grouping of self closing tags
 *
 * @hidden
 */
const selfClosingTags = [
    'BR',
    'IMG'
];

/**
 * `Undo` module is used to handle undo actions.
 */
class UndoRedoCommands {
    constructor(parent, options) {
        this.undoRedoStack = [];
        this.parent = parent;
        this.undoRedoSteps = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options) ? options.undoRedoSteps : 30;
        this.undoRedoTimer = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options) ? options.undoRedoTimer : 300;
        this.selection = this.parent.markdownSelection;
        this.addEventListener();
    }
    addEventListener() {
        const debounceListener = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.debounce)(this.keyUp, this.undoRedoTimer);
        this.parent.observer.on(KEY_UP_HANDLER, debounceListener, this);
        this.parent.observer.on(KEY_DOWN_HANDLER, this.keyDown, this);
        this.parent.observer.on(ACTION, this.onAction, this);
        this.parent.observer.on(MODEL_CHANGED_PLUGIN, this.onPropertyChanged, this);
    }
    onPropertyChanged(props) {
        for (const prop of Object.keys(props.newProp)) {
            switch (prop) {
                case 'undoRedoSteps':
                    this.undoRedoSteps = props.newProp.undoRedoSteps;
                    break;
                case 'undoRedoTimer':
                    this.undoRedoTimer = props.newProp.undoRedoTimer;
                    break;
            }
        }
    }
    removeEventListener() {
        const debounceListener = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.debounce)(this.keyUp, 300);
        this.parent.observer.off(KEY_UP_HANDLER, debounceListener);
        this.parent.observer.off(KEY_DOWN_HANDLER, this.keyDown);
        this.parent.observer.off(ACTION, this.onAction);
        this.parent.observer.off(MODEL_CHANGED_PLUGIN, this.onPropertyChanged);
    }
    /**
     * Destroys the ToolBar.
     *
     * @function destroy
     * @returns {void}
     * @hidden
     * @deprecated
     */
    destroy() {
        this.removeEventListener();
    }
    /**
     * onAction method
     *
     * @param {IMarkdownSubCommands} e - specifies the sub commands
     * @returns {void}
     * @hidden
     * @deprecated
     */
    onAction(e) {
        if (e.subCommand === 'Undo') {
            this.undo(e);
        }
        else {
            this.redo(e);
        }
    }
    keyDown(e) {
        const event = e.event;
        // eslint-disable-next-line
        const proxy = this;
        switch (event.action) {
            case 'undo':
                event.preventDefault();
                proxy.undo(e);
                break;
            case 'redo':
                event.preventDefault();
                proxy.redo(e);
                break;
        }
    }
    keyUp(e) {
        if (e.event.keyCode !== 17 && !e.event.ctrlKey) {
            this.saveData(e);
        }
    }
    /**
     * MD collection stored string format.
     *
     * @param {KeyboardEvent} e - specifies the key board event
     * @function saveData
     * @returns {void}
     * @hidden
     * @deprecated
     */
    saveData(e) {
        const textArea = this.parent.element;
        this.selection.save(textArea.selectionStart, textArea.selectionEnd);
        const start = textArea.selectionStart;
        const end = textArea.selectionEnd;
        const textValue = this.parent.element.value;
        const changEle = { text: textValue, start: start, end: end };
        if (this.undoRedoStack.length >= this.steps) {
            this.undoRedoStack = this.undoRedoStack.slice(0, this.steps + 1);
        }
        if (this.undoRedoStack.length > 1 && (this.undoRedoStack[this.undoRedoStack.length - 1].start === start) &&
            (this.undoRedoStack[this.undoRedoStack.length - 1].end === end)) {
            return;
        }
        this.undoRedoStack.push(changEle);
        this.steps = this.undoRedoStack.length - 1;
        if (this.steps > this.undoRedoSteps) {
            this.undoRedoStack.shift();
            this.steps--;
        }
        if (e && e.callBack) {
            e.callBack();
        }
    }
    /**
     * Undo the editable text.
     *
     * @param {IMarkdownSubCommands} e - specifies the sub commands
     * @function undo
     * @returns {void}
     * @hidden
     * @deprecated
     */
    undo(e) {
        if (this.steps > 0) {
            this.currentAction = 'Undo';
            const start = this.undoRedoStack[this.steps - 1].start;
            const end = this.undoRedoStack[this.steps - 1].end;
            const removedContent = this.undoRedoStack[this.steps - 1].text;
            this.parent.element.value = removedContent;
            this.parent.element.focus();
            this.steps--;
            this.restore(this.parent.element, start, end, e);
        }
    }
    /**
     * Redo the editable text.
     *
     * @param {IMarkdownSubCommands} e - specifies the sub commands
     * @function redo
     * @returns {void}
     * @hidden
     * @deprecated
     */
    redo(e) {
        if (this.undoRedoStack[this.steps + 1] != null) {
            this.currentAction = 'Redo';
            const start = this.undoRedoStack[this.steps + 1].start;
            const end = this.undoRedoStack[this.steps + 1].end;
            this.parent.element.value = this.undoRedoStack[this.steps + 1].text;
            this.parent.element.focus();
            this.steps++;
            this.restore(this.parent.element, start, end, e);
        }
    }
    restore(textArea, start, end, event) {
        this.selection.save(start, end);
        this.selection.restore(textArea);
        if (event && event.callBack) {
            event.callBack({
                requestType: this.currentAction,
                selectedText: this.selection.getSelectedText(textArea),
                editorMode: 'Markdown',
                event: event.event
            });
        }
    }
    /**
     * getUndoStatus method
     *
     * @returns {boolean} - returns the boolean value
     * @hidden
     * @deprecated
     */
    getUndoStatus() {
        const status = { undo: false, redo: false };
        if (this.steps > 0) {
            status.undo = true;
        }
        if (this.undoRedoStack[this.steps + 1] != null) {
            status.redo = true;
        }
        return status;
    }
}

/**
 * Link internal component
 *
 * @hidden
 * @deprecated
 */
class MDLink {
    /**
     * Constructor for creating the Formats plugin
     *
     * @param {MarkdownParser} parent - specifies the parent element
     * @hidden
     * @deprecated
     */
    constructor(parent) {
        this.parent = parent;
        this.selection = this.parent.markdownSelection;
        this.addEventListener();
    }
    addEventListener() {
        this.parent.observer.on(LINK_COMMAND, this.createLink, this);
    }
    createLink(e) {
        const textArea = this.parent.element;
        textArea.focus();
        const start = textArea.selectionStart;
        const end = textArea.selectionEnd;
        let text = (e.subCommand === 'Image') ? this.selection.getSelectedText(textArea) : e.item.text;
        const startOffset = (e.subCommand === 'Image') ? (start + 2) : (start + 1);
        const endOffset = (e.subCommand === 'Image') ? (end + 2) : (end + 1);
        text = (e.subCommand === 'Image') ? '![' + text + '](' + e.item.url + ')' : '[' + text + '](' + e.item.url + ')';
        textArea.value = textArea.value.substr(0, start)
            + text + textArea.value.substr(end, textArea.value.length);
        this.parent.markdownSelection.setSelection(textArea, startOffset, endOffset);
        this.restore(textArea, startOffset, endOffset, e);
    }
    restore(textArea, start, end, event) {
        this.selection.save(start, end);
        this.selection.restore(textArea);
        if (event && event.callBack) {
            event.callBack({
                requestType: event.subCommand,
                selectedText: this.selection.getSelectedText(textArea),
                editorMode: 'Markdown',
                event: event.event
            });
        }
    }
}

/**
 * Link internal component
 *
 * @hidden
 * @deprecated
 */
class MDTable {
    /**
     * Constructor for creating the Formats plugin
     *
     * @param {IMDTable} options - specifies the options
     * @hidden
     * @deprecated
     */
    constructor(options) {
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(this, this, options, true);
        this.selection = this.parent.markdownSelection;
        this.addEventListener();
    }
    addEventListener() {
        this.parent.observer.on(MD_TABLE, this.createTable, this);
        this.parent.observer.on(KEY_DOWN_HANDLER, this.onKeyDown, this);
    }
    removeEventListener() {
        this.parent.observer.off(MD_TABLE, this.createTable);
        this.parent.observer.off(KEY_DOWN_HANDLER, this.onKeyDown);
    }
    /**
     * markdown destroy method
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    destroy() {
        this.removeEventListener();
    }
    onKeyDown(e) {
        if (e.event.action === 'insert-table') {
            e.item = e.value;
            this.createTable(e);
        }
    }
    createTable(e) {
        this.element = this.parent.element;
        const start = this.element.selectionStart;
        const end = this.element.selectionEnd;
        const textAreaInitial = this.element.value;
        this.locale = e;
        this.selection.save(start, end);
        this.restore(this.element.selectionStart, this.element.selectionEnd, null);
        this.insertTable(start, end, textAreaInitial, e);
    }
    getTable() {
        let table = '';
        table += this.textNonEmpty();
        table += this.tableHeader(this.locale);
        table += this.tableCell(this.locale);
        return table;
    }
    tableHeader(e) {
        let text = '';
        for (let i = 1; i <= 2; i++) {
            text += '|';
            for (let j = 1; j <= 2; j++) {
                if (i === 1) {
                    text += e.item.headingText + ' ' + j + '|';
                }
                else {
                    text += '---------|';
                }
            }
            text += this.insertLine();
        }
        return text;
    }
    tableCell(e) {
        let text = '';
        for (let i = 1; i <= 2; i++) {
            text += '|';
            for (let j = 1; j <= 2; j++) {
                text += e.item.colText + ' ' + this.convertToLetters(i) + j + '|';
            }
            text += this.insertLine();
        }
        text += this.insertLine();
        return text;
    }
    insertLine() {
        const dummyElement = document.createElement('div');
        dummyElement.innerHTML = '\n';
        return dummyElement.textContent;
    }
    insertTable(start, end, textAreaInitial, e) {
        const parentText = this.selection.getSelectedParentPoints(this.element);
        const lastLineSplit = parentText[parentText.length - 1].text.split(' ', 2);
        const syntaxArr = this.getFormatTag();
        // eslint-disable-next-line
        if (lastLineSplit.length < 2) {
            this.element.value = this.updateValue(this.getTable());
            this.makeSelection(textAreaInitial, start, end);
        }
        else {
            if (this.ensureFormatApply(parentText[parentText.length - 1].text)) {
                this.checkValid(start, end, this.getTable(), textAreaInitial, e, lastLineSplit, parentText, syntaxArr);
            }
            else {
                this.element.value = this.updateValue(this.getTable());
                this.makeSelection(textAreaInitial, start, end);
            }
        }
        this.restore(this.element.selectionStart, this.element.selectionEnd, e);
    }
    makeSelection(textAreaInitial, start, end) {
        end = start + (textAreaInitial.length > 0 ? 12 : 10); //end is added 12 or 10 because to make the table heading selected
        start += textAreaInitial.length > 0 ? 3 : 1; // Start is added 3 or 1 because new lines are added when inserting table
        this.selection.setSelection(this.element, start, end);
    }
    getFormatTag() {
        const syntaxFormatKey = Object.keys(this.syntaxTag.Formats);
        const syntaxListKey = Object.keys(this.syntaxTag.List);
        const syntaxArr = [];
        for (let i = 0; i < syntaxFormatKey.length; i++) {
            syntaxArr.push(this.syntaxTag.Formats[syntaxFormatKey[i]]);
        }
        for (let j = 0; j < syntaxListKey.length; j++) {
            syntaxArr.push(this.syntaxTag.List[syntaxListKey[j]]);
        }
        return syntaxArr;
    }
    ensureFormatApply(line) {
        const formatTags = this.getFormatTag();
        const formatSplitZero = line.trim().split(' ', 2)[0] + ' ';
        for (let i = 0; i < formatTags.length; i++) {
            if (formatSplitZero === formatTags[i] || /^[\d.]+[ ]+$/.test(formatSplitZero)) {
                return true;
            }
        }
        return false;
    }
    ensureStartValid(firstLine, parentText) {
        const firstLineSplit = parentText[0].text.split(' ', 2);
        for (let i = firstLine + 1; i <= firstLine + firstLineSplit[0].length + 1; i++) {
            if (this.element.selectionStart === i || this.element.selectionEnd === i) {
                return false;
            }
        }
        return true;
    }
    ensureEndValid(lastLine, formatSplitLength) {
        for (let i = lastLine + 1; i <= lastLine + formatSplitLength + 1; i++) {
            if (this.element.selectionEnd === i) {
                return false;
            }
        }
        return true;
    }
    updateValueWithFormat(formatSplit, text) {
        const textApplyFormat = this.element.value.substring(this.element.selectionEnd, this.element.value.length);
        text += textApplyFormat.replace(textApplyFormat, (formatSplit[0] + ' ' + textApplyFormat));
        return this.element.value.substr(0, this.element.selectionStart) + text;
    }
    updateValue(text) {
        return this.element.value.substr(0, this.element.selectionStart) + text +
            this.element.value.substr(this.element.selectionEnd, this.element.value.length);
    }
    checkValid(start, end, text, textAreaInitial, 
    // eslint-disable-next-line
    e, formatSplit, parentText, syntaxArr) {
        if (this.ensureStartValid(parentText[0].start, parentText) &&
            this.ensureEndValid(parentText[parentText.length - 1].start, formatSplit[0].length)) {
            if (start === parentText[0].start) {
                if (start !== end && end !== (parentText[parentText.length - 1].end - 1)) {
                    this.element.value = this.updateValueWithFormat(formatSplit, text);
                }
                else {
                    this.element.value = this.updateValue(text);
                }
            }
            else if (end === parentText[parentText.length - 1].end - 1) {
                this.element.value = this.updateValue(text);
            }
            else {
                this.element.value = this.updateValueWithFormat(formatSplit, text);
            }
            this.makeSelection(textAreaInitial, start, end);
        }
    }
    convertToLetters(rowNumber) {
        const baseChar = ('A').charCodeAt(0);
        let letters = '';
        do {
            rowNumber -= 1;
            letters = String.fromCharCode(baseChar + (rowNumber % 26)) + letters;
            rowNumber = (rowNumber / 26) >> 0;
        } while (rowNumber > 0);
        return letters;
    }
    textNonEmpty() {
        let emptyText = '';
        if (this.isCursorBased() || this.isSelectionBased()) {
            if (this.element.value.length > 0) {
                emptyText += this.insertLine();
                emptyText += this.insertLine(); // to append two new line when textarea having content.
            }
        }
        return emptyText;
    }
    isCursorBased() {
        return this.element.selectionStart === this.element.selectionEnd;
    }
    isSelectionBased() {
        return this.element.selectionStart !== this.element.selectionEnd;
    }
    restore(start, end, event) {
        this.selection.save(start, end);
        this.selection.restore(this.element);
        if (event && event.callBack) {
            event.callBack({
                requestType: event.subCommand,
                selectedText: this.selection.getSelectedText(this.element),
                editorMode: 'Markdown',
                event: event.event
            });
        }
    }
}

/**
 * Link internal component
 *
 * @hidden
 * @deprecated
 */
class ClearFormat {
    /**
     * Constructor for creating the clear format plugin
     *
     * @param {MarkdownParser} parent - specifies the parent element
     * @hidden
     * @deprecated
     */
    constructor(parent) {
        this.parent = parent;
        this.selection = this.parent.markdownSelection;
        this.addEventListener();
    }
    addEventListener() {
        this.parent.observer.on(CLEAR_COMMAND, this.clear, this);
    }
    replaceRegex(data) {
        /* eslint-disable */
        return data.replace(/\*/ig, '\\*').replace(/\&/ig, '\\&')
            .replace(/\-/ig, '\\-').replace(/\^/ig, '\\^')
            .replace(/\$/ig, '\\$').replace(/\./ig, '\\.')
            .replace(/\|/ig, '\\|').replace(/\?/ig, '\\?')
            .replace(/\+/ig, '\\+').replace(/\-/ig, '\\-')
            .replace(/\&/ig, '\\&');
        /* eslint-enable */
    }
    clearSelectionTags(text) {
        const data = this.parent.selectionTags;
        const keys = Object.keys(data);
        for (let num = 0; num < keys.length; num++) {
            const key = keys[num];
            // eslint-disable-next-line
            if (data.hasOwnProperty(key) && data[key] !== '') {
                const expString = this.replaceRegex(data[key]);
                let regExp;
                const startExp = data[key].length;
                const endExp = (data[key] === '<sup>' || data[key] === '<sub>') ? data[key].length + 1 : data[key].length;
                if (data[key] === '<sup>') {
                    // eslint-disable-next-line
                    regExp = new RegExp('<sup>(.*?)<\/sup>', 'ig');
                }
                else if (data[key] === '<sub>') {
                    // eslint-disable-next-line
                    regExp = new RegExp('<sub>(.*?)<\/sub>', 'ig');
                }
                else {
                    regExp = new RegExp(expString + '(.*?)' + expString, 'ig');
                }
                const val = text.match(regExp);
                for (let index = 0; val && index < val.length && val[index] !== ''; index++) {
                    text = text.replace(val[index], val[index].substr(startExp, val[index].length - endExp - startExp));
                }
            }
        }
        return text;
    }
    clearFormatTags(text) {
        const lines = text.split('\n');
        return this.clearFormatLines(lines);
    }
    clearFormatLines(lines) {
        const tags = [this.parent.formatTags, this.parent.listTags];
        let str = '';
        for (let len = 0; len < lines.length; len++) {
            for (let num = 0; num < tags.length; num++) {
                const data = tags[num];
                const keys = Object.keys(data);
                for (let index = 0; index < keys.length; index++) {
                    const key = keys[index];
                    // eslint-disable-next-line
                    if (data.hasOwnProperty(key) && data[key] !== '') {
                        if (lines[len].indexOf(data[key]) === 0) {
                            lines[len] = lines[len].replace(data[key], '');
                            lines[len] = this.clearFormatLines([lines[len]]);
                        }
                    }
                }
            }
            str = str + lines[len] + ((len !== lines.length - 1) ? '\n' : '');
        }
        return str;
    }
    clear(e) {
        const textArea = this.parent.element;
        textArea.focus();
        const start = textArea.selectionStart;
        const end = textArea.selectionEnd;
        let text = this.selection.getSelectedText(textArea);
        text = this.clearSelectionTags(text);
        text = this.clearFormatTags(text);
        textArea.value = textArea.value.substr(0, start)
            + text + textArea.value.substr(end, textArea.value.length);
        this.parent.markdownSelection.setSelection(textArea, start, start + text.length);
        this.restore(textArea, start, start + text.length, e);
    }
    restore(textArea, start, end, event) {
        this.selection.save(start, end);
        this.selection.restore(textArea);
        if (event && event.callBack) {
            event.callBack({
                requestType: event.subCommand,
                selectedText: this.selection.getSelectedText(textArea),
                editorMode: 'Markdown',
                event: event.event
            });
        }
    }
}

/**
 * MarkdownParser internal component
 *
 * @hidden
 * @deprecated
 */
class MarkdownParser {
    /**
     * Constructor for creating the component
     *
     * @param {IMarkdownParserModel} options - specifies the options
     * @hidden
     * @deprecated
     */
    constructor(options) {
        this.initialize();
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(this, this, options, true);
        this.observer = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Observer(this);
        this.markdownSelection = new MarkdownSelection();
        this.listObj = new MDLists({ parent: this, syntax: this.listTags });
        this.formatObj = new MDFormats({ parent: this, syntax: this.formatTags });
        this.undoRedoManager = new UndoRedoCommands(this, options.options);
        this.mdSelectionFormats = new MDSelectionFormats({ parent: this, syntax: this.selectionTags });
        this.linkObj = new MDLink(this);
        this.tableObj = new MDTable({ parent: this, syntaxTag: ({ Formats: this.formatTags, List: this.listTags }) });
        this.clearObj = new ClearFormat(this);
        this.wireEvents();
    }
    initialize() {
        this.formatTags = markdownFormatTags;
        this.listTags = markdownListsTags;
        this.selectionTags = markdownSelectionTags;
    }
    wireEvents() {
        this.observer.on(KEY_DOWN, this.editorKeyDown, this);
        this.observer.on(KEY_UP, this.editorKeyUp, this);
        this.observer.on(MODEL_CHANGED, this.onPropertyChanged, this);
    }
    onPropertyChanged(props) {
        this.observer.notify(MODEL_CHANGED_PLUGIN, props);
    }
    editorKeyDown(e) {
        this.observer.notify(KEY_DOWN_HANDLER, e);
    }
    editorKeyUp(e) {
        this.observer.notify(KEY_UP_HANDLER, e);
    }
    /* eslint-disable */
    /**
     * markdown execCommand method
     *
     * @param {MarkdownExecCommand} command - specifies the command
     * @param {T} - specifies the value
     * @param {Event} event - specifies the event
     * @param {Function} callBack - specifies the call back function
     * @param {string} text - specifies the string value
     * @param {T} exeValue - specifies the value
     * @returns {void}
     * @hidden
     * @deprecated
     */
    /* eslint-enable */
    execCommand(command, value, event, callBack, text, exeValue) {
        switch (command.toLocaleLowerCase()) {
            case 'lists':
                this.observer.notify(LISTS_COMMAND, { subCommand: value, event: event, callBack: callBack });
                break;
            case 'formats':
                this.observer.notify(FORMAT_TYPE, { subCommand: value, event: event, callBack: callBack });
                break;
            case 'actions':
                this.observer.notify(ACTION, { subCommand: value, event: event, callBack: callBack });
                break;
            case 'style':
            case 'effects':
            case 'casing':
                this.observer.notify(selectionCommand, { subCommand: value, event: event, callBack: callBack });
                break;
            case 'links':
            case 'images':
                this.observer.notify(LINK_COMMAND, { subCommand: value, event: event, callBack: callBack, item: exeValue });
                break;
            case 'table':
                switch (value.toString().toLocaleLowerCase()) {
                    case 'createtable':
                        this.observer.notify(MD_TABLE, { subCommand: value, item: exeValue, event: event, callBack: callBack });
                        break;
                }
                break;
            case 'clear':
                this.observer.notify(CLEAR_COMMAND, { subCommand: value, event: event, callBack: callBack });
                break;
        }
    }
}

/**
 * Markdown adapter
 *
 * @hidden
 * @deprecated
 */
class MarkdownFormatter extends Formatter {
    constructor(options) {
        super();
        this.initialize();
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(this, this, options, true);
        if (options && this.element) {
            this.updateFormatter(this.element, document, options.options);
        }
    }
    initialize() {
        this.keyConfig = markdownKeyConfig;
        this.formatTags = markdownFormatTags;
        this.listTags = markdownListsTags;
        this.selectionTags = markdownSelectionTags;
    }
    /**
     * Update the formatter of RichTextEditor
     *
     * @param  {Element} editElement - specifies the edit element.
     * @param  {Document} doc - specifies the document.
     * @param {number} options - specifies the options
     * @returns {void}
     * @hidden
     * @deprecated
     */
    updateFormatter(editElement, doc, options) {
        if (editElement) {
            this.editorManager = new MarkdownParser({
                element: editElement,
                formatTags: this.formatTags,
                listTags: this.listTags,
                selectionTags: this.selectionTags,
                options: options
            });
        }
    }
}

/**
 * Markdown module is used to render Rich Text Editor as Markdown editor content
 *
 * @hidden
 * @deprecated
 */
class MarkdownRender {
    /**
     * Constructor for content renderer module
     *
     * @param {IRichTextEditor} parent - specifies the parent.
     */
    constructor(parent) {
        this.parent = parent;
    }
    /**
     * The function is used to render Rich Text Editor content div
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    renderPanel() {
        const rteObj = this.parent;
        const div = this.parent.createElement('div', { id: this.parent.getID() + '_view', className: 'e-rte-content' });
        this.editableElement = this.parent.createElement('textarea', {
            className: 'e-content',
            id: this.parent.getID() + '_editable-content'
        });
        div.appendChild(this.editableElement);
        this.setPanel(div);
        rteObj.element.appendChild(div);
    }
    /**
     * Get the content div element of RichTextEditor
     *
     * @returns {Element} - specifies the element
     * @hidden
     * @deprecated
     */
    getPanel() {
        return this.contentPanel;
    }
    /**
     * Get the editable element of RichTextEditor
     *
     * @returns {Element} - specifies the element
     * @hidden
     * @deprecated
     */
    getEditPanel() {
        return this.editableElement;
    }
    /**
     * Returns the text content as string.
     *
     * @returns {string} - specifies the string values.
     */
    getText() {
        return this.getEditPanel().value;
    }
    /**
     * Set the content div element of RichTextEditor
     *
     * @param  {Element} panel - specifies the element.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    setPanel(panel) {
        this.contentPanel = panel;
    }
    /**
     * Get the document of RichTextEditor
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getDocument() {
        return this.getEditPanel().ownerDocument;
    }
}

/**
 * `MarkdownEditor` module is used to markdown editor
 */
class MarkdownEditor {
    constructor(parent, serviceLocator) {
        this.parent = parent;
        this.locator = serviceLocator;
        this.renderFactory = this.locator.getService('rendererFactory');
        this.addEventListener();
    }
    /**
     * Destroys the Markdown.
     *
     * @function destroy
     * @returns {void}
     * @hidden
     * @deprecated
     */
    destroy() {
        this.removeEventListener();
    }
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.saveSelection = new MarkdownSelection();
        this.parent.on(initialLoad, this.instantiateRenderer, this);
        this.parent.on(initialEnd, this.render, this);
        this.parent.on(modelChanged, this.onPropertyChanged, this);
        this.parent.on(markdownToolbarClick, this.onToolbarClick, this);
        this.parent.on(destroy, this.destroy, this);
        this.parent.on(selectAll$1, this.selectAll, this);
        this.parent.on(getSelectedHtml, this.getSelectedHtml, this);
        this.parent.on(selectionSave, this.onSelectionSave, this);
        this.parent.on(selectionRestore, this.onSelectionRestore, this);
        this.parent.on(readOnlyMode, this.updateReadOnly, this);
    }
    updateReadOnly() {
        if (this.parent.readonly) {
            this.parent.contentModule.getEditPanel().setAttribute('readonly', 'readonly');
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.parent.element], CLS_RTE_READONLY);
        }
        else {
            this.parent.contentModule.getEditPanel().removeAttribute('readonly');
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.parent.element], CLS_RTE_READONLY);
        }
    }
    onSelectionSave() {
        const textArea = this.parent.contentModule.getEditPanel();
        this.saveSelection.save(textArea.selectionStart, textArea.selectionEnd);
    }
    // eslint-disable-next-line
    onSelectionRestore(e) {
        this.contentRenderer.getEditPanel().focus();
        const textArea = this.parent.contentModule.getEditPanel();
        this.saveSelection.restore(textArea);
    }
    onToolbarClick(args) {
        const item = args.item;
        const textArea = this.parent.contentModule.getEditPanel();
        textArea.focus();
        const startOffset = textArea.selectionStart;
        const endOffset = textArea.selectionEnd;
        const text = textArea.value.substring(startOffset, endOffset);
        switch (item.subCommand) {
            case 'Maximize':
                this.parent.notify(enableFullScreen, { args: args });
                break;
            case 'Minimize':
                this.parent.notify(disableFullScreen, { args: args });
                break;
            case 'CreateLink':
                this.parent.notify(insertLink, { member: 'link', args: args, text: text, module: 'Markdown' });
                break;
            case 'Image':
                this.parent.notify(insertImage, { member: 'image', args: args, text: text, module: 'Markdown' });
                break;
            case 'CreateTable': {
                const tableConstant = {
                    'headingText': this.parent.localeObj.getConstant('TableHeadingText'),
                    'colText': this.parent.localeObj.getConstant('TableColText')
                };
                this.parent.formatter.process(this.parent, args, args.originalEvent, tableConstant);
                break;
            }
            default:
                this.parent.formatter.process(this.parent, args, args.originalEvent, null);
                break;
        }
    }
    instantiateRenderer() {
        this.renderFactory.addRenderer(RenderType.Content, new MarkdownRender(this.parent));
    }
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(initialEnd, this.render);
        this.parent.off(modelChanged, this.onPropertyChanged);
        this.parent.off(destroy, this.destroy);
        this.parent.off(markdownToolbarClick, this.onToolbarClick);
        this.parent.off(initialLoad, this.instantiateRenderer);
        this.parent.off(selectAll$1, this.selectAll);
        this.parent.off(getSelectedHtml, this.getSelectedHtml);
        this.parent.off(selectionSave, this.onSelectionSave);
        this.parent.off(selectionRestore, this.onSelectionRestore);
        this.parent.off(readOnlyMode, this.updateReadOnly);
    }
    render() {
        this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);
        const editElement = this.contentRenderer.getEditPanel();
        const option = { undoRedoSteps: this.parent.undoRedoSteps, undoRedoTimer: this.parent.undoRedoTimer };
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.formatter)) {
            this.parent.formatter = new MarkdownFormatter({
                element: editElement,
                options: option
            });
        }
        else {
            this.parent.formatter.updateFormatter(editElement, this.contentRenderer.getDocument(), option);
        }
        if (this.parent.toolbarSettings.enable) {
            this.toolbarUpdate = new MarkdownToolbarStatus(this.parent);
        }
        this.parent.notify(bindOnEnd, {});
    }
    /**
     * Called internally if any of the property value changed.
     *
     * @param {RichTextEditorModel} e - specifies the editor model
     * @returns {void}
     * @hidden
     * @deprecated
     */
    onPropertyChanged(e) {
        // On property code change here
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.newProp.formatter)) {
            const editElement = this.contentRenderer.getEditPanel();
            const option = { undoRedoSteps: this.parent.undoRedoSteps,
                undoRedoTimer: this.parent.undoRedoTimer };
            this.parent.formatter.updateFormatter(editElement, this.contentRenderer.getDocument(), option);
        }
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {void}
     */
    getModuleName() {
        return 'markdownEditor';
    }
    /**
     * For selecting all content in RTE
     *
     * @returns {void}
     * @private
     */
    selectAll() {
        this.parent.formatter.editorManager.markdownSelection.setSelection(this.parent.contentModule.getEditPanel(), 0, this.parent.contentModule.getEditPanel().value.length);
    }
    /**
     * For get a selected text in RTE
     *
     * @param {NotifyArgs} e - specifies the arguments.
     * @returns {void}
     * @private
     */
    getSelectedHtml(e) {
        e.callBack(this.parent.formatter.editorManager.markdownSelection.getSelectedText(this.parent.contentModule.getEditPanel()));
    }
}

/**
 * Constant values for EditorManager
 */
/**
 * Image plugin events
 *
 * @hidden
 */
const IMAGE = 'INSERT-IMAGE';
const TABLE = 'INSERT-TABLE';
const LINK = 'INSERT-LINK';
const INSERT_ROW = 'INSERT-ROW';
const INSERT_COLUMN = 'INSERT-COLUMN';
const DELETEROW = 'DELETE-ROW';
const DELETECOLUMN = 'DELETE-COLUMN';
const REMOVETABLE = 'REMOVE-TABLE';
const TABLEHEADER = 'TABLE-HEADER';
const TABLE_VERTICAL_ALIGN = 'TABLE_VERTICAL_ALIGN';
const TABLE_MERGE = 'TABLE_MERGE';
const TABLE_VERTICAL_SPLIT = 'TABLE_VERTICAL_SPLIT';
const TABLE_HORIZONTAL_SPLIT = 'TABLE_HORIZONTAL_SPLIT';
const TABLE_MOVE = 'TABLE_MOVE';
/**
 * Alignments plugin events
 *
 * @hidden
 */
const ALIGNMENT_TYPE = 'alignment-type';
/**
 * Indents plugin events
 *
 * @hidden
 */
const INDENT_TYPE = 'indent-type';
/**
 * Constant tag names
 *
 * @hidden
 */
const DEFAULT_TAG = 'p';
/**
 * @hidden
 */
const BLOCK_TAGS = ['address', 'article', 'aside', 'audio', 'blockquote',
    'canvas', 'details', 'dd', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer',
    'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'li', 'main', 'nav',
    'noscript', 'ol', 'output', 'p', 'pre', 'section', 'table', 'tbody', 'td', 'tfoot', 'th',
    'thead', 'tr', 'ul', 'video', 'body'];
/**
 * @hidden
 */
const IGNORE_BLOCK_TAGS = ['td', 'th'];
/**
 * @hidden
 */
const TABLE_BLOCK_TAGS = ['table', 'tbody', 'td', 'tfoot', 'th',
    'thead', 'tr'];
/**
 * Selection plugin events
 *
 * @hidden
 */
const SELECTION_TYPE = 'selection-type';
/**
 * Insert HTML plugin events
 *
 * @hidden
 */
const INSERTHTML_TYPE = 'inserthtml-type';
/**
 * Insert Text plugin events
 *
 * @hidden
 */
const INSERT_TEXT_TYPE = 'insert-text-type';
/**
 * Clear Format HTML plugin events
 *
 * @hidden
 */
const CLEAR_TYPE = 'clear-type';

/**
 * `Selection` module is used to handle RTE Selections.
 */
class NodeSelection {
    constructor() {
        this.startNodeName = [];
        this.endNodeName = [];
    }
    saveInstance(range, body) {
        this.range = range.cloneRange();
        this.rootNode = this.documentFromRange(range);
        this.body = body;
        this.startContainer = this.getNodeArray(range.startContainer, true);
        this.endContainer = this.getNodeArray(range.endContainer, false);
        this.startOffset = range.startOffset;
        this.endOffset = range.endOffset;
        this.html = this.body.innerHTML;
        return this;
    }
    documentFromRange(range) {
        return (9 === range.startContainer.nodeType) ? range.startContainer : range.startContainer.ownerDocument;
    }
    getRange(docElement) {
        const select$$1 = this.get(docElement);
        const range = select$$1 && select$$1.rangeCount > 0 ? select$$1.getRangeAt(select$$1.rangeCount - 1) : docElement.createRange();
        return (range.startContainer !== docElement || range.endContainer !== docElement
            || range.startOffset || range.endOffset || (range.setStart(docElement.body, 0), range.collapse(!0)), range);
    }
    /**
     * get method
     *
     * @param {Document} docElement - specifies the get function
     * @returns {void}
     * @hidden
     * @deprecated
     */
    get(docElement) {
        return docElement.defaultView.getSelection();
    }
    /**
     * save method
     *
     * @param {Range} range - range value.
     * @param {Document} docElement - specifies the document.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    save(range, docElement) {
        range = (range) ? range.cloneRange() : this.getRange(docElement);
        return this.saveInstance(range, docElement.body);
    }
    /**
     * getIndex method
     *
     * @param {Node} node - specifies the node value.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getIndex(node) {
        let index;
        let num = 0;
        node = !node.previousSibling && node.tagName === 'BR' ? node : node.previousSibling;
        if (node) {
            for (let type = node.nodeType; node; null) {
                index = node.nodeType;
                num++;
                //eslint-disable-next-line
                type = index;
                node = node.previousSibling;
            }
        }
        return num;
    }
    isChildNode(nodeCollection, parentNode) {
        for (let index = 0; index < parentNode.childNodes.length; index++) {
            if (nodeCollection.indexOf(parentNode.childNodes[index]) > -1) {
                return true;
            }
        }
        return false;
    }
    getNode(startNode, endNode, nodeCollection) {
        if (endNode === startNode &&
            (startNode.nodeType === 3 || !startNode.firstChild || nodeCollection.indexOf(startNode.firstChild) !== -1
                || this.isChildNode(nodeCollection, startNode))) {
            return null;
        }
        if (nodeCollection.indexOf(startNode.firstChild) === -1 && startNode.firstChild && !this.isChildNode(nodeCollection, startNode)) {
            return startNode.firstChild;
        }
        if (startNode.nextSibling) {
            return startNode.nextSibling;
        }
        if (!startNode.parentNode) {
            return null;
        }
        else {
            return startNode.parentNode;
        }
    }
    /**
     * getNodeCollection method
     *
     * @param {Range} range -specifies the range.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getNodeCollection(range) {
        let startNode = range.startContainer.childNodes[range.startOffset]
            || range.startContainer;
        const endNode = range.endContainer.childNodes[(range.endOffset > 0) ? (range.endOffset - 1) : range.endOffset]
            || range.endContainer;
        if ((startNode === endNode || (startNode.nodeName === 'BR' && startNode === range.endContainer.childNodes[range.endOffset])) &&
            startNode.childNodes.length === 0) {
            return [startNode];
        }
        if (range.startOffset === range.endOffset && range.startOffset !== 0 && range.startContainer.nodeName === 'PRE') {
            return [startNode.nodeName === 'BR' || startNode.nodeName === '#text' ? startNode : startNode.childNodes[0]];
        }
        const nodeCollection = [];
        do {
            if (nodeCollection.indexOf(startNode) === -1) {
                nodeCollection.push(startNode);
            }
            startNode = this.getNode(startNode, endNode, nodeCollection);
        } while (startNode);
        return nodeCollection;
    }
    /**
     * getParentNodeCollection method
     *
     * @param {Range} range - specifies the range value.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getParentNodeCollection(range) {
        return this.getParentNodes(this.getNodeCollection(range), range);
    }
    /**
     * getParentNodes method
     *
     * @param {Node[]} nodeCollection - specifies the collection of nodes.
     * @param {Range} range - specifies the range values.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getParentNodes(nodeCollection, range) {
        nodeCollection = nodeCollection.reverse();
        for (let index = 0; index < nodeCollection.length; index++) {
            if ((nodeCollection.indexOf(nodeCollection[index].parentNode) !== -1)
                || (nodeCollection[index].nodeType === 3 &&
                    range.startContainer !== range.endContainer &&
                    range.startContainer.parentNode !== range.endContainer.parentNode)) {
                nodeCollection.splice(index, 1);
                index--;
            }
            else if (nodeCollection[index].nodeType === 3) {
                nodeCollection[index] = nodeCollection[index].parentNode;
            }
        }
        return nodeCollection;
    }
    /**
     * getSelectionNodeCollection method
     *
     * @param {Range} range - specifies the range value.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getSelectionNodeCollection(range) {
        return this.getSelectionNodes(this.getNodeCollection(range));
    }
    /**
     * getSelectionNodeCollection along with BR node method
     *
     * @param {Range} range - specifies the range value.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getSelectionNodeCollectionBr(range) {
        return this.getSelectionNodesBr(this.getNodeCollection(range));
    }
    /**
     * getParentNodes method
     *
     * @param {Node[]} nodeCollection - specifies the collection of nodes.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getSelectionNodes(nodeCollection) {
        nodeCollection = nodeCollection.reverse();
        const regEx = new RegExp(String.fromCharCode(8203), 'g');
        for (let index = 0; index < nodeCollection.length; index++) {
            if (nodeCollection[index].nodeType !== 3 || (nodeCollection[index].textContent.trim() === '' ||
                (nodeCollection[index].textContent.length === 1 && nodeCollection[index].textContent.match(regEx)))) {
                nodeCollection.splice(index, 1);
                index--;
            }
        }
        return nodeCollection.reverse();
    }
    /**
     * Get selection text nodes with br method.
     *
     * @param {Node[]} nodeCollection - specifies the collection of nodes.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getSelectionNodesBr(nodeCollection) {
        nodeCollection = nodeCollection.reverse();
        const regEx = new RegExp(String.fromCharCode(8203), 'g');
        for (let index = 0; index < nodeCollection.length; index++) {
            if (nodeCollection[index].nodeName !== 'BR' &&
                (nodeCollection[index].nodeType !== 3 || (nodeCollection[index].textContent.trim() === '' ||
                    (nodeCollection[index].textContent.length === 1 && nodeCollection[index].textContent.match(regEx))))) {
                nodeCollection.splice(index, 1);
                index--;
            }
        }
        return nodeCollection.reverse();
    }
    /**
     * getInsertNodeCollection method
     *
     * @param {Range} range - specifies the range value.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getInsertNodeCollection(range) {
        return this.getInsertNodes(this.getNodeCollection(range));
    }
    /**
     * getInsertNodes method
     *
     * @param {Node[]} nodeCollection - specifies the collection of nodes.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getInsertNodes(nodeCollection) {
        nodeCollection = nodeCollection.reverse();
        for (let index = 0; index < nodeCollection.length; index++) {
            if ((nodeCollection[index].childNodes.length !== 0 &&
                nodeCollection[index].nodeType !== 3) ||
                (nodeCollection[index].nodeType === 3 &&
                    nodeCollection[index].textContent === '')) {
                nodeCollection.splice(index, 1);
                index--;
            }
        }
        return nodeCollection.reverse();
    }
    /**
     * getNodeArray method
     *
     * @param {Node} node - specifies the node content.
     * @param {boolean} isStart - specifies the boolean value.
     * @param {Document} root - specifies the root document.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getNodeArray(node, isStart, root) {
        const array = [];
        // eslint-disable-next-line
        ((isStart) ? (this.startNodeName = []) : (this.endNodeName = []));
        for (; node !== (root ? root : this.rootNode); null) {
            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(node)) {
                break;
            }
            // eslint-disable-next-line
            (isStart) ? this.startNodeName.push(node.nodeName.toLowerCase()) : this.endNodeName.push(node.nodeName.toLowerCase());
            array.push(this.getIndex(node));
            node = node.parentNode;
        }
        return array;
    }
    setRangePoint(range, isvalid, num, size) {
        let node = this.rootNode;
        let index = num.length;
        const constant = size;
        for (; index--; null) {
            node = node && node.childNodes[num[index]];
        }
        if (node && constant >= 0 && node.nodeName !== 'html') {
            range[isvalid ? 'setStart' : 'setEnd'](node, constant);
        }
        return range;
    }
    /**
     * restore method
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    restore() {
        let range = this.range.cloneRange();
        range = this.setRangePoint(range, true, this.startContainer, this.startOffset);
        range = this.setRangePoint(range, false, this.endContainer, this.endOffset);
        this.selectRange(this.rootNode, range);
        return range;
    }
    selectRange(docElement, range) {
        this.setRange(docElement, range);
        this.save(range, docElement);
    }
    /**
     * setRange method
     *
     * @param {Document} docElement - specifies the document.
     * @param {Range} range - specifies the range.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    setRange(docElement, range) {
        const selection = this.get(docElement);
        selection.removeAllRanges();
        selection.addRange(range);
    }
    /**
     * setSelectionText method
     *
     * @param {Document} docElement - specifies the documrent
     * @param {Node} startNode - specifies the starting node.
     * @param {Node} endNode - specifies the the end node.
     * @param {number} startIndex - specifies the starting index.
     * @param {number} endIndex - specifies the end index.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    setSelectionText(docElement, startNode, endNode, startIndex, endIndex) {
        const range = docElement.createRange();
        range.setStart(startNode, startIndex);
        range.setEnd(endNode, endIndex);
        this.setRange(docElement, range);
    }
    /**
     * setSelectionContents method
     *
     * @param {Document} docElement - specifies the document.
     * @param {Node} element - specifies the node.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    setSelectionContents(docElement, element) {
        const range = docElement.createRange();
        range.selectNode(element);
        this.setRange(docElement, range);
    }
    /**
     * setSelectionNode method
     *
     * @param {Document} docElement - specifies the document.
     * @param {Node} element - specifies the node.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    setSelectionNode(docElement, element) {
        const range = docElement.createRange();
        range.selectNodeContents(element);
        this.setRange(docElement, range);
    }
    /**
     * getSelectedNodes method
     *
     * @param {Document} docElement - specifies the document.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getSelectedNodes(docElement) {
        return this.getNodeCollection(this.getRange(docElement));
    }
    /**
     * Clear method
     *
     * @param {Document} docElement - specifies the document.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    Clear(docElement) {
        this.get(docElement).removeAllRanges();
    }
    /**
     * insertParentNode method
     *
     * @param {Document} docElement - specifies the document.
     * @param {Node} newNode - specicfies the new node.
     * @param {Range} range - specifies the range.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    insertParentNode(docElement, newNode, range) {
        range.surroundContents(newNode);
        this.selectRange(docElement, range);
    }
    /**
     * setCursorPoint method
     *
     * @param {Document} docElement - specifies the document.
     * @param {Element} element - specifies the element.
     * @param {number} point - specifies the point.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    setCursorPoint(docElement, element, point) {
        const range = docElement.createRange();
        const selection = docElement.defaultView.getSelection();
        range.setStart(element, point);
        range.collapse(true);
        selection.removeAllRanges();
        selection.addRange(range);
    }
}

/**
 * `Selection` module is used to handle RTE Selections.
 */

const markerClassName = {
    startSelection: 'e-editor-select-start',
    endSelection: 'e-editor-select-end'
};
/**
 * DOMNode internal plugin
 *
 * @hidden
 * @deprecated
 */
class DOMNode {
    /**
     * Constructor for creating the DOMNode plugin
     *
     * @param {Element} parent - specifies the parent element
     * @param {Document} currentDocument - specifies the current document.
     * @hidden
     * @deprecated
     */
    constructor(parent, currentDocument) {
        this.parent = parent;
        this.nodeSelection = new NodeSelection();
        this.currentDocument = currentDocument;
    }
    /**
     * contents method
     *
     * @param {Element} element - specifies the element.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    contents(element) {
        return (element && 'IFRAME' !== element.tagName ? Array.prototype.slice.call(element.childNodes || []) : []);
    }
    /**
     * isBlockNode method
     *
     * @param {Element} element - specifies the node element.
     * @returns {boolean} - sepcifies the boolean value
     * @hidden
     * @deprecated
     */
    isBlockNode(element) {
        return (!!element && (element.nodeType === Node.ELEMENT_NODE && BLOCK_TAGS.indexOf(element.tagName.toLowerCase()) >= 0));
    }
    /**
     * isLink method
     *
     * @param {Element} element - specifies the element
     * @returns {boolean} -  specifies the boolean value
     * @hidden
     * @deprecated
     */
    isLink(element) {
        return (!!element && (element.nodeType === Node.ELEMENT_NODE && 'a' === element.tagName.toLowerCase()));
    }
    /**
     * blockParentNode method
     *
     * @param {Element} element - specifies the element
     * @returns {Element} - returns the element value
     * @hidden
     * @deprecated
     */
    blockParentNode(element) {
        for (; element && element.parentNode !== this.parent && ((!element.parentNode ||
            !this.hasClass(element.parentNode, 'e-node-inner'))); null) {
            element = element.parentNode;
            if (this.isBlockNode(element)) {
                return element;
            }
        }
        return element;
    }
    /**
     * rawAttributes method
     *
     * @param {Element} element - specifies the element
     * @returns {string} - returns the string value
     * @hidden
     * @deprecated
     */
    rawAttributes(element) {
        const rawAttr = {};
        const attributes$$1 = element.attributes;
        if (attributes$$1.length > 0) {
            for (let d = 0; d < attributes$$1.length; d++) {
                const e = attributes$$1[d];
                rawAttr[e.nodeName] = e.value;
            }
        }
        return rawAttr;
    }
    /**
     * attributes method
     *
     * @param {Element} element - sepcifies the element.
     * @returns {string} - returns the string value.
     * @hidden
     * @deprecated
     */
    attributes(element) {
        if (!element) {
            return '';
        }
        let attr = '';
        const rawAttr = this.rawAttributes(element);
        const orderRawAttr = Object.keys(rawAttr).sort();
        for (let e = 0; e < orderRawAttr.length; e++) {
            const attrKey = orderRawAttr[e];
            let attrValue = rawAttr[attrKey];
            /* eslint-disable */
            if (attrValue.indexOf("'") < 0 && attrValue.indexOf('"') >= 0) {
                attr += ' ' + attrKey + "='" + attrValue + "'";
            }
            else if (attrValue.indexOf('"') >= 0 && attrValue.indexOf("'") >= 0) {
                /* eslint-enable */
                attrValue = attrValue.replace(/"/g, '&quot;');
                attr += ' ' + attrKey + '="' + attrValue + '"';
            }
            else {
                attr += ' ' + attrKey + '="' + attrValue + '"';
            }
        }
        return attr;
    }
    /**
     * clearAttributes method
     *
     * @param {Element} element - specifies the element
     * @returns {void}
     * @hidden
     * @deprecated
     */
    clearAttributes(element) {
        for (let attr = element.attributes, c = attr.length - 1; c >= 0; c--) {
            const key = attr[c];
            element.removeAttribute(key.nodeName);
        }
    }
    /**
     * openTagString method
     *
     * @param {Element} element - specifies the element.
     * @returns {string} - returns the string
     * @hidden
     * @deprecated
     */
    openTagString(element) {
        return '<' + element.tagName.toLowerCase() + this.attributes(element) + '>';
    }
    /**
     * closeTagString method
     *
     * @param {Element} element - specifies the element
     * @returns {string} - returns the string value
     * @hidden
     * @deprecated
     */
    closeTagString(element) {
        return '</' + element.tagName.toLowerCase() + '>';
    }
    /**
     * createTagString method
     *
     * @param {string} tagName - specifies the tag name
     * @param {Element} relativeElement - specifies the relative element
     * @param {string} innerHTML - specifies the string value
     * @returns {string} - returns the string value.
     * @hidden
     * @deprecated
     */
    createTagString(tagName, relativeElement, innerHTML) {
        return '<' + tagName.toLowerCase() + this.attributes(relativeElement) + '>' + innerHTML + '</' + tagName.toLowerCase() + '>';
    }
    /**
     * isList method
     *
     * @param {Element} element - specifes the element.
     * @returns {boolean} - returns the boolean value
     * @hidden
     * @deprecated
     */
    isList(element) {
        return !!element && ['UL', 'OL'].indexOf(element.tagName) >= 0;
    }
    /**
     * isElement method
     *
     * @param {Element} element - specifes the element.
     * @returns {boolean} - returns the boolean value
     * @hidden
     * @deprecated
     */
    isElement(element) {
        return element === this.parent;
    }
    /**
     * isEditable method
     *
     * @param {Element} element - specifes the element.
     * @returns {boolean} - returns the boolean value
     * @hidden
     * @deprecated
     */
    isEditable(element) {
        return ((!element.getAttribute || element.getAttribute('contenteditable') === 'true')
            && ['STYLE', 'SCRIPT'].indexOf(element.tagName) < 0);
    }
    /**
     * hasClass method
     *
     * @param {Element} element - specifes the element.
     * @param {string} className - specifies the class name value
     * @returns {boolean} - returns the boolean value
     * @hidden
     * @deprecated
     */
    hasClass(element, className) {
        return element && element.classList && element.classList.contains(className);
    }
    /**
     * replaceWith method
     *
     * @param {Element} element - specifes the element.
     * @param {string} value - specifies the string value
     * @returns {void}
     * @hidden
     * @deprecated
     */
    replaceWith(element, value) {
        const parentNode = element.parentNode;
        parentNode.insertBefore(this.parseHTMLFragment(value), element);
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(element);
    }
    /**
     * parseHTMLFragment method
     *
     * @param {string} value - specifies the string value
     * @returns {Element} - returns the element
     * @hidden
     * @deprecated
     */
    parseHTMLFragment(value) {
        /* eslint-disable */
        let temp = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('template');
        temp.innerHTML = value;
        if (temp.content instanceof DocumentFragment) {
            return temp.content;
        }
        else {
            return document.createRange().createContextualFragment(value);
        }
        /* eslint-enable */
    }
    /**
     * wrap method
     *
     * @param {Element} element - specifies the element
     * @param {Element} wrapper - specifies the element.
     * @returns {Element} - returns the element
     * @hidden
     * @deprecated
     */
    wrap(element, wrapper) {
        element.parentNode.insertBefore(wrapper, element);
        wrapper = element.previousSibling;
        wrapper.appendChild(element);
        return wrapper;
    }
    /**
     * insertAfter method
     *
     * @param {Element} newNode - specifies the new node element
     * @param {Element} referenceNode - specifies the referenece node
     * @returns {void}
     * @hidden
     * @deprecated
     */
    insertAfter(newNode, referenceNode) {
        referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
    }
    /**
     * wrapInner method
     *
     * @param {Element} parent - specifies the parent element.
     * @param {Element} wrapper - specifies the wrapper element.
     * @returns {Element} - returns the element
     * @hidden
     * @deprecated
     */
    wrapInner(parent, wrapper) {
        parent.appendChild(wrapper);
        wrapper = parent.querySelector('.e-rte-wrap-inner');
        wrapper.classList.remove('e-rte-wrap-inner');
        if (wrapper.classList.length === 0) {
            wrapper.removeAttribute('class');
        }
        while (parent.firstChild !== wrapper) {
            wrapper.appendChild(parent.firstChild);
        }
        return wrapper;
    }
    /**
     * unWrap method
     *
     * @param {Element} element - specifies the element.
     * @returns {Element} - returns the element.
     * @hidden
     * @deprecated
     */
    unWrap(element) {
        const parent = element.parentNode;
        let unWrapNode = [];
        while (element.firstChild) {
            unWrapNode.push(element.firstChild);
            parent.insertBefore(element.firstChild, element);
        }
        unWrapNode = unWrapNode.length > 0 ? unWrapNode : [element.parentNode];
        parent.removeChild(element);
        return unWrapNode;
    }
    /**
     * getSelectedNode method
     *
     * @param {Element} element - specifies the element
     * @param {number} index - specifies the index value.
     * @returns {Element} - returns the element
     * @hidden
     * @deprecated
     */
    getSelectedNode(element, index) {
        if (element.nodeType === Node.ELEMENT_NODE && element.childNodes.length > 0 &&
            element.childNodes[index - 1] && element.childNodes[index - 1].nodeType === Node.ELEMENT_NODE &&
            (element.childNodes[index - 1].classList.contains(markerClassName.startSelection) ||
                element.childNodes[index - 1].classList.contains(markerClassName.endSelection))) {
            element = element.childNodes[index - 1];
        }
        else if (element.nodeType === Node.ELEMENT_NODE && element.childNodes.length > 0 && element.childNodes[index]) {
            element = element.childNodes[index];
        }
        if (element.nodeType === Node.TEXT_NODE) {
            element = element.parentNode;
        }
        return element;
    }
    /**
     * nodeFinds method
     *
     * @param {Element} element - specifies the element.
     * @param {Element[]} elements - specifies the array of elements
     * @returns {Element[]} - returnts the array elements
     * @hidden
     * @deprecated
     */
    nodeFinds(element, elements) {
        const existNodes = [];
        for (let i = 0; i < elements.length; i++) {
            if (element.contains(elements[i]) && element !== elements[i]) {
                existNodes.push(elements[i]);
            }
        }
        return existNodes;
    }
    /**
     * isEditorArea method
     *
     * @returns {boolean} - returns the boolean value
     * @hidden
     * @deprecated
     */
    isEditorArea() {
        const range = this.getRangePoint(0);
        let element;
        for (element = range.commonAncestorContainer; element && !this.isElement(element); null) {
            element = element.parentNode;
        }
        return !!this.isElement(element);
    }
    /**
     * getRangePoint method
     *
     * @param {number} point - specifies the number value.
     * @returns {Range} - returns the range.
     * @hidden
     * @deprecated
     */
    getRangePoint(point) {
        const selection = this.getSelection();
        let ranges = [];
        if (selection && selection.getRangeAt && selection.rangeCount) {
            ranges = [];
            for (let f = 0; f < selection.rangeCount; f++) {
                ranges.push(selection.getRangeAt(f));
            }
        }
        else {
            ranges = [this.currentDocument.createRange()];
        }
        return 'undefined' !== typeof point ? ranges[point] : ranges;
    }
    getSelection() {
        return this.nodeSelection.get(this.currentDocument);
    }
    /**
     * getPreviousNode method
     *
     * @param {Element} element - specifies the element
     * @returns {Element} - returns the element
     * @hidden
     * @deprecated
     */
    getPreviousNode(element) {
        element = element.previousElementSibling;
        for (; element && element.textContent === '\n'; null) {
            element = element.previousElementSibling;
        }
        return element;
    }
    /**
     * encode method
     *
     * @param {string} value - specifies the string value
     * @returns {string} - specifies the string value
     * @hidden
     * @deprecated
     */
    encode(value) {
        const divNode = document.createElement('div');
        divNode.innerText = value;
        // eslint-disable-next-line
        return divNode.innerHTML.replace(/<br\s*[\/]?>/gi, '\n');
    }
    /**
     * saveMarker method
     *
     * @param {NodeSelection} save - specifies the node selection,
     * @param {string} action - specifies the action  value.
     * @returns {NodeSelection} - returns the value
     * @hidden
     * @deprecated
     */
    saveMarker(save, action) {
        let start = this.parent.querySelector('.' + markerClassName.startSelection);
        let end = this.parent.querySelector('.' + markerClassName.endSelection);
        let startTextNode;
        let endTextNode;
        if (start.textContent === '' && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(end) && action !== 'tab') {
            if (start.childNodes.length === 1 && start.childNodes[0].nodeName === 'BR') {
                start.innerHTML = '&#65279;&#65279;<br>';
            }
            else {
                start.innerHTML = '&#65279;&#65279;';
            }
        }
        if (this.hasClass(start, markerClassName.startSelection) && start.classList.length > 1) {
            const replace = this.createTagString(DEFAULT_TAG, start, this.encode(start.textContent));
            this.replaceWith(start, replace);
            start = this.parent.querySelector('.' + markerClassName.startSelection);
            start.classList.remove(markerClassName.startSelection);
            startTextNode = start.childNodes[0];
        }
        else {
            startTextNode = this.unWrap(start)[0];
        }
        if (this.hasClass(end, markerClassName.endSelection) && end.classList.length > 1) {
            const replace = this.createTagString(DEFAULT_TAG, end, this.encode(end.textContent));
            this.replaceWith(end, replace);
            end = this.parent.querySelector('.' + markerClassName.endSelection);
            end.classList.remove(markerClassName.endSelection);
            endTextNode = end.childNodes[0];
        }
        else {
            endTextNode = end ? this.unWrap(end)[0] : startTextNode;
        }
        save.startContainer = save.getNodeArray(startTextNode, true);
        save.endContainer = save.getNodeArray(endTextNode, false);
        return save;
    }
    marker(className, textContent) {
        return '<span class="' + className + '">' + textContent + '</span>';
    }
    /**
     * setMarker method
     *
     * @param {NodeSelection} save - specifies the node selection.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    setMarker(save) {
        const range = save.range;
        const startChildNodes = range.startContainer.childNodes;
        const isTableStart = startChildNodes.length > 1 && startChildNodes[0].nodeName === 'TABLE';
        let start = ((isTableStart ? getLastTextNode(startChildNodes[range.startOffset + 1]) :
            startChildNodes[(range.startOffset > 0) ? (range.startOffset - 1) : range.startOffset]) || range.startContainer);
        let end = (range.endContainer.childNodes[(range.endOffset > 0) ? (range.endOffset - 1) : range.endOffset]
            || range.endContainer);
        if ((start.nodeType === Node.ELEMENT_NODE && end.nodeType === Node.ELEMENT_NODE) && (start.contains(end) || end.contains(start))) {
            const existNode = start.contains(end) ? start : end;
            const isElement = existNode.nodeType !== Node.TEXT_NODE;
            if (isElement) {
                const nodes = [];
                const textNodes = [];
                for (let node = existNode; existNode.contains(node); null) {
                    if (nodes.indexOf(node) < 0 && node.childNodes && node.childNodes.length) {
                        nodes.push(node);
                        node = node.childNodes[0];
                    }
                    else if (node.nextSibling) {
                        node = node.nextSibling;
                    }
                    else if (node.parentNode) {
                        node = node.parentNode;
                        nodes.push(node);
                    }
                    if (textNodes.indexOf(node) < 0 && (node.nodeType === Node.TEXT_NODE ||
                        (IGNORE_BLOCK_TAGS.indexOf(node.parentNode.tagName.toLocaleLowerCase()) >= 0
                            && (node.tagName === 'BR' || node.tagName === 'IMG')))) {
                        textNodes.push(node);
                    }
                }
                if (textNodes.length) {
                    start = start.contains(end) ? textNodes[0] : start;
                    end = textNodes[textNodes.length - 1];
                }
            }
        }
        if (start !== end) {
            if (start.nodeType !== Node.TEXT_NODE && ((start.tagName === 'BR' &&
                IGNORE_BLOCK_TAGS.indexOf(start.parentNode.tagName.toLocaleLowerCase()) >= 0) ||
                start.tagName === 'IMG')) {
                this.replaceWith(start, this.marker(markerClassName.startSelection, this.encode(start.textContent)));
                const markerStart = range.startContainer.querySelector('.' + markerClassName.startSelection);
                markerStart.appendChild(start);
            }
            else {
                this.replaceWith(start, this.marker(markerClassName.startSelection, this.encode(start.textContent)));
            }
            if (end.nodeType !== Node.TEXT_NODE && end.tagName === 'BR' &&
                IGNORE_BLOCK_TAGS.indexOf(end.parentNode.tagName.toLocaleLowerCase()) >= 0) {
                this.replaceWith(end, this.marker(markerClassName.endSelection, this.encode(end.textContent)));
                const markerEnd = range.endContainer.querySelector('.' + markerClassName.endSelection);
                markerEnd.appendChild(end);
            }
            else {
                this.ensureSelfClosingTag(end, markerClassName.endSelection, range);
            }
        }
        else {
            this.ensureSelfClosingTag(start, markerClassName.startSelection, range);
        }
    }
    /**
     * ensureSelfClosingTag method
     *
     * @param {Element} start - specifies the element.
     * @param {string} className - specifes the class name string value
     * @param {Range} range - specifies the range value
     * @returns {void}
     * @hidden
     * @deprecated
     */
    ensureSelfClosingTag(start, className, range) {
        let isTable = false;
        if (start.nodeType === 3) {
            this.replaceWith(start, this.marker(className, this.encode(start.textContent)));
        }
        else if (start.tagName === 'BR') {
            this.replaceWith(start, this.marker(className, this.encode(start.textContent)));
            const markerStart = range.startContainer.querySelector('.' + className);
            markerStart.appendChild(start);
        }
        else {
            if (start.tagName === 'IMG') {
                const parNode = document.createElement('p');
                start.parentElement.insertBefore(parNode, start);
                parNode.appendChild(start);
                start = parNode.children[0];
            }
            if (start.tagName === 'TABLE') {
                isTable = true;
                if (start.textContent === '') {
                    const tdNode = start.querySelectorAll('td');
                    start = tdNode[tdNode.length - 1];
                    start = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(start.childNodes[0]) ? start.childNodes[0] : start;
                }
                else {
                    let lastNode = start.lastChild;
                    while (lastNode.nodeType !== 3 && lastNode.nodeName !== '#text' &&
                        lastNode.nodeName !== 'BR') {
                        lastNode = lastNode.lastChild;
                    }
                    start = lastNode;
                }
            }
            for (let i = 0; i < selfClosingTags.length; i++) {
                start = (start.tagName === selfClosingTags[i] && !isTable) ? start.parentNode : start;
            }
            if (start.nodeType === 3 && start.nodeName === '#text') {
                this.replaceWith(start, this.marker(className, this.encode(start.textContent)));
            }
            else if (start.nodeName === 'BR') {
                this.replaceWith(start, this.marker(markerClassName.endSelection, this.encode(start.textContent)));
                const markerEnd = range.endContainer.querySelector('.' + markerClassName.endSelection);
                markerEnd.appendChild(start);
            }
            else {
                const marker = this.marker(className, '');
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)([this.parseHTMLFragment(marker)], start);
            }
        }
    }
    /**
     * createTempNode method
     *
     * @param {Element} element - specifies the element.
     * @returns {Element} - returns the element
     * @hidden
     * @deprecated
     */
    createTempNode(element) {
        const textContent = element.textContent;
        if (element.tagName === 'BR') {
            const wrapper = '<' + DEFAULT_TAG + '></' + DEFAULT_TAG + '>';
            const node = element.parentNode;
            if (IGNORE_BLOCK_TAGS.indexOf(node.tagName.toLocaleLowerCase()) >= 0) {
                element = this.wrap(element, this.parseHTMLFragment(wrapper));
            }
        }
        else if (((element.nodeType !== Node.TEXT_NODE &&
            (element.classList.contains(markerClassName.startSelection) ||
                element.classList.contains(markerClassName.endSelection))) ||
            textContent.replace(/\n/g, '').replace(/(^ *)|( *$)/g, '').length > 0 ||
            textContent.length && textContent.indexOf('\n') < 0)) {
            const wrapper = '<' + DEFAULT_TAG + '></' + DEFAULT_TAG + '>';
            const target = element;
            element = this.wrap(element, this.parseHTMLFragment(wrapper));
            const ignoreBr = target.nodeType === Node.ELEMENT_NODE && target.firstChild && target.firstChild.nodeName === 'BR'
                && (target.classList.contains(markerClassName.startSelection) ||
                    target.classList.contains(markerClassName.endSelection));
            if (!ignoreBr && element.nextElementSibling && element.nextElementSibling.tagName === 'BR') {
                element.appendChild(element.nextElementSibling);
            }
        }
        return element;
    }
    /**
     * getImageTagInSelection method
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getImageTagInSelection() {
        const selection = this.getSelection();
        if (this.isEditorArea() && selection.rangeCount) {
            return selection.focusNode.querySelectorAll('img');
        }
        return null;
    }
    /**
     * blockNodes method
     *
     * @returns {Node[]} - returns the node array values
     * @hidden
     * @deprecated
     */
    blockNodes() {
        const collectionNodes = [];
        const selection = this.getSelection();
        if (this.isEditorArea() && selection.rangeCount) {
            const ranges = this.getRangePoint();
            for (let j = 0; j < ranges.length; j++) {
                let parentNode;
                const range = ranges[j];
                const startNode = this.getSelectedNode(range.startContainer, range.startOffset);
                const endNode = this.getSelectedNode(range.endContainer, range.endOffset);
                if (this.isBlockNode(startNode) && collectionNodes.indexOf(startNode) < 0) {
                    collectionNodes.push(startNode);
                }
                parentNode = this.blockParentNode(startNode);
                if (parentNode && collectionNodes.indexOf(parentNode) < 0) {
                    if (IGNORE_BLOCK_TAGS.indexOf(parentNode.tagName.toLocaleLowerCase()) >= 0 && (startNode.tagName === 'BR' ||
                        startNode.nodeType === Node.TEXT_NODE ||
                        startNode.classList.contains(markerClassName.startSelection) ||
                        startNode.classList.contains(markerClassName.endSelection))) {
                        const tempNode = startNode.previousSibling &&
                            startNode.previousSibling.nodeType === Node.TEXT_NODE ?
                            startNode.previousSibling : startNode;
                        if (!startNode.nextSibling && !startNode.previousSibling && startNode.tagName === 'BR') {
                            collectionNodes.push(tempNode);
                        }
                        else {
                            collectionNodes.push(this.createTempNode(tempNode));
                        }
                    }
                    else {
                        collectionNodes.push(parentNode);
                    }
                }
                const nodes = [];
                for (let node = startNode; node !== endNode && node !== this.parent; null) {
                    if (nodes.indexOf(node) < 0 && node.childNodes && node.childNodes.length) {
                        nodes.push(node);
                        node = node.childNodes[0];
                    }
                    else if (node && node.nodeType !== 8 && (node.tagName === 'BR' || (node.nodeType === Node.TEXT_NODE &&
                        node.textContent.trim() !== '') || (node.nodeType !== Node.TEXT_NODE &&
                        (node.classList.contains(markerClassName.startSelection) ||
                            node.classList.contains(markerClassName.endSelection)))) &&
                        IGNORE_BLOCK_TAGS.indexOf(node.parentNode.tagName.toLocaleLowerCase()) >= 0) {
                        node = this.createTempNode(node);
                    }
                    else if (node.nextSibling && node.nextSibling.nodeType !== 8 &&
                        (node.nextSibling.tagName === 'BR' ||
                            node.nextSibling.nodeType === Node.TEXT_NODE ||
                            node.nextSibling.classList.contains(markerClassName.startSelection) ||
                            node.nextSibling.classList.contains(markerClassName.endSelection)) &&
                        IGNORE_BLOCK_TAGS.indexOf(node.nextSibling.parentNode.tagName.toLocaleLowerCase()) >= 0) {
                        node = this.createTempNode(node.nextSibling);
                    }
                    else if (node.nextSibling) {
                        node = node.nextSibling;
                    }
                    else if (node.parentNode) {
                        node = node.parentNode;
                        nodes.push(node);
                    }
                    if (collectionNodes.indexOf(node) < 0 && node.nodeType === Node.ELEMENT_NODE &&
                        IGNORE_BLOCK_TAGS.indexOf(node.parentNode.tagName.toLocaleLowerCase()) >= 0 &&
                        (node.classList.contains(markerClassName.startSelection) ||
                            node.classList.contains(markerClassName.endSelection))) {
                        collectionNodes.push(this.createTempNode(node));
                    }
                    if (this.isBlockNode(node) && this.ignoreTableTag(node) && nodes.indexOf(node) < 0 &&
                        collectionNodes.indexOf(node) < 0 && (node !== endNode || range.endOffset > 0)) {
                        collectionNodes.push(node);
                    }
                    if (node.nodeName === 'IMG' && node.parentElement.contentEditable === 'true') {
                        collectionNodes.push(node);
                    }
                }
                parentNode = this.blockParentNode(endNode);
                if (parentNode && this.ignoreTableTag(parentNode) && collectionNodes.indexOf(parentNode) < 0 &&
                    (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parentNode.previousElementSibling) && parentNode.previousElementSibling.tagName !== 'IMG')) {
                    collectionNodes.push(parentNode);
                }
            }
        }
        for (let i = collectionNodes.length - 1; i > 0; i--) {
            const nodes = this.nodeFinds(collectionNodes[i], collectionNodes);
            if (nodes.length) {
                const listNodes = collectionNodes[i].querySelectorAll('ul, ol');
                if (collectionNodes[i].tagName === 'LI' && listNodes.length > 0) {
                    continue;
                }
                else {
                    collectionNodes.splice(i, 1);
                }
            }
        }
        return collectionNodes;
    }
    ignoreTableTag(element) {
        return !(TABLE_BLOCK_TAGS.indexOf(element.tagName.toLocaleLowerCase()) >= 0);
    }
}

/**
 * Lists internal component
 *
 * @hidden
 * @deprecated
 */
class Lists {
    /**
     * Constructor for creating the Lists plugin
     *
     * @param {EditorManager} parent - specifies the parent element
     * @hidden
     * @deprecated
     */
    constructor(parent) {
        this.parent = parent;
        this.domNode = this.parent.domNode;
        this.addEventListener();
    }
    addEventListener() {
        this.parent.observer.on(LIST_TYPE, this.applyListsHandler, this);
        this.parent.observer.on(KEY_DOWN_HANDLER, this.keyDownHandler, this);
        this.parent.observer.on(SPACE_ACTION, this.spaceKeyAction, this);
    }
    testList(elem) {
        const olListRegex = [/^[\d]+[.]+$/,
            /^(?=[MDCLXVI])M*(C[MD]|D?C{0,3})(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})[.]$/gi,
            /^[a-zA-Z][.]+$/];
        const elementStart = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(elem) ? elem.innerText.trim().split('.')[0] + '.' : null;
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(elementStart)) {
            for (let i = 0; i < olListRegex.length; i++) {
                if (olListRegex[i].test(elementStart)) {
                    return true;
                }
            }
        }
        return false;
    }
    testCurrentList(range) {
        const olListStartRegex = [/^[1]+[.]+$/, /^[i]+[.]+$/, /^[a]+[.]+$/];
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(range.startContainer.textContent.slice(0, range.startOffset))) {
            const currentContent = range.startContainer.textContent.replace(/\u200B/g, '').slice(0, range.startOffset).trim();
            for (let i = 0; i < olListStartRegex.length; i++) {
                if (olListStartRegex[i].test(currentContent) && currentContent.length === 2) {
                    return true;
                }
            }
        }
        return false;
    }
    spaceList(e) {
        const range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
        this.saveSelection = this.parent.nodeSelection.save(range, this.parent.currentDocument);
        const startNode = this.parent.domNode.getSelectedNode(range.startContainer, range.startOffset);
        // eslint-disable-next-line
        const endNode = this.parent.domNode.getSelectedNode(range.endContainer, range.endOffset);
        const preElement = startNode.previousElementSibling;
        const nextElement = startNode.nextElementSibling;
        const preElemULStart = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(preElement) ?
            preElement.innerText.trim().substring(0, 1) : null;
        const nextElemULStart = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(nextElement) ?
            nextElement.innerText.trim().substring(0, 1) : null;
        const startElementOLTest = this.testCurrentList(range);
        const preElementOLTest = this.testList(preElement);
        const nextElementOLTest = this.testList(nextElement);
        if (!preElementOLTest && !nextElementOLTest && preElemULStart !== '*' && nextElemULStart !== '*') {
            if (startElementOLTest) {
                range.startContainer.textContent = range.startContainer.textContent.slice(range.startOffset, range.startContainer.textContent.length);
                this.applyListsHandler({ subCommand: 'OL', callBack: e.callBack });
                e.event.preventDefault();
            }
            else if (range.startContainer.textContent.replace(/\u200B/g, '').slice(0, range.startOffset).trim() === '*' ||
                range.startContainer.textContent.replace(/\u200B/g, '').slice(0, range.startOffset).trim() === '-') {
                range.startContainer.textContent = range.startContainer.textContent.slice(range.startOffset, range.startContainer.textContent.length);
                this.applyListsHandler({ subCommand: 'UL', callBack: e.callBack });
                e.event.preventDefault();
            }
        }
    }
    enterList(e) {
        const range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
        const startNode = range.startContainer.nodeName === 'LI' ? range.startContainer :
            range.startContainer.parentElement.closest('LI');
        const endNode = range.endContainer.nodeName === 'LI' ? range.endContainer :
            range.endContainer.parentElement.closest('LI');
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(startNode) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(endNode) && startNode === endNode && startNode.tagName === 'LI' &&
            startNode.textContent.trim() === '' && startNode.querySelectorAll('IMG').length === 0) {
            if (startNode.textContent.charCodeAt(0) === 65279) {
                startNode.textContent = '';
            }
            const startNodeParent = startNode.parentElement;
            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(startNodeParent.parentElement.closest('UL')) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(startNodeParent.parentElement.closest('OL'))) {
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(startNode.nextElementSibling)) {
                    const nearBlockNode = this.parent.domNode.blockParentNode(startNode);
                    this.parent.nodeCutter.GetSpliceNode(range, nearBlockNode);
                }
                let insertTag;
                if (e.enterAction === 'DIV') {
                    insertTag = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div');
                    insertTag.innerHTML = '<br>';
                }
                else if (e.enterAction === 'P') {
                    insertTag = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('p');
                    insertTag.innerHTML = '<br>';
                }
                else {
                    insertTag = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('br');
                }
                this.parent.domNode.insertAfter(insertTag, startNodeParent);
                e.event.preventDefault();
                this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, insertTag, 0);
                if (startNodeParent.textContent === '') {
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(startNodeParent);
                }
                else {
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(startNode);
                }
            }
        }
    }
    // eslint-disable-next-line
    backspaceList(e) {
        const range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
        let startNode = this.parent.domNode.getSelectedNode(range.startContainer, range.startOffset);
        let endNode = this.parent.domNode.getSelectedNode(range.endContainer, range.endOffset);
        startNode = startNode.nodeName === 'BR' ? startNode.parentElement : startNode;
        endNode = endNode.nodeName === 'BR' ? endNode.parentElement : endNode;
        if (startNode === endNode && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(startNode, 'li')) &&
            ((startNode.textContent.trim() === '' && startNode.textContent.charCodeAt(0) === 65279) ||
                (startNode.textContent.length === 1 && startNode.textContent.charCodeAt(0) === 8203))) {
            startNode.textContent = '';
        }
        if (startNode === endNode && startNode.textContent === '') {
            if (startNode.parentElement.tagName === 'LI' && endNode.parentElement.tagName === 'LI') {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(startNode);
            }
            else if (startNode.closest('ul') || startNode.closest('ol')) {
                const parentList = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(startNode.closest('ul')) ? startNode.closest('ul') : startNode.closest('ol');
                if (parentList.firstElementChild === startNode && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parentList.children[1]) &&
                    (parentList.children[1].tagName === 'OL' || parentList.children[1].tagName === 'UL')) {
                    if (parentList.tagName === parentList.children[1].tagName) {
                        while (parentList.children[1].lastChild) {
                            this.parent.domNode.insertAfter(parentList.children[1].lastChild, parentList.children[1]);
                        }
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(parentList.children[1]);
                    }
                    else {
                        parentList.parentElement.insertBefore(parentList.children[1], parentList);
                    }
                }
            }
        }
        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(startNode.firstChild) && startNode.firstChild.nodeName === 'BR' &&
            (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(startNode.childNodes[1]) && (startNode.childNodes[1].nodeName === 'UL' ||
                startNode.childNodes[1].nodeName === 'OL'))) {
            const parentList = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(startNode.closest('ul')) ? startNode.closest('ul') : startNode.closest('ol');
            if (parentList.tagName === startNode.childNodes[1].nodeName) {
                while (startNode.childNodes[1].lastChild) {
                    this.parent.domNode.insertAfter(startNode.children[1].lastChild, startNode);
                }
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(startNode.childNodes[1]);
            }
            else {
                parentList.parentElement.insertBefore(startNode.children[1], parentList);
            }
        }
    }
    keyDownHandler(e) {
        if (e.event.which === 13) {
            this.enterList(e);
        }
        if (e.event.which === 32) {
            this.spaceList(e);
        }
        if (e.event.which === 8) {
            this.backspaceList(e);
        }
        if (e.event.which === 46 && e.event.action === 'delete') {
            const range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
            const commonAncestor = range.commonAncestorContainer;
            const startEle = range.startContainer;
            const endEle = range.endContainer;
            const startNode = startEle.nodeType === 3 ? startEle.parentElement : startEle;
            const endNode = endEle.nodeType === 3 ? endEle.parentElement : endEle;
            if ((commonAncestor.nodeName === 'UL' || commonAncestor.nodeName === 'OL') && startNode !== endNode
                && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(startNode, 'ul')) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(startNode, 'ol')))
                && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(endNode, 'ul')) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(endNode, 'ol')))
                && (commonAncestor.lastElementChild === (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(endNode, 'li')) && !range.collapsed) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(commonAncestor);
            }
        }
        if (e.event.which === 9) {
            const range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
            if (!(e.event.action && e.event.action === 'indent')) {
                this.saveSelection = this.parent.nodeSelection.save(range, this.parent.currentDocument);
            }
            let blockNodes;
            const startOffset = range.startOffset;
            const endOffset = range.endOffset;
            const startNode = this.parent.domNode.getSelectedNode(range.startContainer, range.startOffset);
            const endNode = this.parent.domNode.getSelectedNode(range.endContainer, range.endOffset);
            if ((startNode === endNode && (startNode.nodeName === 'BR' || startNode.nodeName === '#text') &&
                IGNORE_BLOCK_TAGS.indexOf(startNode.parentNode.tagName.toLocaleLowerCase()) >= 0)) {
                return;
            }
            else {
                if (!(e.event.action && e.event.action === 'indent')) {
                    this.domNode.setMarker(this.saveSelection);
                }
                blockNodes = this.domNode.blockNodes();
            }
            const nodes = [];
            let isNested = true;
            for (let i = 0; i < blockNodes.length; i++) {
                if (blockNodes[i].parentNode.tagName === 'LI') {
                    nodes.push(blockNodes[i].parentNode);
                }
                else if (blockNodes[i].tagName === 'LI' && blockNodes[i].childNodes[0].tagName !== 'P' &&
                    (blockNodes[i].childNodes[0].tagName !== 'OL' &&
                        blockNodes[i].childNodes[0].tagName !== 'UL')) {
                    nodes.push(blockNodes[i]);
                }
            }
            if (nodes.length > 1 || nodes.length && ((startOffset === 0 && endOffset === 0) || e.ignoreDefault)) {
                e.event.preventDefault();
                e.event.stopPropagation();
                this.currentAction = this.getAction(nodes[0]);
                if (e.event.shiftKey) {
                    this.revertList(nodes);
                    this.revertClean();
                }
                else {
                    isNested = this.nestedList(nodes);
                }
                if (isNested) {
                    this.cleanNode();
                    this.parent.editableElement.focus();
                }
                if (!(e.event.action && e.event.action === 'indent')) {
                    this.saveSelection = this.domNode.saveMarker(this.saveSelection);
                    this.saveSelection.restore();
                    if (e.callBack) {
                        e.callBack({
                            requestType: this.currentAction,
                            editorMode: 'HTML',
                            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                            elements: this.parent.domNode.blockNodes(),
                            event: e.event
                        });
                    }
                }
            }
            else {
                if (!(e.event.action && e.event.action === 'indent')) {
                    if (e.event && e.event.shiftKey && e.event.key === 'Tab') {
                        e.event.action = 'tab';
                    }
                    this.saveSelection = this.domNode.saveMarker(this.saveSelection, e.event.action);
                    this.saveSelection.restore();
                }
            }
        }
        else {
            switch (e.event.action) {
                case 'ordered-list':
                    this.applyListsHandler({ subCommand: 'OL', callBack: e.callBack });
                    e.event.preventDefault();
                    break;
                case 'unordered-list':
                    this.applyListsHandler({ subCommand: 'UL', callBack: e.callBack });
                    e.event.preventDefault();
                    break;
            }
        }
    }
    spaceKeyAction(e) {
        if (e.event.which === 32) {
            this.spaceList(e);
        }
    }
    getAction(element) {
        const parentNode = element.parentNode;
        return (parentNode.nodeName === 'OL' ? 'OL' : 'UL');
    }
    revertClean() {
        const collectionNodes = this.parent.editableElement.querySelectorAll('ul, ol');
        for (let i = 0; i < collectionNodes.length; i++) {
            const listNodes = collectionNodes[i].querySelectorAll('ul, ol');
            if (listNodes.length > 0) {
                for (let j = 0; j < listNodes.length; j++) {
                    const prevSibling = listNodes[j].previousSibling;
                    if (prevSibling && prevSibling.tagName === 'LI') {
                        prevSibling.appendChild(listNodes[j]);
                    }
                }
            }
        }
    }
    noPreviousElement(elements) {
        let firstNode;
        let firstNodeOL;
        const siblingListOL = elements.querySelectorAll('ol, ul');
        const siblingListLI = elements
            .querySelectorAll('li');
        const siblingListLIFirst = this.domNode.contents(siblingListLI[0])[0];
        if (siblingListLI.length > 0 && (siblingListLIFirst.nodeName === 'OL' || siblingListLIFirst.nodeName === 'UL')) {
            firstNode = siblingListLI[0];
        }
        else {
            firstNodeOL = siblingListOL[0];
        }
        if (firstNode) {
            for (let h = this.domNode.contents(elements)[0]; h && !this.domNode.isList(h); null) {
                const nextSibling = h.nextSibling;
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.prepend)([h], firstNode);
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(elements, { 'list-style-type': 'none' });
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(firstNode, { 'list-style-type': '' });
                h = nextSibling;
            }
        }
        else if (firstNodeOL) {
            const nestedElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('li');
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.prepend)([nestedElement], firstNodeOL);
            for (let h = this.domNode.contents(elements)[0]; h && !this.domNode.isList(h); null) {
                const nextSibling = h.nextSibling;
                nestedElement.appendChild(h);
                h = nextSibling;
            }
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.prepend)([firstNodeOL], elements.parentNode);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(elements);
            const nestedElementLI = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('li', { styles: 'list-style-type: none;' });
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.prepend)([nestedElementLI], firstNodeOL.parentNode);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)([firstNodeOL], nestedElementLI);
        }
        else {
            const nestedElementLI = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('li', { styles: 'list-style-type: none;' });
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.prepend)([nestedElementLI], elements.parentNode);
            const nestedElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)(elements.parentNode.tagName);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.prepend)([nestedElement], nestedElementLI);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)([elements], nestedElement);
        }
    }
    nestedList(elements) {
        let isNested = false;
        for (let i = 0; i < elements.length; i++) {
            const prevSibling = this.domNode.getPreviousNode(elements[i]);
            if (prevSibling) {
                isNested = true;
                let firstNode;
                let firstNodeLI;
                const siblingListOL = elements[i].querySelectorAll('ol, ul');
                const siblingListLI = elements[i]
                    .querySelectorAll('li');
                const siblingListLIFirst = this.domNode.contents(siblingListLI[0])[0];
                if (siblingListLI.length > 0 && (siblingListLIFirst.nodeName === 'OL' || siblingListLIFirst.nodeName === 'UL')) {
                    firstNodeLI = siblingListLI[0];
                }
                else {
                    firstNode = siblingListOL[0];
                }
                if (firstNode) {
                    const nestedElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('li');
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.prepend)([nestedElement], firstNode);
                    for (let h = this.domNode.contents(elements[i])[0]; h && !this.domNode.isList(h); null) {
                        const nextSibling = h.nextSibling;
                        nestedElement.appendChild(h);
                        h = nextSibling;
                    }
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)([firstNode], prevSibling);
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(elements[i]);
                }
                else if (firstNodeLI) {
                    if (prevSibling.tagName === 'LI') {
                        for (let h = this.domNode.contents(elements[i])[0]; h && !this.domNode.isList(h); null) {
                            const nextSibling = h.nextSibling;
                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.prepend)([h], firstNodeLI);
                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(elements[i], { 'list-style-type': 'none' });
                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(firstNodeLI, { 'list-style-type': '' });
                            h = nextSibling;
                        }
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)([firstNodeLI.parentNode], prevSibling);
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(elements[i]);
                    }
                }
                else {
                    if (prevSibling.tagName === 'LI') {
                        const nestedElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)(elements[i].parentNode.tagName);
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)([nestedElement], prevSibling);
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)([elements[i]], nestedElement);
                    }
                }
            }
            else {
                const element = elements[i];
                isNested = true;
                this.noPreviousElement(element);
            }
        }
        return isNested;
    }
    applyListsHandler(e) {
        const range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
        this.saveSelection = this.parent.nodeSelection.save(range, this.parent.currentDocument);
        this.currentAction = e.subCommand;
        this.currentAction = e.subCommand = this.currentAction === 'NumberFormatList' ? 'OL' : this.currentAction === 'BulletFormatList' ? 'UL' : this.currentAction;
        this.domNode.setMarker(this.saveSelection);
        let listsNodes = this.domNode.blockNodes();
        if (e.enterAction === 'BR') {
            this.setSelectionBRConfig();
            const allSelectedNode = this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument);
            const selectedNodes = this.parent.nodeSelection.getSelectionNodes(allSelectedNode);
            const currentFormatNodes = [];
            if (selectedNodes.length === 0) {
                selectedNodes.push(listsNodes[0]);
            }
            for (let i = 0; i < selectedNodes.length; i++) {
                let currentNode = selectedNodes[i];
                let previousCurrentNode;
                while (!this.parent.domNode.isBlockNode(currentNode) && currentNode !== this.parent.editableElement) {
                    previousCurrentNode = currentNode;
                    currentNode = currentNode.parentElement;
                }
                if (this.parent.domNode.isBlockNode(currentNode) && currentNode === this.parent.editableElement) {
                    currentFormatNodes.push(previousCurrentNode);
                }
            }
            for (let i = 0; i < currentFormatNodes.length; i++) {
                if (!this.parent.domNode.isBlockNode(currentFormatNodes[i])) {
                    let currentNode = currentFormatNodes[i];
                    let previousNode = currentNode;
                    while (currentNode === this.parent.editableElement) {
                        previousNode = currentNode;
                        currentNode = currentNode.parentElement;
                    }
                    let tempElem;
                    if (this.parent.domNode.isBlockNode(previousNode.parentElement) &&
                        previousNode.parentElement === this.parent.editableElement) {
                        tempElem = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('p');
                        previousNode.parentElement.insertBefore(tempElem, previousNode);
                        tempElem.appendChild(previousNode);
                    }
                    else {
                        tempElem = previousNode;
                    }
                    let preNode = tempElem.previousSibling;
                    while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(preNode) && preNode.nodeName !== 'BR' &&
                        !this.parent.domNode.isBlockNode(preNode)) {
                        tempElem.firstChild.parentElement.insertBefore(preNode, tempElem.firstChild);
                        preNode = tempElem.previousSibling;
                    }
                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(preNode) && preNode.nodeName === 'BR') {
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(preNode);
                    }
                    let postNode = tempElem.nextSibling;
                    while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(postNode) && postNode.nodeName !== 'BR' &&
                        !this.parent.domNode.isBlockNode(postNode)) {
                        tempElem.appendChild(postNode);
                        postNode = tempElem.nextSibling;
                    }
                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(postNode) && postNode.nodeName === 'BR') {
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(postNode);
                    }
                }
            }
            this.setSelectionBRConfig();
            listsNodes = this.parent.domNode.blockNodes();
        }
        for (let i = 0; i < listsNodes.length; i++) {
            if (listsNodes[i].tagName === 'TABLE' && !range.collapsed) {
                listsNodes.splice(i, 1);
            }
            if (listsNodes.length > 0 && listsNodes[i].tagName !== 'LI'
                && 'LI' === listsNodes[i].parentNode.tagName) {
                listsNodes[i] = listsNodes[i].parentNode;
            }
        }
        this.applyLists(listsNodes, this.currentAction, e.selector, e.item);
        if (e.callBack) {
            e.callBack({
                requestType: this.currentAction,
                event: e.event,
                editorMode: 'HTML',
                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                elements: this.parent.domNode.blockNodes()
            });
        }
    }
    setSelectionBRConfig() {
        const startElem = this.parent.editableElement.querySelector('.' + markerClassName.startSelection);
        const endElem = this.parent.editableElement.querySelector('.' + markerClassName.endSelection);
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(endElem)) {
            this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, startElem, 0);
        }
        else {
            this.parent.nodeSelection.setSelectionText(this.parent.currentDocument, startElem, endElem, 0, 0);
        }
    }
    applyLists(elements, type, selector, item) {
        if (this.isRevert(elements, type) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item)) {
            this.revertList(elements);
            this.removeEmptyListElements();
        }
        else {
            this.checkLists(elements, type, item);
            for (let i = 0; i < elements.length; i++) {
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item.listStyle)) {
                    if (item.listStyle === 'listImage') {
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(elements[i], { 'list-style-image': item.listImage });
                    }
                    else {
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(elements[i], { 'list-style-image': 'none' });
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(elements[i], { 'list-style-type': item.listStyle.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase() });
                    }
                }
                if (elements[i].getAttribute('contenteditable') === 'true'
                    && elements[i].childNodes.length === 1 && elements[i].childNodes[0].nodeName === 'TABLE') {
                    const listEle = document.createElement(type);
                    listEle.innerHTML = '<li><br/></li>';
                    elements[i].appendChild(listEle);
                }
                else if ('LI' !== elements[i].tagName && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item)) {
                    const elemAtt = elements[i].tagName === 'IMG' ? '' : this.domNode.attributes(elements[i]);
                    const openTag = '<' + type + '>';
                    const closeTag = '</' + type + '>';
                    const newTag = 'li' + elemAtt;
                    const replaceHTML = (elements[i].tagName.toLowerCase() === DEFAULT_TAG ? elements[i].innerHTML :
                        elements[i].outerHTML);
                    const innerHTML = this.domNode.createTagString(newTag, null, replaceHTML);
                    const collectionString = openTag + innerHTML + closeTag;
                    this.domNode.replaceWith(elements[i], collectionString);
                }
                else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item) && 'LI' !== elements[i].tagName) {
                    // eslint-disable-next-line
                    const elemAtt = elements[i].tagName === 'IMG' ? '' : this.domNode.attributes(elements[i]);
                    const openTag = '<' + type + elemAtt + '>';
                    const closeTag = '</' + type + '>';
                    const newTag = 'li';
                    const replaceHTML = (elements[i].tagName.toLowerCase() === DEFAULT_TAG ? elements[i].innerHTML :
                        elements[i].outerHTML);
                    const innerHTML = this.domNode.createTagString(newTag, null, replaceHTML);
                    const collectionString = openTag + innerHTML + closeTag;
                    this.domNode.replaceWith(elements[i], collectionString);
                }
            }
        }
        this.cleanNode();
        this.parent.editableElement.focus();
        if (isIDevice$1()) {
            setEditFrameFocus(this.parent.editableElement, selector);
        }
        this.saveSelection = this.domNode.saveMarker(this.saveSelection);
        this.saveSelection.restore();
    }
    removeEmptyListElements() {
        const listElem = this.parent.editableElement.querySelectorAll('ol, ul');
        for (let i = 0; i < listElem.length; i++) {
            if (listElem[i].textContent.trim() === '') {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(listElem[i]);
            }
        }
    }
    isRevert(nodes, tagName) {
        let isRevert = true;
        for (let i = 0; i < nodes.length; i++) {
            if (nodes[i].tagName !== 'LI') {
                return false;
            }
            if (nodes[i].parentNode.tagName !== tagName) {
                isRevert = false;
            }
        }
        return isRevert;
    }
    checkLists(nodes, tagName, item) {
        const nodesTemp = [];
        for (let i = 0; i < nodes.length; i++) {
            const node = nodes[i].parentNode;
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item) && 'LI' === nodes[i].tagName && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(item.listStyle)) {
                if (item.listStyle === 'listImage') {
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(node, { 'list-style-image': item.listImage });
                }
                else {
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(node, { 'list-style-image': 'none' });
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(node, { 'list-style-type': item.listStyle.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase() });
                }
            }
            if ((nodes[i].tagName === 'LI' && node.tagName !== tagName && nodesTemp.indexOf(node) < 0) ||
                (nodes[i].tagName === 'LI' && node.tagName === tagName && nodesTemp.indexOf(node) < 0 && item !== null)) {
                nodesTemp.push(node);
            }
        }
        for (let j = nodesTemp.length - 1; j >= 0; j--) {
            const h = nodesTemp[j];
            const replace = '<' + tagName.toLowerCase() + ' '
                + this.domNode.attributes(h) + '>' + h.innerHTML + '</' + tagName.toLowerCase() + '>';
            this.domNode.replaceWith(nodesTemp[j], replace);
        }
    }
    cleanNode() {
        const liParents = this.parent.editableElement.querySelectorAll('ol + ol, ul + ul');
        for (let c = 0; c < liParents.length; c++) {
            const node = liParents[c];
            if (this.domNode.isList(node.previousElementSibling) &&
                this.domNode.openTagString(node) === this.domNode.openTagString(node.previousElementSibling)) {
                const contentNodes = this.domNode.contents(node);
                for (let f = 0; f < contentNodes.length; f++) {
                    node.previousElementSibling.appendChild(contentNodes[f]);
                }
                node.parentNode.removeChild(node);
            }
        }
    }
    findUnSelected(temp, elements) {
        temp = temp.slice().reverse();
        if (temp.length > 0) {
            const rightIndent = [];
            const indentElements = [];
            const lastElement = elements[elements.length - 1];
            let lastElementChild = [];
            const childElements = [];
            lastElementChild = (lastElement.childNodes);
            for (let z = 0; z < lastElementChild.length; z++) {
                if (lastElementChild[z].tagName === 'OL' || lastElementChild[z].tagName === 'UL') {
                    const childLI = lastElementChild[z]
                        .querySelectorAll('li');
                    if (childLI.length > 0) {
                        for (let y = 0; y < childLI.length; y++) {
                            childElements.push(childLI[y]);
                        }
                    }
                }
            }
            for (let i = 0; i < childElements.length; i++) {
                let count = 0;
                for (let j = 0; j < temp.length; j++) {
                    if (!childElements[i].contains((temp[j]))) {
                        count = count + 1;
                    }
                }
                if (count === temp.length) {
                    indentElements.push(childElements[i]);
                }
            }
            if (indentElements.length > 0) {
                for (let x = 0; x < indentElements.length; x++) {
                    if (this.domNode.contents(indentElements[x])[0].nodeName !== 'OL' &&
                        this.domNode.contents(indentElements[x])[0].nodeName !== 'UL') {
                        rightIndent.push(indentElements[x]);
                    }
                }
            }
            if (rightIndent.length > 0) {
                this.nestedList(rightIndent);
            }
        }
    }
    revertList(elements) {
        const temp = [];
        for (let i = elements.length - 1; i >= 0; i--) {
            for (let j = i - 1; j >= 0; j--) {
                if (elements[j].contains((elements[i])) || elements[j] === elements[i]) {
                    temp.push(elements[i]);
                    elements.splice(i, 1);
                    break;
                }
            }
        }
        this.findUnSelected(temp, elements);
        const viewNode = [];
        for (let i = 0; i < elements.length; i++) {
            const element = elements[i];
            if (this.domNode.contents(element)[0].nodeType === 3 && this.domNode.contents(element)[0].textContent.trim().length === 0) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.domNode.contents(element)[0]);
            }
            let parentNode = elements[i].parentNode;
            let className = element.getAttribute('class');
            if (temp.length === 0) {
                const siblingList = elements[i].querySelectorAll('ul, ol');
                const firstNode = siblingList[0];
                if (firstNode) {
                    const child = firstNode
                        .querySelectorAll('li');
                    if (child) {
                        const nestedElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)(firstNode.tagName);
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)([nestedElement], firstNode.parentNode);
                        const nestedElementLI = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('li', { styles: 'list-style-type: none;' });
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)([nestedElementLI], nestedElement);
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)([firstNode], nestedElementLI);
                    }
                }
            }
            if (element.parentNode.insertBefore(this.closeTag(parentNode.tagName), element), 'LI' === parentNode.parentNode.tagName) {
                element.parentNode.insertBefore(this.closeTag('LI'), element);
            }
            else {
                if (DEFAULT_TAG && 0 === element.querySelectorAll(BLOCK_TAGS.join(', ')).length) {
                    const wrapperclass = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(className) ? ' class="e-rte-wrap-inner"' :
                        ' class="' + className + ' e-rte-wrap-inner"';
                    const wrapper = '<' + DEFAULT_TAG + wrapperclass +
                        this.domNode.attributes(parentNode) + '></' + DEFAULT_TAG + '>';
                    this.domNode.wrapInner(element, this.domNode.parseHTMLFragment(wrapper));
                }
                else if (this.domNode.contents(element)[0].nodeType === 3) {
                    const replace = this.domNode.createTagString(DEFAULT_TAG, parentNode, this.parent.domNode.encode(this.domNode.contents(element)[0].textContent));
                    this.domNode.replaceWith(this.domNode.contents(element)[0], replace);
                }
                else if (this.domNode.contents(element)[0].classList.contains(markerClassName.startSelection) ||
                    this.domNode.contents(element)[0].classList.contains(markerClassName.endSelection)) {
                    const replace = this.domNode.createTagString(DEFAULT_TAG, parentNode, this.domNode.contents(element)[0].outerHTML);
                    this.domNode.replaceWith(this.domNode.contents(element)[0], replace);
                }
                else {
                    const childNode = element.firstChild;
                    className = childNode.getAttribute('class');
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.attributes)(childNode, this.domNode.rawAttributes(parentNode));
                    if (className && childNode.getAttribute('class')) {
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.attributes)(childNode, { 'class': className + ' ' + childNode.getAttribute('class') });
                    }
                }
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)([this.openTag('LI')], element);
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.prepend)([this.closeTag('LI')], element);
            }
            this.domNode.insertAfter(this.openTag(parentNode.tagName), element);
            if (parentNode.parentNode.tagName === 'LI') {
                parentNode = parentNode.parentNode.parentNode;
            }
            if (viewNode.indexOf(parentNode) < 0) {
                viewNode.push(parentNode);
            }
        }
        for (let i = 0; i < viewNode.length; i++) {
            const node = viewNode[i];
            let nodeInnerHtml = node.innerHTML;
            const closeTag = /<span class="e-rte-list-close-([a-z]*)"><\/span>/g;
            const openTag = /<span class="e-rte-list-open-([a-z]*)"><\/span>/g;
            nodeInnerHtml = nodeInnerHtml.replace(closeTag, '</$1>');
            nodeInnerHtml = nodeInnerHtml.replace(openTag, '<$1 ' + this.domNode.attributes(node) + '>');
            this.domNode.replaceWith(node, this.domNode.openTagString(node) + nodeInnerHtml.trim() + this.domNode.closeTagString(node));
        }
        const emptyUl = this.parent.editableElement.querySelectorAll('ul:empty, ol:empty');
        for (let i = 0; i < emptyUl.length; i++) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(emptyUl[i]);
        }
        const emptyLi = this.parent.editableElement.querySelectorAll('li:empty');
        for (let i = 0; i < emptyLi.length; i++) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(emptyLi[i]);
        }
    }
    openTag(type) {
        return this.domNode.parseHTMLFragment('<span class="e-rte-list-open-' + type.toLowerCase() + '"></span>');
    }
    closeTag(type) {
        return this.domNode.parseHTMLFragment('<span class="e-rte-list-close-' + type.toLowerCase() + '"></span>');
    }
}

/**
 * Node appending methods.
 *
 * @hidden
 */
class InsertMethods {
    /**
     * WrapBefore method
     *
     * @param {Text} textNode - specifies the text node
     * @param {HTMLElement} parentNode - specifies the parent node
     * @param {boolean} isAfter - specifies the boolean value
     * @returns {Text} - returns the text value
     * @hidden
     * @deprecated
     */
    static WrapBefore(textNode, parentNode, isAfter) {
        parentNode.innerText = textNode.textContent;
        //eslint-disable-next-line
        (!isAfter) ? this.AppendBefore(parentNode, textNode) : this.AppendBefore(parentNode, textNode, true);
        if (textNode.parentNode) {
            textNode.parentNode.removeChild(textNode);
        }
        return parentNode.childNodes[0];
    }
    /**
     * Wrap method
     *
     * @param {HTMLElement} childNode - specifies the child node
     * @param {HTMLElement} parentNode - specifies the parent node.
     * @returns {HTMLElement} - returns the element
     * @hidden
     * @deprecated
     */
    static Wrap(childNode, parentNode) {
        this.AppendBefore(parentNode, childNode);
        parentNode.appendChild(childNode);
        return childNode;
    }
    /**
     * unwrap method
     *
     * @param {Node} node - specifies the node element.
     * @returns {Node[]} - returns the array of value
     * @hidden
     * @deprecated
     */
    static unwrap(node) {
        const parent = node.parentNode;
        const child = [];
        for (; node.firstChild; null) {
            child.push(parent.insertBefore(node.firstChild, node));
        }
        parent.removeChild(node);
        return child;
    }
    /**
     * AppendBefore method
     *
     * @param {HTMLElement} textNode - specifies the element
     * @param {HTMLElement} parentNode - specifies the parent node
     * @param {boolean} isAfter - specifies the boolean value
     * @returns {void}
     * @hidden
     * @deprecated
     */
    static AppendBefore(textNode, parentNode, isAfter) {
        return (parentNode.parentNode) ? ((!isAfter) ? parentNode.parentNode.insertBefore(textNode, parentNode)
            : parentNode.parentNode.insertBefore(textNode, parentNode.nextSibling)) :
            parentNode;
    }
}

/**
 * Split the Node based on selection
 *
 * @hidden
 * @deprecated
 */
class NodeCutter {
    constructor() {
        this.enterAction = 'P';
        this.position = -1;
        this.nodeSelection = new NodeSelection();
    }
    // Split Selection Node
    /**
     * GetSpliceNode method
     *
     * @param {Range} range - specifies the range
     * @param {HTMLElement} node - specifies the node element.
     * @returns {Node} - returns the node value
     * @hidden
     * @deprecated
     */
    GetSpliceNode(range, node) {
        node = this.SplitNode(range, node, true);
        node = this.SplitNode(range, node, false);
        return node;
    }
    /**
     * @param {Range} range - specifies the range
     * @param {HTMLElement} node - specifies the node element.
     * @param {boolean} isCollapsed - specifies the boolean value
     * @returns {HTMLElement} - returns the element
     * @hidden
     * @deprecated
     */
    SplitNode(range, node, isCollapsed) {
        if (node) {
            const clone = range.cloneRange();
            const parent = node.parentNode;
            const index = this.nodeSelection.getIndex(node);
            clone.collapse(isCollapsed);
            // eslint-disable-next-line
            (isCollapsed) ? clone.setStartBefore(node) : clone.setEndAfter(node);
            let fragment = clone.extractContents();
            if (isCollapsed) {
                node = parent.childNodes[index];
                fragment = this.spliceEmptyNode(fragment, false);
                if (fragment && fragment.childNodes.length > 0) {
                    const isEmpty = (fragment.childNodes.length === 1 && fragment.childNodes[0].nodeName !== 'IMG'
                        && this.isImgElm(fragment) && fragment.textContent === '') ? true : false;
                    if (!isEmpty) {
                        if (node) {
                            InsertMethods.AppendBefore(fragment, node);
                        }
                        else {
                            parent.appendChild(fragment);
                            const divNode = document.createElement('div');
                            divNode.innerHTML = '&#65279;&#65279;';
                            node = divNode.firstChild;
                            parent.appendChild(node);
                        }
                    }
                }
            }
            else {
                node = parent.childNodes.length > 1 ? parent.childNodes[index] :
                    parent.childNodes[0];
                fragment = this.spliceEmptyNode(fragment, true);
                if (fragment && fragment.childNodes.length > 0) {
                    const isEmpty = (fragment.childNodes.length === 1 && fragment.childNodes[0].nodeName !== 'IMG'
                        && this.isImgElm(fragment) && fragment.textContent.trim() === '') ? true : false;
                    if (!isEmpty) {
                        if (node) {
                            InsertMethods.AppendBefore(fragment, node, true);
                        }
                        else {
                            parent.appendChild(fragment);
                            const divNode = document.createElement('div');
                            divNode.innerHTML = '&#65279;&#65279;';
                            parent.insertBefore(divNode.firstChild, parent.firstChild);
                            node = parent.firstChild;
                        }
                    }
                }
            }
            return node;
        }
        else {
            return null;
        }
    }
    isImgElm(fragment) {
        let result = true;
        if (fragment.childNodes.length === 1 && fragment.childNodes[0].nodeName !== 'IMG') {
            const firstChild = fragment.childNodes[0];
            for (let i = 0; !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(firstChild.childNodes) && i < firstChild.childNodes.length; i++) {
                if (firstChild.childNodes[i].nodeName === 'IMG') {
                    result = false;
                }
            }
        }
        else {
            result = true;
        }
        return result;
    }
    spliceEmptyNode(fragment, isStart) {
        let len;
        if (fragment.childNodes.length === 1 && fragment.childNodes[0].nodeName === '#text' &&
            fragment.childNodes[0].textContent === '' || fragment.textContent === '') {
            len = -1;
        }
        else {
            len = fragment.childNodes.length - 1;
        }
        if (len > -1 && !isStart) {
            this.spliceEmptyNode(fragment.childNodes[len], isStart);
        }
        else if (len > -1) {
            this.spliceEmptyNode(fragment.childNodes[0], isStart);
        }
        else if (fragment.nodeType !== 3 && fragment.nodeType !== 11) {
            fragment.parentNode.removeChild(fragment);
        }
        return fragment;
    }
    // Cursor Position split
    GetCursorStart(indexes, index, isStart) {
        indexes = (isStart) ? indexes : indexes.reverse();
        let position = indexes[0];
        for (let num = 0; num < indexes.length && ((isStart) ? (indexes[num] < index) : (indexes[num] >= index)); num++) {
            position = indexes[num];
        }
        return position;
    }
    /**
     * GetCursorRange method
     *
     * @param {Document} docElement - specifies the document
     * @param {Range} range - specifies the range
     * @param {Node} node - specifies the node.
     * @returns {Range} - returns the range value
     * @hidden
     * @deprecated
     */
    GetCursorRange(docElement, range, node) {
        let cursorRange = docElement.createRange();
        const indexes = [];
        indexes.push(0);
        const str = this.TrimLineBreak(node.data);
        let index = str.indexOf(' ', 0);
        while (index !== -1) {
            if (indexes.indexOf(index) < 0) {
                indexes.push(index);
            }
            if (new RegExp('\\s').test(str[index - 1]) && (indexes.indexOf(index - 1) < 0)) {
                indexes.push(index - 1);
            }
            if (new RegExp('\\s').test(str[index + 1])) {
                indexes.push(index + 1);
            }
            index = str.indexOf(' ', (index + 1));
        }
        indexes.push(str.length);
        if ((indexes.indexOf(range.startOffset) >= 0)
            || ((indexes.indexOf(range.startOffset - 1) >= 0) && (range.startOffset !== 1
                || (range.startOffset === 1 && new RegExp('\\s').test(str[0])))
                || ((indexes[indexes.length - 1] - 1) === range.startOffset))) {
            cursorRange = range;
            this.position = 1;
        }
        else {
            const startOffset = this.GetCursorStart(indexes, range.startOffset, true);
            this.position = range.startOffset - startOffset;
            cursorRange.setStart(range.startContainer, startOffset);
            cursorRange.setEnd(range.startContainer, this.GetCursorStart(indexes, range.startOffset, false));
        }
        return cursorRange;
    }
    /**
     * GetCursorNode method
     *
     * @param {Document} docElement - specifies the document
     * @param {Range} range - specifies the range
     * @param {Node} node - specifies the node.
     * @returns {Node} - returns the node value
     * @hidden
     * @deprecated
     */
    GetCursorNode(docElement, range, node) {
        return this.GetSpliceNode(this.GetCursorRange(docElement, range, node), node);
    }
    /**
     * TrimLineBreak method
     *
     * @param {string} line - specifies the string value.
     * @returns {string} - returns the string
     * @hidden
     * @deprecated
     */
    TrimLineBreak(line) {
        return line.replace(/(\r\n\t|\n|\r\t)/gm, ' ');
    }
}

/**
 * Formats internal component
 *
 * @hidden
 * @deprecated
 */
class Formats {
    /**
     * Constructor for creating the Formats plugin
     *
     * @param {EditorManager} parent - specifies the parent element.
     * @hidden
     * @deprecated
     */
    constructor(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    addEventListener() {
        this.parent.observer.on(FORMAT_TYPE, this.applyFormats, this);
        this.parent.observer.on(KEY_UP_HANDLER, this.onKeyUp, this);
        this.parent.observer.on(KEY_DOWN_HANDLER, this.onKeyDown, this);
    }
    getParentNode(node) {
        for (; node.parentNode && node.parentNode !== this.parent.editableElement; null) {
            node = node.parentNode;
        }
        return node;
    }
    onKeyUp(e) {
        const range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
        const endCon = range.endContainer;
        const lastChild = endCon.lastChild;
        if (e.event.which === 13 && range.startContainer === endCon && endCon.nodeType !== 3) {
            const pTag = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('p');
            pTag.innerHTML = '<br>';
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(lastChild) && lastChild && lastChild.nodeName === 'BR' && (lastChild.previousSibling && lastChild.previousSibling.nodeName === 'TABLE')) {
                endCon.replaceChild(pTag, lastChild);
                this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, pTag, 0);
            }
            else {
                const brNode = this.parent.nodeSelection.getSelectionNodeCollectionBr(range)[0];
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(brNode) && brNode.nodeName === 'BR' && (brNode.previousSibling && brNode.previousSibling.nodeName === 'TABLE')) {
                    endCon.replaceChild(pTag, brNode);
                    this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, pTag, 0);
                }
            }
        }
    }
    onKeyDown(e) {
        if (e.event.which === 13) {
            let range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
            const startCon = (range.startContainer.textContent.length === 0 || range.startContainer.nodeName === 'PRE')
                ? range.startContainer : range.startContainer.parentElement;
            const endCon = (range.endContainer.textContent.length === 0 || range.endContainer.nodeName === 'PRE')
                ? range.endContainer : range.endContainer.parentElement;
            const preElem = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(startCon, 'pre');
            const endPreElem = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(endCon, 'pre');
            const liParent = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(preElem) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(preElem.parentElement) && preElem.parentElement.tagName === 'LI';
            if (liParent) {
                return;
            }
            if ((((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(preElem) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(endPreElem)) || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(preElem) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(endPreElem)))) {
                e.event.preventDefault();
                this.deleteContent(range);
                this.removeCodeContent(range);
                range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
                this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, endCon, 0);
            }
            if (e.event.which === 13 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(preElem) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(endPreElem)) {
                e.event.preventDefault();
                this.deleteContent(range);
                this.removeCodeContent(range);
                range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
                const lastEmpty = range.startContainer.childNodes[range.endOffset];
                const lastBeforeBr = range.startContainer.childNodes[range.endOffset - 1];
                let startParent = range.startContainer;
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(lastEmpty) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(lastBeforeBr) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(lastEmpty.nextSibling) &&
                    lastEmpty.nodeName === 'BR' && lastBeforeBr.nodeName === 'BR') {
                    this.paraFocus(range.startContainer, e.enterAction);
                }
                else if ((startParent.textContent.charCodeAt(0) === 8203 &&
                    startParent.textContent.length === 1) || startParent.textContent.length === 0) {
                    //Double enter with any parent tag for the node
                    while (startParent.parentElement.nodeName !== 'PRE' &&
                        (startParent.textContent.length === 1 || startParent.textContent.length === 0)) {
                        startParent = startParent.parentElement;
                    }
                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(startParent.previousSibling) && startParent.previousSibling.nodeName === 'BR' &&
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(startParent.nextSibling)) {
                        this.paraFocus(startParent.parentElement);
                    }
                    else {
                        this.isNotEndCursor(preElem, range);
                    }
                }
                else {
                    //Cursor at start and middle
                    this.isNotEndCursor(preElem, range);
                }
            }
        }
    }
    removeCodeContent(range) {
        const regEx = new RegExp(String.fromCharCode(65279), 'g');
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(range.endContainer.textContent.match(regEx))) {
            const pointer = range.endContainer.textContent.charCodeAt(range.endOffset - 1) === 65279 ?
                range.endOffset - 2 : range.endOffset;
            range.endContainer.textContent = range.endContainer.textContent.replace(regEx, '');
            if (range.endContainer.textContent === '') {
                this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, range.endContainer.parentElement, 0);
            }
            else {
                this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, range.endContainer, pointer);
            }
        }
    }
    deleteContent(range) {
        if (range.startContainer !== range.endContainer || range.startOffset !== range.endOffset) {
            range.deleteContents();
        }
    }
    paraFocus(referNode, enterAction) {
        let insertTag;
        if (enterAction === 'DIV') {
            insertTag = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div');
            insertTag.innerHTML = '<br>';
        }
        else if (enterAction === 'BR') {
            insertTag = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('br');
        }
        else {
            insertTag = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('p');
            insertTag.innerHTML = '<br>';
        }
        this.parent.domNode.insertAfter(insertTag, referNode);
        this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, insertTag, 0);
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(referNode.lastChild);
    }
    isNotEndCursor(preElem, range) {
        const nodeCutter = new NodeCutter();
        const isEnd = range.startOffset === preElem.lastChild.textContent.length &&
            preElem.lastChild.textContent === range.startContainer.textContent;
        //Cursor at start point
        if (preElem.textContent.indexOf(range.startContainer.textContent) === 0 &&
            ((range.startOffset === 0 && range.endOffset === 0) || range.startContainer.nodeName === 'PRE')) {
            this.insertMarker(preElem, range);
            const brTag = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('br');
            preElem.childNodes[range.endOffset].parentElement.insertBefore(brTag, preElem.childNodes[range.endOffset]);
        }
        else {
            //Cursor at middle
            const cloneNode = nodeCutter.SplitNode(range, preElem, true);
            this.insertMarker(preElem, range);
            const previousSib = preElem.previousElementSibling;
            if (previousSib.tagName === 'PRE') {
                previousSib.insertAdjacentHTML('beforeend', '<br>' + cloneNode.innerHTML);
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(preElem);
            }
        }
        //To place the cursor position
        this.setCursorPosition(isEnd, preElem);
    }
    setCursorPosition(isEnd, preElem) {
        let isEmpty = false;
        const markerElem = this.parent.editableElement.querySelector('.tempSpan');
        const mrkParentElem = markerElem.parentElement;
        // eslint-disable-next-line
        markerElem.parentNode.textContent === '' ? isEmpty = true :
            this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, markerElem, 0);
        if (isEnd) {
            if (isEmpty) {
                //Enter press when pre element is empty
                if (mrkParentElem === preElem) {
                    this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, markerElem, 0);
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(markerElem);
                }
                else {
                    this.focusSelectionParent(markerElem, mrkParentElem);
                }
            }
            else {
                const brElm = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('br');
                this.parent.domNode.insertAfter(brElm, markerElem);
                this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, markerElem, 0);
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(markerElem);
            }
        }
        else {
            // eslint-disable-next-line
            isEmpty ? this.focusSelectionParent(markerElem, mrkParentElem) : (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(markerElem);
        }
    }
    focusSelectionParent(markerElem, tempSpanPElem) {
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(markerElem);
        tempSpanPElem.innerHTML = '\u200B';
        this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, tempSpanPElem, 0);
    }
    insertMarker(preElem, range) {
        const tempSpan = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', { className: 'tempSpan' });
        if (range.startContainer.nodeName === 'PRE') {
            preElem.childNodes[range.endOffset].parentElement.insertBefore(tempSpan, preElem.childNodes[range.endOffset]);
        }
        else {
            range.startContainer.parentElement.insertBefore(tempSpan, range.startContainer);
        }
    }
    applyFormats(e) {
        const range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
        let isSelectAll = false;
        if (this.parent.editableElement === range.endContainer &&
            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.editableElement.children[range.endOffset - 1]) &&
            this.parent.editableElement.children[range.endOffset - 1].tagName === 'TABLE' && !range.collapsed) {
            isSelectAll = true;
        }
        let save = this.parent.nodeSelection.save(range, this.parent.currentDocument);
        this.parent.domNode.setMarker(save);
        let formatsNodes = this.parent.domNode.blockNodes();
        if (e.enterAction === 'BR') {
            this.setSelectionBRConfig();
            const allSelectedNode = this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument);
            const selectedNodes = this.parent.nodeSelection.getSelectionNodes(allSelectedNode);
            const currentFormatNodes = [];
            if (selectedNodes.length === 0) {
                selectedNodes.push(formatsNodes[0]);
            }
            for (let i = 0; i < selectedNodes.length; i++) {
                let currentNode = selectedNodes[i];
                let previousCurrentNode;
                while (!this.parent.domNode.isBlockNode(currentNode) && currentNode !== this.parent.editableElement) {
                    previousCurrentNode = currentNode;
                    currentNode = currentNode.parentElement;
                }
                if (this.parent.domNode.isBlockNode(currentNode) && currentNode === this.parent.editableElement) {
                    currentFormatNodes.push(previousCurrentNode);
                }
            }
            for (let i = 0; i < currentFormatNodes.length; i++) {
                if (!this.parent.domNode.isBlockNode(currentFormatNodes[i])) {
                    let currentNode = currentFormatNodes[i];
                    let previousNode = currentNode;
                    while (currentNode === this.parent.editableElement) {
                        previousNode = currentNode;
                        currentNode = currentNode.parentElement;
                    }
                    let tempElem;
                    if (this.parent.domNode.isBlockNode(previousNode.parentElement) &&
                        previousNode.parentElement === this.parent.editableElement) {
                        tempElem = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div');
                        previousNode.parentElement.insertBefore(tempElem, previousNode);
                        tempElem.appendChild(previousNode);
                    }
                    else {
                        tempElem = previousNode;
                    }
                    let preNode = tempElem.previousSibling;
                    while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(preNode) && preNode.nodeName !== 'BR' &&
                        !this.parent.domNode.isBlockNode(preNode)) {
                        tempElem.firstChild.parentElement.insertBefore(preNode, tempElem.firstChild);
                        preNode = tempElem.previousSibling;
                    }
                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(preNode) && preNode.nodeName === 'BR') {
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(preNode);
                    }
                    let postNode = tempElem.nextSibling;
                    while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(postNode) && postNode.nodeName !== 'BR' &&
                        !this.parent.domNode.isBlockNode(postNode)) {
                        tempElem.appendChild(postNode);
                        postNode = tempElem.nextSibling;
                    }
                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(postNode) && postNode.nodeName === 'BR') {
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(postNode);
                    }
                }
            }
            this.setSelectionBRConfig();
            formatsNodes = this.parent.domNode.blockNodes();
        }
        for (let i = 0; i < formatsNodes.length; i++) {
            let parentNode;
            let replaceHTML;
            if (e.subCommand.toLowerCase() === 'blockquote') {
                parentNode = this.getParentNode(formatsNodes[i]);
                replaceHTML = this.parent.domNode.isList(parentNode) ||
                    parentNode.tagName === 'TABLE' ? parentNode.outerHTML : parentNode.innerHTML;
            }
            else {
                parentNode = formatsNodes[i];
                replaceHTML = parentNode.innerHTML;
            }
            if ((e.subCommand.toLowerCase() === parentNode.tagName.toLowerCase() &&
                (e.subCommand.toLowerCase() !== 'pre' ||
                    (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.exeValue) && e.exeValue.name === 'dropDownSelect'))) ||
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parentNode.parentNode) ||
                (parentNode.tagName === 'TABLE' && e.subCommand.toLowerCase() === 'pre')) {
                continue;
            }
            this.cleanFormats(parentNode, e.subCommand);
            const replaceNode = (e.subCommand.toLowerCase() === 'pre' && parentNode.tagName.toLowerCase() === 'pre') ?
                'p' : e.subCommand;
            const replaceTag = this.parent.domNode.createTagString(replaceNode, parentNode, replaceHTML.replace(/>\s+</g, '><'));
            if (parentNode.tagName === 'LI') {
                parentNode.innerHTML = '';
                parentNode.insertAdjacentHTML('beforeend', replaceTag);
            }
            else {
                this.parent.domNode.replaceWith(parentNode, replaceTag);
            }
        }
        this.preFormatMerge();
        let startNode = this.parent.editableElement.querySelector('.' + markerClassName.startSelection);
        let endNode = this.parent.editableElement.querySelector('.' + markerClassName.endSelection);
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(startNode) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(endNode)) {
            startNode = startNode.lastChild;
            endNode = endNode.lastChild;
        }
        save = this.parent.domNode.saveMarker(save, null);
        if (isIDevice$1()) {
            setEditFrameFocus(this.parent.editableElement, e.selector);
        }
        if (isSelectAll) {
            this.parent.nodeSelection.setSelectionText(this.parent.currentDocument, startNode, endNode, 0, endNode.textContent.length);
        }
        else {
            save.restore();
        }
        if (e.callBack) {
            e.callBack({
                requestType: e.subCommand,
                editorMode: 'HTML',
                event: e.event,
                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                elements: this.parent.domNode.blockNodes()
            });
        }
    }
    setSelectionBRConfig() {
        const startElem = this.parent.editableElement.querySelector('.' + markerClassName.startSelection);
        const endElem = this.parent.editableElement.querySelector('.' + markerClassName.endSelection);
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(endElem)) {
            this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, startElem, 0);
        }
        else {
            this.parent.nodeSelection.setSelectionText(this.parent.currentDocument, startElem, endElem, 0, 0);
        }
    }
    preFormatMerge() {
        const preNodes = this.parent.editableElement.querySelectorAll('PRE');
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(preNodes)) {
            for (let i = 0; i < preNodes.length; i++) {
                const previousSib = preNodes[i].previousElementSibling;
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(previousSib) && previousSib.tagName === 'PRE') {
                    previousSib.insertAdjacentHTML('beforeend', '<br>' + preNodes[i].innerHTML);
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(preNodes[i]);
                }
            }
        }
    }
    cleanFormats(element, tagName) {
        const ignoreAttr = ['display', 'font-size', 'margin-top', 'margin-bottom', 'margin-left', 'margin-right', 'font-weight'];
        tagName = tagName.toLowerCase();
        for (let i = 0; i < ignoreAttr.length && (tagName !== 'p' && tagName !== 'blockquote' && tagName !== 'pre'); i++) {
            element.style.removeProperty(ignoreAttr[i]);
        }
    }
}

/**
 * Insert a HTML Node or Text
 *
 * @hidden
 * @deprecated
 */
class InsertHtml {
    static Insert(docElement, insertNode, editNode, isExternal) {
        let node;
        if (typeof insertNode === 'string') {
            const divNode = document.createElement('div');
            divNode.innerHTML = insertNode;
            node = isExternal ? divNode : divNode.firstChild;
        }
        else {
            if (isExternal && !(!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(insertNode) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(insertNode.classList) &&
                insertNode.classList.contains('pasteContent'))) {
                const divNode = document.createElement('div');
                divNode.appendChild(insertNode);
                node = divNode;
            }
            else {
                node = insertNode;
            }
        }
        const nodeSelection = new NodeSelection();
        const nodeCutter = new NodeCutter();
        let range = nodeSelection.getRange(docElement);
        if (range.startContainer === editNode && range.startContainer === range.endContainer && range.startOffset === 0 &&
            range.startOffset === range.endOffset && editNode.textContent.length === 0 && editNode.children[0].tagName === 'P') {
            nodeSelection.setSelectionText(docElement, range.startContainer.children[0], range.startContainer.children[0], 0, 0);
            range = nodeSelection.getRange(docElement);
        }
        const isCursor = range.startOffset === range.endOffset && range.startOffset === 0 &&
            range.startContainer === range.endContainer;
        const isCollapsed = range.collapsed;
        const nodes = this.getNodeCollection(range, nodeSelection, node);
        const closestParentNode = (node.nodeName.toLowerCase() === 'table') ? this.closestEle(nodes[0].parentNode, editNode) : nodes[0];
        if (isExternal || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(node) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(node.classList) &&
            node.classList.contains('pasteContent'))) {
            this.pasteInsertHTML(nodes, node, range, nodeSelection, nodeCutter, docElement, isCollapsed, closestParentNode, editNode);
            return;
        }
        if (editNode !== range.startContainer && ((!isCollapsed && !(closestParentNode.nodeType === Node.ELEMENT_NODE &&
            TABLE_BLOCK_TAGS.indexOf(closestParentNode.tagName.toLocaleLowerCase()) !== -1))
            || (node.nodeName.toLowerCase() === 'table' && closestParentNode &&
                TABLE_BLOCK_TAGS.indexOf(closestParentNode.tagName.toLocaleLowerCase()) === -1))) {
            const preNode = nodeCutter.GetSpliceNode(range, closestParentNode);
            const sibNode = preNode.previousSibling;
            let parentNode = preNode.parentNode;
            if (nodes.length === 1 || (node.nodeName.toLowerCase() === 'table' && preNode.childElementCount === 0)) {
                nodeSelection.setSelectionContents(docElement, preNode);
                range = nodeSelection.getRange(docElement);
            }
            else {
                let lasNode = nodeCutter.GetSpliceNode(range, nodes[nodes.length - 1].parentElement);
                lasNode = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(lasNode) ? preNode : lasNode;
                nodeSelection.setSelectionText(docElement, preNode, lasNode, 0, (lasNode.nodeType === 3) ?
                    lasNode.textContent.length : lasNode.childNodes.length);
                range = nodeSelection.getRange(docElement);
            }
            range.extractContents();
            if (insertNode.tagName === 'TABLE') {
                this.removeEmptyElements(editNode);
            }
            for (let index = 0; index < nodes.length; index++) {
                if (nodes[index].nodeType !== 3 && nodes[index].parentNode != null) {
                    if (nodes[index].nodeName === 'IMG') {
                        continue;
                    }
                    nodes[index].parentNode.removeChild(nodes[index]);
                }
            }
            if (sibNode) {
                InsertMethods.AppendBefore(node, sibNode, true);
            }
            else {
                let previousNode = null;
                while (parentNode !== editNode && parentNode.firstChild &&
                    (parentNode.textContent.trim() === '')) {
                    const parentNode1 = parentNode.parentNode;
                    previousNode = parentNode;
                    parentNode = parentNode1;
                }
                if (previousNode !== null) {
                    parentNode = previousNode;
                }
                if (parentNode.firstChild && (parentNode !== editNode ||
                    (node.nodeName === 'TABLE' && isCursor && parentNode === range.startContainer &&
                        parentNode === range.endContainer))) {
                    if (parentNode.textContent.trim() === '' && parentNode !== editNode) {
                        InsertMethods.AppendBefore(node, parentNode, false);
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(parentNode);
                    }
                    else {
                        InsertMethods.AppendBefore(node, parentNode.firstChild, false);
                    }
                }
                else {
                    parentNode.appendChild(node);
                }
            }
            if (node.nodeName === 'IMG') {
                this.imageFocus(node, nodeSelection, docElement);
            }
            else if (node.nodeType !== 3) {
                nodeSelection.setSelectionText(docElement, node, node, 0, node.childNodes.length);
            }
            else {
                nodeSelection.setSelectionText(docElement, node, node, 0, node.textContent.length);
            }
        }
        else {
            range.deleteContents();
            if (isCursor && range.startContainer.textContent === '' && range.startContainer.nodeName !== 'BR') {
                range.startContainer.innerHTML = '';
            }
            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE) {
                const frag = docElement.createDocumentFragment();
                frag.appendChild(node);
                range.insertNode(frag);
            }
            else if (range.startContainer.nodeType === 1 && range.startContainer.nodeName.toLowerCase() === 'hr'
                && range.endContainer.nodeName.toLowerCase() === 'hr') {
                const paraElem = range.startContainer.nextElementSibling;
                if (paraElem) {
                    if (paraElem.querySelector('br')) {
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(paraElem.querySelector('br'));
                    }
                    paraElem.appendChild(node);
                }
            }
            else {
                if (range.startContainer.nodeName === 'BR') {
                    range.startContainer.parentElement.insertBefore(node, range.startContainer);
                }
                else {
                    range.insertNode(node);
                }
            }
            if (node.nodeType !== 3 && node.childNodes.length > 0) {
                nodeSelection.setSelectionText(docElement, node, node, 1, 1);
            }
            else if (node.nodeName === 'IMG') {
                this.imageFocus(node, nodeSelection, docElement);
            }
            else if (node.nodeType !== 3) {
                nodeSelection.setSelectionContents(docElement, node);
            }
            else {
                nodeSelection.setSelectionText(docElement, node, node, node.textContent.length, node.textContent.length);
            }
        }
    }
    static pasteInsertHTML(nodes, node, range, nodeSelection, nodeCutter, docElement, isCollapsed, closestParentNode, editNode) {
        const isCursor = range.startOffset === range.endOffset &&
            range.startContainer === range.endContainer;
        if (isCursor && range.startContainer === editNode && editNode.textContent === '') {
            const currentBlockNode = this.getImmediateBlockNode(nodes[nodes.length - 1], editNode);
            nodeSelection.setSelectionText(docElement, currentBlockNode, currentBlockNode, 0, 0);
            range = nodeSelection.getRange(docElement);
        }
        let lasNode;
        let sibNode;
        let isSingleNode;
        let preNode;
        if (editNode !== range.startContainer && ((!isCollapsed && !(closestParentNode.nodeType === Node.ELEMENT_NODE &&
            TABLE_BLOCK_TAGS.indexOf(closestParentNode.tagName.toLocaleLowerCase()) !== -1))
            || (node.nodeName.toLowerCase() === 'table' && closestParentNode &&
                TABLE_BLOCK_TAGS.indexOf(closestParentNode.tagName.toLocaleLowerCase()) === -1))) {
            preNode = nodeCutter.GetSpliceNode(range, closestParentNode);
            sibNode = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(preNode.previousSibling) ? preNode.parentNode.previousSibling : preNode.previousSibling;
            if (nodes.length === 1) {
                nodeSelection.setSelectionContents(docElement, preNode);
                range = nodeSelection.getRange(docElement);
                isSingleNode = true;
            }
            else {
                lasNode = nodeCutter.GetSpliceNode(range, nodes[nodes.length - 1].parentElement);
                lasNode = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(lasNode) ? preNode : lasNode;
                nodeSelection.setSelectionText(docElement, preNode, lasNode, 0, (lasNode.nodeType === 3) ?
                    lasNode.textContent.length : lasNode.childNodes.length);
                range = nodeSelection.getRange(docElement);
                isSingleNode = false;
            }
        }
        let containsBlockNode = false;
        this.removingComments(node);
        const allChildNodes = node.childNodes;
        for (let i = 0; i < allChildNodes.length; i++) {
            if (BLOCK_TAGS.indexOf(allChildNodes[i].nodeName.toLocaleLowerCase()) >= 0) {
                containsBlockNode = true;
                break;
            }
        }
        let lastSelectionNode;
        const fragment = document.createDocumentFragment();
        if (!containsBlockNode) {
            if (!isCursor) {
                while (node.firstChild) {
                    lastSelectionNode = node.firstChild;
                    fragment.appendChild(node.firstChild);
                }
                if (isSingleNode) {
                    preNode.parentNode.replaceChild(fragment, preNode);
                }
                else {
                    range.deleteContents();
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(lasNode);
                    // eslint-disable-next-line
                    !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(sibNode) ? sibNode.parentNode.appendChild(fragment) : editNode.appendChild(fragment);
                }
            }
            else {
                const tempSpan = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', { className: 'tempSpan' });
                const nearestAnchor = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(range.startContainer.parentElement, 'a');
                if (range.startContainer.nodeType === 3 && nearestAnchor) {
                    const immediateBlockNode = this.getImmediateBlockNode(range.startContainer, editNode);
                    if (immediateBlockNode.querySelectorAll('br').length > 0) {
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(immediateBlockNode.querySelector('br'));
                    }
                    const rangeElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(nearestAnchor, 'span');
                    rangeElement.appendChild(tempSpan);
                }
                else {
                    range.insertNode(tempSpan);
                }
                while (node.firstChild) {
                    lastSelectionNode = node.firstChild;
                    fragment.appendChild(node.firstChild);
                }
                tempSpan.parentNode.replaceChild(fragment, tempSpan);
            }
        }
        else {
            this.insertTempNode(range, node, nodes, nodeCutter, editNode);
            let isFirstTextNode = true;
            let isPreviousInlineElem;
            let paraElm;
            let previousParent;
            range.deleteContents();
            while (node.firstChild) {
                if (node.firstChild.nodeName === '#text' && node.firstChild.textContent.trim() === '') {
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(node.firstChild);
                    continue;
                }
                if (node.firstChild.nodeName === '#text' && isFirstTextNode ||
                    (this.inlineNode.indexOf(node.firstChild.nodeName.toLocaleLowerCase()) >= 0 && isFirstTextNode)) {
                    lastSelectionNode = node.firstChild;
                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(node.previousElementSibling)) {
                        const firstParaElm = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('p');
                        node.parentElement.insertBefore(firstParaElm, node);
                    }
                    node.previousElementSibling.appendChild(node.firstChild);
                }
                else {
                    lastSelectionNode = node.firstChild;
                    if (node.firstChild.nodeName === '#text' ||
                        (this.inlineNode.indexOf(node.firstChild.nodeName.toLocaleLowerCase()) >= 0)) {
                        if (!isPreviousInlineElem) {
                            paraElm = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('p');
                            paraElm.appendChild(node.firstChild);
                            fragment.appendChild(paraElm);
                        }
                        else {
                            previousParent.appendChild(node.firstChild);
                            fragment.appendChild(previousParent);
                        }
                        previousParent = paraElm;
                        isPreviousInlineElem = true;
                    }
                    else {
                        fragment.appendChild(node.firstChild);
                        isPreviousInlineElem = false;
                    }
                    isFirstTextNode = false;
                }
            }
            node.parentNode.replaceChild(fragment, node);
        }
        if (lastSelectionNode.nodeName === '#text') {
            this.placeCursorEnd(lastSelectionNode, node, nodeSelection, docElement, editNode);
        }
        else {
            this.cursorPos(lastSelectionNode, node, nodeSelection, docElement, editNode);
        }
    }
    static placeCursorEnd(lastSelectionNode, node, nodeSelection, docElement, editNode) {
        lastSelectionNode = lastSelectionNode.nodeName === 'BR' ? ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(lastSelectionNode.previousSibling) ? lastSelectionNode.parentNode
            : lastSelectionNode.previousSibling) : lastSelectionNode;
        while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(lastSelectionNode) && lastSelectionNode.nodeName !== '#text' && lastSelectionNode.nodeName !== 'IMG' &&
            lastSelectionNode.nodeName !== 'BR' && lastSelectionNode.nodeName !== 'HR') {
            lastSelectionNode = lastSelectionNode.lastChild;
        }
        lastSelectionNode = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(lastSelectionNode) ? node : lastSelectionNode;
        if (lastSelectionNode.nodeName === 'IMG') {
            this.imageFocus(lastSelectionNode, nodeSelection, docElement);
        }
        else {
            nodeSelection.setSelectionText(docElement, lastSelectionNode, lastSelectionNode, lastSelectionNode.textContent.length, lastSelectionNode.textContent.length);
        }
        this.removeEmptyElements(editNode);
    }
    static getNodeCollection(range, nodeSelection, node) {
        let nodes = [];
        if (range.startOffset === range.endOffset && range.startContainer === range.endContainer &&
            range.startContainer.nodeName != 'BR' &&
            (range.startContainer.nodeName === 'TD' || (range.startContainer.nodeType !== 3 &&
                node.classList && node.classList.contains('pasteContent')))) {
            nodes.push(range.startContainer.childNodes[range.endOffset]);
        }
        else {
            nodes = nodeSelection.getInsertNodeCollection(range);
        }
        return nodes;
    }
    static insertTempNode(range, node, nodes, nodeCutter, editNode) {
        if (range.startContainer === editNode && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(range.startContainer.childNodes[range.endOffset - 1]) &&
            range.startContainer.childNodes[range.endOffset - 1].nodeName === 'TABLE') {
            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(range.startContainer.childNodes[range.endOffset - 1].nextSibling)) {
                range.startContainer.appendChild(node);
            }
            else {
                range.startContainer.insertBefore(node, range.startContainer.childNodes[range.endOffset - 1].nextSibling);
            }
        }
        else if (range.startContainer === editNode && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(range.startContainer.childNodes[range.endOffset]) &&
            range.startContainer.childNodes[range.endOffset].nodeName === 'TABLE') {
            range.startContainer.insertBefore(node, range.startContainer.childNodes[range.endOffset]);
        }
        else if (range.startContainer === range.endContainer && range.startContainer.nodeType !== 3
            && node.firstChild.nodeName === 'HR') {
            if (range.startContainer.classList.contains('e-content') || range.startContainer.nodeName === 'BODY') {
                range.startContainer.appendChild(node);
            }
            else {
                range.startContainer.parentNode.insertBefore(node, range.startContainer);
            }
        }
        else {
            let blockNode = this.getImmediateBlockNode(nodes[nodes.length - 1], editNode);
            if (((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(blockNode) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(blockNode.parentElement)) && range.endContainer.nodeType !== 3) {
                blockNode = range.endContainer;
                range.setEnd(blockNode, range.endContainer.textContent.length);
            }
            if (blockNode.nodeName === 'BODY' && range.startContainer === range.endContainer && range.startContainer.nodeType === 1) {
                blockNode = range.startContainer;
            }
            if (blockNode.closest('LI') && node && node.firstElementChild &&
                ((node).firstElementChild.tagName === 'OL' || node.firstElementChild.tagName === 'UL')) {
                let liNode;
                while (node.firstElementChild.lastElementChild && node.firstElementChild.lastElementChild.tagName === 'LI') {
                    liNode = node.firstElementChild.lastElementChild;
                    liNode.style.removeProperty('margin-left');
                    liNode.style.removeProperty('margin-top');
                    liNode.style.removeProperty('margin-bottom');
                    node.firstElementChild.insertAdjacentElement('afterend', liNode);
                }
            }
            if (blockNode.nodeName === 'TD' || blockNode.nodeName === 'TH') {
                const tempSpan = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('span', { className: 'tempSpan' });
                range.insertNode(tempSpan);
                tempSpan.parentNode.replaceChild(node, tempSpan);
            }
            else {
                let currentNode = nodes[nodes.length - 1];
                let splitedElm;
                if ((currentNode.nodeName === 'BR' || currentNode.nodeName === 'HR') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentNode.parentElement) &&
                    currentNode.parentElement.textContent.trim().length === 0 && (currentNode.parentElement === editNode || !node.classList.contains('pasteContent'))) {
                    splitedElm = currentNode;
                }
                else {
                    splitedElm = nodeCutter.GetSpliceNode(range, blockNode);
                }
                splitedElm.parentNode.replaceChild(node, splitedElm);
            }
        }
    }
    static cursorPos(lastSelectionNode, node, nodeSelection, docElement, editNode) {
        lastSelectionNode.classList.add('lastNode');
        editNode.innerHTML = updateTextNode$1(editNode.innerHTML);
        lastSelectionNode = editNode.querySelector('.lastNode');
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(lastSelectionNode)) {
            this.placeCursorEnd(lastSelectionNode, node, nodeSelection, docElement, editNode);
            lastSelectionNode.classList.remove('lastNode');
            if (lastSelectionNode.classList.length === 0) {
                lastSelectionNode.removeAttribute('class');
            }
        }
    }
    static imageFocus(node, nodeSelection, docElement) {
        const focusNode = document.createTextNode(' ');
        node.parentNode.insertBefore(focusNode, node.nextSibling);
        nodeSelection.setSelectionText(docElement, node.nextSibling, node.nextSibling, 0, 0);
    }
    // eslint-disable-next-line
    static getImmediateBlockNode(node, editNode) {
        do {
            node = node.parentNode;
        } while (node && BLOCK_TAGS.indexOf(node.nodeName.toLocaleLowerCase()) < 0);
        return node;
    }
    static removingComments(elm) {
        let innerElement = elm.innerHTML;
        innerElement = innerElement.replace(/<!--[\s\S]*?-->/g, '');
        elm.innerHTML = innerElement;
    }
    static findDetachEmptyElem(element) {
        let removableElement;
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element.parentElement)) {
            if (element.parentElement.textContent.trim() === '' && element.parentElement.contentEditable !== 'true') {
                removableElement = this.findDetachEmptyElem(element.parentElement);
            }
            else {
                removableElement = element;
            }
        }
        else {
            removableElement = null;
        }
        return removableElement;
    }
    static removeEmptyElements(element) {
        const emptyElements = element.querySelectorAll(':empty');
        for (let i = 0; i < emptyElements.length; i++) {
            if (emptyElements[i].tagName !== 'IMG' && emptyElements[i].tagName !== 'BR' &&
                emptyElements[i].tagName !== 'IFRAME' && emptyElements[i].tagName !== 'TD' &&
                emptyElements[i].tagName !== 'SOURCE' && emptyElements[i].tagName !== 'HR') {
                const detachableElement = this.findDetachEmptyElem(emptyElements[i]);
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(detachableElement)) {
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(detachableElement);
                }
            }
        }
    }
    static closestEle(element, editNode) {
        let el = element;
        while (el && el.nodeType === 1) {
            if (el.parentNode === editNode ||
                (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(el.parentNode.tagName) &&
                    IGNORE_BLOCK_TAGS.indexOf(el.parentNode.tagName.toLocaleLowerCase()) !== -1)) {
                return el;
            }
            el = el.parentNode;
        }
        return null;
    }
}
/**
 * Insert method
 *
 * @hidden
 * @deprecated
 */
InsertHtml.inlineNode = ['a', 'abbr', 'acronym', 'audio', 'b', 'bdi', 'bdo', 'big', 'br', 'button',
    'canvas', 'cite', 'code', 'data', 'datalist', 'del', 'dfn', 'em', 'embed', 'font', 'i', 'iframe', 'img', 'input',
    'ins', 'kbd', 'label', 'map', 'mark', 'meter', 'noscript', 'object', 'output', 'picture', 'progress',
    'q', 'ruby', 's', 'samp', 'script', 'select', 'slot', 'small', 'span', 'strong', 'sub', 'sup', 'svg',
    'template', 'textarea', 'time', 'u', 'tt', 'var', 'video', 'wbr'];

/**
 * Link internal component
 *
 * @hidden
 * @deprecated
 */
class LinkCommand {
    /**
     * Constructor for creating the Formats plugin
     *
     * @param {EditorManager} parent - specifies the editor manager
     * @hidden
     * @deprecated
     */
    constructor(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    addEventListener() {
        this.parent.observer.on(LINK, this.linkCommand, this);
    }
    linkCommand(e) {
        switch (e.value.toString().toLocaleLowerCase()) {
            case 'createlink':
            case 'editlink':
                this.createLink(e);
                break;
            case 'openlink':
                this.openLink(e);
                break;
            case 'removelink':
                this.removeLink(e);
                break;
        }
    }
    createLink(e) {
        let closestAnchor = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.selectParent) && e.item.selectParent.length > 0) &&
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.item.selectParent[0], 'a');
        closestAnchor = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(closestAnchor) ? closestAnchor :
            (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.selectParent) && e.item.selectParent.length > 0) ? (e.item.selectParent[0]) : null;
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(closestAnchor) && closestAnchor.tagName === 'A') {
            const anchorEle = closestAnchor;
            let linkText = '';
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.url)) {
                anchorEle.setAttribute('href', e.item.url);
            }
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.title)) {
                anchorEle.setAttribute('title', e.item.title);
            }
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.text) && e.item.text !== '') {
                linkText = anchorEle.innerText;
                anchorEle.innerText = e.item.text;
            }
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.target)) {
                anchorEle.setAttribute('target', e.item.target);
            }
            else {
                anchorEle.removeAttribute('target');
            }
            if (linkText === e.item.text) {
                e.item.selection.setSelectionText(this.parent.currentDocument, anchorEle, anchorEle, 1, 1);
                e.item.selection.restore();
            }
            else {
                const startIndex = e.item.action === 'Paste' ? anchorEle.childNodes[0].textContent.length : 0;
                e.item.selection.setSelectionText(this.parent.currentDocument, anchorEle.childNodes[0], anchorEle.childNodes[0], startIndex, anchorEle.childNodes[0].textContent.length);
            }
        }
        else {
            const domSelection = new NodeSelection();
            const range = domSelection.getRange(this.parent.currentDocument);
            const text = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.text) ? true : e.item.text.replace(/ /g, '').localeCompare(range.toString()
                .replace(/\n/g, ' ').replace(/ /g, '')) < 0;
            if (e.event && e.event.type === 'keydown' && (e.event.keyCode === 32
                || e.event.keyCode === 13) || e.item.action === 'Paste' || range.collapsed || text) {
                const anchor = this.createAchorNode(e);
                anchor.innerText = e.item.text === '' ? e.item.url : e.item.text;
                e.item.selection.restore();
                InsertHtml.Insert(this.parent.currentDocument, anchor, this.parent.editableElement);
                if (e.event && e.event.type === 'keydown' && (e.event.keyCode === 32
                    || e.event.keyCode === 13)) {
                    const startContainer = e.item.selection.range.startContainer;
                    startContainer.textContent = this.removeText(startContainer.textContent, e.item.text);
                }
                else {
                    const startIndex = e.item.action === 'Paste' ? anchor.childNodes[0].textContent.length : 0;
                    e.item.selection.setSelectionText(this.parent.currentDocument, anchor.childNodes[0], anchor.childNodes[0], startIndex, anchor.childNodes[0].textContent.length);
                }
            }
            else {
                this.createLinkNode(e);
            }
        }
        if (e.callBack) {
            e.callBack({
                requestType: 'Links',
                editorMode: 'HTML',
                event: e.event,
                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
            });
        }
    }
    createLinkNode(e) {
        const domSelection = new NodeSelection();
        const nodeCutter = new NodeCutter();
        const range = domSelection.getRange(this.parent.currentDocument);
        const nodes = this.getSelectionNodes(domSelection.getNodeCollection(range));
        const save = domSelection.save(range, this.parent.currentDocument);
        const txtArray = [];
        const inlineNodes = [];
        let currentNode;
        const removeNodes = [];
        const anchorNodes = [];
        const finalinlineNodes = [];
        let cloneNode;
        for (let index = 0; index < nodes.length; index++) {
            nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);
            txtArray[index] = nodes[index];
        }
        for (let i = 0; i < txtArray.length; i++) {
            let check = true;
            currentNode = txtArray[i];
            while (check === true) {
                if (currentNode.parentNode.nodeName === 'A') {
                    const anchorEle = currentNode.parentNode;
                    currentNode.parentNode.parentNode.insertBefore(anchorEle.firstChild, anchorEle);
                    currentNode.parentNode.removeChild(anchorEle);
                }
                if (this.isBlockNode(currentNode.parentNode) || txtArray.length === 0 || i === 0 || i === txtArray.length - 1
                    || range.startContainer.nodeType === 3) {
                    inlineNodes[i] = currentNode;
                    check = false;
                }
                else {
                    currentNode = currentNode.parentNode;
                }
            }
        }
        for (let i = 0, j = 0; i < inlineNodes.length; i++) {
            if (i === 0) {
                finalinlineNodes[j] = inlineNodes[i];
            }
            if (inlineNodes.length > 1 && i < inlineNodes.length - 1) {
                if ((inlineNodes[i].parentElement === inlineNodes[i + 1].parentElement) && (inlineNodes[i] === inlineNodes[i + 1])) {
                    continue;
                }
                else {
                    finalinlineNodes[j + 1] = inlineNodes[i + 1];
                    j++;
                }
            }
        }
        let j = 0;
        anchorNodes[j] = this.createAchorNode(e);
        for (let i = 0; i < finalinlineNodes.length; i++) {
            if (i === 0) {
                cloneNode = finalinlineNodes[i].cloneNode(true);
                anchorNodes[i].appendChild(cloneNode);
            }
            if (i < finalinlineNodes.length - 1) {
                if (finalinlineNodes[i].parentNode === finalinlineNodes[i + 1].parentNode) {
                    const cln = finalinlineNodes[i + 1].cloneNode(true);
                    anchorNodes[j].appendChild(cln);
                }
                else {
                    j = j + 1;
                    anchorNodes[j] = this.createAchorNode(e);
                    cloneNode = finalinlineNodes[i + 1].cloneNode(true);
                    anchorNodes[j].appendChild(cloneNode);
                }
            }
        }
        this.parent.nodeSelection.setRange(document, save.range);
        for (let i = 0, j = 0, k = 0; i <= finalinlineNodes.length; i++) {
            if (i === 0) {
                finalinlineNodes[i].parentNode.insertBefore(anchorNodes[j], finalinlineNodes[i].nextSibling);
                if (this.parent.domNode.blockNodes().length === 1) {
                    this.parent.nodeSelection.setSelectionNode(this.parent.currentDocument, anchorNodes[j]);
                }
                removeNodes[k] = finalinlineNodes[i];
                k++;
            }
            if (i < finalinlineNodes.length - 1) {
                if (finalinlineNodes[i].parentNode === finalinlineNodes[i + 1].parentNode) {
                    removeNodes[k] = finalinlineNodes[i + 1];
                    k++;
                }
                else {
                    j = j + 1;
                    finalinlineNodes[i + 1].parentNode.insertBefore(anchorNodes[j], finalinlineNodes[i + 1]);
                    removeNodes[k] = finalinlineNodes[i + 1];
                    k++;
                }
            }
        }
        for (let i = 0; i < removeNodes.length; i++) {
            if (removeNodes[i].parentNode) {
                removeNodes[i].parentNode.removeChild(removeNodes[i]);
            }
        }
    }
    createAchorNode(e) {
        const anchorEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('a', {
            className: 'e-rte-anchor',
            attrs: {
                href: e.item.url,
                title: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.title) || e.item.title === '' ? e.item.url : e.item.title
            }
        });
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.target)) {
            anchorEle.setAttribute('target', e.item.target);
        }
        return anchorEle;
    }
    getSelectionNodes(nodeCollection) {
        nodeCollection = nodeCollection.reverse();
        for (let index = 0; index < nodeCollection.length; index++) {
            if (nodeCollection[index].nodeType !== 3 || nodeCollection[index].textContent.trim() === '') {
                if (nodeCollection[index].nodeName !== 'IMG') {
                    nodeCollection.splice(index, 1);
                    index--;
                }
            }
        }
        return nodeCollection.reverse();
    }
    isBlockNode(element) {
        return (!!element && (element.nodeType === Node.ELEMENT_NODE && BLOCK_TAGS.indexOf(element.tagName.toLowerCase()) >= 0));
    }
    removeText(text, val) {
        const arr = text.split(' ');
        for (let i = 0; i < arr.length; i++) {
            if (arr[i] === val) {
                arr.splice(i, 1);
                i--;
            }
        }
        return arr.join(' ') + ' ';
    }
    openLink(e) {
        document.defaultView.open(e.item.url, e.item.target);
        this.callBack(e);
    }
    removeLink(e) {
        const blockNodes = this.parent.domNode.blockNodes();
        if (blockNodes.length < 2) {
            this.parent.domNode.setMarker(e.item.selection);
            const closestAnchor = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.item.selectParent[0], 'a');
            const selectParent = closestAnchor ? closestAnchor : e.item.selectParent[0];
            const parent = selectParent.parentNode;
            const child = [];
            for (; selectParent.firstChild; null) {
                child.push(parent.insertBefore(selectParent.firstChild, selectParent));
            }
            parent.removeChild(selectParent);
            if (child && child.length === 1) {
                e.item.selection.startContainer = e.item.selection.getNodeArray(child[child.length - 1], true);
                e.item.selection.endContainer = e.item.selection.startContainer;
            }
            e.item.selection = this.parent.domNode.saveMarker(e.item.selection);
        }
        else {
            for (let i = 0; i < blockNodes.length; i++) {
                const linkNode = blockNodes[i].querySelectorAll('a');
                for (let j = 0; j < linkNode.length; j++) {
                    if (document.getSelection().containsNode(linkNode[j], true)) {
                        linkNode[j].outerHTML = linkNode[j].innerHTML;
                    }
                }
            }
        }
        e.item.selection.restore();
        this.callBack(e);
    }
    callBack(e) {
        if (e.callBack) {
            e.callBack({
                requestType: e.item.subCommand,
                editorMode: 'HTML',
                event: e.event,
                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
            });
        }
    }
}

/**
 * Formats internal component
 *
 * @hidden
 * @deprecated
 */
class Alignments {
    /**
     * Constructor for creating the Formats plugin
     *
     * @param {EditorManager} parent - specifies the parent element.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    constructor(parent) {
        this.alignments = {
            'JustifyLeft': 'left',
            'JustifyCenter': 'center',
            'JustifyRight': 'right',
            'JustifyFull': 'justify'
        };
        this.parent = parent;
        this.addEventListener();
    }
    addEventListener() {
        this.parent.observer.on(ALIGNMENT_TYPE, this.applyAlignment, this);
        this.parent.observer.on(KEY_DOWN_HANDLER, this.onKeyDown, this);
    }
    onKeyDown(e) {
        switch (e.event.action) {
            case 'justify-center':
                this.applyAlignment({ subCommand: 'JustifyCenter', callBack: e.callBack });
                e.event.preventDefault();
                break;
            case 'justify-full':
                this.applyAlignment({ subCommand: 'JustifyFull', callBack: e.callBack });
                e.event.preventDefault();
                break;
            case 'justify-left':
                this.applyAlignment({ subCommand: 'JustifyLeft', callBack: e.callBack });
                e.event.preventDefault();
                break;
            case 'justify-right':
                this.applyAlignment({ subCommand: 'JustifyRight', callBack: e.callBack });
                e.event.preventDefault();
                break;
        }
    }
    getTableNode(range) {
        const startNode = range.startContainer.nodeType === Node.ELEMENT_NODE
            ? range.startContainer : range.startContainer.parentNode;
        const cellNode = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(startNode, 'td,th');
        return [cellNode];
    }
    applyAlignment(e) {
        const isTableAlign = e.value === 'Table' ? true : false;
        const range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
        let save = this.parent.nodeSelection.save(range, this.parent.currentDocument);
        if (!isTableAlign) {
            this.parent.domNode.setMarker(save);
            const alignmentNodes = this.parent.domNode.blockNodes();
            for (let i = 0; i < alignmentNodes.length; i++) {
                const parentNode = alignmentNodes[i];
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(parentNode, { 'text-align': this.alignments[e.subCommand] });
            }
            const imageTags = this.parent.domNode.getImageTagInSelection();
            for (let i = 0; i < imageTags.length; i++) {
                const elementNode = [];
                elementNode.push(imageTags[i]);
                this.parent.imgObj.imageCommand({
                    item: {
                        selectNode: elementNode
                    },
                    subCommand: e.subCommand,
                    value: e.subCommand,
                    callBack: e.callBack,
                    selector: e.selector
                });
            }
            this.parent.editableElement.focus();
            save = this.parent.domNode.saveMarker(save);
            if (isIDevice$1()) {
                setEditFrameFocus(this.parent.editableElement, e.selector);
            }
            save.restore();
        }
        else {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(this.getTableNode(range)[0], { 'text-align': this.alignments[e.subCommand] });
        }
        if (e.callBack) {
            e.callBack({
                requestType: e.subCommand,
                editorMode: 'HTML',
                event: e.event,
                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                elements: (isTableAlign ? this.getTableNode(range) : this.parent.domNode.blockNodes())
            });
        }
    }
}

/**
 * Indents internal component
 *
 * @hidden
 * @deprecated
 */
class Indents {
    /**
     * Constructor for creating the Formats plugin
     *
     * @param {EditorManager} parent - specifies the parent element
     * @hidden
     * @deprecated
     */
    constructor(parent) {
        this.indentValue = 20;
        this.parent = parent;
        this.addEventListener();
    }
    addEventListener() {
        this.parent.observer.on(INDENT_TYPE, this.applyIndents, this);
        this.parent.observer.on(KEY_DOWN_HANDLER, this.onKeyDown, this);
    }
    onKeyDown(e) {
        switch (e.event.action) {
            case 'indents':
                this.applyIndents({ subCommand: 'Indent', callBack: e.callBack });
                e.event.preventDefault();
                break;
            case 'outdents':
                this.applyIndents({ subCommand: 'Outdent', callBack: e.callBack });
                e.event.preventDefault();
                break;
        }
    }
    applyIndents(e) {
        const editEle = this.parent.editableElement;
        const isRtl = editEle.classList.contains('e-rtl');
        const range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
        let save = this.parent.nodeSelection.save(range, this.parent.currentDocument);
        this.parent.domNode.setMarker(save);
        const indentsNodes = this.parent.domNode.blockNodes();
        const parentNodes = indentsNodes.slice();
        const listsNodes = [];
        for (let i = 0; i < parentNodes.length; i++) {
            if (parentNodes[i].tagName !== 'LI' && 'LI' === parentNodes[i].parentNode.tagName) {
                indentsNodes.splice(indentsNodes.indexOf(parentNodes[i]), 1);
                listsNodes.push(parentNodes[i].parentNode);
            }
            else if (parentNodes[i].tagName === 'LI') {
                indentsNodes.splice(indentsNodes.indexOf(parentNodes[i]), 1);
                listsNodes.push(parentNodes[i]);
            }
        }
        if (listsNodes.length > 0) {
            this.parent.observer.notify(KEY_DOWN_HANDLER, {
                event: {
                    preventDefault: () => {
                        return;
                    },
                    stopPropagation: () => {
                        return;
                    },
                    shiftKey: (e.subCommand === 'Indent' ? false : true),
                    which: 9,
                    action: 'indent'
                },
                ignoreDefault: true
            });
        }
        for (let i = 0; i < indentsNodes.length; i++) {
            const parentNode = indentsNodes[i];
            const marginLeftOrRight = isRtl ? parentNode.style.marginRight : parentNode.style.marginLeft;
            let indentsValue;
            if (e.subCommand === 'Indent') {
                /* eslint-disable */
                indentsValue = marginLeftOrRight === '' ? this.indentValue + 'px' : parseInt(marginLeftOrRight, null) + this.indentValue + 'px';
                isRtl ? (parentNode.style.marginRight = indentsValue) : (parentNode.style.marginLeft = indentsValue);
            }
            else {
                indentsValue = (marginLeftOrRight === '' || marginLeftOrRight === '0px') ? '' : parseInt(marginLeftOrRight, null) - this.indentValue + 'px';
                isRtl ? (parentNode.style.marginRight = indentsValue) : (parentNode.style.marginLeft = indentsValue);
                /* eslint-enable */
            }
        }
        editEle.focus();
        if (isIDevice$1()) {
            setEditFrameFocus(editEle, e.selector);
        }
        save = this.parent.domNode.saveMarker(save);
        save.restore();
        if (e.callBack) {
            e.callBack({
                requestType: e.subCommand,
                editorMode: 'HTML',
                event: e.event,
                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                elements: this.parent.domNode.blockNodes()
            });
        }
    }
}

/**
 * Rich Text Editor classes defined here.
 */
/**
 * @hidden
 * @deprecated
 */
const CLASS_IMAGE_RIGHT = 'e-imgright';
const CLASS_IMAGE_LEFT = 'e-imgleft';
const CLASS_IMAGE_CENTER = 'e-imgcenter';
const CLASS_IMAGE_BREAK = 'e-imgbreak';
const CLASS_CAPTION = 'e-img-caption';
const CLASS_RTE_CAPTION = 'e-rte-img-caption';
const CLASS_CAPTION_INLINE = 'e-caption-inline';
const CLASS_IMAGE_INLINE = 'e-imginline';

/**
 * Link internal component
 *
 * @hidden
 * @deprecated
 */
class ImageCommand {
    /**
     * Constructor for creating the Formats plugin
     *
     * @param {EditorManager} parent - specifies the parent element
     * @hidden
     * @deprecated
     */
    constructor(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    addEventListener() {
        this.parent.observer.on(IMAGE, this.imageCommand, this);
    }
    /**
     * imageCommand method
     *
     * @param {IHtmlItem} e - specifies the element
     * @returns {void}
     * @hidden
     * @deprecated
     */
    imageCommand(e) {
        switch (e.value.toString().toLowerCase()) {
            case 'image':
            case 'replace':
                this.createImage(e);
                break;
            case 'insertlink':
                this.insertImageLink(e);
                break;
            case 'openimagelink':
                this.openImageLink(e);
                break;
            case 'editimagelink':
                this.editImageLink(e);
                break;
            case 'removeimagelink':
                this.removeImageLink(e);
                break;
            case 'remove':
                this.removeImage(e);
                break;
            case 'alttext':
                this.insertAltTextImage(e);
                break;
            case 'dimension':
                this.imageDimension(e);
                break;
            case 'caption':
                this.imageCaption(e);
                break;
            case 'justifyleft':
                this.imageJustifyLeft(e);
                break;
            case 'justifycenter':
                this.imageJustifyCenter(e);
                break;
            case 'justifyright':
                this.imageJustifyRight(e);
                break;
            case 'inline':
                this.imageInline(e);
                break;
            case 'break':
                this.imageBreak(e);
                break;
        }
    }
    createImage(e) {
        let isReplaced = false;
        e.item.url = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.url) || e.item.url === 'undefined' ? e.item.src : e.item.url;
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.selectParent) && e.item.selectParent[0].tagName === 'IMG') {
            const imgEle = e.item.selectParent[0];
            this.setStyle(imgEle, e);
            isReplaced = true;
        }
        else {
            const imgElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('img');
            this.setStyle(imgElement, e);
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.selection)) {
                e.item.selection.restore();
            }
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.selector) && e.selector === 'pasteCleanupModule') {
                e.callBack({ requestType: 'Images',
                    editorMode: 'HTML',
                    event: e.event,
                    range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                    elements: [imgElement]
                });
            }
            else {
                InsertHtml.Insert(this.parent.currentDocument, imgElement, this.parent.editableElement);
            }
        }
        if (e.callBack && ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.selector) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.selector) && e.selector !== 'pasteCleanupModule')) {
            const selectedNode = this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)[0];
            const imgElm = (e.value === 'Replace' || isReplaced) ? e.item.selectParent[0] :
                (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE ? selectedNode.previousSibling : selectedNode.previousElementSibling);
            imgElm.addEventListener('load', () => {
                if (e.value !== 'Replace' || !isReplaced) {
                    e.callBack({
                        requestType: 'Images',
                        editorMode: 'HTML',
                        event: e.event,
                        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                        elements: [imgElm]
                    });
                }
            });
        }
    }
    setStyle(imgElement, e) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.url)) {
            imgElement.setAttribute('src', e.item.url);
        }
        imgElement.setAttribute('class', 'e-rte-image' + ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.cssClass) ? '' : ' ' + e.item.cssClass));
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.altText)) {
            imgElement.setAttribute('alt', e.item.altText);
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.width) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.width.width)) {
            imgElement.setAttribute('width', this.calculateStyleValue(e.item.width.width));
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.height) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.height.height)) {
            imgElement.setAttribute('height', this.calculateStyleValue(e.item.height.height));
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.width) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.width.minWidth)) {
            imgElement.style.minWidth = this.calculateStyleValue(e.item.width.minWidth);
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.width) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.width.maxWidth)) {
            imgElement.style.maxWidth = this.calculateStyleValue(e.item.width.maxWidth);
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.height) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.height.minHeight)) {
            imgElement.style.minHeight = this.calculateStyleValue(e.item.height.minHeight);
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.height) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.height.maxHeight)) {
            imgElement.style.maxHeight = this.calculateStyleValue(e.item.height.maxHeight);
        }
    }
    calculateStyleValue(value) {
        let styleValue;
        if (typeof (value) === 'string') {
            if (value.indexOf('px') || value.indexOf('%') || value.indexOf('auto')) {
                styleValue = value;
            }
            else {
                styleValue = value + 'px';
            }
        }
        else {
            styleValue = value + 'px';
        }
        return styleValue;
    }
    insertImageLink(e) {
        const anchor = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('a', {
            attrs: {
                href: e.item.url
            }
        });
        if (e.item.selectNode[0].parentElement.classList.contains('e-img-wrap')) {
            e.item.selection.restore();
            anchor.setAttribute('contenteditable', 'true');
        }
        anchor.appendChild(e.item.selectNode[0]);
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.target)) {
            anchor.setAttribute('target', e.item.target);
        }
        InsertHtml.Insert(this.parent.currentDocument, anchor, this.parent.editableElement);
        this.callBack(e);
    }
    openImageLink(e) {
        document.defaultView.open(e.item.url, e.item.target);
        this.callBack(e);
    }
    removeImageLink(e) {
        const selectParent = e.item.selectParent[0];
        if (selectParent.classList.contains('e-img-caption')) {
            const capImgWrap = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.e-img-wrap', selectParent);
            const textEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.e-img-inner', selectParent);
            const newTextEle = textEle.cloneNode(true);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('a', selectParent));
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(textEle);
            capImgWrap.appendChild(e.item.insertElement);
            capImgWrap.appendChild(newTextEle);
        }
        else {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(selectParent);
            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE) {
                e.item.selection.restore();
            }
            InsertHtml.Insert(this.parent.currentDocument, e.item.insertElement, this.parent.editableElement);
        }
        this.callBack(e);
    }
    editImageLink(e) {
        e.item.selectNode[0].parentElement.href = e.item.url;
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.target)) {
            e.item.selectNode[0].parentElement.removeAttribute('target');
        }
        else {
            e.item.selectNode[0].parentElement.target = e.item.target;
        }
        this.callBack(e);
    }
    removeImage(e) {
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.item.selectNode[0], 'a')) {
            if (e.item.selectNode[0].parentElement.nodeName === 'A' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.selectNode[0].parentElement.innerText)) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(e.item.selectNode[0]);
            }
            else {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.item.selectNode[0], 'a'));
            }
        }
        else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.item.selectNode[0], '.' + CLASS_CAPTION))) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.item.selectNode[0], '.' + CLASS_CAPTION));
        }
        else {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(e.item.selectNode[0]);
        }
        this.callBack(e);
    }
    insertAltTextImage(e) {
        e.item.selectNode[0].setAttribute('alt', e.item.altText);
        this.callBack(e);
    }
    imageDimension(e) {
        const selectNode = e.item.selectNode[0];
        selectNode.style.height = '';
        selectNode.style.width = '';
        if (e.item.width !== 'auto') {
            selectNode.style.width = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(e.item.width);
        }
        else {
            selectNode.removeAttribute('width');
        }
        if (e.item.height !== 'auto') {
            selectNode.style.height = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(e.item.height);
        }
        else {
            selectNode.removeAttribute('height');
        }
        this.callBack(e);
    }
    imageCaption(e) {
        InsertHtml.Insert(this.parent.currentDocument, e.item.insertElement, this.parent.editableElement);
        this.callBack(e);
    }
    imageJustifyLeft(e) {
        const selectNode = e.item.selectNode[0];
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(selectNode)) {
            selectNode.removeAttribute('class');
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([selectNode], 'e-rte-image');
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectNode, '.' + CLASS_CAPTION))) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_RIGHT);
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_LEFT);
            }
            if (selectNode.parentElement.nodeName === 'A') {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([selectNode.parentElement], CLASS_IMAGE_RIGHT);
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([selectNode.parentElement], CLASS_IMAGE_LEFT);
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([selectNode], CLASS_IMAGE_LEFT);
            }
            else {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([selectNode], CLASS_IMAGE_LEFT);
            }
            this.callBack(e);
        }
    }
    imageJustifyCenter(e) {
        const selectNode = e.item.selectNode[0];
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(selectNode)) {
            selectNode.removeAttribute('class');
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([selectNode], 'e-rte-image');
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectNode, '.' + CLASS_CAPTION))) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_LEFT);
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_RIGHT);
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_CENTER);
            }
            if (selectNode.parentElement.nodeName === 'A') {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([selectNode.parentElement], CLASS_IMAGE_LEFT);
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([selectNode.parentElement], CLASS_IMAGE_RIGHT);
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([selectNode.parentElement], CLASS_IMAGE_CENTER);
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([selectNode], CLASS_IMAGE_CENTER);
            }
            else {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([selectNode], CLASS_IMAGE_CENTER);
            }
            this.callBack(e);
        }
    }
    imageJustifyRight(e) {
        const selectNode = e.item.selectNode[0];
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(selectNode)) {
            selectNode.removeAttribute('class');
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([selectNode], 'e-rte-image');
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectNode, '.' + CLASS_CAPTION))) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_LEFT);
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_RIGHT);
            }
            if (selectNode.parentElement.nodeName === 'A') {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([selectNode.parentElement], CLASS_IMAGE_LEFT);
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([selectNode.parentElement], CLASS_IMAGE_RIGHT);
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([selectNode], CLASS_IMAGE_RIGHT);
            }
            else {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([selectNode], CLASS_IMAGE_RIGHT);
            }
            this.callBack(e);
        }
    }
    imageInline(e) {
        const selectNode = e.item.selectNode[0];
        selectNode.removeAttribute('class');
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([selectNode], 'e-rte-image');
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([selectNode], CLASS_IMAGE_INLINE);
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectNode, '.' + CLASS_CAPTION))) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_BREAK);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_CENTER);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_LEFT);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_RIGHT);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectNode, '.' + CLASS_CAPTION)], CLASS_CAPTION_INLINE);
        }
        this.callBack(e);
    }
    imageBreak(e) {
        const selectNode = e.item.selectNode[0];
        selectNode.removeAttribute('class');
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([selectNode], CLASS_IMAGE_BREAK);
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([selectNode], 'e-rte-image');
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectNode, '.' + CLASS_CAPTION))) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectNode, '.' + CLASS_CAPTION)], CLASS_CAPTION_INLINE);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_CENTER);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_LEFT);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_RIGHT);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_BREAK);
        }
        this.callBack(e);
    }
    callBack(e) {
        if (e.callBack) {
            e.callBack({
                requestType: e.item.subCommand,
                editorMode: 'HTML',
                event: e.event,
                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
            });
        }
    }
}

/**
 * Link internal component
 *
 * @hidden
 * @deprecated
 */
class TableCommand {
    /**
     * Constructor for creating the Formats plugin
     *
     * @param {EditorManager} parent - specifies the parent element
     * @hidden
     * @deprecated
     */
    constructor(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    addEventListener() {
        this.parent.observer.on(TABLE, this.createTable, this);
        this.parent.observer.on(INSERT_ROW, this.insertRow, this);
        this.parent.observer.on(INSERT_COLUMN, this.insertColumn, this);
        this.parent.observer.on(DELETEROW, this.deleteRow, this);
        this.parent.observer.on(DELETECOLUMN, this.deleteColumn, this);
        this.parent.observer.on(REMOVETABLE, this.removeTable, this);
        this.parent.observer.on(TABLEHEADER, this.tableHeader, this);
        this.parent.observer.on(TABLE_VERTICAL_ALIGN, this.tableVerticalAlign, this);
        this.parent.observer.on(TABLE_MERGE, this.cellMerge, this);
        this.parent.observer.on(TABLE_HORIZONTAL_SPLIT, this.HorizontalSplit, this);
        this.parent.observer.on(TABLE_VERTICAL_SPLIT, this.VerticalSplit, this);
        this.parent.observer.on(TABLE_MOVE, this.tableMove, this);
    }
    createTable(e) {
        const table = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('table', { className: 'e-rte-table' });
        const tblBody = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('tbody');
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.width.width)) {
            table.style.width = this.calculateStyleValue(e.item.width.width);
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.width.minWidth)) {
            table.style.minWidth = this.calculateStyleValue(e.item.width.minWidth);
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.item.width.maxWidth)) {
            table.style.maxWidth = this.calculateStyleValue(e.item.width.maxWidth);
        }
        const tdWid = parseInt(e.item.width.width, 10) > 100 ?
            100 / e.item.columns : parseInt(e.item.width.width, 10) / e.item.columns;
        for (let i = 0; i < e.item.rows; i++) {
            const row = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('tr');
            for (let j = 0; j < e.item.columns; j++) {
                const cell = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('td');
                cell.appendChild((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('br'));
                cell.style.width = tdWid + '%';
                row.appendChild(cell);
            }
            tblBody.appendChild(row);
        }
        table.appendChild(tblBody);
        e.item.selection.restore();
        InsertHtml.Insert(this.parent.currentDocument, table, this.parent.editableElement);
        this.removeEmptyNode();
        e.item.selection.setSelectionText(this.parent.currentDocument, table.querySelector('td'), table.querySelector('td'), 0, 0);
        if (table.nextElementSibling === null) {
            let insertElem;
            if (e.enterAction === 'DIV') {
                insertElem = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div');
                insertElem.appendChild((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('br'));
            }
            else if (e.enterAction === 'BR') {
                insertElem = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('br');
            }
            else {
                insertElem = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('p');
                insertElem.appendChild((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('br'));
            }
            this.insertAfter(insertElem, table);
        }
        table.querySelector('td').classList.add('e-cell-select');
        if (e.callBack) {
            e.callBack({
                requestType: 'Table',
                editorMode: 'HTML',
                event: e.event,
                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                elements: [table]
            });
        }
        return table;
    }
    calculateStyleValue(value) {
        let styleValue;
        if (typeof (value) === 'string') {
            if (value.indexOf('px') || value.indexOf('%') || value.indexOf('auto')) {
                styleValue = value;
            }
            else {
                styleValue = value + 'px';
            }
        }
        else {
            styleValue = value + 'px';
        }
        return styleValue;
    }
    removeEmptyNode() {
        const emptyUl = this.parent.editableElement.querySelectorAll('ul:empty, ol:empty');
        for (let i = 0; i < emptyUl.length; i++) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(emptyUl[i]);
        }
        let emptyLiChild = this.parent.editableElement.querySelectorAll('li *:empty');
        for (let i = 0; i < emptyLiChild.length; i++) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(emptyLiChild[i]);
            if (emptyLiChild.length === i + 1) {
                emptyLiChild = this.parent.editableElement.querySelectorAll('li *:empty');
                i = -1;
            }
        }
        const emptyLi = this.parent.editableElement.querySelectorAll('li:empty');
        for (let i = 0; i < emptyLi.length; i++) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(emptyLi[i]);
        }
    }
    insertAfter(newNode, referenceNode) {
        referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
    }
    getSelectedCellMinMaxIndex(e) {
        const selectedCells = this.curTable.querySelectorAll('.e-cell-select');
        let a = 0;
        let minI = e.length;
        let maxI = 0;
        let minJ = e[0].length;
        let maxJ = 0;
        //eslint-disable-next-line
        for (; a < selectedCells.length; a++) {
            const selectedCellIndex = this.getCorrespondingIndex(selectedCells[a], e);
            const minMaxIndex = this.FindIndex(selectedCellIndex[0], selectedCellIndex[1], e);
            //eslint-disable-next-line
            minI = Math.min(selectedCellIndex[0], minI), maxI = Math.max(minMaxIndex[0], maxI), minJ = Math.min(selectedCellIndex[1], minJ), maxJ = Math.max(minMaxIndex[1], maxJ);
        }
        return {
            startRow: minI,
            endRow: maxI,
            startColumn: minJ,
            endColumn: maxJ
        };
    }
    insertRow(e) {
        const isBelow = e.item.subCommand === 'InsertRowBefore' ? false : true;
        let selectedCell = e.item.selection.range.startContainer;
        if (!(selectedCell.nodeName === 'TH' || selectedCell.nodeName === 'TD')) {
            selectedCell = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectedCell.parentElement, 'td,th');
        }
        if (selectedCell.nodeName.toLowerCase() === 'th' && e.item.subCommand === 'InsertRowBefore') {
            return;
        }
        this.curTable = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.parent.nodeSelection.range.startContainer.parentElement, 'table');
        if (this.curTable.querySelectorAll('.e-cell-select').length === 0) {
            const lastRow = this.curTable.rows[this.curTable.rows.length - 1];
            const cloneRow = lastRow.cloneNode(true);
            cloneRow.removeAttribute('rowspan');
            this.insertAfter(cloneRow, lastRow);
        }
        else {
            const allCells = this.getCorrespondingColumns();
            const minMaxIndex = this.getSelectedCellMinMaxIndex(allCells);
            const minVal = isBelow ? minMaxIndex.endRow : minMaxIndex.startRow;
            const newRow = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('tr');
            const isHeaderSelect = this.curTable.querySelectorAll('th.e-cell-select').length > 0;
            for (let i = 0; i < allCells[minVal].length; i++) {
                if (isBelow && minVal < allCells.length - 1 && allCells[minVal][i] === allCells[minVal + 1][i] ||
                    !isBelow && 0 < minVal && allCells[minVal][i] === allCells[minVal - 1][i]) {
                    if (0 === i || 0 < i && allCells[minVal][i] !== allCells[minVal][i - 1]) {
                        allCells[minVal][i].setAttribute('rowspan', (parseInt(allCells[minVal][i].getAttribute('rowspan'), 10) + 1).toString());
                    }
                }
                else {
                    const tdElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('td');
                    tdElement.appendChild((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('br'));
                    newRow.appendChild(tdElement);
                    tdElement.setAttribute('style', allCells[(isHeaderSelect && isBelow) ? (minVal + 1) : minVal][i].getAttribute('style'));
                }
            }
            // eslint-disable-next-line
            let selectedRow;
            if (isHeaderSelect && isBelow) {
                selectedRow = this.curTable.querySelector('tbody').childNodes[0];
            }
            else {
                selectedRow = this.curTable.rows[minVal];
            }
            // eslint-disable-next-line
            (e.item.subCommand === 'InsertRowBefore') ? selectedRow.parentElement.insertBefore(newRow, selectedRow) :
                (isHeaderSelect ? selectedRow.parentElement.insertBefore(newRow, selectedRow) :
                    this.insertAfter(newRow, selectedRow));
        }
        e.item.selection.setSelectionText(this.parent.currentDocument, e.item.selection.range.startContainer, e.item.selection.range.startContainer, 0, 0);
        if (e.callBack) {
            e.callBack({
                requestType: e.item.subCommand,
                editorMode: 'HTML',
                event: e.event,
                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
            });
        }
    }
    insertColumn(e) {
        let selectedCell = e.item.selection.range.startContainer;
        if (!(selectedCell.nodeName === 'TH' || selectedCell.nodeName === 'TD')) {
            selectedCell = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectedCell.parentElement, 'td,th');
        }
        const curRow = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectedCell, 'tr');
        let curCell;
        const allRows = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)((curRow), 'table').rows;
        const colIndex = Array.prototype.slice.call(curRow.querySelectorAll(':scope > td, :scope > th')).indexOf(selectedCell);
        const previousWidth = parseInt(e.item.width, 10) / (curRow.querySelectorAll(':scope > td, :scope > th').length);
        const currentWidth = parseInt(e.item.width, 10) / (curRow.querySelectorAll(':scope > td, :scope > th').length + 1);
        const currentTabElm = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(curRow, 'table');
        const thTdElm = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(curRow, 'table').querySelectorAll('th,td');
        for (let i = 0; i < thTdElm.length; i++) {
            thTdElm[i].dataset.oldWidth = (thTdElm[i].offsetWidth / currentTabElm.offsetWidth * 100) + '%';
        }
        for (let i = 0; i < allRows.length; i++) {
            curCell = allRows[i].querySelectorAll(':scope > td, :scope > th')[colIndex];
            const colTemplate = curCell.cloneNode(true);
            colTemplate.innerHTML = '';
            colTemplate.appendChild((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('br'));
            colTemplate.removeAttribute('class');
            colTemplate.removeAttribute('colspan');
            colTemplate.removeAttribute('rowspan');
            // eslint-disable-next-line
            (e.item.subCommand === 'InsertColumnLeft') ? curCell.parentElement.insertBefore(colTemplate, curCell) :
                this.insertAfter(colTemplate, curCell);
            colTemplate.style.width = currentWidth.toFixed(4) + '%';
            delete colTemplate.dataset.oldWidth;
        }
        for (let i = 0; i < thTdElm.length; i++) {
            thTdElm[i].style.width = (Number(thTdElm[i].dataset.oldWidth.split('%')[0]) * currentWidth / previousWidth).toFixed(4) + '%';
            delete thTdElm[i].dataset.oldWidth;
        }
        e.item.selection.setSelectionText(this.parent.currentDocument, selectedCell, selectedCell, 0, 0);
        if (e.callBack) {
            e.callBack({
                requestType: e.item.subCommand,
                editorMode: 'HTML',
                event: e.event,
                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
            });
        }
    }
    deleteColumn(e) {
        let selectedCell = e.item.selection.range.startContainer;
        if (selectedCell.nodeType === 3) {
            selectedCell = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectedCell.parentElement, 'td,th');
        }
        const tBodyHeadEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectedCell, selectedCell.tagName === 'TH' ? 'thead' : 'tbody');
        const rowIndex = tBodyHeadEle && Array.prototype.indexOf.call(tBodyHeadEle.childNodes, selectedCell.parentNode);
        this.curTable = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectedCell, 'table');
        const curRow = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectedCell, 'tr');
        if (curRow.querySelectorAll('th,td').length === 1) {
            e.item.selection.restore();
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectedCell.parentElement, 'table'));
        }
        else {
            let deleteIndex;
            const allCells = this.getCorrespondingColumns();
            //eslint-disable-next-line
            const selectedMinMaxIndex = this.getSelectedCellMinMaxIndex(allCells);
            const minCol = selectedMinMaxIndex.startColumn;
            const maxCol = selectedMinMaxIndex.endColumn;
            for (let i = 0; i < allCells.length; i++) {
                const currentRow = allCells[i];
                for (let j = 0; j < currentRow.length; j++) {
                    const currentCell = currentRow[j];
                    //eslint-disable-next-line
                    const currentCellIndex = this.getCorrespondingIndex(currentCell, allCells);
                    const colSpanVal = parseInt(currentCell.getAttribute('colspan'), 10) || 1;
                    if (currentCellIndex[1] + (colSpanVal - 1) >= minCol && currentCellIndex[1] <= maxCol) {
                        if (colSpanVal > 1) {
                            currentCell.setAttribute('colspan', (colSpanVal - 1).toString());
                        }
                        else {
                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(currentCell);
                            deleteIndex = j;
                            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE) {
                                e.item.selection.setSelectionText(this.parent.currentDocument, this.curTable.querySelector('td'), this.curTable.querySelector('td'), 0, 0);
                                this.curTable.querySelector('td, th').classList.add('e-cell-select');
                            }
                        }
                    }
                }
            }
            if (deleteIndex > -1) {
                const rowHeadEle = tBodyHeadEle.children[rowIndex];
                const nextFocusCell = rowHeadEle &&
                    rowHeadEle.children[(deleteIndex <= rowHeadEle.children.length - 1 ? deleteIndex : deleteIndex - 1)];
                if (nextFocusCell) {
                    e.item.selection.setSelectionText(this.parent.currentDocument, nextFocusCell, nextFocusCell, 0, 0);
                    nextFocusCell.classList.add('e-cell-select');
                }
            }
        }
        if (e.callBack) {
            const sContainer = this.parent.nodeSelection.getRange(this.parent.currentDocument).startContainer;
            if (sContainer.nodeName !== 'TD') {
                const startChildLength = this.parent.nodeSelection.getRange(this.parent.currentDocument).startOffset;
                const focusNode = sContainer.children[startChildLength];
                if (focusNode) {
                    this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, focusNode, 0);
                }
            }
            e.callBack({
                requestType: e.item.subCommand,
                editorMode: 'HTML',
                event: e.event,
                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
            });
        }
    }
    deleteRow(e) {
        let selectedCell = e.item.selection.range.startContainer;
        if (selectedCell.nodeType === 3) {
            selectedCell = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectedCell.parentElement, 'td,th');
        }
        const colIndex = Array.prototype.indexOf.call(selectedCell.parentNode.childNodes, selectedCell);
        this.curTable = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectedCell, 'table');
        let currentRow;
        const allCells = this.getCorrespondingColumns();
        const minMaxIndex = this.getSelectedCellMinMaxIndex(allCells);
        let maxI;
        let j;
        if (this.curTable.rows.length === 1) {
            e.item.selection.restore();
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectedCell.parentElement, 'table'));
        }
        else {
            for (maxI = minMaxIndex.endRow; maxI >= minMaxIndex.startRow; maxI--) {
                currentRow = this.curTable.rows[maxI];
                for (j = 0; j < allCells[maxI].length; j++) {
                    if (j === 0 || allCells[maxI][j] !== allCells[maxI][j - 1]) {
                        if (1 < parseInt(allCells[maxI][j].getAttribute('rowspan'), 10)) {
                            const rowSpanVal = parseInt(allCells[maxI][j].getAttribute('rowspan'), 10) - 1;
                            //eslint-disable-next-line
                            1 === rowSpanVal ? allCells[maxI][j].removeAttribute('rowspan') : allCells[maxI][j].setAttribute('rowspan', rowSpanVal.toString());
                        }
                    }
                    if (maxI < allCells.length - 1 && allCells[maxI][j] === allCells[maxI + 1][j] && (0 === maxI ||
                        allCells[maxI][j] !== allCells[maxI - 1][j])) {
                        const element = allCells[maxI][j];
                        let index;
                        for (index = j; 0 < index && allCells[maxI][index] === allCells[maxI][index - 1]; index--) {
                            if (index === 0) {
                                this.curTable.rows[maxI + 1].prepend(element);
                            }
                            else {
                                allCells[maxI + 1][index - 1].insertAdjacentElement('afterend', element);
                            }
                        }
                    }
                }
                const deleteIndex = currentRow.rowIndex;
                this.curTable.deleteRow(deleteIndex);
                const focusTrEle = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.curTable.rows[deleteIndex]) ? this.curTable.querySelectorAll('tbody tr')[deleteIndex]
                    : this.curTable.querySelectorAll('tbody tr')[deleteIndex - 1];
                const nextFocusCell = focusTrEle && focusTrEle.querySelectorAll('td')[colIndex];
                if (nextFocusCell) {
                    e.item.selection.setSelectionText(this.parent.currentDocument, nextFocusCell, nextFocusCell, 0, 0);
                    nextFocusCell.classList.add('e-cell-select');
                }
                else {
                    e.item.selection.setSelectionText(this.parent.currentDocument, this.curTable.querySelector('td'), this.curTable.querySelector('td'), 0, 0);
                    this.curTable.querySelector('td, th').classList.add('e-cell-select');
                }
            }
        }
        if (e.callBack) {
            e.callBack({
                requestType: e.item.subCommand,
                editorMode: 'HTML',
                event: e.event,
                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
            });
        }
    }
    removeTable(e) {
        let selectedCell = e.item.selection.range.startContainer;
        selectedCell = (selectedCell.nodeType === 3) ? selectedCell.parentNode : selectedCell;
        const selectedTable = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectedCell.parentElement, 'table');
        if (selectedTable) {
            e.item.selection.restore();
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(selectedTable);
        }
        if (e.callBack) {
            e.callBack({
                requestType: e.item.subCommand,
                editorMode: 'HTML',
                event: e.event,
                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
            });
        }
    }
    tableHeader(e) {
        let headerExit = false;
        let selectedCell = e.item.selection.range.startContainer;
        selectedCell = (selectedCell.nodeType === 3) ? selectedCell.parentNode : selectedCell;
        const table = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectedCell.parentElement, 'table');
        [].slice.call(table.childNodes).forEach((el) => {
            if (el.nodeName === 'THEAD') {
                headerExit = true;
            }
        });
        if (table && !headerExit) {
            const cellCount = table.querySelector('tr').childElementCount;
            let colSpanCount = 0;
            for (let i = 0; i < cellCount; i++) {
                colSpanCount = colSpanCount + (parseInt(table.querySelector('tr').children[i].getAttribute('colspan'), 10) || 1);
            }
            const header = table.createTHead();
            const row = header.insertRow(0);
            for (let j = 0; j < colSpanCount; j++) {
                const th = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('th');
                th.appendChild((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('br'));
                row.appendChild(th);
            }
        }
        else {
            table.deleteTHead();
        }
        if (e.callBack) {
            e.callBack({
                requestType: e.item.subCommand,
                editorMode: 'HTML',
                event: e.event,
                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
            });
        }
    }
    tableVerticalAlign(e) {
        if (e.item.subCommand === 'AlignTop') {
            e.item.tableCell.style.verticalAlign = 'top';
        }
        else if (e.item.subCommand === 'AlignMiddle') {
            e.item.tableCell.style.verticalAlign = 'middle';
        }
        else {
            e.item.tableCell.style.verticalAlign = 'bottom';
        }
        if (e.callBack) {
            e.callBack({
                requestType: e.item.subCommand,
                editorMode: 'HTML',
                event: e.event,
                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
            });
        }
    }
    cellMerge(e) {
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.curTable)) {
            this.curTable = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.parent.nodeSelection.range.startContainer.parentElement, 'table');
        }
        const selectedCells = this.curTable.querySelectorAll('.e-cell-select');
        if (selectedCells.length < 2) {
            return;
        }
        this.mergeCellContent();
        const minMaxIndexes = this.getSelectedMinMaxIndexes(this.getCorrespondingColumns());
        const firstCell = selectedCells[0];
        const rowSelectedCells = firstCell.parentElement.querySelectorAll('.e-cell-select');
        if (minMaxIndexes.startColumn < minMaxIndexes.endColumn) {
            firstCell.setAttribute('colspan', (minMaxIndexes.endColumn - minMaxIndexes.startColumn + 1).toString());
        }
        if (minMaxIndexes.startRow < minMaxIndexes.endRow) {
            firstCell.setAttribute('rowspan', (minMaxIndexes.endRow - minMaxIndexes.startRow + 1).toString());
        }
        let totalWidth = 0;
        for (let j = rowSelectedCells.length - 1; j >= 0; j--) {
            totalWidth = totalWidth + parseFloat(rowSelectedCells[j].style.width);
        }
        firstCell.style.width = totalWidth + '%';
        for (let i = 1; i <= selectedCells.length - 1; i++) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(selectedCells[i]);
        }
        for (let i = 0; i < this.curTable.rows.length; i++) {
            if (this.curTable.rows[i].innerHTML === '') {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.curTable.rows[i]);
            }
        }
        this.updateRowSpanStyle(minMaxIndexes.startRow, minMaxIndexes.endRow, this.getCorrespondingColumns());
        this.updateColSpanStyle(minMaxIndexes.startColumn, minMaxIndexes.endColumn, this.getCorrespondingColumns());
        e.item.selection.setSelectionText(this.parent.currentDocument, e.item.selection.range.startContainer, e.item.selection.range.startContainer, 0, 0);
        if (this.parent.nodeSelection.range) {
            this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, 
            // eslint-disable-next-line
            this.parent.nodeSelection.range.endContainer, 0);
        }
        if (e.callBack) {
            e.callBack({
                requestType: e.item.subCommand,
                editorMode: 'HTML',
                event: e.event,
                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
            });
        }
    }
    updateColSpanStyle(min, max, elements) {
        let colValue;
        let colIndex;
        let colMin;
        let index = 0;
        let attrValue;
        let count = 0;
        const eleArray = elements;
        //eslint-disable-next-line
        if (min < (max = Math.min(max, eleArray[0].length - 1))) {
            for (colIndex === min; colIndex <= max; colIndex++) {
                // eslint-disable-next-line
                if (!(min < colIndex && eleArray[0][colIndex] === eleArray[0][colIndex - 1]) && 1 < (index =
                    Math.min(parseInt(eleArray[0][colIndex].getAttribute('colspan'), 10) || 1, max - min + 1)) &&
                    eleArray[0][colIndex] === eleArray[0][colIndex + 1]) {
                    for (count = index - 1, colValue = 1; colValue < eleArray.length; colValue++) {
                        if (eleArray[colValue][colIndex] !== eleArray[colValue - 1][colIndex]) {
                            /* eslint-disable */
                            for (colMin = colIndex; colMin < colIndex + index; colMin++) {
                                if (1 < (attrValue = parseInt(eleArray[colValue][colMin].getAttribute('colspan'), 10) || 1) &&
                                    eleArray[colValue][colMin] === eleArray[colValue][colMin + 1]) {
                                    colMin += count = Math.min(count, attrValue - 1);
                                }
                                else if (!(count = Math.max(0, count - 1))) {
                                    break;
                                }
                                /* eslint-enable */
                            }
                        }
                        if (!count) {
                            break;
                        }
                    }
                }
            }
            if (count) {
                this.updateCellAttribute(eleArray, count, 'colspan', 0, eleArray.length - 1, min, max);
            }
        }
    }
    updateRowSpanStyle(min, max, ele) {
        let rowValue;
        let colIndex;
        let rowMin;
        let index = 0;
        let attrValue;
        let count = 0;
        const eleArray = ele;
        // eslint-disable-next-line
        if (min < (max = Math.min(max, eleArray.length - 1))) {
            for (rowValue = min; rowValue <= max; rowValue++) {
                // eslint-disable-next-line
                if (!(min < rowValue && eleArray[rowValue][0] === eleArray[rowValue - 1][0]) && 1 < (index = Math.min(parseInt(eleArray[rowValue][0].getAttribute('rowspan'), 10) || 1, max - min + 1)) && eleArray[rowValue][0] === eleArray[rowValue + 1][0]) {
                    for (count = index - 1, colIndex = 1; colIndex < eleArray[0].length; colIndex++) {
                        if (eleArray[rowValue][colIndex] !== eleArray[rowValue][colIndex - 1]) {
                            for (rowMin = rowValue; rowMin < rowValue + index; rowMin++) {
                                // eslint-disable-next-line
                                if (1 < (attrValue = parseInt(eleArray[rowMin][colIndex].getAttribute('rowspan'), 10) || 1) && eleArray[rowMin][colIndex] === eleArray[rowMin + 1][colIndex]) {
                                    rowMin += count = Math.min(count, attrValue - 1);
                                }
                                // eslint-disable-next-line
                                else if (!(count = Math.max(0, count - 1))) {
                                    break;
                                }
                            }
                            if (!count) {
                                break;
                            }
                        }
                    }
                }
            }
            if (count) {
                this.updateCellAttribute(eleArray, count, 'rowspan', min, max, 0, eleArray[0].length - 1);
            }
        }
    }
    updateCellAttribute(elements, index, attr, min, max, firstIndex, length) {
        let rowIndex;
        let colIndex;
        let spanCount;
        for (rowIndex = min; rowIndex <= max; rowIndex++) {
            for (colIndex = firstIndex; colIndex <= length; colIndex++) {
                // eslint-disable-next-line
                min < rowIndex && elements[rowIndex][colIndex] === elements[rowIndex - 1][colIndex] ||
                    firstIndex < colIndex && elements[rowIndex][colIndex] === elements[rowIndex][colIndex - 1] ||
                    1 < (spanCount = parseInt(elements[rowIndex][colIndex].getAttribute(attr), 10) || 1) &&
                        (1 < spanCount - index ? elements[rowIndex][colIndex].setAttribute(attr, (spanCount - index).toString()) :
                            elements[rowIndex][colIndex].removeAttribute(attr));
            }
        }
    }
    mergeCellContent() {
        const selectedCells = this.curTable.querySelectorAll('.e-cell-select');
        let innerHtml = selectedCells[0].innerHTML;
        for (let i = 1; i < selectedCells.length - 1; i++) {
            if ('<br>' !== selectedCells[i].innerHTML) {
                innerHtml = innerHtml + selectedCells[i].innerHTML;
            }
        }
        selectedCells[0].innerHTML = innerHtml;
    }
    getSelectedMinMaxIndexes(correspondingCells) {
        const selectedCells = this.curTable.querySelectorAll('.e-cell-select');
        if (0 < selectedCells.length) {
            let minRow = correspondingCells.length;
            let maxRow = 0;
            let minCol = correspondingCells[0].length;
            let maxCol = 0;
            for (let i = 0; i < selectedCells.length; i++) {
                const currentRowCol = this.getCorrespondingIndex(selectedCells[i], correspondingCells);
                const targetRowCol = this.FindIndex(currentRowCol[0], currentRowCol[1], correspondingCells);
                minRow = Math.min(currentRowCol[0], minRow);
                maxRow = Math.max(targetRowCol[0], maxRow);
                minCol = Math.min(currentRowCol[1], minCol);
                maxCol = Math.max(targetRowCol[1], maxCol);
            }
            return {
                startRow: minRow,
                endRow: maxRow,
                startColumn: minCol,
                endColumn: maxCol
            };
        }
        return null;
    }
    HorizontalSplit(e) {
        const selectedCell = e.item.selection.range.startContainer;
        this.curTable = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectedCell.parentElement, 'table');
        if (this.curTable.querySelectorAll('.e-cell-select').length > 1) {
            return;
        }
        this.activeCell = this.curTable.querySelector('.e-cell-select');
        const newCell = this.activeCell.cloneNode(true);
        newCell.removeAttribute('class');
        newCell.innerHTML = '</br>';
        const activeCellIndex = this.getCorrespondingIndex(this.activeCell, this.getCorrespondingColumns());
        const correspondingCells = this.getCorrespondingColumns();
        const activeCellRowSpan = this.activeCell.getAttribute('rowspan') ? parseInt(this.activeCell.getAttribute('rowspan'), 10) : 1;
        if (activeCellRowSpan > 1) {
            const avgCount = Math.ceil(activeCellRowSpan / 2);
            // eslint-disable-next-line
            1 < avgCount ? this.activeCell.setAttribute('rowspan', avgCount.toString()) :
                this.activeCell.removeAttribute('rowspan');
            // eslint-disable-next-line
            1 < (activeCellRowSpan - avgCount) ? newCell.setAttribute('rowspan', (activeCellRowSpan - avgCount).toString()) : newCell.removeAttribute('rowspan');
            let avgRowIndex;
            let colIndex;
            for (avgRowIndex = activeCellIndex[0] + Math.ceil(activeCellRowSpan / 2), colIndex = 0 === activeCellIndex[1] ? activeCellIndex[1]
                    : activeCellIndex[1] - 1; 0 <= colIndex && (correspondingCells[avgRowIndex][colIndex] ===
                correspondingCells[avgRowIndex][colIndex - 1] || 0 < avgRowIndex && correspondingCells[avgRowIndex][colIndex]
                === correspondingCells[avgRowIndex - 1][colIndex]);) {
                colIndex--;
            }
            if (colIndex === -1) {
                // eslint-disable-next-line
                this.curTable.rows[avgRowIndex].firstChild ? this.curTable.rows[avgRowIndex].prepend(newCell) : this.curTable.appendChild(newCell);
            }
            else {
                correspondingCells[avgRowIndex][colIndex].insertAdjacentElement('afterend', newCell);
            }
        }
        else {
            const newTrEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('tr');
            newTrEle.appendChild(newCell);
            const selectedRow = correspondingCells[activeCellIndex[0]];
            for (let j = 0; j <= selectedRow.length - 1; j++) {
                if (selectedRow[j] !== selectedRow[j - 1] && selectedRow[j] !== this.activeCell) {
                    selectedRow[j].setAttribute('rowspan', ((parseInt(selectedRow[j].getAttribute('rowspan'), 10) ?
                        parseInt(selectedRow[j].getAttribute('rowspan'), 10) : 1) + 1).toString());
                }
            }
            this.activeCell.parentNode.insertAdjacentElement('afterend', newTrEle);
        }
        if (e.callBack) {
            e.callBack({
                requestType: e.item.subCommand,
                editorMode: 'HTML',
                event: e.event,
                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
            });
        }
    }
    VerticalSplit(e) {
        const selectedCell = e.item.selection.range.startContainer;
        this.curTable = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectedCell.parentElement, 'table');
        if (this.curTable.querySelectorAll('.e-cell-select').length > 1) {
            return;
        }
        this.activeCell = this.curTable.querySelector('.e-cell-select');
        const allRows = this.curTable.rows;
        const newCell = this.activeCell.cloneNode(true);
        newCell.removeAttribute('class');
        newCell.innerHTML = '</br>';
        let avgWidth = parseFloat(this.activeCell.style.width) / 2;
        if (this.activeCell.tagName === 'TH' && isNaN(avgWidth)) {
            const cellCount = this.curTable.querySelector('tr').childElementCount;
            let colSpanCount = 0;
            for (let i = 0; i < cellCount; i++) {
                colSpanCount = colSpanCount + (parseInt(this.curTable.querySelector('tr').children[i].getAttribute('colspan'), 10) || 1);
            }
            avgWidth = parseFloat((((this.activeCell.offsetWidth / 2) / this.curTable.offsetWidth) * 100).toFixed(1));
        }
        const activeCellIndex = this.getCorrespondingIndex(this.activeCell, this.getCorrespondingColumns());
        const correspondingColumns = this.getCorrespondingColumns();
        const activeCellcolSpan = parseInt(this.activeCell.getAttribute('colspan'), 10);
        if (activeCellcolSpan > 1) {
            // eslint-disable-next-line
            1 < Math.ceil(activeCellcolSpan / 2) ? this.activeCell.setAttribute('colspan', (activeCellcolSpan / 2).toString())
                : this.activeCell.removeAttribute('colspan');
            // eslint-disable-next-line
            1 < (activeCellcolSpan - activeCellcolSpan / 2) ? newCell.setAttribute('colspan', 
            // eslint-disable-next-line
            (activeCellcolSpan - activeCellcolSpan / 2).toString()) : newCell.removeAttribute('colspan');
        }
        else {
            for (let i = 0; i <= allRows.length - 1; i++) {
                if (0 === i || correspondingColumns[i][activeCellIndex[1]] !== correspondingColumns[i - 1][activeCellIndex[1]]) {
                    const currentCell = correspondingColumns[i][activeCellIndex[1]];
                    if (currentCell !== this.activeCell) {
                        currentCell.setAttribute('colspan', ((parseInt(currentCell.getAttribute('colspan'), 10) ?
                            parseInt(currentCell.getAttribute('colspan'), 10) : 1) + 1).toString());
                    }
                }
            }
        }
        this.activeCell.style.width = avgWidth + '%';
        newCell.style.width = avgWidth + '%';
        this.activeCell.parentNode.insertBefore(newCell, this.activeCell.nextSibling);
        if (e.callBack) {
            e.callBack({
                requestType: e.item.subCommand,
                editorMode: 'HTML',
                event: e.event,
                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
            });
        }
    }
    getCorrespondingColumns() {
        const elementArray = [];
        // eslint-disable-next-line
        let _this = this;
        const colspan = 0;
        const allRows = _this.curTable.rows;
        for (let i = 0; i <= allRows.length - 1; i++) {
            const ele = allRows[i];
            let index = 0;
            for (let j = 0; j <= ele.children.length - 1; j++) {
                /* eslint-disable */
                const colEle = ele.children[j];
                for (let ele = colEle, colspan = parseInt(ele.getAttribute('colspan'), 10) || 1, rowSpan = parseInt(ele.getAttribute('rowspan'), 10) || 1, rowIndex = i; rowIndex < i + rowSpan; rowIndex++) {
                    for (let colIndex = index; colIndex < index + colspan; colIndex++) {
                        elementArray[rowIndex] || (elementArray[rowIndex] = []);
                        elementArray[rowIndex][colIndex] ? index++ : elementArray[rowIndex][colIndex] = colEle;
                    }
                }
                index += colspan;
            }
            /* eslint-enable */
        }
        return elementArray;
    }
    // eslint-disable-next-line
    FindIndex(rowIndex, columnIndex, cells) {
        let nextIndex;
        let nextCol;
        for (nextIndex = rowIndex + 1, nextCol = columnIndex + 1; nextIndex < cells.length;) {
            if (cells[nextIndex][columnIndex] !== cells[rowIndex][columnIndex]) {
                nextIndex--;
                break;
            }
            nextIndex++;
        }
        for (nextIndex === cells.length && nextIndex--; nextCol < cells[rowIndex].length;) {
            if (cells[rowIndex][nextCol] !== cells[rowIndex][columnIndex]) {
                nextCol--;
                break;
            }
            nextCol++;
        }
        return nextCol === cells[rowIndex].length && nextCol--, [
                nextIndex,
                nextCol
            ];
    }
    getCorrespondingIndex(cell, allCells) {
        //let value: RowCol = new RowCol();
        for (let i = 0; i < allCells.length; i++) {
            for (let j = 0; j < allCells[i].length; j++) {
                if (allCells[i][j] === cell) {
                    return [i, j];
                }
            }
        }
        return [];
    }
    highlightCells(minRow, maxRow, minCol, maxCol, eleArray) {
        let j;
        let k;
        let startCell;
        let endCell;
        let minRowIndex = minRow;
        let maxRowIndex = maxRow;
        let minColIndex = minCol;
        let maxColIndex = maxCol;
        let minMaxValues = new MinMax();
        for (j = minRowIndex; j <= maxRowIndex; j++) {
            /* eslint-disable */
            if ((1 < (parseInt(eleArray[j][minColIndex].getAttribute('rowspan'), 10) || 1) ||
                1 < (parseInt(eleArray[j][minColIndex].getAttribute('colspan'), 10) || 1)) &&
                (endCell = this.FindIndex((startCell = this.getCorrespondingIndex(eleArray[j][minColIndex], eleArray))[0], startCell[1], eleArray))) {
                minRowIndex = Math.min(startCell[0], minRowIndex);
                maxRowIndex = Math.max(endCell[0], maxRowIndex);
                minColIndex = Math.min(startCell[1], minColIndex);
                maxColIndex = Math.max(endCell[1], maxColIndex);
            }
            else if ((1 < (parseInt(eleArray[j][maxColIndex].getAttribute('rowspan'), 10) || 1) ||
                1 < (parseInt(eleArray[j][maxColIndex].getAttribute('colspan'), 10) || 1)) &&
                (endCell = this.FindIndex((startCell = this.getCorrespondingIndex(eleArray[j][maxColIndex], eleArray))[0], startCell[1], eleArray))) {
                minRowIndex = Math.min(startCell[0], minRowIndex);
                maxRowIndex = Math.max(endCell[0], maxRowIndex);
                minColIndex = Math.min(startCell[1], minColIndex);
                maxColIndex = Math.max(endCell[1], maxColIndex);
            }
            for (k = minColIndex; k <= maxColIndex; k++) {
                if ((1 < (parseInt(eleArray[minRowIndex][k].getAttribute('rowspan'), 10) || 1) ||
                    1 < (parseInt(eleArray[minRowIndex][k].getAttribute('colspan'), 10) || 1)) &&
                    (endCell = this.FindIndex((startCell = this.getCorrespondingIndex(eleArray[minRowIndex][k], eleArray))[0], startCell[1], eleArray))) {
                    minRowIndex = Math.min(startCell[0], minRowIndex);
                    maxRowIndex = Math.max(endCell[0], maxRowIndex);
                    minColIndex = Math.min(startCell[1], minColIndex);
                    maxColIndex = Math.max(endCell[1], maxColIndex);
                }
                else if ((1 < (parseInt(eleArray[maxRowIndex][k].getAttribute('rowspan'), 10) || 1) ||
                    1 < (parseInt(eleArray[maxRowIndex][k].getAttribute('colspan'), 10) || 1)) &&
                    (endCell = this.FindIndex((startCell = this.getCorrespondingIndex(eleArray[maxRowIndex][k], eleArray))[0], startCell[1], eleArray))) {
                    minRowIndex = Math.min(startCell[0], minRowIndex);
                    maxRowIndex = Math.max(endCell[0], maxRowIndex);
                    minColIndex = Math.min(startCell[1], minColIndex);
                    maxColIndex = Math.max(endCell[1], maxColIndex);
                }
            }
            minMaxValues = minRowIndex === minRow && maxRowIndex === maxRow && minColIndex === minCol && maxColIndex === maxCol ? {
                startRow: minRow,
                endRow: maxRow,
                startColumn: minCol,
                endColumn: maxCol
            } : this.highlightCells(minRowIndex, maxRowIndex, minColIndex, maxColIndex, eleArray);
        }
        return minMaxValues;
        /* eslint-enable */
    }
    tableMove(e) {
        this.activeCell = e.selectNode[0];
        const target = e.event.target;
        const activeCellTag = this.activeCell.tagName;
        const targetCellTag = target.tagName;
        this.curTable = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'table');
        if (this.curTable.querySelectorAll('.e-cell-select').length > 1) {
            this.parent.nodeSelection.Clear(this.parent.currentDocument);
        }
        if ((target.tagName !== 'TD' && target.tagName !== 'TH') && activeCellTag !== targetCellTag) {
            return;
        }
        const activeRowIndex = Array.prototype.slice.call((this.activeCell).parentElement.parentElement.children)
            .indexOf((this.activeCell).parentElement);
        const activeColumnIndex = Array.prototype.slice.call((this.activeCell).parentElement.children).indexOf(this.activeCell);
        const targetRowIndex = Array.prototype.slice.call(target.parentElement.parentElement.children)
            .indexOf(target.parentElement);
        const targetColumnIndex = Array.prototype.slice.call(target.parentElement.children).indexOf(target);
        const activeCellList = this.curTable.querySelectorAll('.e-cell-select');
        for (let i = activeCellList.length - 1; i >= 0; i--) {
            if (this.activeCell !== activeCellList[i]) {
                activeCellList[i].classList.remove('e-cell-select');
            }
        }
        if (activeRowIndex === targetRowIndex && activeColumnIndex === targetColumnIndex) {
            return;
        }
        const correspondingCells = this.getCorrespondingColumns();
        const activeIndexes = this.getCorrespondingIndex(this.activeCell, correspondingCells);
        const targetIndexes = this.getCorrespondingIndex(target, correspondingCells);
        const minMaxIndexes = this.highlightCells(Math.min(activeIndexes[0], targetIndexes[0]), Math.max(activeIndexes[0], 
        /* eslint-disable */
        targetIndexes[0]), Math.min(activeIndexes[1], targetIndexes[1]), Math.max(activeIndexes[1], targetIndexes[1]), correspondingCells);
        for (let rowIndex = minMaxIndexes.startRow; rowIndex <= minMaxIndexes.endRow; rowIndex++) {
            for (let colIndex = minMaxIndexes.startColumn; colIndex <= minMaxIndexes.endColumn; colIndex++) {
                correspondingCells[rowIndex][colIndex].classList.add('e-cell-select');
            }
        }
        if (this.parent.nodeSelection.range) {
            this.parent.nodeSelection.setSelectionText(this.parent.currentDocument, this.parent.nodeSelection.range.endContainer, this.parent.nodeSelection.range.endContainer, 0, 0);
            this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, this.parent.nodeSelection.range.endContainer, 0);
        }
    }
    ;
}
class MinMax {
}

/**
 * Is formatted or not.
 *
 * @hidden
 * @deprecated
 */
class IsFormatted {
    /**
     * getFormattedNode method
     *
     * @param {Node} node - specifies the node.
     * @param {string} format - specifies the string value.
     * @param {Node} endNode - specifies the end node
     * @returns {Node} - returns the node
     * @hidden
     * @deprecated
     */
    getFormattedNode(node, format, endNode) {
        const parentNode = this.getFormatParent(node, format, endNode);
        if (parentNode !== null && parentNode !== endNode) {
            return parentNode;
        }
        return null;
    }
    getFormatParent(node, format, endNode) {
        do {
            node = node.parentNode;
        } while (node && (node !== endNode) && !this.isFormattedNode(node, format));
        return node;
    }
    isFormattedNode(node, format) {
        switch (format) {
            case 'bold':
                return IsFormatted.isBold(node);
            case 'italic':
                return IsFormatted.isItalic(node);
            case 'underline':
                return IsFormatted.isUnderline(node);
            case 'strikethrough':
                return IsFormatted.isStrikethrough(node);
            case 'superscript':
                return IsFormatted.isSuperscript(node);
            case 'subscript':
                return IsFormatted.isSubscript(node);
            case 'fontcolor':
                return this.isFontColor(node);
            case 'fontname':
                return this.isFontName(node);
            case 'fontsize':
                return this.isFontSize(node);
            case 'backgroundcolor':
                return this.isBackgroundColor(node);
            default:
                return false;
        }
    }
    /**
     * isBold method
     *
     * @param {Node} node - specifies the node value
     * @returns {boolean} - returns the boolean value
     * @hidden
     * @deprecated
     */
    static isBold(node) {
        const validTags = ['strong', 'b'];
        if (validTags.indexOf(node.nodeName.toLowerCase()) !== -1) {
            return true;
        }
        else if (this.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 &&
            node.style && node.style.fontWeight === 'bold') {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * isItalic method
     *
     * @param {Node} node - specifies the node value
     * @returns {boolean} - returns the boolean value
     * @hidden
     * @deprecated
     */
    static isItalic(node) {
        const validTags = ['em', 'i'];
        if (validTags.indexOf(node.nodeName.toLowerCase()) !== -1) {
            return true;
        }
        else if (this.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 &&
            node.style && node.style.fontStyle === 'italic') {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * isUnderline method
     *
     * @param {Node} node - specifies the node value
     * @returns {boolean} - returns the boolean value
     * @hidden
     * @deprecated
     */
    static isUnderline(node) {
        const validTags = ['u'];
        if (validTags.indexOf(node.nodeName.toLowerCase()) !== -1) {
            return true;
        }
        else if (this.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 &&
            node.style && node.style.textDecoration === 'underline') {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * isStrikethrough method
     *
     * @param {Node} node - specifies the node value
     * @returns {boolean} - returns the boolean value
     * @hidden
     * @deprecated
     */
    static isStrikethrough(node) {
        const validTags = ['del', 'strike'];
        if (validTags.indexOf(node.nodeName.toLowerCase()) !== -1) {
            return true;
        }
        else if (this.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 &&
            node.style && node.style.textDecoration === 'line-through') {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * isSuperscript method
     *
     * @param {Node} node - specifies the node value
     * @returns {boolean} - returns the boolean value
     * @hidden
     * @deprecated
     */
    static isSuperscript(node) {
        const validTags = ['sup'];
        if (validTags.indexOf(node.nodeName.toLowerCase()) !== -1) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * isSubscript method
     *
     * @param {Node} node - specifies the node value
     * @returns {boolean} - returns the boolean value
     * @hidden
     * @deprecated
     */
    static isSubscript(node) {
        const validTags = ['sub'];
        if (validTags.indexOf(node.nodeName.toLowerCase()) !== -1) {
            return true;
        }
        else {
            return false;
        }
    }
    isFontColor(node) {
        const color = node.style && node.style.color;
        if (IsFormatted.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 &&
            color !== null && color !== '' && color !== undefined) {
            return true;
        }
        else {
            return false;
        }
    }
    isBackgroundColor(node) {
        const backColor = node.style && node.style.backgroundColor;
        if (IsFormatted.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 &&
            backColor !== null && backColor !== '' && backColor !== undefined) {
            return true;
        }
        else {
            return false;
        }
    }
    isFontSize(node) {
        const size = node.style && node.style.fontSize;
        if (IsFormatted.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 &&
            size !== null && size !== '' && size !== undefined) {
            return true;
        }
        else {
            return false;
        }
    }
    isFontName(node) {
        const name = node.style && node.style.fontFamily;
        if (IsFormatted.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 &&
            name !== null && name !== '' && name !== undefined) {
            return true;
        }
        else {
            return false;
        }
    }
}
// Get Formatted Node
IsFormatted.inlineTags = [
    'a',
    'abbr',
    'acronym',
    'b',
    'bdo',
    'big',
    'cite',
    'code',
    'dfn',
    'em',
    'i',
    'kbd',
    'label',
    'q',
    'samp',
    'small',
    'span',
    'strong',
    'sub',
    'sup',
    'tt',
    'u',
    'var',
    'del'
];

/**
 * `Selection` module is used to handle RTE Selections.
 */
class SelectionCommands {
    /**
     * applyFormat method
     *
     * @param {Document} docElement - specifies the document
     * @param {string} format - specifies the string value
     * @param {Node} endNode - specifies the end node
     * @param {string} enterAction - specifies the enter key action
     * @param {string} value - specifies the string value
     * @param {string} selector - specifies the string
     * @returns {void}
     * @hidden
     * @deprecated
     */
    static applyFormat(docElement, format, endNode, enterAction, value, selector) {
        this.enterAction = enterAction;
        const validFormats = ['bold', 'italic', 'underline', 'strikethrough', 'superscript',
            'subscript', 'uppercase', 'lowercase', 'fontcolor', 'fontname', 'fontsize', 'backgroundcolor'];
        if (validFormats.indexOf(format) > -1) {
            if (format === 'backgroundcolor' && value === '') {
                value = 'transparent';
            }
            let domSelection = new NodeSelection();
            const domNode = new DOMNode(endNode, docElement);
            const nodeCutter = new NodeCutter();
            const isFormatted = new IsFormatted();
            let range = domSelection.getRange(docElement);
            const save = domSelection.save(range, docElement);
            const nodes = range.collapsed ? domSelection.getSelectionNodeCollection(range) :
                domSelection.getSelectionNodeCollectionBr(range);
            let isCollapsed = false;
            let isFormat = false;
            let isCursor = false;
            let preventRestore = false;
            const isFontStyle = (['fontcolor', 'fontname', 'fontsize', 'backgroundcolor'].indexOf(format) > -1);
            if (range.collapsed) {
                if (nodes.length > 0) {
                    isCollapsed = true;
                    range = nodeCutter.GetCursorRange(docElement, range, nodes[0]);
                }
                else if (range.startContainer.nodeType === 3 && range.startContainer.parentElement.childElementCount > 0 &&
                    range.startOffset > 0 && range.startContainer.parentElement.firstElementChild.tagName.toLowerCase() !== 'br') {
                    isCollapsed = true;
                    range = nodeCutter.GetCursorRange(docElement, range, range.startContainer);
                    nodes.push(range.startContainer);
                }
                else {
                    const cursorNode = this.insertCursorNode(docElement, domSelection, range, isFormatted, nodeCutter, format, value, endNode);
                    domSelection.endContainer = domSelection.startContainer = domSelection.getNodeArray(cursorNode, true);
                    const childNodes = cursorNode.nodeName === 'BR' && cursorNode.parentNode.childNodes;
                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(childNodes) && childNodes.length === 1 && childNodes[0].nodeName === 'BR' && nodes.length === 0) {
                        domSelection.setSelectionText(docElement, range.startContainer, range.endContainer, 0, 0);
                        preventRestore = true;
                    }
                    else {
                        domSelection.endOffset = domSelection.startOffset = 1;
                    }
                    if (cursorNode.nodeName === 'BR' && cursorNode.parentNode.textContent.length === 0) {
                        preventRestore = true;
                    }
                }
            }
            isCursor = range.collapsed;
            let isSubSup = false;
            for (let index = 0; index < nodes.length; index++) {
                let formatNode = isFormatted.getFormattedNode(nodes[index], format, endNode);
                if (formatNode === null) {
                    if (format === 'subscript') {
                        formatNode = isFormatted.getFormattedNode(nodes[index], 'superscript', endNode);
                        isSubSup = formatNode === null ? false : true;
                    }
                    else if (format === 'superscript') {
                        formatNode = isFormatted.getFormattedNode(nodes[index], 'subscript', endNode);
                        isSubSup = formatNode === null ? false : true;
                    }
                }
                if (index === 0 && formatNode === null) {
                    isFormat = true;
                }
                if (formatNode !== null && (!isFormat || isFontStyle)) {
                    nodes[index] = this.removeFormat(nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection, endNode, domNode);
                }
                else {
                    nodes[index] = this.insertFormat(docElement, nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value);
                }
                domSelection = this.applySelection(nodes, domSelection, nodeCutter, index, isCollapsed);
            }
            if (isIDevice$1()) {
                setEditFrameFocus(endNode, selector);
            }
            if (!preventRestore) {
                save.restore();
            }
            if (isSubSup) {
                this.applyFormat(docElement, format, endNode, enterAction);
            }
        }
    }
    static insertCursorNode(docElement, domSelection, range, isFormatted, nodeCutter, format, value, endNode) {
        const cursorNodes = domSelection.getNodeCollection(range);
        const cursorFormat = (cursorNodes.length > 0) ?
            (cursorNodes.length > 1 && range.startContainer === range.endContainer) ?
                this.getCursorFormat(isFormatted, cursorNodes, format, endNode) :
                isFormatted.getFormattedNode(cursorNodes[0], format, endNode) : null;
        let cursorNode = null;
        if (cursorFormat) {
            cursorNode = cursorNodes[0];
            if (cursorFormat.firstChild.textContent.charCodeAt(0) === 8203) {
                const regEx = new RegExp(String.fromCharCode(8203), 'g');
                let emptySpaceNode;
                if (cursorFormat.firstChild === cursorNode) {
                    cursorNode.textContent = cursorNode.textContent.replace(regEx, '');
                    emptySpaceNode = cursorNode;
                    
                }
                else {
                    cursorFormat.firstChild.textContent = cursorFormat.firstChild.textContent.replace(regEx, '');
                    emptySpaceNode = cursorFormat.firstChild;
                }
                let pointer;
                if (emptySpaceNode.textContent.length === 0) {
                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(emptySpaceNode.previousSibling)) {
                        cursorNode = emptySpaceNode.previousSibling;
                        pointer = emptySpaceNode.textContent.length - 1;
                        domSelection.setCursorPoint(docElement, emptySpaceNode, pointer);
                    }
                    else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(emptySpaceNode.parentElement) && emptySpaceNode.parentElement.textContent.length === 0) {
                        let brElem = document.createElement('BR');
                        emptySpaceNode.parentElement.appendChild(brElem);
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(emptySpaceNode);
                        cursorNode = brElem;
                        domSelection.setCursorPoint(docElement, cursorNode.parentElement, 0);
                    }
                }
            }
            if ((['fontcolor', 'fontname', 'fontsize', 'backgroundcolor'].indexOf(format) > -1)) {
                if (format === 'fontcolor') {
                    cursorFormat.style.color = value;
                }
                else if (format === 'fontname') {
                    cursorFormat.style.fontFamily = value;
                }
                else if (format === 'fontsize') {
                    cursorFormat.style.fontSize = value;
                }
                else {
                    cursorFormat.style.backgroundColor = value;
                }
                cursorNode = cursorFormat;
            }
            else {
                InsertMethods.unwrap(cursorFormat);
            }
        }
        else {
            if (cursorNodes.length > 1 && range.startOffset > 0 && (cursorNodes[0].firstElementChild &&
                cursorNodes[0].firstElementChild.tagName.toLowerCase() === 'br')) {
                cursorNodes[0].innerHTML = '';
            }
            if (cursorNodes.length === 1 && range.startOffset === 0 && (cursorNodes[0].nodeName === 'BR' ||
                cursorNodes[0].nextSibling.nodeName === 'BR')) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(cursorNodes[0].nodeName === '#text' ? cursorNodes[0].nextSibling : cursorNodes[0]);
            }
            cursorNode = this.getInsertNode(docElement, range, format, value).firstChild;
        }
        return cursorNode;
    }
    static getCursorFormat(isFormatted, cursorNodes, format, endNode) {
        let currentNode;
        for (let index = 0; index < cursorNodes.length; index++) {
            currentNode = cursorNodes[index].lastElementChild ?
                cursorNodes[index].lastElementChild : cursorNodes[index];
        }
        return isFormatted.getFormattedNode(currentNode, format, endNode);
    }
    static removeFormat(nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection, endNode, domNode) {
        let splitNode = null;
        let startText = range.startContainer.nodeName === '#text' ?
            range.startContainer.textContent.substring(range.startOffset, range.startContainer.textContent.length) :
            range.startContainer.textContent;
        if (!(range.startContainer === range.endContainer && range.startOffset === 0
            && range.endOffset === range.startContainer.length)) {
            const nodeIndex = [];
            let cloneNode = nodes[index];
            do {
                nodeIndex.push(domSelection.getIndex(cloneNode));
                cloneNode = cloneNode.parentNode;
            } while (cloneNode && (cloneNode !== formatNode));
            if (nodes[index].nodeName !== 'BR') {
                cloneNode = splitNode = (isCursor && (formatNode.textContent.length - 1) === range.startOffset) ?
                    nodeCutter.SplitNode(range, formatNode, true)
                    : nodeCutter.GetSpliceNode(range, formatNode);
            }
            if (!isCursor) {
                while (cloneNode && cloneNode.childNodes.length > 0 && ((nodeIndex.length - 1) >= 0)
                    && (cloneNode.childNodes.length > nodeIndex[nodeIndex.length - 1])) {
                    cloneNode = cloneNode.childNodes[nodeIndex[nodeIndex.length - 1]];
                    nodeIndex.pop();
                }
                if (nodes[index].nodeName !== 'BR') {
                    if (cloneNode.nodeType === 3 && !(isCursor && cloneNode.nodeValue === '')) {
                        nodes[index] = cloneNode;
                    }
                    else {
                        const divNode = document.createElement('div');
                        divNode.innerHTML = '&#8203;';
                        if (cloneNode.nodeType !== 3) {
                            cloneNode.insertBefore(divNode.firstChild, cloneNode.firstChild);
                            nodes[index] = cloneNode.firstChild;
                        }
                        else {
                            cloneNode.parentNode.insertBefore(divNode.firstChild, cloneNode);
                            nodes[index] = cloneNode.previousSibling;
                            cloneNode.parentNode.removeChild(cloneNode);
                        }
                    }
                }
            }
            else {
                let lastNode = splitNode;
                for (; lastNode.firstChild !== null && lastNode.firstChild.nodeType !== 3; null) {
                    lastNode = lastNode.firstChild;
                }
                lastNode.innerHTML = '&#8203;';
                nodes[index] = lastNode.firstChild;
            }
        }
        let fontStyle;
        if (format === 'backgroundcolor') {
            fontStyle = formatNode.style.fontSize;
        }
        let bgStyle;
        if (format === 'fontsize') {
            const bg = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(nodes[index].parentElement, 'span[style*=' + 'background-color' + ']');
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(bg)) {
                bgStyle = bg.style.backgroundColor;
            }
        }
        const formatNodeStyles = formatNode.getAttribute('style');
        const formatNodeTagName = formatNode.tagName;
        const child = InsertMethods.unwrap(formatNode);
        if (child[0] && !isFontStyle) {
            let nodeTraverse = child[index] ? child[index] : child[0];
            const textNode = nodeTraverse;
            for (; nodeTraverse && nodeTraverse.parentElement && nodeTraverse.parentElement !== endNode; 
            // eslint-disable-next-line
            nodeTraverse = nodeTraverse) {
                if (nodeTraverse.parentElement && nodeTraverse.parentElement.tagName.toLocaleLowerCase()
                    === formatNode.tagName.toLocaleLowerCase() &&
                    (nodeTraverse.parentElement.childElementCount > 1 || range.startOffset > 1)) {
                    if (textNode.parentElement && textNode.parentElement.tagName.toLocaleLowerCase()
                        === formatNode.tagName.toLocaleLowerCase()) {
                        if ((range.startOffset === range.endOffset) && textNode.nodeType !== 1 &&
                            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(textNode.textContent) && textNode.parentElement.childElementCount > 1) {
                            range.setStart(textNode, 0);
                            range.setEnd(textNode, textNode.textContent.length);
                            nodeCutter.SplitNode(range, textNode.parentElement, false);
                        }
                    }
                    if (nodeTraverse.parentElement.tagName.toLocaleLowerCase() === 'span') {
                        if (formatNode.style.textDecoration === 'underline' &&
                            nodeTraverse.parentElement.style.textDecoration !== 'underline') {
                            nodeTraverse = nodeTraverse.parentElement;
                            continue;
                        }
                    }
                    InsertMethods.unwrap(nodeTraverse.parentElement);
                    nodeTraverse = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(nodeTraverse.parentElement) && !domNode.isBlockNode(nodeTraverse.parentElement) ? textNode :
                        nodeTraverse.parentElement;
                }
                else {
                    nodeTraverse = nodeTraverse.parentElement;
                }
            }
        }
        if (child.length > 0 && isFontStyle) {
            for (let num = 0; num < child.length; num++) {
                if (child[num].nodeType !== 3 || (child[num].textContent && child[num].textContent.trim().length > 0)) {
                    child[num] = InsertMethods.Wrap(child[num], this.GetFormatNode(format, value, formatNodeTagName, formatNodeStyles));
                    if (child[num].textContent === startText) {
                        if (num === 0) {
                            range.setStartBefore(child[num]);
                        }
                        else if (num === child.length - 1) {
                            range.setEndAfter(child[num]);
                        }
                    }
                }
            }
            const currentNodeElem = nodes[index].parentElement;
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fontStyle) && fontStyle !== '') {
                currentNodeElem.style.fontSize = fontStyle;
            }
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(bgStyle) && bgStyle !== '') {
                currentNodeElem.style.backgroundColor = bgStyle;
            }
            if ((format === 'backgroundcolor' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fontStyle) && fontStyle !== '') &&
                currentNodeElem.parentElement.innerHTML === currentNodeElem.outerHTML) {
                const curParentElem = currentNodeElem.parentElement;
                curParentElem.parentElement.insertBefore(currentNodeElem, curParentElem);
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(curParentElem);
            }
            if (format === 'fontsize' || format === 'fontcolor') {
                let liElement = nodes[index].parentElement;
                let parentElement = nodes[index].parentElement;
                while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parentElement) && parentElement.tagName.toLowerCase() !== 'li') {
                    parentElement = parentElement.parentElement;
                    liElement = parentElement;
                }
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(liElement) && liElement.tagName.toLowerCase() === 'li' &&
                    liElement.textContent.trim() === nodes[index].textContent.trim()) {
                    if (format === 'fontsize') {
                        liElement.style.fontSize = value;
                    }
                    else {
                        liElement.style.color = value;
                        liElement.style.textDecoration = 'inherit';
                    }
                }
            }
        }
        return nodes[index];
    }
    static insertFormat(docElement, nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value) {
        if (!isCursor) {
            if ((formatNode === null && isFormat) || isFontStyle) {
                if (nodes[index].nodeName !== 'BR') {
                    nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);
                    nodes[index].textContent = nodeCutter.TrimLineBreak(nodes[index].textContent);
                }
                if (format === 'uppercase' || format === 'lowercase') {
                    nodes[index].textContent = (format === 'uppercase') ? nodes[index].textContent.toLocaleUpperCase()
                        : nodes[index].textContent.toLocaleLowerCase();
                }
                else if (!(isFontStyle === true && value === '')) {
                    const element = this.GetFormatNode(format, value);
                    if (format === 'fontsize' || format === 'fontcolor') {
                        let liElement = nodes[index].parentElement;
                        let parentElement = nodes[index].parentElement;
                        while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parentElement) && parentElement.tagName.toLowerCase() !== 'li') {
                            parentElement = parentElement.parentElement;
                            liElement = parentElement;
                        }
                        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(liElement) && liElement.tagName.toLowerCase() === 'li' &&
                            liElement.textContent.trim() === nodes[index].textContent.trim()) {
                            if (format === 'fontsize') {
                                liElement.style.fontSize = value;
                            }
                            else {
                                liElement.style.color = value;
                                liElement.style.textDecoration = 'inherit';
                            }
                        }
                        nodes[index] = this.applyStyles(nodes, index, element);
                        if (format === 'fontsize') {
                            const bg = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(nodes[index].parentElement, 'span[style*=' + 'background-color' + ']');
                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(bg)) {
                                nodes[index].parentElement.style.backgroundColor = bg.style.backgroundColor;
                            }
                        }
                    }
                    else {
                        nodes[index] = this.applyStyles(nodes, index, element);
                    }
                }
            }
            else {
                nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);
            }
        }
        else {
            if (format !== 'uppercase' && format !== 'lowercase') {
                const element = this.getInsertNode(docElement, range, format, value);
                nodes[index] = element.firstChild;
                nodeCutter.position = 1;
            }
            else {
                nodeCutter.position = range.startOffset;
            }
        }
        return nodes[index];
    }
    static applyStyles(nodes, index, element) {
        if (!(nodes[index].nodeName === 'BR' && this.enterAction === 'BR')) {
            nodes[index] = (index === (nodes.length - 1)) || nodes[index].nodeName === 'BR' ?
                InsertMethods.Wrap(nodes[index], element)
                : InsertMethods.WrapBefore(nodes[index], element, true);
            nodes[index] = this.getChildNode(nodes[index], element);
        }
        return nodes[index];
    }
    static getInsertNode(docElement, range, format, value) {
        const element = this.GetFormatNode(format, value);
        element.innerHTML = '&#8203;';
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE) {
            const frag = docElement.createDocumentFragment();
            frag.appendChild(element);
            range.insertNode(frag);
        }
        else {
            range.insertNode(element);
        }
        return element;
    }
    static getChildNode(node, element) {
        if (node === undefined || node === null) {
            element.innerHTML = '&#8203;';
            node = element.firstChild;
        }
        return node;
    }
    static applySelection(nodes, domSelection, nodeCutter, index, isCollapsed) {
        if (nodes.length === 1 && !isCollapsed) {
            domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);
            domSelection.endContainer = domSelection.startContainer;
            domSelection.startOffset = 0;
            domSelection.endOffset = nodes[index].textContent.length;
        }
        else if (nodes.length === 1 && isCollapsed) {
            domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);
            domSelection.endContainer = domSelection.startContainer;
            domSelection.startOffset = nodeCutter.position;
            domSelection.endOffset = nodeCutter.position;
        }
        else if (index === 0) {
            domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);
            domSelection.startOffset = 0;
        }
        else if (index === nodes.length - 1) {
            domSelection.endContainer = domSelection.getNodeArray(nodes[index], false);
            domSelection.endOffset = nodes[index].textContent.length;
        }
        return domSelection;
    }
    static GetFormatNode(format, value, tagName, styles) {
        let node;
        switch (format) {
            case 'bold':
                return document.createElement('strong');
            case 'italic':
                return document.createElement('em');
            case 'underline':
                node = document.createElement('span');
                this.updateStyles(node, tagName, styles);
                node.style.textDecoration = 'underline';
                return node;
            case 'strikethrough':
                node = document.createElement('span');
                this.updateStyles(node, tagName, styles);
                node.style.textDecoration = 'line-through';
                return node;
            case 'superscript':
                return document.createElement('sup');
            case 'subscript':
                return document.createElement('sub');
            case 'fontcolor':
                node = document.createElement('span');
                this.updateStyles(node, tagName, styles);
                node.style.color = value;
                node.style.textDecoration = 'inherit';
                return node;
            case 'fontname':
                node = document.createElement('span');
                this.updateStyles(node, tagName, styles);
                node.style.fontFamily = value;
                return node;
            case 'fontsize':
                node = document.createElement('span');
                this.updateStyles(node, tagName, styles);
                node.style.fontSize = value;
                return node;
            default:
                node = document.createElement('span');
                this.updateStyles(node, tagName, styles);
                node.style.backgroundColor = value;
                return node;
        }
    }
    static updateStyles(ele, tag, styles) {
        if (styles !== null && tag === 'SPAN') {
            ele.setAttribute('style', styles);
        }
    }
}
SelectionCommands.enterAction = 'P';

/**
 * Selection EXEC internal component
 *
 * @hidden
 * @deprecated
 */
class SelectionBasedExec {
    /**
     * Constructor for creating the Formats plugin
     *
     * @param {EditorManager} parent - specifies the parent element
     * @hidden
     * @deprecated
     */
    constructor(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    addEventListener() {
        this.parent.observer.on(SELECTION_TYPE, this.applySelection, this);
        this.parent.observer.on(KEY_DOWN_HANDLER, this.keyDownHandler, this);
    }
    keyDownHandler(e) {
        const validFormats = ['bold', 'italic', 'underline', 'strikethrough', 'superscript',
            'subscript', 'uppercase', 'lowercase'];
        if (e.event.ctrlKey && validFormats.indexOf(e.event.action) > -1) {
            e.event.preventDefault();
            SelectionCommands.applyFormat(this.parent.currentDocument, e.event.action, this.parent.editableElement, e.enterAction);
            this.callBack(e, e.event.action);
        }
    }
    applySelection(e) {
        SelectionCommands.applyFormat(this.parent.currentDocument, e.subCommand.toLocaleLowerCase(), this.parent.editableElement, e.enterAction, e.value, e.selector);
        this.callBack(e, e.subCommand);
    }
    callBack(event, action) {
        if (event.callBack) {
            event.callBack({
                requestType: action,
                event: event.event,
                editorMode: 'HTML',
                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
            });
        }
    }
}

/**
 * Selection EXEC internal component
 *
 * @hidden
 * @deprecated
 */
class InsertHtmlExec {
    /**
     * Constructor for creating the Formats plugin
     *
     * @param {EditorManager} parent - sepcifies the parent element
     * @hidden
     * @deprecated
     */
    constructor(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    addEventListener() {
        this.parent.observer.on(INSERTHTML_TYPE, this.applyHtml, this);
    }
    applyHtml(e) {
        InsertHtml.Insert(this.parent.currentDocument, e.value, this.parent.editableElement, true);
        if (e.subCommand === 'pasteCleanup') {
            const pastedElements = this.parent.editableElement.querySelectorAll('.pasteContent_RTE');
            const allPastedElements = [].slice.call(pastedElements);
            const imgElements = this.parent.editableElement.querySelectorAll('.pasteContent_Img');
            const allImgElm = [].slice.call(imgElements);
            e.callBack({
                requestType: e.subCommand,
                editorMode: 'HTML',
                elements: allPastedElements,
                imgElem: allImgElm
            });
        }
        else {
            if (e.callBack) {
                e.callBack({
                    requestType: e.subCommand,
                    editorMode: 'HTML',
                    event: e.event,
                    range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                    elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                });
            }
        }
    }
}

/**
 * `Clear Format` module is used to handle Clear Format.
 */
class ClearFormat$1 {
    /**
     * clear method
     *
     * @param {Document} docElement - specifies the document element.
     * @param {Node} endNode - specifies the end node
     * @param {string} enterAction - specifies the enter key action
     * @param {string} selector - specifies the string value
     * @returns {void}
     * @hidden
     * @deprecated
     */
    static clear(docElement, endNode, enterAction, selector) {
        this.domNode = new DOMNode(endNode, docElement);
        this.defaultTag = enterAction === 'P' ? this.defaultTag : 'div';
        const nodeSelection = new NodeSelection();
        const nodeCutter = new NodeCutter();
        let range = nodeSelection.getRange(docElement);
        const isCollapsed = range.collapsed;
        const nodes = nodeSelection.getInsertNodeCollection(range);
        const save = nodeSelection.save(range, docElement);
        if (!isCollapsed) {
            let preNode;
            if (nodes[0].nodeName === 'BR' && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(nodes[0], 'table')) {
                preNode = nodeCutter.GetSpliceNode(range, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(nodes[0], 'table'));
            }
            else {
                preNode = nodeCutter.GetSpliceNode(range, nodes[nodes.length > 1 && nodes[0].nodeName === 'IMG' ? 1 : 0]);
            }
            if (nodes.length === 1) {
                nodeSelection.setSelectionContents(docElement, preNode);
                range = nodeSelection.getRange(docElement);
            }
            else {
                let i = 1;
                let lastText = nodes[nodes.length - i];
                while (nodes.length <= i && nodes[nodes.length - i].nodeName === 'BR') {
                    i++;
                    lastText = nodes[nodes.length - i];
                }
                const lasNode = nodeCutter.GetSpliceNode(range, lastText);
                nodeSelection.setSelectionText(docElement, preNode, lasNode, 0, (lasNode.nodeType === 3) ?
                    lasNode.textContent.length : lasNode.childNodes.length);
                range = nodeSelection.getRange(docElement);
            }
            let exactNodes = nodeSelection.getNodeCollection(range);
            const cloneSelectNodes = exactNodes.slice();
            this.clearInlines(nodeSelection.getSelectionNodes(cloneSelectNodes), cloneSelectNodes, nodeSelection.getRange(docElement), nodeCutter, endNode);
            this.reSelection(docElement, save, exactNodes);
            range = nodeSelection.getRange(docElement);
            exactNodes = nodeSelection.getNodeCollection(range);
            const cloneParentNodes = exactNodes.slice();
            this.clearBlocks(docElement, cloneParentNodes, endNode, nodeCutter, nodeSelection);
            if (isIDevice$1()) {
                setEditFrameFocus(endNode, selector);
            }
            this.reSelection(docElement, save, exactNodes);
        }
    }
    static reSelection(docElement, save, exactNodes) {
        const selectionNodes = save.getInsertNodes(exactNodes);
        save.startContainer = save.getNodeArray(selectionNodes[0], true, docElement);
        save.startOffset = 0;
        save.endContainer = save.getNodeArray(selectionNodes[selectionNodes.length - 1], false, docElement);
        const endIndexNode = selectionNodes[selectionNodes.length - 1];
        save.endOffset = (endIndexNode.nodeType === 3) ? endIndexNode.textContent.length
            : endIndexNode.childNodes.length;
        save.restore();
    }
    static clearBlocks(docElement, nodes, endNode, nodeCutter, nodeSelection) {
        let parentNodes = [];
        for (let index = 0; index < nodes.length; index++) {
            if (this.BLOCK_TAGS.indexOf(nodes[index].nodeName.toLocaleLowerCase()) > -1
                && parentNodes.indexOf(nodes[index]) === -1) {
                parentNodes.push(nodes[index]);
            }
            else if ((this.BLOCK_TAGS.indexOf(nodes[index].parentNode.nodeName.toLocaleLowerCase()) > -1)
                && parentNodes.indexOf(nodes[index].parentNode) === -1
                && endNode !== nodes[index].parentNode) {
                parentNodes.push(nodes[index].parentNode);
            }
        }
        parentNodes = this.spliceParent(parentNodes, nodes)[0];
        parentNodes = this.removeParent(parentNodes);
        this.unWrap(docElement, parentNodes, nodeCutter, nodeSelection);
    }
    static spliceParent(parentNodes, nodes) {
        for (let index1 = 0; index1 < parentNodes.length; index1++) {
            const len = parentNodes[index1].childNodes.length;
            for (let index2 = 0; index2 < len; index2++) {
                if ((nodes.indexOf(parentNodes[index1].childNodes[index2]) > 0)
                    && (parentNodes[index1].childNodes[index2].childNodes.length > 0)) {
                    nodes = this.spliceParent([parentNodes[index1].childNodes[index2]], nodes)[1];
                }
                if ((nodes.indexOf(parentNodes[index1].childNodes[index2]) <= -1) &&
                    (parentNodes[index1].childNodes[index2].textContent.trim() !== '')) {
                    for (let index3 = 0; index3 < len; index3++) {
                        if (nodes.indexOf(parentNodes[index1].childNodes[index3]) > -1) {
                            nodes.splice(nodes.indexOf(parentNodes[index1].childNodes[index3]), 1);
                        }
                    }
                    index2 = parentNodes[index1].childNodes.length;
                    const parentIndex = parentNodes.indexOf(parentNodes[index1].parentNode);
                    const nodeIndex = nodes.indexOf(parentNodes[index1].parentNode);
                    if (parentIndex > -1) {
                        parentNodes.splice(parentIndex, 1);
                    }
                    if (nodeIndex > -1) {
                        nodes.splice(nodeIndex, 1);
                    }
                    const elementIndex = nodes.indexOf(parentNodes[index1]);
                    if (elementIndex > -1) {
                        nodes.splice(elementIndex, 1);
                    }
                    parentNodes.splice(index1, 1);
                    index1--;
                }
            }
        }
        return [parentNodes, nodes];
    }
    static removeChild(parentNodes, parentNode) {
        const count = parentNode.childNodes.length;
        if (count > 0) {
            for (let index = 0; index < count; index++) {
                if (parentNodes.indexOf(parentNode.childNodes[index]) > -1) {
                    parentNodes = this.removeChild(parentNodes, parentNode.childNodes[index]);
                    parentNodes.splice(parentNodes.indexOf(parentNode.childNodes[index]), 1);
                }
            }
        }
        return parentNodes;
    }
    static removeParent(parentNodes) {
        for (let index = 0; index < parentNodes.length; index++) {
            if (parentNodes.indexOf(parentNodes[index].parentNode) > -1) {
                parentNodes = this.removeChild(parentNodes, parentNodes[index]);
                parentNodes.splice(index, 1);
                index--;
            }
        }
        return parentNodes;
    }
    static unWrap(docElement, parentNodes, nodeCutter, nodeSelection) {
        for (let index1 = 0; index1 < parentNodes.length; index1++) {
            if (this.NONVALID_TAGS.indexOf(parentNodes[index1].nodeName.toLowerCase()) > -1
                && parentNodes[index1].parentNode
                && this.NONVALID_PARENT_TAGS.indexOf(parentNodes[index1].parentNode.nodeName.toLowerCase()) > -1) {
                nodeSelection.setSelectionText(docElement, parentNodes[index1], parentNodes[index1], 0, parentNodes[index1].childNodes.length);
                InsertMethods.unwrap(nodeCutter.GetSpliceNode(nodeSelection.getRange(docElement), parentNodes[index1].parentNode));
            }
            if (parentNodes[index1].nodeName.toLocaleLowerCase() !== 'p') {
                if (this.NONVALID_PARENT_TAGS.indexOf(parentNodes[index1].nodeName.toLowerCase()) < 0
                    && parentNodes[index1].parentNode.nodeName.toLocaleLowerCase() !== 'p'
                    && !((parentNodes[index1].nodeName.toLocaleLowerCase() === 'blockquote'
                        || parentNodes[index1].nodeName.toLocaleLowerCase() === 'li')
                        && this.IGNORE_PARENT_TAGS.indexOf(parentNodes[index1].childNodes[0].nodeName.toLocaleLowerCase()) > -1)
                    && !(parentNodes[index1].childNodes.length === 1
                        && parentNodes[index1].childNodes[0].nodeName.toLocaleLowerCase() === 'p')) {
                    InsertMethods.Wrap(parentNodes[index1], docElement.createElement(this.defaultTag));
                }
                const childNodes = InsertMethods.unwrap(parentNodes[index1]);
                if (childNodes.length === 1
                    && childNodes[0].parentNode.nodeName.toLocaleLowerCase() === 'p') {
                    InsertMethods.Wrap(parentNodes[index1], docElement.createElement(this.defaultTag));
                    InsertMethods.unwrap(parentNodes[index1]);
                }
                for (let index2 = 0; index2 < childNodes.length; index2++) {
                    if (this.NONVALID_TAGS.indexOf(childNodes[index2].nodeName.toLowerCase()) > -1) {
                        this.unWrap(docElement, [childNodes[index2]], nodeCutter, nodeSelection);
                    }
                    else if (this.BLOCK_TAGS.indexOf(childNodes[index2].nodeName.toLocaleLowerCase()) > -1 &&
                        childNodes[index2].nodeName.toLocaleLowerCase() !== 'p') {
                        const blockNodes = this.removeParent([childNodes[index2]]);
                        this.unWrap(docElement, blockNodes, nodeCutter, nodeSelection);
                    }
                    else if (this.BLOCK_TAGS.indexOf(childNodes[index2].nodeName.toLocaleLowerCase()) > -1 &&
                        childNodes[index2].parentNode.nodeName.toLocaleLowerCase() === childNodes[index2].nodeName.toLocaleLowerCase()) {
                        InsertMethods.unwrap(childNodes[index2]);
                    }
                    else if (this.BLOCK_TAGS.indexOf(childNodes[index2].nodeName.toLocaleLowerCase()) > -1 &&
                        childNodes[index2].nodeName.toLocaleLowerCase() === 'p') {
                        InsertMethods.Wrap(childNodes[index2], docElement.createElement(this.defaultTag));
                        InsertMethods.unwrap(childNodes[index2]);
                    }
                }
            }
            else {
                InsertMethods.Wrap(parentNodes[index1], docElement.createElement(this.defaultTag));
                InsertMethods.unwrap(parentNodes[index1]);
            }
        }
    }
    static clearInlines(textNodes, nodes, range, nodeCutter, 
    // eslint-disable-next-line
    endNode) {
        for (let index = 0; index < textNodes.length; index++) {
            let currentInlineNode = textNodes[index];
            let currentNode;
            while (!this.domNode.isBlockNode(currentInlineNode)) {
                currentNode = currentInlineNode;
                currentInlineNode = currentInlineNode.parentElement;
            }
            if (currentNode &&
                IsFormatted.inlineTags.indexOf(currentNode.nodeName.toLocaleLowerCase()) > -1) {
                nodeCutter.GetSpliceNode(range, currentNode);
                this.removeInlineParent(currentNode);
            }
        }
    }
    static removeInlineParent(textNodes) {
        const nodes = InsertMethods.unwrap(textNodes);
        for (let index = 0; index < nodes.length; index++) {
            if (nodes[index].parentNode.childNodes.length === 1
                && IsFormatted.inlineTags.indexOf(nodes[index].parentNode.nodeName.toLocaleLowerCase()) > -1) {
                this.removeInlineParent(nodes[index].parentNode);
            }
            else if (IsFormatted.inlineTags.indexOf(nodes[index].nodeName.toLocaleLowerCase()) > -1) {
                this.removeInlineParent(nodes[index]);
            }
        }
    }
}
ClearFormat$1.BLOCK_TAGS = ['address', 'article', 'aside', 'blockquote',
    'details', 'dd', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer',
    'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'li', 'main', 'nav',
    'noscript', 'ol', 'p', 'pre', 'section', 'ul'];
ClearFormat$1.NONVALID_PARENT_TAGS = ['thead', 'tbody', 'ul', 'ol', 'table', 'tfoot', 'tr'];
ClearFormat$1.IGNORE_PARENT_TAGS = ['ul', 'ol', 'table'];
ClearFormat$1.NONVALID_TAGS = ['thead', 'tbody', 'figcaption', 'td', 'tr', 'th', 'tfoot', 'figcaption', 'li'];
ClearFormat$1.defaultTag = 'p';

/**
 * Clear Format EXEC internal component
 *
 * @hidden
 * @deprecated
 */
class ClearFormatExec {
    /**
     * Constructor for creating the Formats plugin
     *
     * @param {EditorManager} parent - specifies the parent element.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    constructor(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    addEventListener() {
        this.parent.observer.on(CLEAR_TYPE, this.applyClear, this);
        this.parent.observer.on(KEY_DOWN_HANDLER, this.onKeyDown, this);
    }
    onKeyDown(e) {
        switch (e.event.action) {
            case 'clear-format':
                this.applyClear({ subCommand: 'ClearFormat', callBack: e.callBack, enterAction: e.enterAction });
                e.event.preventDefault();
                break;
        }
    }
    applyClear(e) {
        if (e.subCommand === 'ClearFormat') {
            ClearFormat$1.clear(this.parent.currentDocument, this.parent.editableElement, e.enterAction, e.selector);
            if (e.callBack) {
                e.callBack({
                    requestType: e.subCommand,
                    event: e.event,
                    editorMode: 'HTML',
                    range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                    elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
                });
            }
        }
    }
}

/**
 * `Undo` module is used to handle undo actions.
 */
class UndoRedoManager {
    constructor(parent, options) {
        this.undoRedoStack = [];
        this.parent = parent;
        this.undoRedoSteps = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options) ? options.undoRedoSteps : 30;
        this.undoRedoTimer = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(options) ? options.undoRedoTimer : 300;
        this.addEventListener();
    }
    addEventListener() {
        const debounceListener = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.debounce)(this.keyUp, this.undoRedoTimer);
        this.parent.observer.on(KEY_UP_HANDLER, debounceListener, this);
        this.parent.observer.on(KEY_DOWN_HANDLER, this.keyDown, this);
        this.parent.observer.on(ACTION, this.onAction, this);
        this.parent.observer.on(MODEL_CHANGED_PLUGIN, this.onPropertyChanged, this);
    }
    onPropertyChanged(props) {
        for (const prop of Object.keys(props.newProp)) {
            switch (prop) {
                case 'undoRedoSteps':
                    this.undoRedoSteps = props.newProp.undoRedoSteps;
                    break;
                case 'undoRedoTimer':
                    this.undoRedoTimer = props.newProp.undoRedoTimer;
                    break;
            }
        }
    }
    removeEventListener() {
        this.parent.observer.off(KEY_UP_HANDLER, this.keyUp);
        this.parent.observer.off(KEY_DOWN_HANDLER, this.keyDown);
        this.parent.observer.off(ACTION, this.onAction);
    }
    /**
     * onAction method
     *
     * @param {IHtmlSubCommands} e - specifies the sub command
     * @returns {void}
     * @hidden
     * @deprecated
     */
    onAction(e) {
        if (e.subCommand === 'Undo') {
            this.undo(e);
        }
        else {
            this.redo(e);
        }
    }
    /**
     * Destroys the ToolBar.
     *
     * @function destroy
     * @returns {void}
     * @hidden
     * @deprecated
     */
    destroy() {
        this.removeEventListener();
    }
    keyDown(e) {
        const event = e.event;
        // eslint-disable-next-line
        const proxy = this;
        switch (event.action) {
            case 'undo':
                event.preventDefault();
                proxy.undo(e);
                break;
            case 'redo':
                event.preventDefault();
                proxy.redo(e);
                break;
        }
    }
    keyUp(e) {
        if (e.event.keyCode !== 17 && !e.event.ctrlKey) {
            this.saveData(e);
        }
    }
    /**
     * RTE collection stored html format.
     *
     * @function saveData
     * @param {KeyboardEvent} e - specifies the keyboard event
     * @returns {void}
     * @hidden
     * @deprecated
     */
    saveData(e) {
        let range = new NodeSelection().getRange(this.parent.currentDocument);
        let currentContainer = range.startContainer;
        for (let i = currentContainer.childNodes.length - 1; i >= 0; i--) {
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentContainer.childNodes[i]) && currentContainer.childNodes[i].nodeName === '#text' &&
                currentContainer.childNodes[i].textContent.length === 0 && currentContainer.childNodes[i].nodeName !== 'IMG' &&
                currentContainer.childNodes[i].nodeName !== 'BR' && currentContainer.childNodes[i].nodeName && 'HR') {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(currentContainer.childNodes[i]);
            }
        }
        range = new NodeSelection().getRange(this.parent.currentDocument);
        const save = new NodeSelection().save(range, this.parent.currentDocument);
        const htmlText = this.parent.editableElement.innerHTML;
        const changEle = { text: htmlText, range: save };
        if (this.undoRedoStack.length >= this.steps) {
            this.undoRedoStack = this.undoRedoStack.slice(0, this.steps + 1);
        }
        if (this.undoRedoStack.length > 1 && (this.undoRedoStack[this.undoRedoStack.length - 1].range.range.collapsed === range.collapsed)
            && (this.undoRedoStack[this.undoRedoStack.length - 1].range.startOffset === save.range.startOffset) &&
            (this.undoRedoStack[this.undoRedoStack.length - 1].range.endOffset === save.range.endOffset) &&
            (this.undoRedoStack[this.undoRedoStack.length - 1].range.range.startContainer === save.range.startContainer) &&
            (this.undoRedoStack[this.undoRedoStack.length - 1].text.trim() === changEle.text.trim())) {
            return;
        }
        this.undoRedoStack.push(changEle);
        this.steps = this.undoRedoStack.length - 1;
        if (this.steps > this.undoRedoSteps) {
            this.undoRedoStack.shift();
            this.steps--;
        }
        if (e && e.callBack) {
            e.callBack();
        }
    }
    /**
     * Undo the editable text.
     *
     * @function undo
     * @param {IHtmlSubCommands} e - specifies the sub commands
     * @returns {void}
     * @hidden
     * @deprecated
     */
    undo(e) {
        if (this.steps > 0) {
            const range = this.undoRedoStack[this.steps - 1].range;
            const removedContent = this.undoRedoStack[this.steps - 1].text;
            this.parent.editableElement.innerHTML = removedContent;
            this.parent.editableElement.focus();
            if (isIDevice$1()) {
                setEditFrameFocus(this.parent.editableElement, e.selector);
            }
            range.restore();
            this.steps--;
            if (e.callBack) {
                e.callBack({
                    requestType: 'Undo',
                    editorMode: 'HTML',
                    range: range,
                    elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument),
                    event: e.event
                });
            }
        }
    }
    /**
     * Redo the editable text.
     *
     * @param {IHtmlSubCommands} e - specifies the sub commands
     * @function redo
     * @returns {void}
     * @hidden
     * @deprecated
     */
    redo(e) {
        if (this.undoRedoStack[this.steps + 1] != null) {
            const range = this.undoRedoStack[this.steps + 1].range;
            this.parent.editableElement.innerHTML = this.undoRedoStack[this.steps + 1].text;
            this.parent.editableElement.focus();
            if (isIDevice$1()) {
                setEditFrameFocus(this.parent.editableElement, e.selector);
            }
            range.restore();
            this.steps++;
            if (e.callBack) {
                e.callBack({
                    requestType: 'Redo',
                    editorMode: 'HTML',
                    range: range,
                    elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument),
                    event: e.event
                });
            }
        }
    }
    /**
     * getUndoStatus method
     *
     * @returns {boolean} - returns the boolean value
     * @hidden
     * @deprecated
     */
    getUndoStatus() {
        const status = { undo: false, redo: false };
        if (this.steps > 0) {
            status.undo = true;
        }
        if (this.undoRedoStack[this.steps + 1] != null) {
            status.redo = true;
        }
        return status;
    }
}

/**
 * PasteCleanup for MsWord content
 *
 * @hidden
 * @deprecated
 */
class MsWordPaste {
    constructor(parent) {
        this.olData = [
            'decimal',
            'lower-alpha',
            'lower-roman',
            'upper-alpha',
            'upper-roman',
            'lower-greek'
        ];
        this.ulData = [
            'disc',
            'square',
            'circle',
            'disc',
            'square',
            'circle'
        ];
        this.ignorableNodes = ['A', 'APPLET', 'B', 'BLOCKQUOTE', 'BR',
            'BUTTON', 'CENTER', 'CODE', 'COL', 'COLGROUP', 'DD', 'DEL', 'DFN', 'DIR', 'DIV',
            'DL', 'DT', 'EM', 'FIELDSET', 'FONT', 'FORM', 'FRAME', 'FRAMESET', 'H1', 'H2',
            'H3', 'H4', 'H5', 'H6', 'HR', 'I', 'IMG', 'IFRAME', 'INPUT', 'INS', 'LABEL',
            'LI', 'OL', 'OPTION', 'P', 'PARAM', 'PRE', 'Q', 'S', 'SELECT', 'SPAN', 'STRIKE',
            'STRONG', 'SUB', 'SUP', 'TABLE', 'TBODY', 'TD', 'TEXTAREA', 'TFOOT', 'TH',
            'THEAD', 'TITLE', 'TR', 'TT', 'U', 'UL'];
        this.blockNode = ['div', 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
            'address', 'blockquote', 'button', 'center', 'dd', 'dir', 'dl', 'dt', 'fieldset',
            'frameset', 'hr', 'iframe', 'isindex', 'li', 'map', 'menu', 'noframes', 'noscript',
            'object', 'ol', 'pre', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'ul',
            'header', 'article', 'nav', 'footer', 'section', 'aside', 'main', 'figure', 'figcaption'];
        this.borderStyle = ['border-top', 'border-right', 'border-bottom', 'border-left'];
        this.removableElements = ['o:p', 'style'];
        this.listContents = [];
        this.parent = parent;
        this.addEventListener();
    }
    addEventListener() {
        this.parent.observer.on(MS_WORD_CLEANUP_PLUGIN, this.wordCleanup, this);
    }
    wordCleanup(e) {
        const wordPasteStyleConfig = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.allowedStylePropertiesArray) ? e.allowedStylePropertiesArray : [];
        let listNodes = [];
        let tempHTMLContent = e.args.clipboardData.getData('text/HTML');
        const rtfData = e.args.clipboardData.getData('text/rtf');
        const elm = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('p');
        elm.setAttribute('id', 'MSWord-Content');
        elm.innerHTML = tempHTMLContent;
        const patern = /class='?Mso|style='[^ ]*\bmso-/i;
        const patern2 = /class="?Mso|style="[^ ]*\bmso-/i;
        const patern3 = /(class="?Mso|class='?Mso|class="?Xl|class='?Xl|class=Xl|style="[^"]*\bmso-|style='[^']*\bmso-|w:WordDocument)/gi;
        const pattern4 = /style='mso-width-source:/i;
        if (patern.test(tempHTMLContent) || patern2.test(tempHTMLContent) || patern3.test(tempHTMLContent) ||
            pattern4.test(tempHTMLContent)) {
            this.imageConversion(elm, rtfData);
            tempHTMLContent = tempHTMLContent.replace(/<img[^>]+>/i, '');
            this.addListClass(elm);
            listNodes = this.cleanUp(elm, listNodes);
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(listNodes[0]) && listNodes[0].parentElement.tagName !== 'UL' &&
                listNodes[0].parentElement.tagName !== 'OL') {
                this.listConverter(listNodes);
            }
            this.styleCorrection(elm, wordPasteStyleConfig);
            this.removingComments(elm);
            this.removeUnwantedElements(elm);
            this.removeEmptyElements(elm);
            this.breakLineAddition(elm);
            this.removeClassName(elm);
            if (pattern4.test(tempHTMLContent)) {
                this.addTableBorderClass(elm);
            }
            e.callBack(elm.innerHTML);
        }
        else {
            e.callBack(elm.innerHTML);
        }
    }
    addListClass(elm) {
        const allNodes = elm.querySelectorAll('*');
        for (let index = 0; index < allNodes.length; index++) {
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(allNodes[index].getAttribute('style')) && allNodes[index].getAttribute('style').replace(/ /g, '').replace('\n', '').indexOf('mso-list:l') >= 0 &&
                allNodes[index].className.toLowerCase().indexOf('msolistparagraph') === -1 && allNodes[index].tagName.charAt(0) !== 'H') {
                allNodes[index].classList.add('msolistparagraph');
            }
        }
    }
    addTableBorderClass(elm) {
        const allTableElm = elm.querySelectorAll('table');
        let hasTableBorder = false;
        for (let i = 0; i < allTableElm.length; i++) {
            for (let j = 0; j < this.borderStyle.length; j++) {
                if (allTableElm[i].innerHTML.indexOf(this.borderStyle[j]) >= 0) {
                    hasTableBorder = true;
                    break;
                }
            }
            if (hasTableBorder) {
                allTableElm[i].classList.add('e-rte-table-border');
                hasTableBorder = false;
            }
        }
    }
    imageConversion(elm, rtfData) {
        this.checkVShape(elm);
        const imgElem = elm.querySelectorAll('img');
        const imgSrc = [];
        const base64Src = [];
        const imgName = [];
        // eslint-disable-next-line
        const linkRegex = new RegExp(/([^\S]|^)(((https?\:\/\/)|(www\.))(\S+))/gi);
        if (imgElem.length > 0) {
            for (let i = 0; i < imgElem.length; i++) {
                imgSrc.push(imgElem[i].getAttribute('src'));
                imgName.push(imgElem[i].getAttribute('src').split('/')[imgElem[i].getAttribute('src').split('/').length - 1].split('.')[0]);
            }
            const hexValue = this.hexConversion(rtfData);
            for (let i = 0; i < hexValue.length; i++) {
                base64Src.push(this.convertToBase64(hexValue[i]));
            }
            for (let i = 0; i < imgElem.length; i++) {
                if (imgSrc[i].match(linkRegex)) {
                    imgElem[i].setAttribute('src', imgSrc[i]);
                }
                else {
                    imgElem[i].setAttribute('src', base64Src[i]);
                }
                imgElem[i].setAttribute('id', 'msWordImg-' + imgName[i]);
            }
        }
    }
    checkVShape(elm) {
        const allNodes = elm.querySelectorAll('*');
        for (let i = 0; i < allNodes.length; i++) {
            switch (allNodes[i].nodeName) {
                case 'V:SHAPETYPE':
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(allNodes[i]);
                    break;
                case 'V:SHAPE':
                    if (allNodes[i].firstElementChild.nodeName === 'V:IMAGEDATA') {
                        const src = allNodes[i].firstElementChild.getAttribute('src');
                        const imgElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('img');
                        imgElement.setAttribute('src', src);
                        allNodes[i].parentElement.insertBefore(imgElement, allNodes[i]);
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(allNodes[i]);
                    }
                    break;
            }
        }
    }
    convertToBase64(hexValue) {
        const byteArr = this.conHexStringToBytes(hexValue.hex);
        const base64String = this.conBytesToBase64(byteArr);
        const base64 = hexValue.type ? 'data:' + hexValue.type + ';base64,' + base64String : null;
        return base64;
    }
    conBytesToBase64(byteArr) {
        let base64Str = '';
        const base64Char = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
        const byteArrLen = byteArr.length;
        for (let i = 0; i < byteArrLen; i += 3) {
            const array3 = byteArr.slice(i, i + 3);
            const array3length = array3.length;
            const array4 = [];
            if (array3length < 3) {
                for (let j = array3length; j < 3; j++) {
                    array3[j] = 0;
                }
            }
            array4[0] = (array3[0] & 0xFC) >> 2;
            array4[1] = ((array3[0] & 0x03) << 4) | (array3[1] >> 4);
            array4[2] = ((array3[1] & 0x0F) << 2) | ((array3[2] & 0xC0) >> 6);
            array4[3] = array3[2] & 0x3F;
            for (let j = 0; j < 4; j++) {
                if (j <= array3length) {
                    base64Str += base64Char.charAt(array4[j]);
                }
                else {
                    base64Str += '=';
                }
            }
        }
        return base64Str;
    }
    conHexStringToBytes(hex) {
        const byteArr = [];
        const byteArrLen = hex.length / 2;
        for (let i = 0; i < byteArrLen; i++) {
            byteArr.push(parseInt(hex.substr(i * 2, 2), 16));
        }
        return byteArr;
    }
    hexConversion(rtfData) {
        // eslint-disable-next-line
        const picHead = /\{\\pict[\s\S]+?\\bliptag\-?\d+(\\blipupi\-?\d+)?(\{\\\*\\blipuid\s?[\da-fA-F]+)?[\s\}]*?/;
        const pic = new RegExp('(?:(' + picHead.source + '))([\\da-fA-F\\s]+)\\}', 'g');
        const fullImg = rtfData.match(pic);
        let imgType;
        const result = [];
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(fullImg)) {
            for (let i = 0; i < fullImg.length; i++) {
                if (picHead.test(fullImg[i])) {
                    if (fullImg[i].indexOf('\\pngblip') !== -1) {
                        imgType = 'image/png';
                    }
                    else if (fullImg[i].indexOf('\\jpegblip') !== -1) {
                        imgType = 'image/jpeg';
                    }
                    else {
                        continue;
                    }
                    result.push({
                        hex: imgType ? fullImg[i].replace(picHead, '').replace(/[^\da-fA-F]/g, '') : null,
                        type: imgType
                    });
                }
            }
        }
        return result;
    }
    removeClassName(elm) {
        const elmWithClass = elm.querySelectorAll('*[class]');
        for (let i = 0; i < elmWithClass.length; i++) {
            elmWithClass[i].removeAttribute('class');
        }
    }
    breakLineAddition(elm) {
        const allElements = elm.querySelectorAll('*');
        for (let i = 0; i < allElements.length; i++) {
            if (allElements[i].children.length === 0 && allElements[i].innerHTML === '&nbsp;' &&
                (allElements[i].innerHTML === '&nbsp;' && !allElements[i].closest('li')) &&
                !allElements[i].closest('td')) {
                const detachableElement = this.findDetachElem(allElements[i]);
                const brElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('br');
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(detachableElement.parentElement)) {
                    detachableElement.parentElement.insertBefore(brElement, detachableElement);
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(detachableElement);
                }
            }
        }
    }
    findDetachElem(element) {
        let removableElement;
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element.parentElement) &&
            element.parentElement.textContent.trim() === '' && element.parentElement.tagName !== 'TD' &&
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element.parentElement.querySelector('img'))) {
            removableElement = this.findDetachElem(element.parentElement);
        }
        else {
            removableElement = element;
        }
        return removableElement;
    }
    removeUnwantedElements(elm) {
        let innerElement = elm.innerHTML;
        for (let i = 0; i < this.removableElements.length; i++) {
            const regExpStartElem = new RegExp('<' + this.removableElements[i] + '>', 'g');
            const regExpEndElem = new RegExp('</' + this.removableElements[i] + '>', 'g');
            innerElement = innerElement.replace(regExpStartElem, '');
            innerElement = innerElement.replace(regExpEndElem, '');
        }
        elm.innerHTML = innerElement;
        elm.querySelectorAll(':empty');
    }
    findDetachEmptyElem(element) {
        let removableElement;
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element.parentElement)) {
            if (element.parentElement.textContent.trim() === '' &&
                element.parentElement.getAttribute('id') !== 'MSWord-Content' &&
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element.parentElement.querySelector('img'))) {
                removableElement = this.findDetachEmptyElem(element.parentElement);
            }
            else {
                removableElement = element;
            }
        }
        else {
            removableElement = null;
        }
        return removableElement;
    }
    removeEmptyElements(element) {
        const emptyElements = element.querySelectorAll(':empty');
        for (let i = 0; i < emptyElements.length; i++) {
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(emptyElements[i].closest('td')) &&
                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(emptyElements[i].closest('td').querySelector('.MsoNormal'))) {
                emptyElements[i].innerHTML = '-';
            }
            if (emptyElements[i].tagName !== 'IMG' && emptyElements[i].tagName !== 'BR' &&
                emptyElements[i].tagName !== 'IFRAME' && emptyElements[i].tagName !== 'TD' &&
                emptyElements[i].tagName !== 'HR') {
                const detachableElement = this.findDetachEmptyElem(emptyElements[i]);
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(detachableElement)) {
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(detachableElement);
                }
            }
        }
    }
    styleCorrection(elm, wordPasteStyleConfig) {
        const styleElement = elm.querySelectorAll('style');
        if (styleElement.length > 0) {
            const styles = styleElement[0].innerHTML.match(/[\S ]+\s+{[\s\S]+?}/gi);
            const styleClassObject = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(styles) ? this.findStyleObject(styles) : null;
            const keys = Object.keys(styleClassObject);
            let values = keys.map((key) => {
                return styleClassObject[key];
            });
            values = this.removeUnwantedStyle(values, wordPasteStyleConfig);
            this.filterStyles(elm, wordPasteStyleConfig);
            let resultElem;
            let fromClass = false;
            for (let i = 0; i < keys.length; i++) {
                if (keys[i].split('.')[0] === '') {
                    resultElem = elm.getElementsByClassName(keys[i].split('.')[1]);
                    fromClass = true;
                }
                else if (keys[i].split('.').length === 1 && keys[i].split('.')[0].indexOf('@') >= 0) {
                    continue;
                }
                else if (keys[i].split('.').length === 1 && keys[i].split('.')[0].indexOf('@') < 0) {
                    resultElem = elm.getElementsByTagName(keys[i]);
                }
                else {
                    resultElem = elm.querySelectorAll(keys[i]);
                }
                for (let j = 0; j < resultElem.length; j++) {
                    const styleProperty = resultElem[j].getAttribute('style');
                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(styleProperty) && styleProperty.trim() !== '') {
                        const valueSplit = values[i].split(';');
                        if (!fromClass) {
                            for (let k = 0; k < valueSplit.length; k++) {
                                if (styleProperty.indexOf(valueSplit[k].split(':')[0]) >= 0) {
                                    valueSplit.splice(k, 1);
                                    k--;
                                }
                            }
                        }
                        values[i] = valueSplit.join(';') + ';';
                        const changedValue = styleProperty + values[i];
                        resultElem[j].setAttribute('style', changedValue);
                    }
                    else {
                        values[i] = values[i].replace(/text-indent:-(.*?)(?=;|$)/gm, '');
                        resultElem[j].setAttribute('style', values[i]);
                    }
                }
                fromClass = false;
            }
        }
    }
    filterStyles(elm, wordPasteStyleConfig) {
        const elmWithStyles = elm.querySelectorAll('*[style]');
        for (let i = 0; i < elmWithStyles.length; i++) {
            const elemStyleProperty = elmWithStyles[i].getAttribute('style').split(';');
            let styleValue = '';
            for (let j = 0; j < elemStyleProperty.length; j++) {
                if (wordPasteStyleConfig.indexOf(elemStyleProperty[j].split(':')[0].trim()) >= 0) {
                    styleValue += elemStyleProperty[j] + ';';
                }
            }
            elmWithStyles[i].setAttribute('style', styleValue);
        }
    }
    removeUnwantedStyle(values, wordPasteStyleConfig) {
        for (let i = 0; i < values.length; i++) {
            const styleValues = values[i].split(';');
            values[i] = '';
            for (let j = 0; j < styleValues.length; j++) {
                if (wordPasteStyleConfig.indexOf(styleValues[j].split(':')[0]) >= 0) {
                    values[i] += styleValues[j] + ';';
                }
            }
        }
        return values;
    }
    findStyleObject(styles) {
        const styleClassObject = {};
        for (let i = 0; i < styles.length; i++) {
            const tempStyle = styles[i];
            let classNameCollection = tempStyle.replace(/([\S ]+\s+){[\s\S]+?}/gi, '$1');
            let stylesCollection = tempStyle.replace(/[\S ]+\s+{([\s\S]+?)}/gi, '$1');
            classNameCollection = classNameCollection.replace(/^[\s]|[\s]$/gm, '');
            stylesCollection = stylesCollection.replace(/^[\s]|[\s]$/gm, '');
            classNameCollection = classNameCollection.replace(/\n|\r|\n\r/g, '');
            stylesCollection = stylesCollection.replace(/\n|\r|\n\r/g, '');
            for (let classNames = classNameCollection.split(', '), j = 0; j < classNames.length; j++) {
                styleClassObject[classNames[j]] = stylesCollection;
            }
        }
        return styleClassObject;
    }
    removingComments(elm) {
        let innerElement = elm.innerHTML;
        innerElement = innerElement.replace(/<!--[\s\S]*?-->/g, '');
        elm.innerHTML = innerElement;
    }
    cleanUp(node, listNodes) {
        // eslint-disable-next-line
        const tempCleaner = [];
        let prevflagState;
        const allNodes = node.querySelectorAll('*');
        for (let index = 0; index < allNodes.length; index++) {
            if (this.ignorableNodes.indexOf(allNodes[index].nodeName) === -1 ||
                (allNodes[index].nodeType === 3 && allNodes[index].textContent.trim() === '')) {
                tempCleaner.push(allNodes[index]);
                continue;
            }
            else if (allNodes[index].className &&
                allNodes[index].className.toLowerCase().indexOf('msolistparagraph') !== -1 &&
                allNodes[index].childElementCount !== 1 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(allNodes[index].getAttribute('style')) &&
                allNodes[index].getAttribute('style').indexOf('mso-list:') >= 0) {
                if (allNodes[index].className.indexOf('MsoListParagraphCxSpFirst') >= 0 && listNodes.length > 0 &&
                    listNodes[listNodes.length - 1] !== null) {
                    listNodes.push(null);
                }
                listNodes.push(allNodes[index]);
            }
            if (prevflagState && (this.blockNode.indexOf(allNodes[index].nodeName.toLowerCase()) !== -1) &&
                !(allNodes[index].className &&
                    allNodes[index].className.toLowerCase().indexOf('msolistparagraph') !== -1 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(allNodes[index].getAttribute('style')) &&
                    allNodes[index].getAttribute('style').indexOf('mso-list:') >= 0)) {
                listNodes.push(null);
            }
            if (this.blockNode.indexOf(allNodes[index].nodeName.toLowerCase()) !== -1) {
                if (allNodes[index].className &&
                    allNodes[index].className.toLowerCase().indexOf('msolistparagraph') !== -1 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(allNodes[index].getAttribute('style')) &&
                    allNodes[index].getAttribute('style').indexOf('mso-list:') >= 0) {
                    prevflagState = true;
                }
                else {
                    prevflagState = false;
                }
            }
        }
        if (listNodes.length && (listNodes[listNodes.length - 1] !== null)) {
            listNodes.push(null);
        }
        return listNodes;
    }
    listConverter(listNodes) {
        let level;
        const data = [];
        let collection = [];
        let content = '';
        let stNode;
        let currentListStyle = '';
        for (let i = 0; i < listNodes.length; i++) {
            if (listNodes[i] === null) {
                data.push({ content: this.makeConversion(collection), node: listNodes[i - 1] });
                collection = [];
                continue;
            }
            if (listNodes[i].getAttribute('style') && listNodes[i].getAttribute('style').indexOf('mso-outline-level') !== -1) {
                listNodes[i].setAttribute('style', listNodes[i].getAttribute('style').replace('mso-outline-level', 'mso-outline'));
            }
            content = listNodes[i].getAttribute('style');
            if (content && content.indexOf('level') !== -1) {
                // eslint-disable-next-line
                level = parseInt(content.charAt(content.indexOf('level') + 5), null);
            }
            else {
                level = 1;
            }
            this.listContents = [];
            this.getListContent(listNodes[i]);
            let type;
            let listStyleType;
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.listContents[0])) {
                type = this.listContents[0].trim().length > 1 ? 'ol' : 'ul';
                listStyleType = this.getlistStyleType(this.listContents[0], type);
                const tempNode = [];
                for (let j = 1; j < this.listContents.length; j++) {
                    tempNode.push(this.listContents[j]);
                }
                let currentClassName;
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(listNodes[i].className)) {
                    currentClassName = listNodes[i].className;
                }
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(listNodes[i].getAttribute('style'))) {
                    listNodes[i].setAttribute('style', listNodes[i].getAttribute('style').replace('text-align:start;', ''));
                    if (listNodes[i].style.textAlign !== '') {
                        listNodes[i].setAttribute('style', 'text-align:' + listNodes[i].style.textAlign);
                        currentListStyle = listNodes[i].getAttribute('style');
                    }
                }
                collection.push({ listType: type, content: tempNode, nestedLevel: level, class: currentClassName,
                    listStyle: currentListStyle, listStyleTypeName: listStyleType });
            }
        }
        stNode = listNodes.shift();
        while (stNode) {
            const elemColl = [];
            for (let temp1 = 0; temp1 < data.length; temp1++) {
                if (data[temp1].node === stNode) {
                    for (let index = 0; index < data[temp1].content.childNodes.length; index++) {
                        elemColl.push(data[temp1].content.childNodes[index]);
                    }
                    for (let index = 0; index < elemColl.length; index++) {
                        stNode.parentElement.insertBefore(elemColl[index], stNode);
                    }
                    break;
                }
            }
            stNode.remove();
            stNode = listNodes.shift();
            if (!stNode) {
                stNode = listNodes.shift();
            }
        }
    }
    getlistStyleType(listContent, type) {
        let currentListClass;
        if (type === 'ol') {
            switch (listContent.split('.')[0]) {
                case "A":
                    currentListClass = "upper-alpha";
                    break;
                case "a":
                    currentListClass = "lower-alpha";
                    break;
                case "I":
                    currentListClass = "upper-roman";
                    break;
                case "i":
                    currentListClass = "lower-roman";
                    break;
                case "α":
                    currentListClass = "lower-greek";
                    break;
                default:
                    currentListClass = "decimal";
                    break;
            }
        }
        else {
            switch (listContent.split('.')[0]) {
                case "o":
                    currentListClass = "circle";
                    break;
                case "§":
                    currentListClass = "square";
                    break;
                default:
                    currentListClass = "disc";
                    break;
            }
        }
        return currentListClass;
    }
    makeConversion(collection) {
        const root = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('div');
        let temp;
        let pLevel = 1;
        let prevList;
        let listCount = 0;
        let elem;
        for (let index = 0; index < collection.length; index++) {
            const pElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('p');
            pElement.innerHTML = collection[index].content.join(' ');
            if ((collection[index].nestedLevel === 1) && listCount === 0 && collection[index].content) {
                root.appendChild(temp = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)(collection[index].listType));
                prevList = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('li');
                prevList.appendChild(pElement);
                temp.appendChild(prevList);
                temp.setAttribute('level', collection[index].nestedLevel.toString());
                temp.style.listStyleType = collection[index].listStyleTypeName;
            }
            else if (collection[index].nestedLevel === pLevel) {
                if (prevList.parentElement.tagName.toLowerCase() === collection[index].listType) {
                    prevList.parentElement.appendChild(prevList = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('li'));
                    prevList.appendChild(pElement);
                }
                else {
                    temp = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)(collection[index].listType);
                    temp.style.listStyleType = collection[index].listStyleTypeName;
                    prevList.parentElement.parentElement.appendChild(temp);
                    prevList = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('li');
                    prevList.appendChild(pElement);
                    temp.appendChild(prevList);
                    temp.setAttribute('level', collection[index].nestedLevel.toString());
                }
            }
            else if (collection[index].nestedLevel > pLevel) {
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(prevList)) {
                    for (let j = 0; j < collection[index].nestedLevel - pLevel; j++) {
                        prevList.appendChild(temp = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)(collection[index].listType));
                        prevList = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('li');
                        if (j != collection[index].nestedLevel - pLevel - 1 && collection[index].nestedLevel - pLevel > 1) {
                            prevList.style.listStyleType = "none";
                        }
                        temp.appendChild(prevList);
                    }
                    prevList.appendChild(pElement);
                    temp.setAttribute('level', collection[index].nestedLevel.toString());
                    temp.style.listStyleType = collection[index].listStyleTypeName;
                }
                else {
                    root.appendChild(temp = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)(collection[index].listType));
                    prevList = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('li');
                    prevList.appendChild(pElement);
                    temp.appendChild(prevList);
                    temp.setAttribute('level', collection[index].nestedLevel.toString());
                    temp.style.listStyleType = collection[index].listStyleTypeName;
                }
            }
            else if (collection[index].nestedLevel === 1) {
                if (root.lastChild.tagName.toLowerCase() === collection[index].listType) {
                    temp = root.lastChild;
                }
                else {
                    root.appendChild(temp = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)(collection[index].listType));
                    temp.style.listStyleType = collection[index].listStyleTypeName;
                }
                prevList = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('li');
                prevList.appendChild(pElement);
                temp.appendChild(prevList);
                temp.setAttribute('level', collection[index].nestedLevel.toString());
            }
            else {
                elem = prevList;
                while (elem.parentElement) {
                    elem = elem.parentElement;
                    if (elem.attributes.getNamedItem('level')) {
                        // eslint-disable-next-line
                        if (parseInt(elem.attributes.getNamedItem('level').textContent, null) === collection[index].nestedLevel) {
                            prevList = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('li');
                            prevList.appendChild(pElement);
                            elem.appendChild(prevList);
                            break;
                            // eslint-disable-next-line
                        }
                        else if (collection[index].nestedLevel > parseInt(elem.attributes.getNamedItem('level').textContent, null)) {
                            elem.appendChild(temp = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)(collection[index].listType));
                            prevList = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.createElement)('li');
                            prevList.appendChild(pElement);
                            temp.appendChild(prevList);
                            temp.setAttribute('level', collection[index].nestedLevel.toString());
                            temp.style.listStyleType = collection[index].listStyleTypeName;
                            break;
                        }
                    }
                    continue;
                }
            }
            prevList.setAttribute('class', collection[index].class);
            const currentStyle = prevList.getAttribute('style');
            prevList.setAttribute('style', (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentStyle) ? currentStyle : ''));
            pLevel = collection[index].nestedLevel;
            listCount++;
        }
        return root;
    }
    getListContent(elem) {
        let pushContent = '';
        const firstChild = elem.firstElementChild;
        if (firstChild.textContent.trim() === '' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(firstChild.firstElementChild) &&
            firstChild.firstElementChild.nodeName === 'IMG') {
            pushContent = elem.innerHTML.trim();
            this.listContents.push('');
            this.listContents.push(pushContent);
        }
        else {
            const styleNodes = ['b', 'em'];
            if (firstChild.childNodes.length > 0 && (firstChild.querySelectorAll('b').length > 0
                || firstChild.querySelectorAll('em').length > 0)) {
                for (let i = 0; i < firstChild.childNodes.length; i++) {
                    const nodeName = firstChild.childNodes[i].nodeName.toLowerCase();
                    if (firstChild.childNodes[i].textContent.trim().length > 1 && styleNodes.indexOf(nodeName) !== -1) {
                        pushContent = '<' + nodeName + '>' + firstChild.childNodes[i].textContent + '</' + nodeName + '>';
                        this.listContents.push(pushContent);
                    }
                    else if (firstChild.childNodes[i].textContent.trim().length === 1) {
                        this.listContents.push(firstChild.childNodes[i].textContent.trim());
                    }
                }
            }
            else {
                pushContent = firstChild.textContent.trim();
                this.listContents.push(pushContent);
            }
        }
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(firstChild);
        this.listContents.push(elem.innerHTML);
    }
}

/**
 * Insert a Text Node or Text
 *
 * @hidden
 * @deprecated
 */
class InsertTextExec {
    /**
     * Constructor for creating the InsertText plugin
     *
     * @param {EditorManager} parent - specifies the parent element
     * @hidden
     * @deprecated
     */
    constructor(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    addEventListener() {
        this.parent.observer.on(INSERT_TEXT_TYPE, this.insertText, this);
    }
    insertText(e) {
        const node = document.createTextNode(e.value);
        InsertHtml.Insert(this.parent.currentDocument, node);
        if (e.callBack) {
            e.callBack({
                requestType: e.subCommand,
                editorMode: 'HTML',
                event: e.event,
                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
            });
        }
    }
}

/**
 * EditorManager internal component
 *
 * @hidden
 * @deprecated
 */
class EditorManager {
    /**
     * Constructor for creating the component
     *
     * @hidden
     * @deprecated
     * @param {ICommandModel} options - specifies the command Model
     */
    constructor(options) {
        this.currentDocument = options.document;
        this.editableElement = options.editableElement;
        this.nodeSelection = new NodeSelection();
        this.nodeCutter = new NodeCutter();
        this.domNode = new DOMNode(this.editableElement, this.currentDocument);
        this.observer = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Observer(this);
        this.listObj = new Lists(this);
        this.formatObj = new Formats(this);
        this.alignmentObj = new Alignments(this);
        this.indentsObj = new Indents(this);
        this.linkObj = new LinkCommand(this);
        this.imgObj = new ImageCommand(this);
        this.selectionObj = new SelectionBasedExec(this);
        this.inserthtmlObj = new InsertHtmlExec(this);
        this.insertTextObj = new InsertTextExec(this);
        this.clearObj = new ClearFormatExec(this);
        this.tableObj = new TableCommand(this);
        this.undoRedoManager = new UndoRedoManager(this, options.options);
        this.msWordPaste = new MsWordPaste(this);
        this.wireEvents();
    }
    wireEvents() {
        this.observer.on(KEY_DOWN, this.editorKeyDown, this);
        this.observer.on(KEY_UP, this.editorKeyUp, this);
        this.observer.on(KEY_UP, this.editorKeyUp, this);
        this.observer.on(MODEL_CHANGED, this.onPropertyChanged, this);
        this.observer.on(MS_WORD_CLEANUP, this.onWordPaste, this);
        this.observer.on(ON_BEGIN, this.onBegin, this);
    }
    onWordPaste(e) {
        this.observer.notify(MS_WORD_CLEANUP_PLUGIN, e);
    }
    onPropertyChanged(props) {
        this.observer.notify(MODEL_CHANGED_PLUGIN, props);
    }
    editorKeyDown(e) {
        this.observer.notify(KEY_DOWN_HANDLER, e);
    }
    editorKeyUp(e) {
        this.observer.notify(KEY_UP_HANDLER, e);
    }
    onBegin(e) {
        this.observer.notify(SPACE_ACTION, e);
    }
    /* eslint-disable */
    /**
     * execCommand
     *
     * @param {ExecCommand} command - specifies the execution command
     * @param {T} value - specifes the value.
     * @param {Event} event - specifies the call back event
     * @param {Function} callBack - specifies the function
     * @param {string} text - specifies the string value
     * @param {T} exeValue - specifies the values to be executed
     * @param {string} selector - specifies the selector values
     * @returns {void}
     * @hidden
     * @deprecated
     */
    /* eslint-enable */
    execCommand(command, value, event, callBack, text, exeValue, selector, enterAction) {
        switch (command.toLowerCase()) {
            case 'lists':
                this.observer.notify(LIST_TYPE, { subCommand: value, event: event, callBack: callBack,
                    selector: selector, item: exeValue, enterAction: enterAction });
                break;
            case 'formats':
                this.observer.notify(FORMAT_TYPE, { subCommand: value, event: event, callBack: callBack,
                    selector: selector, exeValue: exeValue, enterAction: enterAction
                });
                break;
            case 'alignments':
                this.observer.notify(ALIGNMENT_TYPE, {
                    subCommand: value, event: event, callBack: callBack,
                    selector: selector,
                    value: exeValue
                });
                break;
            case 'indents':
                this.observer.notify(INDENT_TYPE, { subCommand: value, event: event, callBack: callBack, selector: selector });
                break;
            case 'links':
                this.observer.notify(LINK, { command: command, value: value, item: exeValue, event: event, callBack: callBack });
                break;
            case 'files':
                this.observer.notify(IMAGE, {
                    command: command, value: 'Image', item: exeValue, event: event, callBack: callBack, selector: selector
                });
                break;
            case 'images':
                this.observer.notify(IMAGE, {
                    command: command, value: value, item: exeValue, event: event, callBack: callBack, selector: selector
                });
                break;
            case 'table':
                switch (value.toString().toLocaleLowerCase()) {
                    case 'createtable':
                        this.observer.notify(TABLE, { item: exeValue, event: event, callBack: callBack, enterAction: enterAction });
                        break;
                    case 'insertrowbefore':
                    case 'insertrowafter':
                        this.observer.notify(INSERT_ROW, { item: exeValue, event: event, callBack: callBack });
                        break;
                    case 'insertcolumnleft':
                    case 'insertcolumnright':
                        this.observer.notify(INSERT_COLUMN, { item: exeValue, event: event, callBack: callBack });
                        break;
                    case 'deleterow':
                        this.observer.notify(DELETEROW, { item: exeValue, event: event, callBack: callBack });
                        break;
                    case 'deletecolumn':
                        this.observer.notify(DELETECOLUMN, { item: exeValue, event: event, callBack: callBack });
                        break;
                    case 'tableremove':
                        this.observer.notify(REMOVETABLE, { item: exeValue, event: event, callBack: callBack });
                        break;
                    case 'tableheader':
                        this.observer.notify(TABLEHEADER, { item: exeValue, event: event, callBack: callBack });
                        break;
                    case 'aligntop':
                    case 'alignmiddle':
                    case 'alignbottom':
                        this.observer.notify(TABLE_VERTICAL_ALIGN, { item: exeValue, event: event, callBack: callBack });
                        break;
                    case 'merge':
                        this.observer.notify(TABLE_MERGE, { item: exeValue, event: event, callBack: callBack });
                        break;
                    case 'horizontalsplit':
                        this.observer.notify(TABLE_HORIZONTAL_SPLIT, { item: exeValue, event: event, callBack: callBack });
                        break;
                    case 'verticalsplit':
                        this.observer.notify(TABLE_VERTICAL_SPLIT, { item: exeValue, event: event, callBack: callBack });
                        break;
                }
                break;
            case 'font':
            case 'style':
            case 'effects':
            case 'casing':
                this.observer.notify(SELECTION_TYPE, { subCommand: value, event: event, callBack: callBack, value: text, selector: selector, enterAction: enterAction });
                break;
            case 'inserthtml':
                this.observer.notify(INSERTHTML_TYPE, { subCommand: value, callBack: callBack, value: text });
                break;
            case 'inserttext':
                this.observer.notify(INSERT_TEXT_TYPE, { subCommand: value, callBack: callBack, value: text });
                break;
            case 'clear':
                this.observer.notify(CLEAR_TYPE, { subCommand: value, event: event, callBack: callBack, selector: selector, enterAction: enterAction });
                break;
            case 'actions':
                this.observer.notify(ACTION, { subCommand: value, event: event, callBack: callBack, selector: selector });
                break;
        }
    }
}

/**
 * HTML adapter
 *
 * @hidden
 * @deprecated
 */
class HTMLFormatter extends Formatter {
    constructor(options) {
        super();
        this.initialize();
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(this, this, options, true);
        if (this.currentDocument && this.element) {
            this.updateFormatter(this.element, this.currentDocument, options.options);
        }
    }
    initialize() {
        this.keyConfig = htmlKeyConfig;
    }
    /**
     * Update the formatter of RichTextEditor
     *
     * @param  {Element} editElement - specifies the edit element.
     * @param  {Document} doc - specifies the doucment
     * @param {number} options - specifies the options
     * @returns {void}
     * @hidden
     * @deprecated
     */
    updateFormatter(editElement, doc, options) {
        if (editElement && doc) {
            this.editorManager = new EditorManager({
                document: doc,
                editableElement: editElement,
                options: options
            });
        }
    }
}

/**
 * Update Toolbar Status
 *
 * @hidden
 * @deprecated
 */
const statusCollection = getDefaultHtmlTbStatus();
class ToolbarStatus {
    /**
     * get method
     *
     * @param {Document} docElement - specifies the document element
     * @param {Node} targetNode - specifies the target node
     * @param {string[]} formatNode - specifies the format node
     * @param {string[]} fontSize - specifies the font size
     * @param {string[]} fontName - specifies the font name.
     * @param {Node} documentNode - specifies the document node.
     * @returns {IToolbarStatus} - returns the toolbar status
     * @hidden
     * @deprecated
     */
    static get(docElement, targetNode, formatNode, fontSize, fontName, documentNode) {
        let formatCollection = JSON.parse(JSON.stringify(statusCollection));
        const nodeCollection = JSON.parse(JSON.stringify(statusCollection));
        const nodeSelection = new NodeSelection();
        const nodes = documentNode ? [documentNode] : nodeSelection.getNodeCollection(nodeSelection.getRange(docElement));
        const nodesLength = nodes.length;
        let isNodeChanged = false;
        const range = nodeSelection.getRange(docElement);
        for (let index = 0; index < nodes.length; index++) {
            while (nodes[index].nodeType === 3 && range.startContainer.nodeType === 3 && nodes[index].parentNode &&
                nodes[index].parentNode.lastElementChild && nodes[index].parentNode.lastElementChild.nodeName !== 'BR' &&
                (this.getImmediateBlockNode(nodes[index].parentNode)).textContent.replace(/\u200B/g, '').length === 0 &&
                range.startContainer.textContent.replace(/\u200B/g, '').length === 0 &&
                nodeSelection.get(docElement).toString().replace(/\u200B/g, '').length === 0) {
                nodes[index] = nodes[index].parentNode.lastElementChild.firstChild;
                isNodeChanged = true;
            }
            if (isNodeChanged && nodes[index]) {
                nodeSelection.setCursorPoint(docElement, nodes[index], nodes[index].textContent.length);
                isNodeChanged = false;
            }
            if ((nodes[index].nodeName !== 'BR' && nodes[index].nodeType !== 3) ||
                (nodesLength > 1 && nodes[index].nodeType === 3 && nodes[index].textContent.trim() === '')) {
                nodes.splice(index, 1);
                index--;
            }
        }
        for (let index = 0; index < nodes.length; index++) {
            formatCollection = this.getFormatParent(docElement, formatCollection, nodes[index], targetNode, formatNode, fontSize, fontName);
            if ((index === 0 && formatCollection.bold) || !formatCollection.bold) {
                nodeCollection.bold = formatCollection.bold;
            }
            if ((index === 0 && formatCollection.insertcode) || !formatCollection.insertcode) {
                nodeCollection.insertcode = formatCollection.insertcode;
            }
            if ((index === 0 && formatCollection.italic) || !formatCollection.italic) {
                nodeCollection.italic = formatCollection.italic;
            }
            if ((index === 0 && formatCollection.underline) || !formatCollection.underline) {
                nodeCollection.underline = formatCollection.underline;
            }
            if ((index === 0 && formatCollection.strikethrough) || !formatCollection.strikethrough) {
                nodeCollection.strikethrough = formatCollection.strikethrough;
            }
            if ((index === 0 && formatCollection.superscript) || !formatCollection.superscript) {
                nodeCollection.superscript = formatCollection.superscript;
            }
            if ((index === 0 && formatCollection.subscript) || !formatCollection.subscript) {
                nodeCollection.subscript = formatCollection.subscript;
            }
            if ((index === 0 && formatCollection.fontcolor) || !formatCollection.fontcolor) {
                nodeCollection.fontcolor = formatCollection.fontcolor;
            }
            if ((index === 0 && formatCollection.fontname) || !formatCollection.fontname) {
                nodeCollection.fontname = formatCollection.fontname;
            }
            if ((index === 0 && formatCollection.fontsize) || !formatCollection.fontsize) {
                nodeCollection.fontsize = formatCollection.fontsize;
            }
            if ((index === 0 && formatCollection.backgroundcolor) || !formatCollection.backgroundcolor) {
                nodeCollection.backgroundcolor = formatCollection.backgroundcolor;
            }
            if ((index === 0 && formatCollection.orderedlist) || !formatCollection.orderedlist) {
                nodeCollection.orderedlist = formatCollection.orderedlist;
            }
            if ((index === 0 && formatCollection.unorderedlist) || !formatCollection.unorderedlist) {
                nodeCollection.unorderedlist = formatCollection.unorderedlist;
            }
            if ((index === 0 && formatCollection.alignments) || !formatCollection.alignments) {
                nodeCollection.alignments = formatCollection.alignments;
            }
            if ((index === 0 && formatCollection.formats) || !formatCollection.formats) {
                nodeCollection.formats = formatCollection.formats;
            }
            if ((index === 0 && formatCollection.createlink) || !formatCollection.createlink) {
                nodeCollection.createlink = formatCollection.createlink;
            }
            if ((index === 0 && formatCollection.numberFormatList) || !formatCollection.numberFormatList) {
                nodeCollection.numberFormatList = formatCollection.numberFormatList;
            }
            if ((index === 0 && formatCollection.bulletFormatList) || !formatCollection.bulletFormatList) {
                nodeCollection.bulletFormatList = formatCollection.bulletFormatList;
            }
            formatCollection = JSON.parse(JSON.stringify(statusCollection));
        }
        return nodeCollection;
    }
    static getImmediateBlockNode(node) {
        do {
            node = node.parentNode;
        } while (node && BLOCK_TAGS.indexOf(node.nodeName.toLocaleLowerCase()) < 0);
        return node;
    }
    static getFormatParent(docElement, formatCollection, node, targetNode, formatNode, fontSize, fontName) {
        if (targetNode.contains(node) ||
            (node.nodeType === 3 && targetNode.nodeType !== 3 && targetNode.contains(node.parentNode))) {
            do {
                formatCollection = this.isFormattedNode(docElement, formatCollection, node, formatNode, fontSize, fontName);
                node = node.parentNode;
            } while (node && (node !== targetNode));
        }
        return formatCollection;
    }
    static isFormattedNode(docElement, formatCollection, node, formatNode, fontSize, fontName) {
        if (!formatCollection.bold) {
            formatCollection.bold = IsFormatted.isBold(node);
        }
        if (!formatCollection.italic) {
            formatCollection.italic = IsFormatted.isItalic(node);
        }
        if (!formatCollection.underline) {
            formatCollection.underline = IsFormatted.isUnderline(node);
        }
        if (!formatCollection.strikethrough) {
            formatCollection.strikethrough = IsFormatted.isStrikethrough(node);
        }
        if (!formatCollection.superscript) {
            formatCollection.superscript = IsFormatted.isSuperscript(node);
        }
        if (!formatCollection.subscript) {
            formatCollection.subscript = IsFormatted.isSubscript(node);
        }
        if (!formatCollection.fontcolor) {
            formatCollection.fontcolor = this.isFontColor(docElement, node);
        }
        if (!formatCollection.fontname) {
            formatCollection.fontname = this.isFontName(docElement, node, fontName);
        }
        if (!formatCollection.fontsize) {
            formatCollection.fontsize = this.isFontSize(node, fontSize);
        }
        if (!formatCollection.backgroundcolor) {
            formatCollection.backgroundcolor = this.isBackgroundColor(node);
        }
        if (!formatCollection.orderedlist) {
            formatCollection.orderedlist = this.isOrderedList(node);
        }
        if (!formatCollection.unorderedlist) {
            formatCollection.unorderedlist = this.isUnorderedList(node);
        }
        if (!formatCollection.alignments) {
            formatCollection.alignments = this.isAlignment(node);
        }
        if (!formatCollection.formats) {
            formatCollection.formats = this.isFormats(node, formatNode);
            if (formatCollection.formats === 'pre') {
                formatCollection.insertcode = true;
            }
        }
        if (!formatCollection.createlink) {
            formatCollection.createlink = this.isLink(node);
        }
        if (!formatCollection.numberFormatList) {
            formatCollection.numberFormatList = this.isNumberFormatList(node);
        }
        if (!formatCollection.bulletFormatList) {
            formatCollection.bulletFormatList = this.isBulletFormatList(node);
        }
        return formatCollection;
    }
    static isFontColor(docElement, node) {
        let color = node.style && node.style.color;
        if ((color === null || color === undefined || color === '') && node.nodeType !== 3) {
            color = this.getComputedStyle(docElement, node, 'color');
        }
        if (color !== null && color !== '' && color !== undefined) {
            return color;
        }
        else {
            return null;
        }
    }
    static isLink(node) {
        if (node.nodeName.toLocaleLowerCase() === 'a') {
            return true;
        }
        else {
            return false;
        }
    }
    static isBackgroundColor(node) {
        const backColor = node.style && node.style.backgroundColor;
        if (backColor !== null && backColor !== '' && backColor !== undefined) {
            return backColor;
        }
        else {
            return null;
        }
    }
    static isFontSize(node, fontSize) {
        const size = node.style && node.style.fontSize;
        if ((size !== null && size !== '' && size !== undefined)
            && (fontSize === null || fontSize === undefined || (fontSize.indexOf(size) > -1))) {
            return size;
        }
        else {
            return null;
        }
    }
    static isFontName(docElement, node, fontName) {
        let name = node.style && node.style.fontFamily;
        if ((name === null || name === undefined || name === '') && node.nodeType !== 3) {
            name = this.getComputedStyle(docElement, node, 'font-family');
        }
        let index = null;
        if ((name !== null && name !== '' && name !== undefined)
            && (fontName === null || fontName === undefined || (fontName.filter((value, pos) => {
                const pattern = new RegExp(name, 'i');
                if ((value.replace(/"/g, '').replace(/ /g, '') === name.replace(/"/g, '').replace(/ /g, '')) ||
                    (value.search(pattern) > -1)) {
                    index = pos;
                }
            }) && (index !== null)))) {
            return (index !== null) ? fontName[index] : name.replace(/"/g, '');
        }
        else {
            return null;
        }
    }
    static isOrderedList(node) {
        if (node.nodeName.toLocaleLowerCase() === 'ol') {
            return true;
        }
        else {
            return false;
        }
    }
    static isUnorderedList(node) {
        if (node.nodeName.toLocaleLowerCase() === 'ul') {
            return true;
        }
        else {
            return false;
        }
    }
    static isAlignment(node) {
        const align = node.style && node.style.textAlign;
        if (align === 'left') {
            return 'justifyleft';
        }
        else if (align === 'center') {
            return 'justifycenter';
        }
        else if (align === 'right') {
            return 'justifyright';
        }
        else if (align === 'justify') {
            return 'justifyfull';
        }
        else {
            return null;
        }
    }
    static isFormats(node, formatNode) {
        if (((formatNode === undefined || formatNode === null)
            && BLOCK_TAGS.indexOf(node.nodeName.toLocaleLowerCase()) > -1)
            || (formatNode !== null && formatNode !== undefined
                && formatNode.indexOf(node.nodeName.toLocaleLowerCase()) > -1)) {
            return node.nodeName.toLocaleLowerCase();
        }
        else {
            return null;
        }
    }
    static getComputedStyle(docElement, node, prop) {
        return docElement.defaultView.getComputedStyle(node, null).getPropertyValue(prop);
    }
    static isNumberFormatList(node) {
        const list = node.style && node.style.listStyleType;
        if (list === 'lower-alpha') {
            return 'Lower Alpha';
        }
        else if (list === 'number') {
            return 'Number';
        }
        else if (list === 'upper-alpha') {
            return 'Upper Alpha';
        }
        else if (list === 'lower-roman') {
            return 'Lower Roman';
        }
        else if (list === 'upper-roman') {
            return 'Upper Roman';
        }
        else if (list === 'lower-greek') {
            return 'Lower Greek';
        }
        else if (list === 'none') {
            return 'None';
        }
        else {
            return null;
        }
    }
    static isBulletFormatList(node) {
        const list = node.style && node.style.listStyleType;
        if (list === 'circle') {
            return 'Circle';
        }
        else if (list === 'square') {
            return 'Square';
        }
        else if (list === 'none') {
            return 'None';
        }
        else if (list === 'disc') {
            return 'Disc';
        }
        else {
            return null;
        }
    }
}

/**
 * HtmlToolbarStatus module for refresh the toolbar status
 */
class HtmlToolbarStatus {
    constructor(parent) {
        this.parent = parent;
        this.toolbarStatus = this.prevToolbarStatus = getDefaultHtmlTbStatus();
        this.addEventListener();
    }
    addEventListener() {
        this.parent.on(toolbarRefresh, this.onRefreshHandler, this);
        this.parent.on(destroy, this.removeEventListener, this);
    }
    removeEventListener() {
        this.parent.off(toolbarRefresh, this.onRefreshHandler);
        this.parent.off(destroy, this.removeEventListener);
    }
    onRefreshHandler(args) {
        if (this.parent.readonly) {
            return;
        }
        const fontsize = [];
        const fontName = [];
        const formats = [];
        this.parent.fontSize.items.forEach((item) => {
            fontsize.push(item.value);
        });
        this.parent.fontFamily.items.forEach((item) => {
            fontName.push(item.value);
        });
        this.parent.format.types.forEach((item) => {
            formats.push(item.value.toLocaleLowerCase());
        });
        this.toolbarStatus = ToolbarStatus.get(this.parent.contentModule.getDocument(), this.parent.contentModule.getEditPanel(), formats, fontsize, fontName, args.documentNode);
        const tbStatusString = JSON.stringify(this.toolbarStatus);
        this.parent.notify(toolbarUpdated, this.toolbarStatus);
        if (JSON.stringify(this.prevToolbarStatus) !== tbStatusString) {
            this.parent.notify(updateTbItemsStatus, { html: JSON.parse(tbStatusString), markdown: null });
            this.prevToolbarStatus = JSON.parse(tbStatusString);
        }
    }
}

/**
 * Content module is used to render Rich Text Editor content
 *
 * @hidden
 * @deprecated
 */
class ContentRender {
    /**
     * Constructor for content renderer module
     *
     * @param {IRichTextEditor} parent - specifies the parent element.
     * @param {ServiceLocator} serviceLocator - specifies the service.
     * @returns {void}
     */
    constructor(parent, serviceLocator) {
        this.parent = parent;
        this.serviceLocator = serviceLocator;
    }
    /**
     * The function is used to render Rich Text Editor content div
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    renderPanel() {
        const rteObj = this.parent;
        const div = this.parent.createElement('div', { className: 'e-rte-content', id: this.parent.getID() + 'rte-view' });
        const rteContent = getEditValue(rteObj.value, rteObj);
        this.editableElement = this.parent.createElement('div', {
            className: 'e-content',
            id: this.parent.getID() + '_rte-edit-view',
            attrs: {
                'contenteditable': 'true'
            },
            innerHTML: rteContent
        });
        div.appendChild(this.editableElement);
        this.setPanel(div);
        rteObj.element.appendChild(div);
    }
    /**
     * Get the content div element of RichTextEditor
     *
     * @returns {Element} - specifies the element.
     * @hidden
     * @deprecated
     */
    getPanel() {
        return this.contentPanel;
    }
    /**
     * Get the editable element of RichTextEditor
     *
     * @returns {Element} - specifies the return element.
     * @hidden
     * @deprecated
     */
    getEditPanel() {
        return this.editableElement;
    }
    /**
     * Returns the text content as string.
     *
     * @returns {string} - specifies the string element.
     */
    getText() {
        return this.getEditPanel().innerText;
    }
    /**
     * Set the content div element of RichTextEditor
     *
     * @param {Element} panel - specifies the panel element.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    setPanel(panel) {
        this.contentPanel = panel;
    }
    /**
     * Get the document of RichTextEditor
     *
     * @returns {Document} - specifies the document.
     * @hidden
     * @deprecated
     */
    getDocument() {
        return this.getEditPanel().ownerDocument;
    }
}

const IFRAMEHEADER = `
<!DOCTYPE html> 
    <html>
         <head>
            <meta charset='utf-8' /> 
            <style>
                @charset "UTF-8";
                body {
                    font-family: "Roboto", sans-serif;
                    font-size: 14px;
                }
                html, body{height: 100%;margin: 0;}
                body.e-cursor{cursor:default}
                span.e-selected-node	{background-color: #939393;color: white;}
                span.e-selected-node.e-highlight {background-color: #1d9dd8;}
                body{color:#333;word-wrap:break-word;padding: 8px;box-sizing: border-box;}
                .e-rte-image {border: 0;cursor: pointer;display:
                    block;float: none;height: auto;margin: 5px auto;max-width: 100%;position: relative;}
                .e-img-caption { display: inline-block; float: none; margin: 5px auto; max-width: 100%;position: relative;}
                .e-img-caption.e-caption-inline {display: inline-block;float: none;
                    margin: 5px auto;margin-left: 5px;margin-right: 5px;max-width: calc(100% - (2 * 5px));
                    position: relativetext-align: center;vertical-align: bottom;}
                .e-img-inner {box-sizing: border-box;display: block;font-size: 16px;font-weight: initial;
                    margin: auto;opacity: .9;text-align: center;width: 100%;}
                .e-img-wrap {display: inline-block;margin: auto;padding: 0;text-align: center;width: 100%;}
                .e-imgleft {float: left;margin: 0 5px 0 0;text-align: left;}
                .e-imgright {float: right;margin: 0 0 0 5px;text-align: right;}
                .e-imgcenter {cursor: pointer;display: block;float: none;height: auto;margin: 5px auto;max-width: 100%;position: relative;}
                .e-control img:not(.e-resize) {border: 2px solid transparent; z-index: 1000}
                .e-imginline {display: inline-block;float: none;margin-left: 5px;margin-right: 5px;
                    max-width: calc(100% - (2 * 5px));vertical-align: bottom;}
                .e-imgbreak {border: 0;cursor: pointer;
                    display: block;float: none;height: auto;margin: 5px auto;max-width: 100%;position: relative;}
                .e-rte-image.e-img-focus:not(.e-resize) {border: solid 2px #4a90e2;}
                img.e-img-focus::selection { background: transparent;color: transparent;}
                span.e-rte-imageboxmark {  width: 10px; height: 10px; position: absolute; display: block;
                    background: #4a90e2; border: 1px solid #fff; z-index: 1000;}
                .e-mob-rte.e-mob-span span.e-rte-imageboxmark { background: #4a90e2; border: 1px solid #fff; }
                .e-mob-rte span.e-rte-imageboxmark { background: #fff; border: 1px solid #4a90e2;
                    border-radius: 15px; height: 20px; width: 20px; }
                .e-mob-rte.e-mob-span span.e-rte-imageboxmark { background: #4a90e2; border: 1px solid #fff; }
                .e-rte-content .e-content img.e-resize { z-index: 1000; }
                .e-img-caption .e-img-inner { outline: 0; }
                .e-img-caption a:focus-visible { outline: none; }
                .e-img-caption .e-rte-image.e-imgright, .e-img-caption .e-rte-image.e-imgleft { float: none; margin: 0;}
                body{box-sizing: border-box;min-height: 100px;outline: 0 solid transparent;
                    overflow-x: auto;padding: 16px;position: relative;text-align: inherit;z-index: 2;}
                p{margin: 0 0 10px;margin-bottom: 10px;}
                li{margin-bottom: 10px;}
                h1{font-size: 2.17em;font-weight: 400;line-height: 1;margin: 10px 0;}
                h2{font-size: 1.74em;font-weight: 400;margin: 10px 0;}
                h3{font-size: 1.31em;font-weight: 400;margin: 10px 0;}
                h4{font-size: 16px;font-weight: 400;line-height: 1.5;margin: 0;}
                h5{font-size: 00.8em;font-weight: 400;margin: 0;}
                h6{font-size: 00.65em;font-weight: 400;margin: 0;}
                blockquote{margin: 10px 0;margin-left: 0;padding-left: 5px;border-left: solid 2px #5c5c5c;}
                pre{background-color: inherit;border: 0;border-radius: 0;color: #333;
                    font-size: inherit;line-height: inherit;margin: 0 0 10px;overflow: visible;padding: 0;
                    white-space: pre-wrap;word-break: inherit;word-wrap: break-word;}
                strong, b{font-weight: 700;}
                a{text-decoration: none;user-select: auto;}
                a:hover{text-decoration: underline;};
                p:last-child, pre:last-child, blockquote:last-child{margin-bottom: 0;}
                h3+h4, h4+h5, h5+h6{margin-top: 00.6em;}
                ul:last-child{margin-bottom: 0;}
                table { border-collapse: collapse; empty-cells: show;}
                table td,table th {border: 1px solid #BDBDBD; height: 20px; vertical-align: middle;}
                table.e-alternate-border tbody tr:nth-child(2n) {background-color: #F5F5F5;}
                table th {background-color: #E0E0E0;}
                table.e-dashed-border td,table.e-dashed-border th { border: 1px dashed #BDBDBD} 
                table .e-cell-select {border: 1px double #4a90e2;}
                span.e-table-box { cursor: nwse-resize; display: block; height: 10px; position: absolute; width: 10px; }
                span.e-table-box.e-rmob {height: 14px;width: 14px;}
                .e-row-resize, .e-column-resize { background-color: transparent; background-repeat: repeat;
                    bottom: 0;cursor: col-resize;height: 1px;overflow: visible;position: absolute;width: 1px; }
                .e-row-resize { cursor: row-resize; height: 1px;}
                .e-table-rhelper { cursor: col-resize; opacity: .87;position: absolute;}
                .e-table-rhelper.e-column-helper { width: 1px; }
                .e-table-rhelper.e-row-helper {height: 1px;}
                .e-reicon::before { border-bottom: 6px solid transparent; border-right: 6px solid;
                    border-top: 6px solid transparent; content: ''; display: block; height: 0;
                    position: absolute; right: 4px; top: 4px; width: 20px; }
                .e-reicon::after { border-bottom: 6px solid transparent; border-left: 6px solid;
                    border-top: 6px solid transparent; content: ''; display: block;
                    height: 0; left: 4px; position: absolute; top: 4px; width: 20px; z-index: 3; }
                .e-row-helper.e-reicon::after { top: 10px; transform: rotate(90deg); }
                .e-row-helper.e-reicon::before { left: 4px; top: -20px; transform: rotate(90deg); }
                span.e-table-box { background-color: #ffffff; border: 1px solid #BDBDBD; }
                span.e-table-box.e-rbox-select { background-color: #BDBDBD; border: 1px solid #BDBDBD; }
                .e-table-rhelper { background-color: #4a90e2;}
                .e-rtl { direction: rtl; }
            </style>
        </head>`;
/**
 * Content module is used to render Rich Text Editor content
 *
 * @hidden
 * @deprecated
 */
class IframeContentRender extends ContentRender {
    /**
     * The function is used to render Rich Text Editor iframe
     *
     * @hidden
     * @deprecated
     */
    renderPanel() {
        const rteObj = this.parent;
        const rteContent = getEditValue(rteObj.value, rteObj);
        const iFrameBodyContent = '<body spellcheck="false" autocorrect="off" contenteditable="true">' +
            rteContent + '</body></html>';
        let iFrameContent = IFRAMEHEADER + iFrameBodyContent;
        const iframe = this.parent.createElement('iframe', {
            id: this.parent.getID() + '_rte-view',
            className: 'e-rte-content',
            styles: 'display:block;',
            attrs: { 'srcdoc': iFrameContent }
        });
        this.setPanel(iframe);
        rteObj.element.appendChild(iframe);
        iframe.contentDocument.body.id = this.parent.getID() + '_rte-edit-view';
        iframe.contentDocument.body.setAttribute('aria-owns', this.parent.getID());
        iframe.contentDocument.open();
        iFrameContent = this.setThemeColor(iFrameContent, { color: '#333' });
        iframe.contentDocument.write(iFrameContent);
        iframe.contentDocument.close();
        if (rteObj.enableRtl) {
            this.contentPanel.contentDocument.body.setAttribute('class', 'e-rtl');
        }
    }
    setThemeColor(content, styles) {
        const fontColor = getComputedStyle(this.parent.element, '.e-richtexteditor').getPropertyValue('color');
        return content.replace(styles.color, fontColor);
    }
    /**
     * Get the editable element of RichTextEditor
     *
     * @returns {Element} - specifies the element.
     * @hidden
     * @deprecated
     */
    getEditPanel() {
        let editNode;
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.contentPanel.contentDocument)) {
            editNode = this.contentPanel.contentDocument.body;
        }
        else {
            editNode = this.parent.inputElement;
        }
        return editNode;
    }
    /**
     * Get the document of RichTextEditor
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getDocument() {
        return this.getEditPanel().ownerDocument;
    }
}

/**
 * XhtmlValidation module called when set enableXhtml as true
 */
class XhtmlValidation {
    constructor(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    addEventListener() {
        this.parent.on(xhtmlValidation, this.enableXhtmlValidation, this);
        this.parent.on(destroy, this.removeEventListener, this);
    }
    removeEventListener() {
        this.parent.off(xhtmlValidation, this.enableXhtmlValidation);
        this.parent.off(destroy, this.removeEventListener);
    }
    enableXhtmlValidation() {
        if (this.parent.enableXhtml) {
            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.inputElement)) {
                this.currentElement = this.parent.element;
            }
            else {
                this.currentElement = this.parent.inputElement;
            }
            this.clean(this.currentElement);
            this.AddRootElement();
            this.ImageTags();
            this.removeTags();
            this.RemoveUnsupported();
            this.currentElement.innerHTML = this.selfEncloseValidation(this.currentElement.innerHTML, this.currentElement.innerText === "\n" ?
                this.currentElement.innerText.length : this.currentElement.innerText.trim().length);
            this.parent.setProperties({ value: this.currentElement.innerHTML }, true);
        }
    }
    /**
     * @param {string} currentValue - specifies the string value.
     * @param {number} valueLength - specifies the length of the current value.
     * @returns {void}
     * @deprecated
     */
    selfEncloseValidation(currentValue, valueLength) {
        if (valueLength === 0 && currentValue.indexOf('table') < 0 && currentValue.indexOf('img') < 0) {
            const arrayValue = currentValue.split('&nbsp;');
            arrayValue[arrayValue.length - 1] = '&#8203;' + arrayValue[arrayValue.length - 1];
            currentValue = arrayValue.join('');
        }
        currentValue = currentValue.replace(/<br>/g, '<br/>').replace(/<hr>/g, '<hr/>').replace(/ /g, ' ');
        let valueTemp;
        const valueDupe = [];
        let valueOriginal = [];
        const imgRegexp = [/<img(.*?)>/gi, /<area(.*?)>/gi, /<base(.*?)>/gi, /<col (.*?)>/gi, /<embed(.*?)>/gi,
            /<input(.*?)>/gi, /<link(.*?)>/gi, /<meta(.*?)>/gi, /<param(.*?)>/gi, /<source(.*?)>/gi,
            /<track(.*?)>/gi, /<wbr(.*?)>/gi];
        for (let j = 0; j < imgRegexp.length; j++) {
            valueTemp = imgRegexp[j].exec(currentValue);
            while ((valueTemp) !== null) {
                valueDupe.push(valueTemp[0].toString());
                valueTemp = imgRegexp[j].exec(currentValue);
            }
            valueOriginal = valueDupe.slice(0);
            for (let i = 0; i < valueDupe.length; i++) {
                if (valueDupe[i].indexOf('/') === -1 || valueDupe[i].lastIndexOf('/') !== valueDupe[i].length - 2) {
                    valueDupe[i] = valueDupe[i].substr(0, valueDupe[i].length - 1) + ' /' +
                        valueDupe[i].substr(valueDupe[i].length - 1, valueDupe[i].length);
                }
            }
            for (let g = 0; g <= valueDupe.length - 1; g++) {
                currentValue = currentValue.replace(valueOriginal[g], valueDupe[g]);
            }
        }
        return currentValue;
    }
    AddRootElement() {
        if ((this.currentElement.childNodes.length === 1 && this.currentElement.firstChild.nodeName !== 'DIV') ||
            this.currentElement.childNodes.length > 1) {
            const parentEle = this.parent.createElement('div');
            while (this.currentElement.childNodes.length > 0) {
                parentEle.appendChild(this.currentElement.childNodes[0]);
            }
            this.currentElement.appendChild(parentEle);
        }
    }
    clean(node) {
        for (let n = 0; n < node.childNodes.length; n++) {
            const child = node.childNodes[n];
            if (child.nodeType === 8 || child.nodeName === 'V:IMAGE') {
                node.removeChild(child);
                n--;
            }
            else if (child.nodeType === 1) {
                this.clean(child);
            }
        }
        return this.currentElement.innerHTML;
    }
    ImageTags() {
        const imgNodes = this.currentElement.querySelectorAll('IMG');
        for (let i = imgNodes.length - 1; i >= 0; i--) {
            if (!imgNodes[i].hasAttribute('alt')) {
                const img = imgNodes[i];
                img.setAttribute('alt', '');
            }
        }
    }
    removeTags() {
        const removeAttribute = [['br', 'ul'], ['br', 'ol'], ['table', 'span'], ['div', 'span'], ['p', 'span']];
        for (let i = 0; i < removeAttribute.length; i++) {
            this.RemoveElementNode(removeAttribute[i][0], removeAttribute[i][1]);
        }
    }
    RemoveElementNode(rmvNode, parentNode) {
        const parentArray = this.currentElement.querySelectorAll(parentNode);
        for (let i = 0; i < parentArray.length; i++) {
            const rmvArray = parentArray[i].querySelectorAll(rmvNode);
            for (let j = rmvArray.length; j > 0; j--) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(rmvArray[j - 1]);
            }
        }
    }
    RemoveUnsupported() {
        const underlineEle = this.currentElement.querySelectorAll('u');
        for (let i = underlineEle.length - 1; i >= 0; i--) {
            const spanEle = this.parent.createElement('span');
            spanEle.style.textDecoration = 'underline';
            spanEle.innerHTML = underlineEle[i].innerHTML;
            underlineEle[i].parentNode.insertBefore(spanEle, underlineEle[i]);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(underlineEle[i]);
        }
        const strongEle = this.currentElement.querySelectorAll('strong');
        for (let i = strongEle.length - 1; i >= 0; i--) {
            const boldEle = this.parent.createElement('b');
            boldEle.innerHTML = strongEle[i].innerHTML;
            strongEle[i].parentNode.insertBefore(boldEle, strongEle[i]);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(strongEle[i]);
        }
        const attrArray = ['language', 'role', 'target', 'contenteditable', 'cellspacing',
            'cellpadding', 'border', 'valign', 'colspan'];
        for (let i = 0; i <= attrArray.length; i++) {
            this.RemoveAttributeByName(attrArray[i]);
        }
    }
    RemoveAttributeByName(attrName) {
        if (this.currentElement.firstChild !== null) {
            if (this.currentElement.firstChild.nodeType !== 3) {
                for (let i = 0; i < this.currentElement.childNodes.length; i++) {
                    const ele = this.currentElement.childNodes[i];
                    if (ele.nodeType !== 3 && ele.nodeName !== 'TABLE' && ele.nodeName !== 'TBODY' && ele.nodeName !== 'THEAD' &&
                        ele.nodeName !== 'TH' && ele.nodeName !== 'TR' && ele.nodeName !== 'TD') {
                        if (ele.hasAttribute(attrName)) {
                            ele.removeAttribute(attrName);
                        }
                        if (ele.hasChildNodes()) {
                            for (let j = 0; j < ele.childNodes.length; j++) {
                                const childEle = ele.childNodes[j];
                                if (childEle.nodeType !== 3 && childEle.nodeName !== 'TABLE' && childEle.nodeName !== 'TBODY' &&
                                    childEle.nodeName !== 'THEAD' && childEle.nodeName !== 'TH' && childEle.nodeName !== 'TR' &&
                                    childEle.nodeName !== 'TD' && childEle.hasAttribute(attrName)) {
                                    childEle.removeAttribute(attrName);
                                }
                                if (childEle.hasChildNodes()) {
                                    for (let k = 0; k < childEle.childNodes.length; k++) {
                                        if (childEle.childNodes[k].nodeType !== 3 && childEle.childNodes[k].nodeName !== 'TABLE' &&
                                            childEle.childNodes[k].nodeName !== 'TBODY' && childEle.childNodes[k].nodeName !== 'THEAD' &&
                                            childEle.childNodes[k].nodeName !== 'TH' && childEle.childNodes[k].nodeName !== 'TR'
                                            && childEle.childNodes[k].nodeName !== 'TD'
                                            && childEle.childNodes[k].hasAttribute(attrName)) {
                                            childEle.childNodes[k].removeAttribute(attrName);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

/**
 * `HtmlEditor` module is used to HTML editor
 */
class HtmlEditor {
    constructor(parent, serviceLocator) {
        this.rangeCollection = [];
        this.isImageDelete = false;
        this.parent = parent;
        this.locator = serviceLocator;
        this.renderFactory = this.locator.getService('rendererFactory');
        this.xhtmlValidation = new XhtmlValidation(parent);
        this.addEventListener();
    }
    /**
     * Destroys the Markdown.
     *
     * @function destroy
     * @returns {void}
     * @hidden
     * @deprecated
     */
    destroy() {
        this.removeEventListener();
    }
    /**
     * @param {string} value - specifies the string value
     * @returns {void}
     * @hidden
     * @deprecated
     */
    sanitizeHelper(value) {
        value = sanitizeHelper(value, this.parent);
        return value;
    }
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.nodeSelectionObj = new NodeSelection();
        this.colorPickerModule = new ColorPickerInput(this.parent, this.locator);
        this.parent.on(initialLoad, this.instantiateRenderer, this);
        this.parent.on(htmlToolbarClick, this.onToolbarClick, this);
        this.parent.on(keyDown, this.onKeyDown, this);
        this.parent.on(keyUp, this.onKeyUp, this);
        this.parent.on(renderColorPicker, this.renderColorPicker, this);
        this.parent.on(initialEnd, this.render, this);
        this.parent.on(modelChanged, this.onPropertyChanged, this);
        this.parent.on(destroy, this.destroy, this);
        this.parent.on(selectAll$1, this.selectAll, this);
        this.parent.on(selectRange, this.selectRange, this);
        this.parent.on(getSelectedHtml, this.getSelectedHtml, this);
        this.parent.on(selectionSave, this.onSelectionSave, this);
        this.parent.on(selectionRestore, this.onSelectionRestore, this);
        this.parent.on(readOnlyMode, this.updateReadOnly, this);
        this.parent.on(paste, this.onPaste, this);
    }
    updateReadOnly() {
        if (this.parent.readonly) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.attributes)(this.parent.contentModule.getEditPanel(), { contenteditable: 'false' });
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.parent.element], CLS_RTE_READONLY);
        }
        else {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.attributes)(this.parent.contentModule.getEditPanel(), { contenteditable: 'true' });
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.parent.element], CLS_RTE_READONLY);
        }
    }
    onSelectionSave() {
        const currentDocument = this.contentRenderer.getDocument();
        const range = this.nodeSelectionObj.getRange(currentDocument);
        this.saveSelection = this.nodeSelectionObj.save(range, currentDocument);
    }
    onSelectionRestore(e) {
        this.parent.isBlur = false;
        this.contentRenderer.getEditPanel().focus();
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.items) || e.items) {
            this.saveSelection.restore();
        }
    }
    onKeyUp(e) {
        let args = e.args;
        const restrictKeys = [8, 9, 13, 16, 17, 18, 20, 27, 37, 38, 39, 40, 44, 45, 46, 91,
            112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123];
        const range = this.parent.getRange();
        const regEx = new RegExp(String.fromCharCode(8203), 'g');
        let pointer;
        if (restrictKeys.indexOf(args.keyCode) < 0 && !args.shiftKey && !args.ctrlKey && !args.altKey) {
            if (range.startContainer.textContent.charCodeAt(0) === 8203) {
                pointer = range.startOffset - 1;
                range.startContainer.textContent = range.startContainer.textContent.replace(regEx, '');
                this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), range.startContainer, pointer);
            }
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(range.startContainer.previousSibling) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(range.startContainer.previousSibling.parentElement) &&
                range.startContainer.parentElement === range.startContainer.previousSibling.parentElement && range.startContainer.previousSibling.textContent.charCodeAt(0) === 8203) {
                range.startContainer.previousSibling.textContent = range.startContainer.previousSibling.textContent.replace(regEx, '');
            }
            if (range.endContainer.textContent.charCodeAt(range.endOffset) === 8203) {
                pointer = range.startOffset;
                range.endContainer.textContent = range.endContainer.textContent.replace(regEx, '');
                this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), range.startContainer, pointer);
            }
        }
    }
    onKeyDown(e) {
        let currentRange;
        const args = e.args;
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'chrome') {
            currentRange = this.parent.getRange();
            this.backSpaceCleanup(e, currentRange);
            this.deleteCleanup(e, currentRange);
        }
        if (args.keyCode === 9 && this.parent.enableTabKey) {
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.target) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.target, '.e-rte-toolbar'))) {
                const range = this.nodeSelectionObj.getRange(this.contentRenderer.getDocument());
                const parentNode = this.nodeSelectionObj.getParentNodeCollection(range);
                if (!((parentNode[0].nodeName === 'LI' || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(parentNode[0], 'li') ||
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(parentNode[0], 'table')) && range.startOffset === 0)) {
                    args.preventDefault();
                    if (!args.shiftKey) {
                        InsertHtml.Insert(this.contentRenderer.getDocument(), '&nbsp;&nbsp;&nbsp;&nbsp;');
                        this.rangeCollection.push(this.nodeSelectionObj.getRange(this.contentRenderer.getDocument()));
                    }
                    else if (this.rangeCollection.length > 0 &&
                        this.rangeCollection[this.rangeCollection.length - 1].startContainer.textContent.length === 4) {
                        const textCont = this.rangeCollection[this.rangeCollection.length - 1].startContainer;
                        this.nodeSelectionObj.setSelectionText(this.contentRenderer.getDocument(), textCont, textCont, 0, textCont.textContent.length);
                        InsertHtml.Insert(this.contentRenderer.getDocument(), document.createTextNode(''));
                        this.rangeCollection.pop();
                    }
                }
            }
        }
        if (e.args.action === 'space' ||
            e.args.action === 'enter' ||
            e.args.keyCode === 13) {
            this.spaceLink(e.args);
            if (this.parent.editorMode === 'HTML' && !this.parent.readonly) {
                this.parent.notify(enterHandler, { args: e.args });
            }
        }
        if (e.args.action === 'space') {
            const currentRange = this.parent.getRange();
            const editorValue = currentRange.startContainer.textContent.slice(0, currentRange.startOffset);
            const orderedList = this.isOrderedList(editorValue);
            const unOrderedList = this.isUnOrderedList(editorValue);
            if (orderedList && !unOrderedList || unOrderedList && !orderedList) {
                const eventArgs = {
                    callBack: null,
                    event: e.args,
                    name: 'keydown-handler'
                };
                const actionBeginArgs = {
                    cancel: false,
                    item: { command: 'Lists', subCommand: orderedList ? 'OL' : 'UL' },
                    name: 'actionBegin',
                    originalEvent: e.args,
                    requestType: orderedList ? 'OL' : 'UL'
                };
                this.parent.trigger(actionBegin, actionBeginArgs, (actionBeginArgs) => {
                    if (!actionBeginArgs.cancel) {
                        this.parent.formatter.editorManager.observer.notify(ON_BEGIN, eventArgs);
                        this.parent.trigger(actionComplete, {
                            editorMode: this.parent.editorMode,
                            elements: this.parent.formatter.editorManager.domNode.blockNodes(),
                            event: e.args,
                            name: actionComplete,
                            range: this.parent.getRange(),
                            requestType: orderedList ? 'OL' : 'UL'
                        });
                    }
                });
            }
        }
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'chrome' && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.rangeElement) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.oldRangeElement) ||
            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.deleteRangeElement) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.deleteOldRangeElement)) &&
            currentRange.startContainer.parentElement.tagName !== 'TD' && currentRange.startContainer.parentElement.tagName !== 'TH') {
            this.rangeElement = null;
            this.oldRangeElement = null;
            this.deleteRangeElement = null;
            this.deleteOldRangeElement = null;
            if (!this.isImageDelete) {
                args.preventDefault();
            }
        }
    }
    isOrderedList(editorValue) {
        editorValue = editorValue.replace(/\u200B/g, '');
        const olListStartRegex = [/^[1]+[.]+$/, /^[i]+[.]+$/, /^[a]+[.]+$/];
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(editorValue)) {
            for (let i = 0; i < olListStartRegex.length; i++) {
                if (olListStartRegex[i].test(editorValue)) {
                    return true;
                }
            }
        }
        return false;
    }
    isUnOrderedList(editorValue) {
        editorValue = editorValue.replace(/\u200B/g, '');
        const ulListStartRegex = [/^[*]$/, /^[-]$/];
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(editorValue)) {
            for (let i = 0; i < ulListStartRegex.length; i++) {
                if (ulListStartRegex[i].test(editorValue)) {
                    return true;
                }
            }
        }
        return false;
    }
    backSpaceCleanup(e, currentRange) {
        let isLiElement = false;
        if (e.args.code === 'Backspace' && e.args.keyCode === 8 && currentRange.startOffset === 0 &&
            currentRange.endOffset === 0 && this.parent.getSelection().length === 0 && currentRange.startContainer.textContent.length > 0 &&
            currentRange.startContainer.parentElement.tagName !== 'TD' && currentRange.startContainer.parentElement.tagName !== 'TH') {
            this.rangeElement = this.getRootBlockNode(currentRange.startContainer);
            if (this.rangeElement.tagName === 'OL' || this.rangeElement.tagName === 'UL') {
                const liElement = this.getRangeLiNode(currentRange.startContainer);
                if (liElement.previousElementSibling && liElement.previousElementSibling.childElementCount > 0) {
                    this.oldRangeElement = liElement.previousElementSibling.lastElementChild.nodeName === 'BR' ?
                        liElement.previousElementSibling : liElement.previousElementSibling.lastElementChild;
                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(liElement.lastElementChild) && liElement.lastElementChild.nodeName !== 'BR') {
                        this.rangeElement = liElement.lastElementChild;
                        isLiElement = true;
                    }
                    else {
                        this.rangeElement = liElement;
                    }
                }
            }
            else if (this.rangeElement.tagName === 'TABLE' || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.rangeElement.previousElementSibling) &&
                this.rangeElement.previousElementSibling.tagName === 'TABLE')) {
                return;
            }
            else {
                this.oldRangeElement = this.rangeElement.previousElementSibling;
            }
            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.oldRangeElement)) {
                return;
            }
            else {
                if (this.oldRangeElement.tagName === 'OL' || this.oldRangeElement.tagName === 'UL') {
                    this.oldRangeElement = this.oldRangeElement.lastElementChild.lastElementChild
                        ? this.oldRangeElement.lastElementChild.lastElementChild :
                        this.oldRangeElement.lastElementChild;
                }
                this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), 
                // eslint-disable-next-line
                this.oldRangeElement, this.oldRangeElement.childNodes.length);
                if (this.oldRangeElement.querySelector('BR')) {
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.oldRangeElement.querySelector('BR'));
                }
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.rangeElement) && this.oldRangeElement !== this.rangeElement) {
                    while (this.rangeElement.firstChild) {
                        this.oldRangeElement.appendChild(this.rangeElement.childNodes[0]);
                    }
                    // eslint-disable-next-line
                    !isLiElement ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.rangeElement) : (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.rangeElement.parentElement);
                    this.oldRangeElement.normalize();
                }
            }
        }
    }
    deleteCleanup(e, currentRange) {
        let isLiElement = false;
        let liElement;
        let rootElement;
        if (e.args.code === 'Delete' && e.args.keyCode === 46 &&
            this.parent.contentModule.getText().trim().length !== 0 && this.parent.getSelection().length === 0 && currentRange.startContainer.parentElement.tagName !== 'TD' &&
            currentRange.startContainer.parentElement.tagName !== 'TH') {
            this.deleteRangeElement = rootElement = this.getRootBlockNode(currentRange.startContainer);
            if (this.deleteRangeElement.tagName === 'OL' || this.deleteRangeElement.tagName === 'UL') {
                liElement = this.getRangeLiNode(currentRange.startContainer);
                if (liElement.nextElementSibling && liElement.nextElementSibling.childElementCount > 0
                    && !liElement.nextElementSibling.querySelector('BR')) {
                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(liElement.lastElementChild)) {
                        this.deleteRangeElement = liElement.lastElementChild;
                        isLiElement = true;
                    }
                    else {
                        this.deleteRangeElement = liElement;
                    }
                }
                else {
                    this.deleteRangeElement = this.getRangeElement(liElement);
                }
            }
            else if (this.deleteRangeElement.nodeType === 3 || (this.deleteRangeElement.tagName === 'TABLE' ||
                (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.deleteRangeElement.nextElementSibling) && this.deleteRangeElement.nextElementSibling.tagName === 'TABLE'))) {
                return;
            }
            if (this.getCaretIndex(currentRange, this.deleteRangeElement) === this.deleteRangeElement.textContent.length) {
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(liElement)) {
                    if (isLiElement || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(liElement.nextElementSibling)) {
                        this.deleteOldRangeElement = this.getRangeElement(liElement.nextElementSibling);
                    }
                    else {
                        this.deleteOldRangeElement = rootElement.nextElementSibling;
                    }
                }
                else {
                    this.deleteOldRangeElement = this.deleteRangeElement.nextElementSibling;
                }
                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.deleteOldRangeElement)) {
                    return;
                }
                else {
                    if (currentRange.startOffset === 0 && currentRange.endOffset === 1 &&
                        this.deleteRangeElement.childNodes[0].nodeName === 'IMG') {
                        this.parent.formatter.editorManager.nodeSelection.setSelectionText(this.parent.contentModule.getDocument(), this.deleteRangeElement, this.deleteRangeElement, 0, 1);
                        this.isImageDelete = true;
                    }
                    else {
                        this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), this.deleteRangeElement, this.deleteRangeElement.childNodes.length);
                        this.isImageDelete = false;
                    }
                    if (this.deleteRangeElement.querySelector('BR')) {
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.deleteRangeElement.querySelector('BR'));
                    }
                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.deleteRangeElement) && (this.deleteOldRangeElement.tagName !== 'OL' && this.deleteOldRangeElement.tagName !== 'UL')
                        && this.deleteOldRangeElement !== this.deleteRangeElement) {
                        while (this.deleteOldRangeElement.firstChild) {
                            this.deleteRangeElement.appendChild(this.deleteOldRangeElement.childNodes[0]);
                        }
                        if (!isLiElement) {
                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.deleteOldRangeElement);
                        }
                        else {
                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.deleteOldRangeElement.parentElement);
                        }
                        this.deleteRangeElement.normalize();
                    }
                    else {
                        this.deleteRangeElement = null;
                        this.deleteOldRangeElement = null;
                    }
                }
            }
            else {
                this.deleteRangeElement = null;
            }
        }
    }
    getCaretIndex(currentRange, element) {
        let position = 0;
        if (this.parent.contentModule.getDocument().getSelection().rangeCount !== 0) {
            const preCaretRange = currentRange.cloneRange();
            preCaretRange.selectNodeContents(element);
            preCaretRange.setEnd(currentRange.endContainer, currentRange.endOffset);
            position = preCaretRange.toString().length;
        }
        return position;
    }
    getRangeElement(element) {
        const rangeElement = element.lastElementChild ? element.lastElementChild.tagName === 'BR' ?
            element.lastElementChild.previousElementSibling ? element.lastElementChild.previousElementSibling
                : element : element.lastElementChild : element;
        return rangeElement;
    }
    getRootBlockNode(rangeBlockNode) {
        // eslint-disable-next-line
        for (; rangeBlockNode && this.parent && this.parent.inputElement !== rangeBlockNode; rangeBlockNode = rangeBlockNode) {
            if (rangeBlockNode.parentElement === this.parent.inputElement) {
                break;
            }
            else {
                rangeBlockNode = rangeBlockNode.parentElement;
            }
        }
        return rangeBlockNode;
    }
    getRangeLiNode(rangeLiNode) {
        let node = rangeLiNode.parentElement;
        while (node !== this.parent.inputElement) {
            if (node.nodeType === 1 && node.tagName === 'LI') {
                break;
            }
            node = node.parentElement;
        }
        return node;
    }
    onPaste(e) {
        // eslint-disable-next-line
        const regex = new RegExp(/([^\S]|^)(((https?\:\/\/)|(www\.))(\S+))/gi);
        if (e.text.match(regex)) {
            if (e.isWordPaste) {
                return;
            }
            e.args.preventDefault();
            const range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
            // eslint-disable-next-line
            const saveSelection = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument());
            // eslint-disable-next-line
            const httpRegex = new RegExp(/([^\S]|^)(((https?\:\/\/)))/gi);
            const wwwRegex = new RegExp(/([^\S]|^)(((www\.))(\S+))/gi);
            const enterSplitText = e.text.split('\n');
            let contentInnerElem = '';
            for (let i = 0; i < enterSplitText.length; i++) {
                if (enterSplitText[i].trim() === '') {
                    contentInnerElem += getDefaultValue(this.parent);
                }
                else {
                    let contentWithSpace = '';
                    let spaceBetweenContent = true;
                    const spaceSplit = enterSplitText[i].split(' ');
                    for (let j = 0; j < spaceSplit.length; j++) {
                        if (spaceSplit[j].trim() === '') {
                            contentWithSpace += spaceBetweenContent ? '&nbsp;' : ' ';
                        }
                        else {
                            spaceBetweenContent = false;
                            contentWithSpace += spaceSplit[j] + ' ';
                        }
                    }
                    if (i === 0) {
                        contentInnerElem += '<span>' + contentWithSpace.trim() + '</span>';
                    }
                    else {
                        contentInnerElem += '<p>' + contentWithSpace.trim() + '</p>';
                    }
                }
            }
            const divElement = this.parent.createElement('div');
            divElement.setAttribute('class', 'pasteContent');
            divElement.style.display = 'inline';
            divElement.innerHTML = contentInnerElem.replace('&para', '&amp;para');
            const paraElem = divElement.querySelectorAll('span, p');
            for (let i = 0; i < paraElem.length; i++) {
                const splitTextContent = paraElem[i].innerHTML.split(' ');
                let resultSplitContent = '';
                for (let j = 0; j < splitTextContent.length; j++) {
                    if (splitTextContent[j].match(httpRegex) || splitTextContent[j].match(wwwRegex)) {
                        resultSplitContent += '<a className="e-rte-anchor" href="' + splitTextContent[j] +
                            '" title="' + splitTextContent[j] + '"target="_blank">' + splitTextContent[j] + ' </a>';
                    }
                    else {
                        resultSplitContent += splitTextContent[j] + ' ';
                    }
                }
                paraElem[i].innerHTML = resultSplitContent.trim();
            }
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.pasteCleanupModule)) {
                e.callBack(divElement.innerHTML);
            }
            else {
                this.parent.formatter.editorManager.execCommand('insertHTML', null, null, null, divElement);
            }
        }
    }
    spaceLink(e) {
        const range = this.nodeSelectionObj.getRange(this.contentRenderer.getDocument());
        const selectNodeEle = this.nodeSelectionObj.getParentNodeCollection(range);
        const text = range.startContainer.textContent.substr(0, range.endOffset);
        const splitText = text.split(' ');
        let urlText = splitText[splitText.length - 1];
        const urlTextRange = range.startOffset - (text.length - splitText[splitText.length - 1].length);
        urlText = urlText.slice(0, urlTextRange);
        // eslint-disable-next-line
        const regex = new RegExp(/([^\S]|^)(((https?\:\/\/)|(www\.))(\S+))/gi);
        if (selectNodeEle[0].nodeName !== 'A' && urlText.match(regex)) {
            const selection = this.nodeSelectionObj.save(range, this.parent.contentModule.getDocument());
            const url = urlText.indexOf('http') > -1 ? urlText : 'http://' + urlText;
            const selectParent = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
            const value = {
                url: url,
                selection: selection, selectParent: selectParent,
                text: urlText,
                title: '',
                target: '_blank'
            };
            this.parent.formatter.process(this.parent, {
                item: {
                    'command': 'Links',
                    'subCommand': 'CreateLink'
                }
            }, e, value);
        }
    }
    onToolbarClick(args) {
        let save;
        let selectNodeEle;
        let selectParentEle;
        const item = args.item;
        const closestElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.originalEvent.target, '.e-rte-quick-popup');
        if (closestElement && !closestElement.classList.contains('e-rte-inline-popup')) {
            if (!(item.subCommand === 'SourceCode' || item.subCommand === 'Preview' ||
                item.subCommand === 'FontColor' || item.subCommand === 'BackgroundColor')) {
                if (isIDevice$1() && item.command === 'Images') {
                    this.nodeSelectionObj.restore();
                }
                const range = this.nodeSelectionObj.getRange(this.parent.contentModule.getDocument());
                save = this.nodeSelectionObj.save(range, this.parent.contentModule.getDocument());
                selectNodeEle = this.nodeSelectionObj.getNodeCollection(range);
                selectParentEle = this.nodeSelectionObj.getParentNodeCollection(range);
            }
            if (item.command === 'Images') {
                this.parent.notify(imageToolbarAction, {
                    member: 'image', args: args, selectNode: selectNodeEle, selection: save, selectParent: selectParentEle
                });
            }
            if (item.command === 'Links') {
                this.parent.notify(linkToolbarAction, {
                    member: 'link', args: args, selectNode: selectNodeEle, selection: save, selectParent: selectParentEle
                });
            }
            if (item.command === 'Table') {
                this.parent.notify(tableToolbarAction, {
                    member: 'table', args: args, selectNode: selectNodeEle, selection: save, selectParent: selectParentEle
                });
            }
        }
        else {
            const linkDialog = document.getElementById(this.parent.getID() + '_rtelink');
            const imageDialog = document.getElementById(this.parent.getID() + '_image');
            if (!(item.subCommand === 'SourceCode' || item.subCommand === 'Preview' ||
                item.subCommand === 'FontColor' || item.subCommand === 'BackgroundColor')) {
                const range = this.nodeSelectionObj.getRange(this.parent.contentModule.getDocument());
                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(linkDialog) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(imageDialog)) {
                    save = this.nodeSelectionObj.save(range, this.parent.contentModule.getDocument());
                }
                selectNodeEle = this.nodeSelectionObj.getNodeCollection(range);
                selectParentEle = this.nodeSelectionObj.getParentNodeCollection(range);
            }
            switch (item.subCommand) {
                case 'Maximize':
                    this.parent.notify(enableFullScreen, { args: args });
                    break;
                case 'Minimize':
                    this.parent.notify(disableFullScreen, { args: args });
                    break;
                case 'CreateLink':
                    this.parent.notify(insertLink, {
                        member: 'link', args: args, selectNode: selectNodeEle, selection: save, selectParent: selectParentEle
                    });
                    break;
                case 'RemoveLink':
                    this.parent.notify(unLink, {
                        member: 'link', args: args, selectNode: selectNodeEle, selection: save, selectParent: selectParentEle
                    });
                    break;
                case 'Print':
                    this.parent.print();
                    break;
                case 'Image':
                    this.parent.notify(insertImage, {
                        member: 'image', args: args, selectNode: selectNodeEle, selection: save, selectParent: selectParentEle
                    });
                    break;
                case 'CreateTable':
                    this.parent.notify(createTable, {
                        member: 'table', args: args, selection: save
                    });
                    break;
                case 'SourceCode':
                    this.parent.notify(sourceCode, { member: 'viewSource', args: args });
                    break;
                case 'Preview':
                    this.parent.notify(updateSource, { member: 'updateSource', args: args });
                    break;
                case 'FontColor':
                case 'BackgroundColor':
                    break;
                case 'File':
                    this.parent.notify(renderFileManager, {
                        member: 'fileManager', args: args, selectNode: selectNodeEle, selection: save, selectParent: selectParentEle
                    });
                    break;
                default:
                    this.parent.formatter.process(this.parent, args, args.originalEvent, null);
                    break;
            }
        }
    }
    renderColorPicker(args) {
        this.colorPickerModule.renderColorPickerInput(args);
    }
    instantiateRenderer() {
        if (this.parent.iframeSettings.enable) {
            this.renderFactory.addRenderer(RenderType.Content, new IframeContentRender(this.parent, this.locator));
        }
        else {
            this.renderFactory.addRenderer(RenderType.Content, new ContentRender(this.parent, this.locator));
        }
    }
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(initialEnd, this.render);
        this.parent.off(modelChanged, this.onPropertyChanged);
        this.parent.off(htmlToolbarClick, this.onToolbarClick);
        this.parent.off(renderColorPicker, this.renderColorPicker);
        this.parent.off(destroy, this.destroy);
        this.parent.off(keyDown, this.onKeyDown);
        this.parent.off(initialLoad, this.instantiateRenderer);
        this.parent.off(selectAll$1, this.selectAll);
        this.parent.off(selectRange, this.selectRange);
        this.parent.off(getSelectedHtml, this.getSelectedHtml);
        this.parent.off(selectionSave, this.onSelectionSave);
        this.parent.off(selectionRestore, this.onSelectionRestore);
        this.parent.off(readOnlyMode, this.updateReadOnly);
        this.parent.off(paste, this.onPaste);
    }
    render() {
        this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);
        const editElement = this.contentRenderer.getEditPanel();
        const option = { undoRedoSteps: this.parent.undoRedoSteps, undoRedoTimer: this.parent.undoRedoTimer };
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.formatter)) {
            const formatterClass = new HTMLFormatter({
                currentDocument: this.contentRenderer.getDocument(),
                element: editElement,
                options: option
            });
            this.parent.setProperties({ formatter: formatterClass }, true);
        }
        else {
            this.parent.formatter.updateFormatter(editElement, this.contentRenderer.getDocument(), option);
        }
        if (this.parent.enableXhtml) {
            this.parent.notify(xhtmlValidation, {});
        }
        if (this.parent.toolbarSettings.enable) {
            this.toolbarUpdate = new HtmlToolbarStatus(this.parent);
        }
        if (this.parent.inlineMode.enable) {
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.fontFamily.default)) {
                editElement.style.fontFamily = this.parent.fontFamily.default;
            }
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.fontSize.default)) {
                editElement.style.fontSize = this.parent.fontSize.default;
            }
        }
        this.parent.notify(bindOnEnd, {});
    }
    /**
     * Called internally if any of the property value changed.
     *
     * @param {RichTextEditorModel} e - specifies the editor model
     * @returns {void}
     * @hidden
     * @deprecated
     */
    onPropertyChanged(e) {
        // On property code change here
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.newProp.formatter)) {
            const editElement = this.contentRenderer.getEditPanel();
            const option = { undoRedoSteps: this.parent.undoRedoSteps,
                undoRedoTimer: this.parent.undoRedoTimer };
            this.parent.formatter.updateFormatter(editElement, this.contentRenderer.getDocument(), option);
        }
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} - returns the string value
     * @hidden
     */
    getModuleName() {
        return 'htmlEditor';
    }
    /**
     * For selecting all content in RTE
     *
     * @returns {void}
     * @private
     * @hidden
     */
    selectAll() {
        const nodes = getTextNodesUnder(this.parent.contentModule.getDocument(), this.parent.contentModule.getEditPanel());
        if (nodes.length > 0) {
            this.parent.formatter.editorManager.nodeSelection.setSelectionText(this.parent.contentModule.getDocument(), nodes[0], nodes[nodes.length - 1], 0, nodes[nodes.length - 1].textContent.length);
        }
    }
    /**
     * For selecting all content in RTE
     *
     * @param {NotifyArgs} e - specifies the notified arguments
     * @returns {void}
     * @private
     * @hidden
     */
    selectRange(e) {
        this.parent.formatter.editorManager.nodeSelection.setRange(this.parent.contentModule.getDocument(), e.range);
    }
    /**
     * For get a selected text in RTE
     *
     * @param {NotifyArgs} e - specifies the notified arguments
     * @returns {void}
     * @hidden
     */
    getSelectedHtml(e) {
        e.callBack(this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument()).toString());
    }
}

/**
 * PasteCleanup module called when pasting content in RichTextEditor
 */
class PasteCleanup {
    constructor(parent, serviceLocator) {
        this.inlineNode = ['a', 'abbr', 'acronym', 'audio', 'b', 'bdi', 'bdo', 'big', 'br', 'button',
            'canvas', 'cite', 'code', 'data', 'datalist', 'del', 'dfn', 'em', 'embed', 'font', 'i', 'iframe', 'img', 'input',
            'ins', 'kbd', 'label', 'map', 'mark', 'meter', 'noscript', 'object', 'output', 'picture', 'progress',
            'q', 'ruby', 's', 'samp', 'script', 'select', 'slot', 'small', 'span', 'strong', 'sub', 'sup', 'svg',
            'template', 'textarea', 'time', 'u', 'tt', 'var', 'video', 'wbr'];
        this.blockNode = ['div', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
            'address', 'blockquote', 'button', 'center', 'dd', 'dir', 'dl', 'dt', 'fieldset',
            'frameset', 'hr', 'iframe', 'isindex', 'li', 'map', 'menu', 'noframes', 'noscript',
            'object', 'ol', 'pre', 'td', 'tr', 'th', 'tbody', 'tfoot', 'thead', 'table', 'ul',
            'header', 'article', 'nav', 'footer', 'section', 'aside', 'main', 'figure', 'figcaption'];
        this.isNotFromHtml = false;
        this.containsHtml = false;
        this.parent = parent;
        this.locator = serviceLocator;
        this.renderFactory = this.locator.getService('rendererFactory');
        this.i10n = serviceLocator.getService('rteLocale');
        this.dialogRenderObj = serviceLocator.getService('dialogRenderObject');
        this.addEventListener();
    }
    addEventListener() {
        this.nodeSelectionObj = new NodeSelection();
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(pasteClean, this.pasteClean, this);
        this.parent.on(destroy, this.destroy, this);
    }
    destroy() {
        this.removeEventListener();
    }
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(pasteClean, this.pasteClean);
        this.parent.off(destroy, this.destroy);
    }
    pasteClean(e) {
        const args = {
            requestType: 'Paste',
            editorMode: this.parent.editorMode,
            event: e
        };
        let value = null;
        let imageproperties;
        if (e.args && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.args.clipboardData)) {
            value = e.args.clipboardData.getData('text/html');
        }
        this.parent.trigger(beforePasteCleanup, { value: value });
        if (e.args && value !== null && this.parent.editorMode === 'HTML') {
            if (value.length === 0) {
                const htmlRegex = new RegExp(/<\/[a-z][\s\S]*>/i);
                value = e.args.clipboardData.getData('text/plain');
                this.isNotFromHtml = value !== '' ? true : false;
                value = value.replace(/</g, '&lt;');
                value = value.replace(/>/g, '&gt;');
                this.containsHtml = htmlRegex.test(value);
                const file = e && e.args.clipboardData &&
                    e.args.clipboardData.items.length > 0 ?
                    e.args.clipboardData.items[0].getAsFile() : null;
                this.parent.notify(paste, {
                    file: file,
                    args: e.args,
                    text: value,
                    callBack: (b) => {
                        imageproperties = b;
                        if (typeof (imageproperties) === 'object') {
                            this.parent.formatter.editorManager.execCommand('Images', 'Image', e.args, this.imageFormatting.bind(this, args), 'pasteCleanup', imageproperties, 'pasteCleanupModule');
                        }
                        else {
                            value = imageproperties;
                        }
                    }
                });
                if (!htmlRegex.test(value)) {
                    const divElement = this.parent.createElement('div');
                    divElement.innerHTML = this.splitBreakLine(value);
                    value = divElement.innerHTML;
                }
            }
            else if (value.length > 0) {
                this.parent.formatter.editorManager.observer.notify(MS_WORD_CLEANUP, {
                    args: e.args,
                    text: e.text,
                    allowedStylePropertiesArray: this.parent.pasteCleanupSettings.allowedStyleProps,
                    callBack: (a) => {
                        value = a.trim();
                    }
                });
            }
            this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);
            const currentDocument = this.contentRenderer.getDocument();
            const range = this.nodeSelectionObj.getRange(currentDocument);
            this.saveSelection = this.nodeSelectionObj.save(range, currentDocument);
            this.parent.trigger(afterPasteCleanup, { value: value }, (updatedArgs) => {
                value = updatedArgs.value;
            });
            if (this.parent.pasteCleanupSettings.prompt) {
                e.args.preventDefault();
                const tempDivElem = this.parent.createElement('div');
                tempDivElem.innerHTML = value;
                if (tempDivElem.textContent !== '' || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(tempDivElem.querySelector('img')) ||
                    !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(tempDivElem.querySelector('table'))) {
                    this.pasteDialog(value, args);
                }
            }
            else if (this.parent.pasteCleanupSettings.plainText) {
                e.args.preventDefault();
                this.plainFormatting(value, args);
            }
            else if (this.parent.pasteCleanupSettings.keepFormat) {
                e.args.preventDefault();
                this.formatting(value, false, args);
            }
            else {
                e.args.preventDefault();
                this.formatting(value, true, args);
            }
        }
    }
    splitBreakLine(value) {
        const enterSplitText = value.split('\n');
        let contentInnerElem = '';
        for (let i = 0; i < enterSplitText.length; i++) {
            if (enterSplitText[i].trim() === '') {
                contentInnerElem += getDefaultValue(this.parent);
            }
            else {
                const contentWithSpace = this.makeSpace(enterSplitText[i]);
                contentInnerElem += '<p>' + contentWithSpace.trim() + '</p>';
            }
        }
        return contentInnerElem;
    }
    makeSpace(enterSplitText) {
        let contentWithSpace = '';
        let spaceBetweenContent = true;
        const spaceSplit = enterSplitText.split(' ');
        for (let j = 0; j < spaceSplit.length; j++) {
            if (spaceSplit[j].trim() === '') {
                contentWithSpace += spaceBetweenContent ? '&nbsp;' : ' ';
            }
            else {
                spaceBetweenContent = false;
                contentWithSpace += spaceSplit[j] + ' ';
            }
        }
        return contentWithSpace;
    }
    imgUploading(elm) {
        const allImgElm = elm.querySelectorAll('.pasteContent_Img');
        if (this.parent.insertImageSettings.saveUrl && allImgElm.length > 0) {
            const base64Src = [];
            const imgName = [];
            const uploadImg = [];
            for (let i = 0; i < allImgElm.length; i++) {
                if (allImgElm[i].getAttribute('src').split(',')[0].indexOf('base64') >= 0) {
                    base64Src.push(allImgElm[i].getAttribute('src'));
                    imgName.push((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.getUniqueID)('rte_image'));
                    uploadImg.push(allImgElm[i]);
                }
            }
            const fileList = [];
            for (let i = 0; i < base64Src.length; i++) {
                fileList.push(this.base64ToFile(base64Src[i], imgName[i]));
            }
            for (let i = 0; i < fileList.length; i++) {
                this.uploadMethod(fileList[i], uploadImg[i]);
            }
            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.insertImageSettings.path) &&
                this.parent.insertImageSettings.saveFormat === 'Blob') {
                this.getBlob(allImgElm);
            }
        }
        else if (this.parent.insertImageSettings.saveFormat === 'Blob') {
            this.getBlob(allImgElm);
        }
        const allImgElmId = elm.querySelectorAll('.pasteContent_Img');
        for (let i = 0; i < allImgElmId.length; i++) {
            allImgElmId[i].classList.remove('pasteContent_Img');
            if (allImgElmId[i].getAttribute('class').trim() === '') {
                allImgElm[i].removeAttribute('class');
            }
        }
    }
    getBlob(allImgElm) {
        for (let i = 0; i < allImgElm.length; i++) {
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(allImgElm[i].getAttribute('src')) &&
                allImgElm[i].getAttribute('src').split(',')[0].indexOf('base64') >= 0) {
                const blopUrl = URL.createObjectURL(convertToBlob(allImgElm[i].getAttribute('src')));
                allImgElm[i].setAttribute('src', blopUrl);
            }
        }
    }
    toolbarEnableDisable(state) {
        if (!this.parent.inlineMode.enable) {
            this.parent.toolbarModule.baseToolbar.toolbarObj.disable(state);
        }
    }
    uploadMethod(fileList, imgElem) {
        const uploadEle = document.createElement('div');
        document.body.appendChild(uploadEle);
        uploadEle.setAttribute('display', 'none');
        imgElem.style.opacity = '0.5';
        const popupEle = this.parent.createElement('div');
        this.parent.element.appendChild(popupEle);
        const contentEle = this.parent.createElement('input', {
            id: this.parent.element.id + '_upload', attrs: { type: 'File', name: 'UploadFiles' }
        });
        const offsetY = this.parent.iframeSettings.enable ? -50 : -90;
        const popupObj = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_4__.Popup(popupEle, {
            relateTo: imgElem,
            height: '85px',
            width: '300px',
            offsetY: offsetY,
            content: contentEle,
            viewPortElement: this.parent.element,
            position: { X: 'center', Y: 'top' },
            enableRtl: this.parent.enableRtl,
            zIndex: 10001,
            // eslint-disable-next-line
            close: (event) => {
                this.parent.isBlur = false;
                popupObj.destroy();
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(popupObj.element);
            }
        });
        popupObj.element.style.display = 'none';
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([popupObj.element], [CLS_POPUP_OPEN, CLS_RTE_UPLOAD_POPUP]);
        const timeOut = fileList.size > 1000000 ? 300 : 100;
        setTimeout(() => {
            this.refreshPopup(imgElem, popupObj);
        }, timeOut);
        let rawFile;
        let beforeUploadArgs;
        const uploadObj = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_3__.Uploader({
            asyncSettings: {
                saveUrl: this.parent.insertImageSettings.saveUrl,
                removeUrl: this.parent.insertImageSettings.removeUrl
            },
            cssClass: CLS_RTE_DIALOG_UPLOAD,
            dropArea: this.parent.inputElement,
            allowedExtensions: this.parent.insertImageSettings.allowedTypes.toString(),
            success: (e) => {
                setTimeout(() => {
                    this.popupClose(popupObj, uploadObj, imgElem, e);
                }, 900);
            },
            uploading: (e) => {
                if (!this.parent.isServerRendered) {
                    this.parent.trigger(imageUploading, e, (imageUploadingArgs) => {
                        if (imageUploadingArgs.cancel) {
                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(imgElem)) {
                                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(imgElem);
                            }
                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(popupObj.element)) {
                                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(popupObj.element);
                            }
                        }
                        else {
                            this.parent.inputElement.contentEditable = 'false';
                        }
                    });
                }
            },
            beforeUpload: (args) => {
                if (this.parent.isServerRendered) {
                    beforeUploadArgs = JSON.parse(JSON.stringify(args));
                    beforeUploadArgs.filesData = rawFile;
                    args.cancel = true;
                    this.parent.trigger(imageUploading, beforeUploadArgs, (beforeUploadArgs) => {
                        if (beforeUploadArgs.cancel) {
                            return;
                        }
                        this.toolbarEnableDisable(true);
                        /* eslint-disable */
                        uploadObj.currentRequestHeader = beforeUploadArgs.currentRequest ?
                            beforeUploadArgs.currentRequest : uploadObj.currentRequestHeader;
                        uploadObj.customFormDatas = beforeUploadArgs.customFormData && beforeUploadArgs.customFormData.length > 0 ?
                            beforeUploadArgs.customFormData : uploadObj.customFormDatas;
                        uploadObj.uploadFiles(rawFile, null);
                        /* eslint-enable */
                    });
                }
                else {
                    this.parent.trigger(beforeImageUpload, args);
                    this.toolbarEnableDisable(true);
                }
            },
            // eslint-disable-next-line
            failure: (e) => {
                setTimeout(() => {
                    this.uploadFailure(imgElem, uploadObj, popupObj, e);
                }, 900);
            },
            canceling: () => {
                this.parent.inputElement.contentEditable = 'true';
                if (imgElem.nextSibling.textContent === ' ') {
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(imgElem.nextSibling);
                }
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(imgElem);
                popupObj.close();
            },
            selected: (e) => {
                e.cancel = true;
                if (this.parent.isServerRendered) {
                    rawFile = e.filesData;
                }
            },
            removing: () => {
                this.parent.inputElement.contentEditable = 'true';
                if (imgElem.nextSibling.textContent === ' ') {
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(imgElem.nextSibling);
                }
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(imgElem);
                popupObj.close();
            }
        });
        uploadObj.appendTo(popupObj.element.childNodes[0]);
        /* eslint-disable */
        let fileData = [{
                name: fileList.name,
                rawFile: fileList,
                size: fileList.size,
                type: fileList.type,
                validationMessages: { minSize: "", maxSize: "" },
                statusCode: '1'
            }];
        uploadObj.createFileList(fileData);
        uploadObj.filesData.push(fileData[0]);
        /* eslint-enable */
        rawFile = fileData;
        uploadObj.upload(fileData);
        popupObj.element.getElementsByClassName('e-file-select-wrap')[0].style.display = 'none';
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(popupObj.element.querySelector('.e-rte-dialog-upload .e-file-select-wrap'));
    }
    uploadFailure(imgElem, uploadObj, popupObj, e) {
        this.parent.inputElement.contentEditable = 'true';
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(imgElem);
        if (popupObj) {
            popupObj.close();
        }
        this.parent.trigger(imageUploadFailed, e);
        uploadObj.destroy();
    }
    popupClose(popupObj, uploadObj, imgElem, e) {
        this.parent.inputElement.contentEditable = 'true';
        e.element = imgElem;
        this.parent.trigger(imageUploadSuccess, e, (e) => {
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.insertImageSettings.path)) {
                const url = this.parent.insertImageSettings.path + e.file.name;
                imgElem.src = url;
                imgElem.setAttribute('alt', e.file.name);
            }
        });
        popupObj.close();
        imgElem.style.opacity = '1';
        uploadObj.destroy();
        this.toolbarEnableDisable(false);
    }
    refreshPopup(imageElement, popupObj) {
        const imgPosition = this.parent.iframeSettings.enable ? this.parent.element.offsetTop +
            imageElement.offsetTop : imageElement.offsetTop;
        const rtePosition = this.parent.element.offsetTop + this.parent.element.offsetHeight;
        if (imgPosition > rtePosition) {
            popupObj.relateTo = this.parent.inputElement;
            popupObj.offsetY = this.parent.iframeSettings.enable ? -30 : -65;
            popupObj.element.style.display = 'block';
        }
        else {
            if (popupObj) {
                popupObj.refreshPosition(imageElement);
                popupObj.element.style.display = 'block';
            }
        }
    }
    base64ToFile(base64, filename) {
        const baseStr = base64.split(',');
        const typeStr = baseStr[0].match(/:(.*?);/)[1];
        const extension = typeStr.split('/')[1];
        const decodeStr = atob(baseStr[1]);
        let strLen = decodeStr.length;
        const decodeArr = new Uint8Array(strLen);
        while (strLen--) {
            decodeArr[strLen] = decodeStr.charCodeAt(strLen);
        }
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE || navigator.appVersion.indexOf('Edge') > -1) {
            const blob = new Blob([decodeArr], { type: extension });
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(blob, { name: filename + '.' + (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(extension) ? extension : '') });
            return blob;
        }
        else {
            return new File([decodeArr], filename + '.' + (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(extension) ? extension : ''), { type: extension });
        }
    }
    /**
     * Method for image formatting when pasting
     *
     * @param {Object} pasteArgs - specifies the paste arguments.
     * @param {Element []} imgElement - specifies the array elements.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    imageFormatting(pasteArgs, imgElement) {
        const imageElement = this.parent.createElement('span');
        imageElement.appendChild(imgElement.elements[0]);
        const imageValue = imageElement.innerHTML;
        this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);
        const currentDocument = this.contentRenderer.getDocument();
        const range = this.nodeSelectionObj.getRange(currentDocument);
        this.saveSelection = this.nodeSelectionObj.save(range, currentDocument);
        if (this.parent.pasteCleanupSettings.prompt) {
            this.pasteDialog(imageValue, pasteArgs);
        }
        else if (this.parent.pasteCleanupSettings.plainText) {
            this.plainFormatting(imageValue, pasteArgs);
        }
        else if (this.parent.pasteCleanupSettings.keepFormat) {
            this.formatting(imageValue, false, pasteArgs);
        }
        else {
            this.formatting(imageValue, true, pasteArgs);
        }
    }
    radioRender() {
        const keepRadioButton = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_5__.RadioButton({ label: this.i10n.getConstant('keepFormat'),
            name: 'pasteOption', checked: true });
        keepRadioButton.isStringTemplate = true;
        const keepFormatElement = this.parent.element.querySelector('#keepFormating');
        keepRadioButton.appendTo(keepFormatElement);
        const cleanRadioButton = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_5__.RadioButton({ label: this.i10n.getConstant('cleanFormat'), name: 'pasteOption' });
        cleanRadioButton.isStringTemplate = true;
        const cleanFormatElement = this.parent.element.querySelector('#cleanFormat');
        cleanRadioButton.appendTo(cleanFormatElement);
        const plainTextRadioButton = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_5__.RadioButton({ label: this.i10n.getConstant('plainText'), name: 'pasteOption' });
        plainTextRadioButton.isStringTemplate = true;
        const plainTextElement = this.parent.element.querySelector('#plainTextFormat');
        plainTextRadioButton.appendTo(plainTextElement);
    }
    selectFormatting(value, args, keepChecked, cleanChecked) {
        if (keepChecked) {
            this.formatting(value, false, args);
        }
        else if (cleanChecked) {
            this.formatting(value, true, args);
        }
        else {
            this.plainFormatting(value, args);
        }
    }
    pasteDialog(value, args) {
        let isHeight = false;
        const preRTEHeight = this.parent.height;
        const dialogModel = {
            buttons: [
                {
                    click: () => {
                        if (!dialog.isDestroyed) {
                            const keepChecked = this.parent.element.querySelector('#keepFormating').checked;
                            const cleanChecked = this.parent.element.querySelector('#cleanFormat').checked;
                            dialog.hide();
                            this.parent.height = isHeight ? preRTEHeight : this.parent.height;
                            isHeight = false;
                            const argument = dialog;
                            this.dialogRenderObj.close(argument);
                            dialog.destroy();
                            this.selectFormatting(value, args, keepChecked, cleanChecked);
                        }
                    },
                    buttonModel: {
                        isPrimary: true,
                        cssClass: 'e-flat ' + CLS_RTE_PASTE_OK,
                        content: this.i10n.getConstant('pasteDialogOk')
                    }
                },
                {
                    click: () => {
                        if (!dialog.isDestroyed) {
                            dialog.hide();
                            this.parent.height = isHeight ? preRTEHeight : this.parent.height;
                            isHeight = false;
                            const args = dialog;
                            this.dialogRenderObj.close(args);
                            dialog.destroy();
                        }
                    },
                    buttonModel: {
                        cssClass: 'e-flat ' + CLS_RTE_PASTE_CANCEL,
                        content: this.i10n.getConstant('pasteDialogCancel')
                    }
                }
            ],
            header: this.i10n.getConstant('pasteFormat'),
            content: this.i10n.getConstant('pasteFormatContent') + '<br/><div><div style="padding-top:24px;">' +
                '<input type="radio" class="' + CLS_RTE_PASTE_KEEP_FORMAT + '" id="keepFormating"/>' +
                '</div><div style="padding-top:20px;"><input type="radio" class="' +
                CLS_RTE_PASTE_REMOVE_FORMAT + '" id="cleanFormat"/></div>' +
                '<div style="padding-top:20px;"><input type="radio" class="' +
                CLS_RTE_PASTE_PLAIN_FORMAT + '" id="plainTextFormat"/></div></div>',
            target: this.parent.element,
            width: '300px',
            height: '265px',
            cssClass: CLS_RTE_DIALOG_MIN_HEIGHT,
            isModal: true,
            visible: false
        };
        const dialog = this.dialogRenderObj.render(dialogModel);
        let rteDialogWrapper = this.parent.element.querySelector('#' + this.parent.getID()
            + '_pasteCleanupDialog');
        if (rteDialogWrapper !== null && rteDialogWrapper.innerHTML !== '') {
            this.destroyDialog(rteDialogWrapper);
        }
        if (rteDialogWrapper === null) {
            rteDialogWrapper = this.parent.createElement('div', {
                id: this.parent.getID() + '_pasteCleanupDialog'
            });
            this.parent.element.appendChild(rteDialogWrapper);
        }
        dialog.appendTo(rteDialogWrapper);
        this.radioRender();
        /* eslint-disable */
        if (this.parent.element.offsetHeight < parseInt(dialog.height.split('px')[0], null)) {
            this.parent.height = parseInt(dialog.height.split('px')[0], null) + 40;
            /* eslint-enable */
            isHeight = true;
        }
        dialog.show();
    }
    destroyDialog(rteDialogWrapper) {
        const rteDialogContainer = this.parent.element.querySelector('.e-dlg-container');
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(rteDialogContainer);
        const rteDialogWrapperChildLength = rteDialogWrapper.children.length;
        for (let i = 0; i < rteDialogWrapperChildLength; i++) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(rteDialogWrapper.children[0]);
        }
    }
    formatting(value, clean, args) {
        let clipBoardElem = this.parent.createElement('div', { className: 'pasteContent', styles: 'display:inline;' });
        if (this.isNotFromHtml && this.containsHtml) {
            value = this.splitBreakLine(value);
        }
        clipBoardElem.innerHTML = value;
        if (this.parent.pasteCleanupSettings.deniedTags !== null) {
            clipBoardElem = this.deniedTags(clipBoardElem);
        }
        if (clean) {
            clipBoardElem = this.deniedAttributes(clipBoardElem, clean);
        }
        else if (this.parent.pasteCleanupSettings.deniedAttrs !== null) {
            clipBoardElem = this.deniedAttributes(clipBoardElem, clean);
        }
        if (this.parent.pasteCleanupSettings.allowedStyleProps !== null) {
            clipBoardElem = this.allowedStyle(clipBoardElem);
        }
        this.saveSelection.restore();
        clipBoardElem.innerHTML = this.sanitizeHelper(clipBoardElem.innerHTML);
        const allImg = clipBoardElem.querySelectorAll('img');
        for (let i = 0; i < allImg.length; i++) {
            allImg[i].classList.add('pasteContent_Img');
            if (this.parent.insertImageSettings.width !== 'auto') {
                allImg[i].setAttribute('width', this.parent.insertImageSettings.width);
            }
            if (this.parent.insertImageSettings.minWidth !== '0' && this.parent.insertImageSettings.minWidth !== 0) {
                allImg[i].style.minWidth = this.parent.insertImageSettings.minWidth.toString();
            }
            if (this.parent.insertImageSettings.maxWidth !== null) {
                allImg[i].style.maxWidth = this.parent.getInsertImgMaxWidth().toString();
            }
            if (this.parent.insertImageSettings.height !== 'auto') {
                allImg[i].setAttribute('height', this.parent.insertImageSettings.height);
            }
            if (this.parent.insertImageSettings.minHeight !== '0' && this.parent.insertImageSettings.minHeight !== 0) {
                allImg[i].style.minHeight = this.parent.insertImageSettings.minHeight.toString();
            }
            if (this.parent.insertImageSettings.maxHeight !== null) {
                allImg[i].style.maxHeight = this.parent.insertImageSettings.maxHeight.toString();
            }
        }
        this.addTempClass(clipBoardElem);
        if (clipBoardElem.textContent !== '' || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(clipBoardElem.querySelector('img')) ||
            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(clipBoardElem.querySelector('table'))) {
            this.parent.formatter.editorManager.execCommand('inserthtml', 'pasteCleanup', args, (returnArgs) => {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(args, { elements: returnArgs.elements, imageElements: returnArgs.imgElem }, true);
                this.parent.formatter.onSuccess(this.parent, args);
            }, clipBoardElem);
            this.removeTempClass();
            this.parent.notify(toolbarRefresh, {});
            this.imgUploading(this.parent.inputElement);
            if (this.parent.iframeSettings.enable) {
                this.parent.updateValue();
            }
        }
    }
    addTempClass(clipBoardElem) {
        const allChild = clipBoardElem.children;
        for (let i = 0; i < allChild.length; i++) {
            allChild[i].classList.add('pasteContent_RTE');
        }
    }
    removeTempClass() {
        const classElm = this.parent.inputElement.querySelectorAll('.pasteContent_RTE');
        for (let i = 0; i < classElm.length; i++) {
            classElm[i].classList.remove('pasteContent_RTE');
            if (classElm[i].getAttribute('class') === '') {
                classElm[i].removeAttribute('class');
            }
        }
    }
    sanitizeHelper(value) {
        value = sanitizeHelper(value, this.parent);
        return value;
    }
    //Plain Formatting
    plainFormatting(value, args) {
        const clipBoardElem = this.parent.createElement('div', { className: 'pasteContent', styles: 'display:inline;' });
        clipBoardElem.innerHTML = value;
        this.detachInlineElements(clipBoardElem);
        this.getTextContent(clipBoardElem);
        if (clipBoardElem.textContent.trim() !== '') {
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(clipBoardElem.firstElementChild) && clipBoardElem.firstElementChild.tagName !== 'BR') {
                const firstElm = clipBoardElem.firstElementChild;
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(clipBoardElem.firstElementChild)) {
                    const spanElm = this.parent.createElement('span');
                    for (let i = 0, j = 0; i < firstElm.childNodes.length; i++, j++) {
                        if (firstElm.childNodes[i].nodeName === '#text') {
                            spanElm.appendChild(firstElm.childNodes[i]);
                            clipBoardElem.insertBefore(spanElm, clipBoardElem.firstElementChild);
                            i--;
                        }
                        else if (firstElm.childNodes[i].nodeName !== '#text' && j === 0) {
                            for (let k = 0; k < firstElm.childNodes[i].childNodes.length; k++) {
                                spanElm.appendChild(firstElm.childNodes[i].childNodes[k]);
                                clipBoardElem.insertBefore(spanElm, clipBoardElem.firstElementChild);
                                k--;
                            }
                            i--;
                        }
                        else {
                            break;
                        }
                    }
                    if (!firstElm.hasChildNodes()) {
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(firstElm);
                    }
                }
            }
            this.removeEmptyElements(clipBoardElem);
            this.saveSelection.restore();
            clipBoardElem.innerHTML = this.sanitizeHelper(clipBoardElem.innerHTML);
            this.addTempClass(clipBoardElem);
            this.parent.formatter.editorManager.execCommand('inserthtml', 'pasteCleanup', args, (returnArgs) => {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(args, { elements: returnArgs.elements, imageElements: returnArgs.imgElem }, true);
                this.parent.formatter.onSuccess(this.parent, args);
            }, clipBoardElem);
            this.removeTempClass();
        }
        else {
            this.saveSelection.restore();
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(args, { elements: [] }, true);
            this.parent.formatter.onSuccess(this.parent, args);
        }
    }
    getTextContent(clipBoardElem) {
        for (let i = 0; i < this.blockNode.length; i++) {
            const inElem = clipBoardElem.querySelectorAll(this.blockNode[i]);
            for (let j = 0; j < inElem.length; j++) {
                let parElem;
                for (let k = 0, l = 0, preNode; k < inElem[j].childNodes.length; k++, l++) {
                    if (inElem[j].childNodes[k].nodeName === 'DIV' || inElem[j].childNodes[k].nodeName === 'P' ||
                        (inElem[j].childNodes[k].nodeName === '#text' &&
                            (inElem[j].childNodes[k].nodeValue.replace(/\u00a0/g, '&nbsp;') !== '&nbsp;') &&
                            inElem[j].childNodes[k].textContent.trim() === '')) {
                        parElem = inElem[j].childNodes[k].parentElement;
                        inElem[j].childNodes[k].parentElement.parentElement.insertBefore(inElem[j].childNodes[k], inElem[j].childNodes[k].parentElement);
                        k--;
                    }
                    else {
                        parElem = inElem[j].childNodes[k].parentElement;
                        if (preNode === 'text') {
                            const previousElem = parElem.previousElementSibling;
                            previousElem.appendChild(inElem[j].childNodes[k]);
                        }
                        else {
                            const divElement = this.parent.createElement('div', { id: 'newDiv' });
                            divElement.appendChild(inElem[j].childNodes[k]);
                            parElem.parentElement.insertBefore(divElement, parElem);
                        }
                        k--;
                        preNode = 'text';
                    }
                }
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parElem)) {
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(parElem);
                }
            }
        }
        const allElems = clipBoardElem.querySelectorAll('*');
        for (let i = 0; i < allElems.length; i++) {
            const allAtr = allElems[i].attributes;
            for (let j = 0; j < allAtr.length; j++) {
                allElems[i].removeAttribute(allAtr[j].name);
                j--;
            }
        }
    }
    detachInlineElements(clipBoardElem) {
        for (let i = 0; i < this.inlineNode.length; i++) {
            const inElem = clipBoardElem.querySelectorAll(this.inlineNode[i]);
            for (let j = 0; j < inElem.length; j++) {
                let parElem;
                for (let k = 0; k < inElem[j].childNodes.length; k++) {
                    parElem = inElem[j].childNodes[k].parentElement;
                    inElem[j].childNodes[k].parentElement.parentElement.insertBefore(inElem[j].childNodes[k], inElem[j].childNodes[k].parentElement);
                    k--;
                }
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(parElem)) {
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(parElem);
                }
            }
        }
    }
    findDetachEmptyElem(element) {
        let removableElement;
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element.parentElement)) {
            if (element.parentElement.textContent.trim() === '' &&
                element.parentElement.getAttribute('class') !== 'pasteContent') {
                removableElement = this.findDetachEmptyElem(element.parentElement);
            }
            else {
                removableElement = element;
            }
        }
        else {
            removableElement = null;
        }
        return removableElement;
    }
    removeEmptyElements(element) {
        const emptyElements = element.querySelectorAll(':empty');
        for (let i = 0; i < emptyElements.length; i++) {
            if (emptyElements[i].tagName !== 'BR') {
                const detachableElement = this.findDetachEmptyElem(emptyElements[i]);
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(detachableElement)) {
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(detachableElement);
                }
            }
        }
    }
    //GroupingTags
    tagGrouping(deniedTags) {
        const groupingTags = [...deniedTags];
        const keys = Object.keys(pasteCleanupGroupingTags);
        const values = keys.map((key) => {
            return pasteCleanupGroupingTags[key];
        });
        const addTags = [];
        for (let i = 0; i < groupingTags.length; i++) {
            //The value split using '[' because to retrieve the tag name from the user given format which may contain tag with attributes
            if (groupingTags[i].split('[').length > 1) {
                groupingTags[i] = groupingTags[i].split('[')[0].trim();
            }
            if (keys.indexOf(groupingTags[i]) > -1) {
                for (let j = 0; j < values[keys.indexOf(groupingTags[i])].length; j++) {
                    if (groupingTags.indexOf(values[keys.indexOf(groupingTags[i])][j]) < 0 &&
                        addTags.indexOf(values[keys.indexOf(groupingTags[i])][j]) < 0) {
                        addTags.push(values[keys.indexOf(groupingTags[i])][j]);
                    }
                }
            }
        }
        return deniedTags = deniedTags.concat(addTags);
    }
    //Filter Attributes in Denied Tags
    attributesfilter(deniedTags) {
        for (let i = 0; i < deniedTags.length; i++) {
            if (deniedTags[i].split('[').length > 1) {
                const userAttributes = deniedTags[i].split('[')[1].split(']')[0].split(',');
                const allowedAttributeArray = [];
                const deniedAttributeArray = [];
                for (let j = 0; j < userAttributes.length; j++) {
                    // eslint-disable-next-line
                    userAttributes[j].indexOf('!') < 0 ? allowedAttributeArray.push(userAttributes[j].trim())
                        : deniedAttributeArray.push(userAttributes[j].split('!')[1].trim());
                }
                const allowedAttribute = allowedAttributeArray.length > 1 ?
                    (allowedAttributeArray.join('][')) : (allowedAttributeArray.join());
                const deniedAttribute = deniedAttributeArray.length > 1 ?
                    deniedAttributeArray.join('][') : (deniedAttributeArray.join());
                if (deniedAttribute.length > 0) {
                    const select$$1 = allowedAttribute !== '' ? deniedTags[i].split('[')[0] +
                        '[' + allowedAttribute + ']' : deniedTags[i].split('[')[0];
                    deniedTags[i] = select$$1 + ':not([' + deniedAttribute + '])';
                }
                else {
                    deniedTags[i] = deniedTags[i].split('[')[0] + '[' + allowedAttribute + ']';
                }
            }
        }
        return deniedTags;
    }
    //Denied Tags
    deniedTags(clipBoardElem) {
        let deniedTags = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.pasteCleanupSettings.deniedTags) ? [] :
            [...this.parent.pasteCleanupSettings.deniedTags];
        deniedTags = this.attributesfilter(deniedTags);
        deniedTags = this.tagGrouping(deniedTags);
        for (let i = 0; i < deniedTags.length; i++) {
            const removableElement = clipBoardElem.querySelectorAll(deniedTags[i]);
            for (let j = removableElement.length - 1; j >= 0; j--) {
                const parentElem = removableElement[j].parentNode;
                while (removableElement[j].firstChild) {
                    parentElem.insertBefore(removableElement[j].firstChild, removableElement[j]);
                }
                parentElem.removeChild(removableElement[j]);
            }
        }
        return clipBoardElem;
    }
    //Denied Attributes
    deniedAttributes(clipBoardElem, clean) {
        const deniedAttrs = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.pasteCleanupSettings.deniedAttrs) ? [] :
            [...this.parent.pasteCleanupSettings.deniedAttrs];
        if (clean) {
            deniedAttrs.push('style');
        }
        for (let i = 0; i < deniedAttrs.length; i++) {
            const removableAttrElement = clipBoardElem.
                querySelectorAll('[' + deniedAttrs[i] + ']');
            for (let j = 0; j < removableAttrElement.length; j++) {
                removableAttrElement[j].removeAttribute(deniedAttrs[i]);
            }
        }
        return clipBoardElem;
    }
    //Allowed Style Properties
    allowedStyle(clipBoardElem) {
        const allowedStyleProps = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.pasteCleanupSettings.allowedStyleProps) ? [] :
            [...this.parent.pasteCleanupSettings.allowedStyleProps];
        allowedStyleProps.push('list-style-type', 'list-style');
        const styleElement = clipBoardElem.querySelectorAll('[style]');
        for (let i = 0; i < styleElement.length; i++) {
            let allowedStyleValue = '';
            const allowedStyleValueArray = [];
            const styleValue = styleElement[i].getAttribute('style').split(';');
            for (let k = 0; k < styleValue.length; k++) {
                if (allowedStyleProps.indexOf(styleValue[k].split(':')[0].trim()) >= 0) {
                    allowedStyleValueArray.push(styleValue[k]);
                }
            }
            styleElement[i].removeAttribute('style');
            allowedStyleValue = allowedStyleValueArray.join(';').trim() === '' ?
                allowedStyleValueArray.join(';') : allowedStyleValueArray.join(';') + ';';
            if (allowedStyleValue) {
                styleElement[i].setAttribute('style', allowedStyleValue);
            }
        }
        return clipBoardElem;
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {void}
     * @hidden
     */
    getModuleName() {
        return 'pasteCleanup';
    }
}

/**
 * `Resize` module is used to resize the editor
 */
class Resize {
    constructor(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(initialEnd, this.renderResizable, this);
        this.parent.on(destroy, this.destroy, this);
    }
    renderResizable() {
        this.resizer = this.parent.createElement('div', {
            id: this.parent.getID() + '-resizable', className: 'e-icons'
                + ' ' + CLS_RTE_RES_HANDLE + ' ' + CLS_RTE_RES_EAST
        });
        this.parent.element.classList.add(CLS_RTE_RES_CNT);
        this.parent.element.appendChild(this.resizer);
        this.touchStartEvent = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie') ? 'pointerdown' : 'touchstart';
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.resizer, 'mousedown', this.resizeStart, this);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.resizer, this.touchStartEvent, this.resizeStart, this);
    }
    resizeStart(e) {
        if (e.cancelable) {
            e.preventDefault();
        }
        this.wireResizeEvents();
        this.parent.notify(resizeInitialized, {});
        const args = { event: e, requestType: 'editor' };
        this.parent.trigger(resizeStart, args, (resizeStartArgs) => {
            if (resizeStartArgs.cancel) {
                this.unwireResizeEvents();
            }
        });
    }
    performResize(e) {
        const args = { event: e, requestType: 'editor' };
        this.parent.trigger(onResize, args, (resizingArgs) => {
            if (resizingArgs.cancel) {
                this.unwireResizeEvents();
            }
        });
        const boundRect = this.parent.element.getBoundingClientRect();
        if (this.isMouseEvent(e)) {
            this.parent.element.style.height = e.clientY - boundRect.top + 'px';
            this.parent.element.style.width = e.clientX - boundRect.left + 'px';
        }
        else {
            const eventType = _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name !== 'msie' ? e.touches[0] : e;
            this.parent.element.style.height = eventType.clientY - boundRect.top + 'px';
            this.parent.element.style.width = eventType.clientX - boundRect.left + 'px';
        }
        if (!this.parent.toolbarSettings.enable) {
            this.parent.setContentHeight('', false);
        }
        this.parent.refreshUI();
    }
    stopResize(e) {
        this.parent.refreshUI();
        this.unwireResizeEvents();
        const args = { event: e, requestType: 'editor' };
        this.parent.trigger(resizeStop, args);
    }
    getEventType(e) {
        return (e.indexOf('mouse') > -1) ? 'mouse' : 'touch';
    }
    isMouseEvent(e) {
        let isMouse = false;
        if (this.getEventType(e.type) === 'mouse' || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.pointerType) &&
            this.getEventType(e.pointerType) === 'mouse')) {
            isMouse = true;
        }
        return isMouse;
    }
    wireResizeEvents() {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(document, 'mousemove', this.performResize, this);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(document, 'mouseup', this.stopResize, this);
        this.touchMoveEvent = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie') ? 'pointermove' : 'touchmove';
        this.touchEndEvent = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie') ? 'pointerup' : 'touchend';
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(document, this.touchMoveEvent, this.performResize, this);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(document, this.touchEndEvent, this.stopResize, this);
    }
    unwireResizeEvents() {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(document, 'mousemove', this.performResize);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(document, 'mouseup', this.stopResize);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(document, this.touchMoveEvent, this.performResize);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(document, this.touchEndEvent, this.stopResize);
    }
    destroy() {
        this.removeEventListener();
    }
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(initialEnd, this.renderResizable);
        this.parent.element.classList.remove(CLS_RTE_RES_CNT);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.resizer, 'mousedown', this.resizeStart);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.resizer, this.touchStartEvent, this.resizeStart);
        if (this.resizer) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.resizer);
        }
        this.parent.off(destroy, this.destroy);
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {void}
     * @hidden
     */
    getModuleName() {
        return 'resize';
    }
}

/**
 * `FileManager` module is used to display the directories and images inside the editor.
 */
class FileManager$1 {
    constructor(parent, locator) {
        _syncfusion_ej2_filemanager__WEBPACK_IMPORTED_MODULE_6__.FileManager.Inject(_syncfusion_ej2_filemanager__WEBPACK_IMPORTED_MODULE_6__.ContextMenu, _syncfusion_ej2_filemanager__WEBPACK_IMPORTED_MODULE_6__.DetailsView, _syncfusion_ej2_filemanager__WEBPACK_IMPORTED_MODULE_6__.NavigationPane, _syncfusion_ej2_filemanager__WEBPACK_IMPORTED_MODULE_6__.Toolbar);
        this.parent = parent;
        this.i10n = locator.getService('rteLocale');
        this.dialogRenderObj = locator.getService('dialogRenderObject');
        this.rendererFactory = locator.getService('rendererFactory');
        this.addEventListener();
    }
    initialize() {
        this.parent.fileManagerModule = this;
        this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);
    }
    render(e) {
        let dlgInsert;
        if (e.selectNode && e.selectNode[0].nodeName === 'IMG') {
            dlgInsert = this.parent.localeObj.getConstant('dialogUpdate');
        }
        else {
            dlgInsert = this.i10n.getConstant('dialogInsert');
        }
        const dlgHeader = this.parent.localeObj.getConstant('fileDialogHeader');
        const dlgCancel = this.i10n.getConstant('dialogCancel');
        this.dlgButtons = [{
                click: this.insertImageUrl.bind(this),
                buttonModel: { content: dlgInsert, cssClass: 'e-flat e-insertImage', isPrimary: true }
            },
            {
                // eslint-disable-next-line
                click: (e) => {
                    this.cancelDialog();
                },
                buttonModel: { cssClass: 'e-flat e-cancel', content: dlgCancel }
            }];
        this.dlgButtons[0].buttonModel.disabled = true;
        this.selectObj = { selection: e.selection, args: e.args, selectParent: e.selectParent };
        const dlgTarget = this.parent.createElement('div', {
            className: 'e-rte-file-manager-dialog', id: this.parent.getID() + '_file-manager-dialog',
            attrs: { 'aria-owns': this.parent.getID() }
        });
        document.body.appendChild(dlgTarget);
        this.fileWrap = this.parent.createElement('div', {
            id: this.parent.getID() + '_rte-file-manager', className: 'e-img-file-wrap'
        });
        dlgTarget.appendChild(this.fileWrap);
        dlgTarget.appendChild(this.getInputUrlElement());
        const dialogModel = {
            visible: false,
            isModal: true, header: dlgHeader,
            target: document.body, locale: this.parent.locale,
            enableRtl: this.parent.enableRtl, cssClass: CLS_RTE_ELEMENTS,
            animationSettings: { effect: 'None' },
            showCloseIcon: true, closeOnEscape: true, width: '720px', height: 'auto',
            position: { X: 'center', Y: 'center' },
            buttons: this.dlgButtons,
            created: this.renderFileManager.bind(this),
            close: (e) => {
                this.parent.isBlur = false;
                if (e && e.event.returnValue) {
                    this.selectObj.selection.restore();
                }
                this.destroyComponents();
                this.dialogRenderObj.close(e);
            }
        };
        this.dialogObj = this.dialogRenderObj.render(dialogModel);
        this.dialogObj.createElement = this.parent.createElement;
        this.dialogObj.appendTo(dlgTarget);
        this.dialogObj.show(_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice ? true : false);
    }
    renderFileManager() {
        // eslint-disable-next-line
        const proxy = this;
        this.fileObj = new _syncfusion_ej2_filemanager__WEBPACK_IMPORTED_MODULE_6__.FileManager({
            allowMultiSelection: false,
            locale: this.parent.locale,
            enableRtl: this.parent.enableRtl,
            path: this.parent.fileManagerSettings.path,
            view: this.parent.fileManagerSettings.view,
            enablePersistence: this.parent.enablePersistence,
            cssClass: this.parent.fileManagerSettings.cssClass,
            sortOrder: this.parent.fileManagerSettings.sortOrder,
            ajaxSettings: this.parent.fileManagerSettings.ajaxSettings,
            showThumbnail: this.parent.fileManagerSettings.showThumbnail,
            rootAliasName: this.parent.fileManagerSettings.rootAliasName,
            uploadSettings: this.parent.fileManagerSettings.uploadSettings,
            searchSettings: this.parent.fileManagerSettings.searchSettings,
            toolbarSettings: this.parent.fileManagerSettings.toolbarSettings,
            showHiddenItems: this.parent.fileManagerSettings.showHiddenItems,
            allowDragAndDrop: this.parent.fileManagerSettings.allowDragAndDrop,
            showFileExtension: this.parent.fileManagerSettings.showFileExtension,
            detailsViewSettings: this.parent.fileManagerSettings.detailsViewSettings,
            contextMenuSettings: this.parent.fileManagerSettings.contextMenuSettings,
            navigationPaneSettings: this.parent.fileManagerSettings.navigationPaneSettings,
            fileSelect: (e) => {
                const selectedFile = e.fileDetails;
                if (selectedFile.isFile && proxy.parent.insertImageSettings.allowedTypes.indexOf(selectedFile.type) > -1) {
                    proxy.inputUrl.value = proxy.parent.fileManagerSettings.ajaxSettings.getImageUrl + '?path=' +
                        (selectedFile.filterPath && selectedFile.filterPath.replace(/\\/g, '/')) + selectedFile.name;
                    this.dlgButtons[0].buttonModel.disabled = false;
                }
                else {
                    proxy.inputUrl.value = '';
                    this.dlgButtons[0].buttonModel.disabled = true;
                }
                this.dialogObj.buttons = this.dlgButtons;
            },
            created: () => {
                this.inputUrl.removeAttribute('disabled');
            },
            success: () => {
                this.fileObj.refreshLayout();
            }
        });
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {
            this.fileObj.height = '85%';
        }
        this.fileObj.appendTo(this.fileWrap);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.parent.element.ownerDocument, 'mousedown', this.onDocumentClick, this);
    }
    getInputUrlElement() {
        const imgUrl = this.parent.createElement('div', { className: 'imgUrl' });
        const urlLabel = this.parent.createElement('div', { className: 'e-rte-label' });
        urlLabel.innerHTML = '<label for="rteSample_img_url">' + this.i10n.getConstant('linkWebUrl') + '</label>';
        imgUrl.appendChild(urlLabel);
        const placeUrl = this.i10n.getConstant('imageUrl');
        this.inputUrl = this.parent.createElement('input', {
            className: 'e-input e-img-url',
            attrs: { placeholder: placeUrl, spellcheck: 'false', disabled: 'true' }
        });
        imgUrl.appendChild(this.inputUrl);
        return imgUrl;
    }
    // eslint-disable-next-line
    insertImageUrl(e) {
        const url = this.inputUrl.value;
        if (this.parent.formatter.getUndoRedoStack().length === 0) {
            this.parent.formatter.saveData();
        }
        if (url !== '') {
            if (this.parent.editorMode === 'HTML' &&
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.selectObj.selection.range.startContainer.parentNode, '#' + this.contentModule.getPanel().id))) {
                this.contentModule.getEditPanel().focus();
                const range = this.parent.formatter.editorManager.nodeSelection.getRange(this.contentModule.getDocument());
                this.selectObj.selection = this.parent.formatter.editorManager.nodeSelection.save(range, this.contentModule.getDocument());
                this.selectObj.selectParent = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
            }
            const regex = /[\w-]+.(jpg|png|jpeg|gif)/g;
            const matchUrl = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(url.match(regex)) && this.parent.editorMode === 'HTML') ? url.match(regex)[0] : '';
            const value = {
                cssClass: (this.parent.insertImageSettings.display === 'inline' ? CLS_IMGINLINE : CLS_IMGBREAK),
                url: url, selection: this.selectObj.selection, altText: matchUrl, selectParent: this.selectObj.selectParent,
                width: {
                    width: this.parent.insertImageSettings.width, minWidth: this.parent.insertImageSettings.minWidth,
                    maxWidth: this.parent.getInsertImgMaxWidth()
                },
                height: {
                    height: this.parent.insertImageSettings.height, minHeight: this.parent.insertImageSettings.minHeight,
                    maxHeight: this.parent.insertImageSettings.maxHeight
                }
            };
            this.parent.formatter.process(this.parent, this.selectObj.args, this.selectObj.args.originalEvent, value);
            this.dialogObj.hide({ returnValue: false });
        }
    }
    cancelDialog() {
        this.parent.isBlur = false;
        this.dialogObj.hide({ returnValue: true });
    }
    onDocumentClick(e) {
        const target = e.target;
        const prevEle = target.nodeName !== '#document' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(target.previousElementSibling) && target.previousElementSibling;
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.dialogObj) &&
            (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '#' + this.parent.getID() + '_file-manager-dialog') &&
                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '#' + this.parent.getID() + '_rte-file-manager_tb_sortby-popup') &&
                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '#' + this.parent.getID() + '_rte-file-manager_tb_view-popup') &&
                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '#' + this.parent.getID() + '_rte-file-manager_contextmenu') &&
                (!(!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.e-contextmenu-wrapper')) &&
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.e-contextmenu-wrapper').querySelector('#' + this.parent.getID() + '_rte-file-manager_contextmenu'))) &&
                (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(prevEle) && !prevEle.classList.contains('e-rte-file-manager-dialog')) &&
                (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(prevEle) && prevEle.id !== this.parent.getID() + '_rte-file-manager_contextmenu'))) {
            this.dialogObj.hide({ returnValue: true });
            this.parent.isBlur = true;
            dispatchEvent(this.parent.element, 'focusout');
        }
        else {
            this.parent.isRTE = true;
        }
    }
    addEventListener() {
        this.parent.on(initialEnd, this.initialize, this);
        this.parent.on(renderFileManager, this.render, this);
        this.parent.on(destroy, this.destroy, this);
    }
    removeEventListener() {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.parent.element.ownerDocument, 'mousedown', this.onDocumentClick);
        this.parent.off(initialEnd, this.initialize);
        this.parent.off(renderFileManager, this.render);
        this.parent.off(destroy, this.destroy);
    }
    destroyComponents() {
        if (this.fileObj) {
            this.fileObj.destroy();
            this.fileObj = null;
        }
        if (this.dialogObj) {
            this.dialogObj.destroy();
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.dialogObj.element);
            this.dialogObj = null;
        }
    }
    destroy() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.destroyComponents();
        this.removeEventListener();
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} - returns the string value
     * @hidden
     */
    getModuleName() {
        return 'fileManager';
    }
}

/**
 * `FullScreen` module is used to maximize and minimize screen
 */
class FullScreen {
    constructor(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * showFullScreen method
     *
     * @param {MouseEvent} event - specifies the mouse event
     * @returns {void}
     * @hidden
     * @deprecated
     */
    showFullScreen(event) {
        if (this.parent.toolbarSettings.enable === true && this.parent.editorMode !== 'Markdown'
            && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.quickToolbarModule)) {
            this.parent.quickToolbarModule.hideQuickToolbars();
        }
        this.scrollableParent = (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_4__.getScrollableParent)(this.parent.element);
        if (!this.parent.element.classList.contains(CLS_FULL_SCREEN)) {
            const evenArgs = {
                cancel: false,
                requestType: 'Maximize',
                targetItem: 'Maximize',
                args: event
            };
            this.parent.trigger(actionBegin, evenArgs, (beginEventArgs) => {
                if (!beginEventArgs.cancel) {
                    if (this.parent.toolbarSettings.enableFloating &&
                        !this.parent.inlineMode.enable && this.parent.toolbarSettings.enable) {
                        this.parent.getToolbarElement().style.width = '100%';
                        this.parent.getToolbarElement().style.top = '0px';
                    }
                    this.parent.element.classList.add(CLS_FULL_SCREEN);
                    this.toggleParentOverflow(true);
                    this.parent.setContentHeight();
                    if (this.parent.toolbarModule) {
                        if (!this.parent.getBaseToolbarObject().toolbarObj.items[0].properties) {
                            this.parent.getBaseToolbarObject().toolbarObj.removeItems(0);
                        }
                        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {
                            this.parent.toolbarModule.removeFixedTBarClass();
                        }
                        this.parent.toolbarModule.updateItem({
                            targetItem: 'Maximize',
                            updateItem: 'Minimize',
                            baseToolbar: this.parent.getBaseToolbarObject()
                        });
                    }
                    this.parent.trigger(actionComplete, { requestType: 'Maximize', targetItem: 'Maximize', args: event });
                }
            });
        }
    }
    /**
     * hideFullScreen method
     *
     * @param {MouseEvent} event - specifies the mouse event
     * @returns {void}
     * @hidden
     * @deprecated
     */
    hideFullScreen(event) {
        if (this.parent.toolbarSettings.enable === true && this.parent.editorMode !== 'Markdown'
            && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.quickToolbarModule)) {
            this.parent.quickToolbarModule.hideQuickToolbars();
        }
        if (this.parent.element.classList.contains(CLS_FULL_SCREEN)) {
            const evenArgs = {
                cancel: false,
                requestType: 'Minimize',
                targetItem: 'Minimize',
                args: event
            };
            this.parent.trigger(actionBegin, evenArgs, (beginEventArgs) => {
                if (!beginEventArgs.cancel) {
                    this.parent.element.classList.remove(CLS_FULL_SCREEN);
                    const elem = document.querySelectorAll('.e-rte-overflow');
                    for (let i = 0; i < elem.length; i++) {
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([elem[i]], ['e-rte-overflow']);
                    }
                    this.parent.setContentHeight();
                    if (this.parent.toolbarModule) {
                        if (!this.parent.getBaseToolbarObject().toolbarObj.items[0].properties) {
                            this.parent.getBaseToolbarObject().toolbarObj.removeItems(0);
                        }
                        this.parent.toolbarModule.updateItem({
                            targetItem: 'Minimize',
                            updateItem: 'Maximize',
                            baseToolbar: this.parent.getBaseToolbarObject()
                        });
                        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && this.parent.inlineMode.enable) {
                            this.parent.toolbarModule.addFixedTBarClass();
                        }
                    }
                    this.parent.trigger(actionComplete, { requestType: 'Minimize', targetItem: 'Minimize', args: event });
                }
            });
        }
    }
    // eslint-disable-next-line
    toggleParentOverflow(isAdd) {
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.scrollableParent)) {
            return;
        }
        for (let i = 0; i < this.scrollableParent.length; i++) {
            if (this.scrollableParent[i].nodeName === '#document') {
                const elem = document.querySelector('body');
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([elem], ['e-rte-overflow']);
            }
            else {
                const elem = this.scrollableParent[i];
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([elem], ['e-rte-overflow']);
            }
        }
    }
    onKeyDown(event) {
        const originalEvent = event.args;
        switch (originalEvent.action) {
            case 'full-screen':
                this.showFullScreen(event.args);
                originalEvent.preventDefault();
                break;
            case 'escape':
                this.hideFullScreen(event.args);
                originalEvent.preventDefault();
                break;
        }
    }
    addEventListener() {
        this.parent.on(keyDown, this.onKeyDown, this);
        this.parent.on(destroy, this.destroy, this);
    }
    removeEventListener() {
        this.parent.off(keyDown, this.onKeyDown);
        this.parent.off(destroy, this.destroy);
    }
    /**
     * destroy method
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    destroy() {
        if (this.parent.element.classList.contains(CLS_FULL_SCREEN)) {
            this.toggleParentOverflow(false);
        }
        const elem = document.querySelectorAll('.e-rte-overflow');
        for (let i = 0; i < elem.length; i++) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([elem[i]], ['e-rte-overflow']);
        }
        this.removeEventListener();
    }
}

/**
 * @param {string} htmlAttributes - specifies the string value
 * @param {IRichTextEditor} rte - specifies the rte value
 * @param {boolean} isFrame - specifies the boolean value
 * @param {boolean} initial - specifies the boolean value
 * @returns {void}
 * @hidden
 */
function setAttributes(htmlAttributes, rte, isFrame, initial) {
    let target;
    if (isFrame) {
        const iFrame = rte.contentModule.getDocument();
        target = iFrame.querySelector('body');
    }
    else {
        target = rte.element;
    }
    if (Object.keys(htmlAttributes).length) {
        for (const htmlAttr of Object.keys(htmlAttributes)) {
            if (htmlAttr === 'class') {
                target.classList.add(htmlAttributes[htmlAttr]);
            }
            else if (htmlAttr === 'disabled' && htmlAttributes[htmlAttr] === 'disabled') {
                rte.enabled = false;
                rte.setEnable();
            }
            else if (htmlAttr === 'readonly' && htmlAttributes[htmlAttr] === 'readonly') {
                rte.readonly = true;
                rte.setReadOnly(initial);
            }
            else if (htmlAttr === 'style') {
                target.setAttribute('style', htmlAttributes[htmlAttr]);
            }
            else if (htmlAttr === 'tabindex') {
                rte.inputElement.setAttribute('tabindex', htmlAttributes[htmlAttr]);
            }
            else if (htmlAttr === 'placeholder') {
                rte.placeholder = htmlAttributes[htmlAttr];
                rte.setPlaceHolder();
            }
            else {
                const validateAttr = ['name', 'required'];
                if (validateAttr.indexOf(htmlAttr) > -1) {
                    rte.valueContainer.setAttribute(htmlAttr, htmlAttributes[htmlAttr]);
                }
                else {
                    target.setAttribute(htmlAttr, htmlAttributes[htmlAttr]);
                }
            }
        }
    }
}

/**
 * Action export
 */

/**
 * Formatter
 */

/**
 * Content module is used to render Rich Text Editor content
 *
 * @hidden
 * @deprecated
 */
class Render {
    /**
     * Constructor for render module
     *
     * @param {IRichTextEditor} parent - specifies the parent
     * @param {ServiceLocator} locator - specifies the locator.
     * @returns {void}
     */
    constructor(parent, locator) {
        this.parent = parent;
        this.locator = locator;
        this.renderer = this.locator.getService('rendererFactory');
        this.addEventListener();
    }
    /**
     * To initialize Rich Text Editor header, content and footer rendering
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    render() {
        // eslint-disable-next-line
        const rteObj = this.parent;
        this.contentRenderer = this.renderer.getRenderer(RenderType.Content);
        this.contentRenderer.renderPanel();
    }
    /**
     * Refresh the entire RichTextEditor.
     *
     * @param {NotifyArgs} e - specifies the arguments.
     * @returns {void}
     */
    refresh(e = { requestType: 'refresh' }) {
        this.parent.notify(`${e.requestType}-begin`, e);
    }
    /**
     * Destroy the entire RichTextEditor.
     *
     * @returns {void}
     */
    destroy() {
        this.removeEventListener();
    }
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(modelChanged, this.refresh, this);
        this.parent.on(keyUp, this.keyUp, this);
    }
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(modelChanged, this.refresh);
        this.parent.off(keyUp, this.keyUp);
    }
    keyUp(e) {
        if (this.parent.editorMode === 'HTML') {
            switch (e.args.which) {
                case 46:
                case 8:
                    // eslint-disable-next-line
                    const childNodes = this.parent.contentModule.getEditPanel().childNodes;
                    if ((childNodes.length === 0) ||
                        (childNodes.length === 1 && childNodes[0].childNodes.length === 0 && ((childNodes[0].tagName === 'BR') ||
                            ((childNodes[0].tagName === 'P' || childNodes[0].tagName === 'DIV') && childNodes[0].textContent === '')))) {
                        const node = this.parent.contentModule.getEditPanel();
                        if (this.parent.enterKey === 'DIV') {
                            node.innerHTML = '<div><br/></div>';
                        }
                        else if (this.parent.enterKey === 'BR') {
                            node.innerHTML = '<br/>';
                        }
                        else {
                            node.innerHTML = '<p><br/></p>';
                        }
                        this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), node.childNodes[0], 0);
                    }
                    break;
            }
        }
    }
}

/**
 * `Link` module is used to handle undo actions.
 */
class Link {
    constructor(parent, serviceLocator) {
        this.parent = parent;
        this.rteID = parent.element.id;
        this.i10n = serviceLocator.getService('rteLocale');
        this.addEventListener();
        this.serviceLocator = serviceLocator;
        this.rendererFactory = serviceLocator.getService('rendererFactory');
        this.dialogRenderObj = serviceLocator.getService('dialogRenderObject');
    }
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(insertLink, this.linkDialog, this);
        this.parent.on(showLinkDialog, this.showDialog, this);
        this.parent.on(closeLinkDialog, this.closeDialog, this);
        this.parent.on(keyDown, this.onKeyDown, this);
        this.parent.on(insertCompleted, this.showLinkQuickToolbar, this);
        this.parent.on(clearDialogObj, this.clearDialogObj, this);
        this.parent.on(linkToolbarAction, this.onToolbarAction, this);
        this.parent.on(iframeMouseDown, this.onIframeMouseDown, this);
        this.parent.on(unLink, this.removeLink, this);
        this.parent.on(editLink, this.editLink, this);
        this.parent.on(openLink, this.openLink, this);
        this.parent.on(editAreaClick, this.editAreaClickHandler, this);
        this.parent.on(destroy, this.destroy, this);
    }
    onToolbarAction(args) {
        const item = args.args.item;
        switch (item.subCommand) {
            case 'OpenLink':
                this.parent.notify(openLink, args);
                break;
            case 'EditLink':
                this.parent.notify(editLink, args);
                break;
            case 'RemoveLink':
                this.parent.notify(unLink, args);
                break;
        }
    }
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(insertLink, this.linkDialog);
        this.parent.off(showLinkDialog, this.showDialog);
        this.parent.off(closeLinkDialog, this.closeDialog);
        this.parent.off(keyDown, this.onKeyDown);
        this.parent.off(insertCompleted, this.showLinkQuickToolbar);
        this.parent.off(clearDialogObj, this.clearDialogObj);
        this.parent.off(linkToolbarAction, this.onToolbarAction);
        this.parent.off(unLink, this.removeLink);
        this.parent.off(iframeMouseDown, this.onIframeMouseDown);
        this.parent.off(editLink, this.editLink);
        this.parent.off(openLink, this.openLink);
        this.parent.off(editAreaClick, this.editAreaClickHandler);
        this.parent.off(destroy, this.destroy);
    }
    onIframeMouseDown() {
        if (this.dialogObj) {
            this.dialogObj.hide({ returnValue: true });
        }
    }
    showLinkQuickToolbar(e) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.args) && e.args.action !== 'enter' &&
            e.args.action !== 'space') {
            let pageX;
            let pageY;
            if (e.type !== 'Links' || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.quickToolbarModule) ||
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.quickToolbarModule.linkQTBar)) {
                return;
            }
            this.quickToolObj = this.parent.quickToolbarModule;
            const parentTop = this.parent.element.getBoundingClientRect().top;
            const parentLeft = this.parent.element.getBoundingClientRect().left;
            const range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
            let target;
            [].forEach.call(e.elements, (element, index) => {
                if (index === 0) {
                    target = ((element.nodeName === '#text') ? (element.parentNode) : element);
                }
            });
            if (e.isNotify) {
                const tbElement = this.parent.toolbarModule.getToolbarElement();
                const linkTop = target.getBoundingClientRect().top;
                const linkLeft = target.getBoundingClientRect().left;
                const linkPos = linkTop - parentTop;
                const tbHeight = (tbElement) ? (tbElement.offsetHeight + this.parent.toolbarModule.getExpandTBarPopHeight()) : 0;
                pageX = (this.parent.iframeSettings.enable) ? parentLeft + linkLeft : target.getBoundingClientRect().left;
                pageY = window.pageYOffset + ((this.parent.iframeSettings.enable) ?
                    (parentTop + tbHeight + linkTop) : (parentTop + linkPos));
            }
            else {
                let args;
                args = e.args.touches ? e.args.changedTouches[0] : args = e.args;
                pageX = (this.parent.iframeSettings.enable) ? window.pageXOffset + parentLeft + args.clientX : args.pageX;
                pageY = (this.parent.iframeSettings.enable) ? window.pageYOffset + parentTop + args.clientY : args.pageY;
            }
            if (this.quickToolObj.linkQTBar) {
                this.quickToolObj.linkQTBar.showPopup(pageX, pageY, range.endContainer);
            }
        }
    }
    hideLinkQuickToolbar() {
        if (this.quickToolObj && this.quickToolObj.linkQTBar && document.body.contains(this.quickToolObj.linkQTBar.element)) {
            this.quickToolObj.linkQTBar.hidePopup();
        }
    }
    editAreaClickHandler(e) {
        if (this.parent.readonly) {
            this.hideLinkQuickToolbar();
            return;
        }
        const args = e.args;
        const showOnRightClick = this.parent.quickToolbarSettings.showOnRightClick;
        if (args.which === 2 || (showOnRightClick && args.which === 1) || (!showOnRightClick && args.which === 3)) {
            return;
        }
        if (this.parent.editorMode === 'HTML' && this.parent.quickToolbarModule && this.parent.quickToolbarModule.linkQTBar) {
            this.quickToolObj = this.parent.quickToolbarModule;
            let target = args.target;
            target = this.getAnchorNode(target);
            this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);
            const isPopupOpen = this.quickToolObj.linkQTBar.element.classList.contains('e-rte-pop');
            if (target.nodeName === 'A' && (target.childNodes.length > 0 && target.childNodes[0].nodeName !== 'IMG') &&
                e.args.target.nodeName !== 'IMG' &&
                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.parent.getRange().startContainer.parentElement, 'A')) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.parent.getRange().endContainer.parentElement, 'A'))) {
                if (isPopupOpen) {
                    return;
                }
                this.showLinkQuickToolbar({
                    args: args,
                    isNotify: false,
                    type: 'Links',
                    elements: [args.target]
                });
            }
            else {
                this.hideLinkQuickToolbar();
            }
        }
    }
    onKeyDown(event) {
        const originalEvent = event.args;
        switch (originalEvent.action) {
            case 'escape':
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.dialogObj)) {
                    this.dialogObj.close();
                }
                break;
            case 'insert-link':
                this.openDialog(true, event);
                originalEvent.preventDefault();
                break;
        }
    }
    openDialog(isInternal, event) {
        if (!isInternal) {
            this.parent.contentModule.getEditPanel().focus();
        }
        if (this.parent.editorMode === 'HTML') {
            const range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
            const save = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument());
            const selectNodeEle = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);
            const selectParentEle = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
            const eventArgs = {
                args: event ? event.args : {
                    item: { command: 'Links', subCommand: 'CreateLink' },
                    originalEvent: undefined
                },
                selectNode: selectNodeEle, selection: save, selectParent: selectParentEle
            };
            this.linkDialog(eventArgs);
        }
        else {
            const textArea = this.parent.contentModule.getEditPanel();
            this.parent.formatter.editorManager.markdownSelection.save(textArea.selectionStart, textArea.selectionEnd);
            this.linkDialog({
                args: {
                    item: { command: 'Links', subCommand: 'Link' },
                    originalEvent: event && event.args
                },
                member: 'link',
                text: this.parent.formatter.editorManager.markdownSelection.getSelectedText(this.parent.contentModule.getEditPanel()),
                module: 'Markdown',
                name: 'insertLink'
            });
        }
    }
    showDialog() {
        this.openDialog(false);
    }
    closeDialog() {
        if (this.dialogObj) {
            this.dialogObj.hide({ returnValue: true });
        }
    }
    clearDialogObj() {
        if (this.dialogObj) {
            this.dialogObj.destroy();
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.dialogObj.element);
            this.dialogObj = null;
        }
    }
    linkDialog(e, inputDetails) {
        if (this.dialogObj) {
            this.dialogObj.hide({ returnValue: true });
            return;
        }
        if (this.parent.editorMode === 'HTML' && (e.selectParent.length > 0 &&
            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.selectParent[0].classList) &&
            e.selectParent[0].classList.contains('e-rte-anchor')) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(inputDetails)) {
            this.editLink(e);
            return;
        }
        const linkWebAddress = this.i10n.getConstant('linkWebUrl');
        const linkDisplayText = this.i10n.getConstant('linkText');
        const linkTooltip = this.i10n.getConstant('linkTooltipLabel');
        const urlPlace = this.i10n.getConstant('linkurl');
        const textPlace = this.i10n.getConstant('textPlaceholder');
        const title = this.i10n.getConstant('linkTitle');
        const linkDialogEle = this.parent.createElement('div', {
            className: 'e-rte-link-dialog', id: this.rteID + '_rtelink'
        });
        this.parent.element.appendChild(linkDialogEle);
        const linkContent = this.parent.createElement('div', {
            className: 'e-rte-linkcontent', id: this.rteID + '_linkContent'
        });
        const htmlTextbox = (this.parent.editorMode === 'HTML') ? '<label>' + linkTooltip +
            '</label></div><div class="e-rte-field">' +
            '<input type="text" data-role ="none" spellcheck="false" placeholder = "' + title + '" class="e-input e-rte-linkTitle"></div>' +
            '<div class="e-rte-label"></div>' + '<div class="e-rte-field">' +
            '<input type="checkbox" class="e-rte-linkTarget"  data-role ="none"></div>' : '';
        const content = '<div class="e-rte-label"><label>' + linkWebAddress + '</label></div>' + '<div class="e-rte-field">' +
            '<input type="text" data-role ="none" spellcheck="false" placeholder="' + urlPlace + '" class="e-input e-rte-linkurl"/></div>' +
            '<div class="e-rte-label">' + '<label>' + linkDisplayText + '</label></div><div class="e-rte-field"> ' +
            '<input type="text" data-role ="none" spellcheck="false" class="e-input e-rte-linkText" placeholder="' + textPlace + '">' +
            '</div><div class="e-rte-label">' + htmlTextbox;
        const contentElem = parseHtml(content);
        linkContent.appendChild(contentElem);
        const linkTarget = linkContent.querySelector('.e-rte-linkTarget');
        const linkUrl = linkContent.querySelector('.e-rte-linkurl');
        const linkText = linkContent.querySelector('.e-rte-linkText');
        const linkTitle = linkContent.querySelector('.e-rte-linkTitle');
        const linkOpenLabel = this.i10n.getConstant('linkOpenInNewWindow');
        this.checkBoxObj = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_5__.CheckBox({ label: linkOpenLabel, checked: true, enableRtl: this.parent.enableRtl });
        this.checkBoxObj.isStringTemplate = true;
        this.checkBoxObj.createElement = this.parent.createElement;
        this.checkBoxObj.appendTo(linkTarget);
        const selectText = (this.parent.editorMode === 'HTML') ?
            e.selection.getRange(this.parent.contentModule.getDocument()).toString() : e.text;
        const linkInsert = this.i10n.getConstant('dialogInsert');
        const linkCancel = this.i10n.getConstant('dialogCancel');
        const selection = e.selection;
        const selectObj = { selfLink: this, selection: e.selection, selectParent: e.selectParent, args: e.args };
        const dialogModel = {
            header: this.i10n.getConstant('linkHeader'),
            content: linkContent,
            cssClass: CLS_RTE_ELEMENTS,
            enableRtl: this.parent.enableRtl,
            locale: this.parent.locale,
            showCloseIcon: true, closeOnEscape: true, width: (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) ? '290px' : '310px', height: 'inherit',
            isModal: _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice,
            buttons: [{
                    click: this.insertlink.bind(selectObj),
                    buttonModel: { content: linkInsert, cssClass: 'e-flat e-insertLink', isPrimary: true }
                },
                { click: this.cancelDialog.bind(selectObj), buttonModel: { cssClass: 'e-flat', content: linkCancel } }],
            target: (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) ? document.body : this.parent.element,
            animationSettings: { effect: 'None' },
            close: (event) => {
                this.parent.isBlur = false;
                if (event && event.event.returnValue) {
                    if (this.parent.editorMode === 'HTML') {
                        selection.restore();
                    }
                    else {
                        this.parent.formatter.editorManager.markdownSelection.restore(this.parent.contentModule.getEditPanel());
                    }
                }
                this.dialogObj.destroy();
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.dialogObj.element);
                const args = this.dialogObj;
                this.dialogRenderObj.close(args);
                this.dialogObj = null;
            }
        };
        // eslint-disable-next-line
        this.dialogObj = this.dialogRenderObj.render(dialogModel);
        this.dialogObj.createElement = this.parent.createElement;
        this.dialogObj.appendTo(linkDialogEle);
        linkDialogEle.style.maxHeight = 'inherit';
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.dialogObj)) {
            return;
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(inputDetails)) {
            linkUrl.value = inputDetails.url;
            linkText.value = inputDetails.text;
            linkTitle.value = inputDetails.title;
            // eslint-disable-next-line
            (inputDetails.target) ? this.checkBoxObj.checked = true : this.checkBoxObj.checked = false;
            this.dialogObj.header = inputDetails.header;
            this.dialogObj.element.querySelector('.e-insertLink').textContent = inputDetails.btnText;
        }
        this.checkUrl(false);
        if ((this.parent.editorMode === 'HTML' && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(inputDetails) && ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(selectText)
            && selectText !== '') && (e.selection.range.startOffset === 0) || e.selection.range.startOffset !==
            e.selection.range.endOffset)) || e.module === 'Markdown') {
            linkText.value = selectText;
        }
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.parent.element.ownerDocument, 'mousedown', this.onDocumentClick, this);
        if (this.quickToolObj) {
            this.hideLinkQuickToolbar();
            if (this.quickToolObj.inlineQTBar && document.body.contains(this.quickToolObj.inlineQTBar.element)) {
                this.quickToolObj.inlineQTBar.hidePopup();
            }
        }
    }
    // eslint-disable-next-line
    insertlink(e) {
        const linkEle = this.selfLink.dialogObj.element;
        let linkUrl = linkEle.querySelector('.e-rte-linkurl').value;
        let linkText = linkEle.querySelector('.e-rte-linkText').value;
        let linkTitle;
        if (this.selfLink.parent.editorMode === 'HTML') {
            linkTitle = linkEle.querySelector('.e-rte-linkTitle').value;
        }
        const target = (this.selfLink.checkBoxObj.checked) ? '_blank' : null;
        if (linkUrl === '') {
            this.selfLink.checkUrl(true);
            return;
        }
        if (!this.selfLink.isUrl(linkUrl)) {
            linkText = (linkText === '') ? linkUrl : linkText;
            if (!this.selfLink.parent.enableAutoUrl) {
                linkUrl = linkUrl.indexOf('http') > -1 ? linkUrl : 'http://' + linkUrl;
            }
            else {
                // eslint-disable-next-line
                linkUrl = linkUrl;
            }
        }
        else {
            this.selfLink.checkUrl(false);
        }
        const proxy = this.selfLink;
        if (proxy.parent.editorMode === 'HTML' && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.selection.range.startContainer.parentNode, '[id='
            // eslint-disable-next-line
            + "'" + proxy.parent.contentModule.getPanel().id + "'" + ']'))) {
            proxy.parent.contentModule.getEditPanel().focus();
            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE && proxy.parent.iframeSettings.enable) {
                this.selection.restore();
            }
            const range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.parent.contentModule.getDocument());
            this.selection = proxy.parent.formatter.editorManager.nodeSelection.save(range, proxy.parent.contentModule.getDocument());
            this.selectParent = proxy.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
        }
        const value = {
            url: linkUrl, text: linkText, title: linkTitle, target: target,
            selection: this.selection, selectParent: this.selectParent
        };
        if (document.body.contains(proxy.dialogObj.element)) {
            this.selfLink.dialogObj.hide({ returnValue: false });
        }
        if (isIDevice$1() && proxy.parent.iframeSettings.enable) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('iframe', proxy.parent.element).contentWindow.focus();
        }
        if (proxy.parent.editorMode === 'HTML') {
            this.selection.restore();
        }
        if (proxy.parent.formatter.getUndoRedoStack().length === 0) {
            proxy.parent.formatter.saveData();
        }
        let argsValue;
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.args) &&
            this.args.code === 'KeyK') {
            const originalEvent = this.args;
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(this.args, { item: { command: 'Links', subCommand: 'CreateLink' }, originalEvent: originalEvent }, true);
            const argsVal = {
                item: { command: 'Links', subCommand: 'CreateLink' }, originalEvent: originalEvent
            };
            argsValue = argsVal;
        }
        else {
            argsValue = this.args;
        }
        this.selfLink.parent.formatter.process(this.selfLink.parent, argsValue, (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.args) &&
            this.args.originalEvent), value);
        this.selfLink.parent.contentModule.getEditPanel().focus();
    }
    isUrl(url) {
        // eslint-disable-next-line
        const regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/gi;
        return regexp.test(url);
    }
    checkUrl(e) {
        const linkEle = this.dialogObj.element;
        const linkUrl = linkEle.querySelector('.e-rte-linkurl');
        if (e) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([linkUrl], 'e-error');
            linkUrl.setSelectionRange(0, linkUrl.value.length);
            linkUrl.focus();
        }
        else {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([linkUrl], 'e-error');
        }
    }
    removeLink(e) {
        if (this.parent.formatter.getUndoRedoStack().length === 0) {
            this.parent.formatter.saveData();
        }
        this.parent.formatter.process(this.parent, e.args, e.args, {
            selectNode: e.selectNode, selectParent: e.selectParent, selection: e.selection,
            subCommand: e.args.item.subCommand
        });
        if (isIDevice$1() && this.parent.iframeSettings.enable) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('iframe', this.parent.element).contentWindow.focus();
        }
        else {
            this.parent.contentModule.getEditPanel().focus();
        }
        this.hideLinkQuickToolbar();
    }
    openLink(e) {
        const selectParentEle = this.getAnchorNode(e.selectParent[0]);
        if (selectParentEle.classList.contains('e-rte-anchor') || selectParentEle.tagName === 'A') {
            this.parent.formatter.process(this.parent, e.args, e.args, {
                url: selectParentEle.href,
                target: selectParentEle.target === '' ? '_self' : '_blank', selectNode: e.selectNode,
                subCommand: e.args.item.subCommand
            });
        }
    }
    getAnchorNode(element) {
        const selectParent = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(element, 'a');
        return (selectParent ? selectParent : element);
    }
    editLink(e) {
        const selectedNode = this.getAnchorNode(e.selectNode[0]);
        let selectParentEle = this.getAnchorNode(e.selectParent[0]);
        selectParentEle = selectedNode.nodeName === 'A' ? selectedNode : selectParentEle;
        if (selectParentEle.classList.contains('e-rte-anchor') || selectParentEle.tagName === 'A') {
            const linkUpdate = this.i10n.getConstant('dialogUpdate');
            const inputDetails = {
                url: selectParentEle.getAttribute('href'), text: selectParentEle.innerText,
                title: selectParentEle.title, target: selectParentEle.target,
                header: this.i10n.getConstant('editLink'), btnText: linkUpdate
            };
            this.linkDialog(e, inputDetails);
        }
    }
    // eslint-disable-next-line
    cancelDialog(e) {
        this.selfLink.parent.isBlur = false;
        this.selfLink.dialogObj.hide({ returnValue: true });
        if (isIDevice$1()) {
            this.selection.restore();
        }
        else {
            this.selfLink.parent.contentModule.getEditPanel().focus();
        }
    }
    onDocumentClick(e) {
        const target = e.target;
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.dialogObj) && ((
        // eslint-disable-next-line
        !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '[id=' + "'" + this.dialogObj.element.id + "'" + ']') && this.parent.toolbarSettings.enable &&
            this.parent.getToolbarElement() && !this.parent.getToolbarElement().contains(e.target)) ||
            (((this.parent.getToolbarElement() && this.parent.getToolbarElement().contains(e.target)) ||
                this.parent.inlineMode.enable && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '#' + this.dialogObj.element.id)) &&
                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '#' + this.parent.getID() + '_toolbar_CreateLink') &&
                !target.querySelector('#' + this.parent.getID() + '_toolbar_CreateLink')))) {
            this.dialogObj.hide({ returnValue: true });
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.parent.element.ownerDocument, 'mousedown', this.onDocumentClick);
            this.parent.isBlur = true;
            dispatchEvent(this.parent.element, 'focusout');
        }
    }
    /**
     * Destroys the ToolBar.
     *
     * @function destroy
     * @returns {void}
     * @hidden
     * @deprecated
     */
    destroy() {
        this.removeEventListener();
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {void}
     */
    getModuleName() {
        return 'link';
    }
}

/**
 * `Image` module is used to handle image actions.
 */
class Image {
    constructor(parent, serviceLocator) {
        this.isImgUploaded = false;
        this.isAllowedTypes = true;
        this.pageX = null;
        this.pageY = null;
        this.deletedImg = [];
        this.parent = parent;
        this.rteID = parent.element.id;
        this.i10n = serviceLocator.getService('rteLocale');
        this.rendererFactory = serviceLocator.getService('rendererFactory');
        this.dialogRenderObj = serviceLocator.getService('dialogRenderObject');
        this.addEventListener();
    }
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(keyDown, this.onKeyDown, this);
        this.parent.on(keyUp, this.onKeyUp, this);
        this.parent.on(insertImage, this.insertImage, this);
        this.parent.on(showImageDialog, this.showDialog, this);
        this.parent.on(closeImageDialog, this.closeDialog, this);
        this.parent.on(windowResize, this.onWindowResize, this);
        this.parent.on(insertCompleted, this.showImageQuickToolbar, this);
        this.parent.on(clearDialogObj, this.clearDialogObj, this);
        this.parent.on(imageToolbarAction, this.onToolbarAction, this);
        this.parent.on(imageCaption, this.caption, this);
        this.parent.on(imageDelete, this.deleteImg, this);
        this.parent.on(imageLink, this.insertImgLink, this);
        this.parent.on(imageAlt, this.insertAltText, this);
        this.parent.on(editAreaClick, this.editAreaClickHandler, this);
        this.parent.on(iframeMouseDown, this.onIframeMouseDown, this);
        this.parent.on(imageSize, this.imageSize, this);
        this.parent.on(dropDownSelect, this.alignmentSelect, this);
        this.parent.on(initialEnd, this.afterRender, this);
        this.parent.on(dynamicModule, this.afterRender, this);
        this.parent.on(paste, this.imagePaste, this);
        this.parent.on(destroy, this.removeEventListener, this);
    }
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(keyDown, this.onKeyDown);
        this.parent.off(keyUp, this.onKeyUp);
        this.parent.off(windowResize, this.onWindowResize);
        this.parent.off(insertImage, this.insertImage);
        this.parent.off(showImageDialog, this.showDialog);
        this.parent.off(closeImageDialog, this.closeDialog);
        this.parent.off(insertCompleted, this.showImageQuickToolbar);
        this.parent.off(clearDialogObj, this.clearDialogObj);
        this.parent.off(imageCaption, this.caption);
        this.parent.off(imageToolbarAction, this.onToolbarAction);
        this.parent.off(imageDelete, this.deleteImg);
        this.parent.off(imageLink, this.insertImgLink);
        this.parent.off(imageAlt, this.insertAltText);
        this.parent.off(editAreaClick, this.editAreaClickHandler);
        this.parent.off(iframeMouseDown, this.onIframeMouseDown);
        this.parent.off(imageSize, this.imageSize);
        this.parent.off(dropDownSelect, this.alignmentSelect);
        this.parent.off(initialEnd, this.afterRender);
        this.parent.off(dynamicModule, this.afterRender);
        this.parent.off(paste, this.imagePaste);
        this.parent.off(destroy, this.removeEventListener);
        const dropElement = this.parent.iframeSettings.enable ? this.parent.inputElement.ownerDocument
            : this.parent.inputElement;
        dropElement.removeEventListener('drop', this.dragDrop.bind(this), true);
        dropElement.removeEventListener('dragstart', this.dragStart.bind(this), true);
        dropElement.removeEventListener('dragenter', this.dragEnter.bind(this), true);
        dropElement.removeEventListener('dragover', this.dragOver.bind(this), true);
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.contentModule)) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.contentModule.getEditPanel(), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, this.imageClick);
            this.parent.formatter.editorManager.observer.off(checkUndo, this.undoStack);
            if (this.parent.insertImageSettings.resize) {
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.parent.contentModule.getEditPanel(), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent, this.resizeStart);
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.parent.element.ownerDocument, 'mousedown', this.onDocumentClick);
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.contentModule.getEditPanel(), 'cut', this.onCutHandler);
            }
        }
    }
    onIframeMouseDown() {
        if (this.dialogObj) {
            this.dialogObj.hide({ returnValue: true });
        }
    }
    afterRender() {
        this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.contentModule.getEditPanel(), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, this.imageClick, this);
        if (this.parent.insertImageSettings.resize) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.parent.contentModule.getEditPanel(), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent, this.resizeStart, this);
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.parent.element.ownerDocument, 'mousedown', this.onDocumentClick, this);
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.contentModule.getEditPanel(), 'cut', this.onCutHandler, this);
        }
        const dropElement = this.parent.iframeSettings.enable ? this.parent.inputElement.ownerDocument :
            this.parent.inputElement;
        dropElement.addEventListener('drop', this.dragDrop.bind(this), true);
        dropElement.addEventListener('dragstart', this.dragStart.bind(this), true);
        dropElement.addEventListener('dragenter', this.dragOver.bind(this), true);
        dropElement.addEventListener('dragover', this.dragOver.bind(this), true);
    }
    undoStack(args) {
        if (args.subCommand.toLowerCase() === 'undo' || args.subCommand.toLowerCase() === 'redo') {
            for (let i = 0; i < this.parent.formatter.getUndoRedoStack().length; i++) {
                const temp = this.parent.createElement('div');
                const contentElem = parseHtml(this.parent.formatter.getUndoRedoStack()[i].text);
                temp.appendChild(contentElem);
                const img = temp.querySelectorAll('img');
                if (temp.querySelector('.e-img-resize') && img.length > 0) {
                    for (let j = 0; j < img.length; j++) {
                        img[j].style.outline = '';
                    }
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(temp.querySelector('.e-img-resize'));
                    this.parent.formatter.getUndoRedoStack()[i].text = temp.innerHTML;
                }
            }
        }
    }
    resizeEnd(e) {
        this.resizeBtnInit();
        this.imgEle.parentElement.style.cursor = 'auto';
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([e.target.parentElement], 'e-mob-span');
        }
        const args = { event: e, requestType: 'images' };
        this.parent.trigger(resizeStop, args);
        /* eslint-disable */
        let pageX = this.getPointX(e);
        let pageY = (this.parent.iframeSettings.enable) ? window.pageYOffset +
            this.parent.element.getBoundingClientRect().top + e.clientY : e.pageY;
        /* eslint-enable */
        this.parent.formatter.editorManager.observer.on(checkUndo, this.undoStack, this);
        this.parent.formatter.saveData();
    }
    resizeStart(e, ele) {
        if (this.parent.readonly) {
            return;
        }
        const target = ele ? ele : e.target;
        this.prevSelectedImgEle = this.imgEle;
        if (target.tagName === 'IMG') {
            this.parent.preventDefaultResize(e);
            const img = target;
            if (this.imgResizeDiv && this.contentModule.getEditPanel().contains(this.imgResizeDiv)) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.imgResizeDiv);
            }
            this.imageResize(img);
        }
        if (target.classList.contains('e-rte-imageboxmark')) {
            if (this.parent.formatter.getUndoRedoStack().length === 0) {
                this.parent.formatter.saveData();
            }
            this.pageX = this.getPointX(e);
            this.pageY = this.getPointY(e);
            e.preventDefault();
            e.stopImmediatePropagation();
            this.resizeBtnInit();
            if (this.quickToolObj) {
                this.quickToolObj.imageQTBar.hidePopup();
            }
            if (target.classList.contains('e-rte-topLeft')) {
                this.resizeBtnStat.topLeft = true;
            }
            if (target.classList.contains('e-rte-topRight')) {
                this.resizeBtnStat.topRight = true;
            }
            if (target.classList.contains('e-rte-botLeft')) {
                this.resizeBtnStat.botLeft = true;
            }
            if (target.classList.contains('e-rte-botRight')) {
                this.resizeBtnStat.botRight = true;
            }
            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && this.contentModule.getEditPanel().contains(this.imgResizeDiv) &&
                !this.imgResizeDiv.classList.contains('e-mob-span')) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.imgResizeDiv], 'e-mob-span');
            }
            else {
                const args = { event: e, requestType: 'images' };
                this.parent.trigger(resizeStart, args, (resizeStartArgs) => {
                    if (resizeStartArgs.cancel) {
                        this.cancelResizeAction();
                    }
                });
            }
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.contentModule.getDocument(), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, this.resizeEnd, this);
        }
    }
    imageClick(e) {
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {
            if ((e.target.tagName === 'IMG' &&
                e.target.parentElement.tagName === 'A') ||
                (e.target.tagName === 'IMG')) {
                this.contentModule.getEditPanel().setAttribute('contenteditable', 'false');
                e.target.focus();
            }
            else {
                if (!this.parent.readonly) {
                    this.contentModule.getEditPanel().setAttribute('contenteditable', 'true');
                }
            }
        }
        if (e.target.tagName === 'IMG' &&
            e.target.parentElement.tagName === 'A') {
            e.preventDefault();
        }
    }
    onCutHandler() {
        if (this.imgResizeDiv && this.contentModule.getEditPanel().contains(this.imgResizeDiv)) {
            this.cancelResizeAction();
        }
    }
    imageResize(e) {
        this.resizeBtnInit();
        this.imgEle = e;
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.imgEle], 'e-resize');
        this.imgResizeDiv = this.parent.createElement('span', { className: 'e-img-resize', id: this.rteID + '_imgResize' });
        this.imgResizeDiv.appendChild(this.parent.createElement('span', {
            className: 'e-rte-imageboxmark e-rte-topLeft', styles: 'cursor: nwse-resize'
        }));
        this.imgResizeDiv.appendChild(this.parent.createElement('span', {
            className: 'e-rte-imageboxmark e-rte-topRight', styles: 'cursor: nesw-resize'
        }));
        this.imgResizeDiv.appendChild(this.parent.createElement('span', {
            className: 'e-rte-imageboxmark e-rte-botLeft', styles: 'cursor: nesw-resize'
        }));
        this.imgResizeDiv.appendChild(this.parent.createElement('span', {
            className: 'e-rte-imageboxmark e-rte-botRight', styles: 'cursor: nwse-resize'
        }));
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.imgResizeDiv], 'e-mob-rte');
        }
        e.style.outline = '2px solid #4a90e2';
        this.imgResizePos(e, this.imgResizeDiv);
        this.resizeImgDupPos(e);
        this.contentModule.getEditPanel().appendChild(this.imgResizeDiv);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.contentModule.getDocument(), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, this.resizing, this);
    }
    getPointX(e) {
        if (e.touches && e.touches.length) {
            return e.touches[0].pageX;
        }
        else {
            return e.pageX;
        }
    }
    getPointY(e) {
        if (e.touches && e.touches.length) {
            return e.touches[0].pageY;
        }
        else {
            return e.pageY;
        }
    }
    imgResizePos(e, imgResizeDiv) {
        const pos = this.calcPos(e);
        const top = pos.top;
        const left = pos.left;
        const imgWid = e.width;
        const imgHgt = e.height;
        const borWid = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) ? (4 * parseInt((e.style.outline.slice(-3)), 10)) + 2 :
            (2 * parseInt((e.style.outline.slice(-3)), 10)) + 2; //span border width + image outline width
        const devWid = ((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) ? 0 : 2); // span border width
        imgResizeDiv.querySelector('.e-rte-botLeft').style.left = (left - borWid) + 'px';
        imgResizeDiv.querySelector('.e-rte-botLeft').style.top = ((imgHgt - borWid) + top) + 'px';
        imgResizeDiv.querySelector('.e-rte-botRight').style.left = ((imgWid - (borWid - devWid)) + left) + 'px';
        imgResizeDiv.querySelector('.e-rte-botRight').style.top = ((imgHgt - borWid) + top) + 'px';
        imgResizeDiv.querySelector('.e-rte-topRight').style.left = ((imgWid - (borWid - devWid)) + left) + 'px';
        imgResizeDiv.querySelector('.e-rte-topRight').style.top = (top - (borWid)) + 'px';
        imgResizeDiv.querySelector('.e-rte-topLeft').style.left = (left - borWid) + 'px';
        imgResizeDiv.querySelector('.e-rte-topLeft').style.top = (top - borWid) + 'px';
    }
    calcPos(elem) {
        const ignoreOffset = ['TD', 'TH', 'TABLE', 'A'];
        let parentOffset = { top: 0, left: 0 };
        const doc = elem.ownerDocument;
        let offsetParent = ((elem.offsetParent && (elem.offsetParent.classList.contains('e-img-caption') ||
            ignoreOffset.indexOf(elem.offsetParent.tagName) > -1)) ?
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(elem, '#' + this.parent.getID() + '_rte-edit-view') : elem.offsetParent) || doc.documentElement;
        while (offsetParent &&
            (offsetParent === doc.body || offsetParent === doc.documentElement) &&
            offsetParent.style.position === 'static') {
            offsetParent = offsetParent.parentNode;
        }
        if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
            // eslint-disable-next-line
            parentOffset = offsetParent.getBoundingClientRect();
        }
        return {
            top: elem.offsetTop,
            left: elem.offsetLeft
        };
    }
    setAspectRatio(img, expectedX, expectedY, e) {
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(img.width)) {
            return;
        }
        const width = img.style.width !== '' ? img.style.width.match(/^\d+(\.\d*)?%$/g) ? parseFloat(img.style.width) :
            parseInt(img.style.width, 10) : img.width;
        const height = img.style.height !== '' ? parseInt(img.style.height, 10) : img.height;
        if (width > height) {
            img.style.minWidth = '20px';
            if (this.parent.insertImageSettings.resizeByPercent) {
                if (parseInt('' + img.getBoundingClientRect().width + '', 10) !== 0 && parseInt('' + width + '', 10) !== 0) {
                    const percentageValue = this.pixToPerc((width / height * expectedY), (img.previousElementSibling || img.parentElement));
                    img.style.width = Math.min(Math.round((percentageValue / img.getBoundingClientRect().width) * expectedX * 100) / 100, 100) + '%';
                }
                else {
                    img.style.width = this.pixToPerc((width / height * expectedY), (img.previousElementSibling || img.parentElement)) + '%';
                }
                img.style.height = null;
                img.removeAttribute('height');
            }
            else if (img.style.width === '' && img.style.height !== '') {
                img.style.height = expectedY + 'px';
            }
            else if (img.style.width !== '' && img.style.height === '') {
                let currentWidth = ((width / height * expectedY) + width / height) < (this.parent.inputElement.getBoundingClientRect().right - 32) ?
                    ((width / height * expectedY) + width / height) : (this.parent.inputElement.getBoundingClientRect().right - 32);
                img.style.width = currentWidth.toString() + 'px';
            }
            else if (img.style.width !== '') {
                let currentWidth = (width / height * expectedY) < (this.parent.inputElement.getBoundingClientRect().right - 32) ?
                    (width / height * expectedY) : (this.parent.inputElement.getBoundingClientRect().right - 32);
                img.style.width = currentWidth + 'px';
                img.style.height = expectedY + 'px';
            }
            else {
                img.setAttribute('width', ((width / height * expectedY) + width / height).toString());
            }
        }
        else if (height > width) {
            if (this.parent.insertImageSettings.resizeByPercent) {
                if (parseInt('' + img.getBoundingClientRect().width + '', 10) !== 0 && parseInt('' + width + '', 10) !== 0) {
                    img.style.width = Math.min(Math.round((width / img.getBoundingClientRect().width) * expectedX * 100) / 100, 100) + '%';
                }
                else {
                    img.style.width = this.pixToPerc((expectedX / height * expectedY), (img.previousElementSibling || img.parentElement)) + '%';
                }
                img.style.height = null;
                img.removeAttribute('height');
            }
            else if (img.style.width !== '') {
                img.style.width = expectedX + 'px';
                img.style.height = (height / width * expectedX) + 'px';
            }
            else {
                img.setAttribute('width', this.resizeBtnStat.botRight ? (this.getPointX(e.event) - img.getBoundingClientRect().left).toString() : expectedX.toString());
            }
        }
        else {
            if (this.parent.insertImageSettings.resizeByPercent) {
                img.style.width = this.pixToPerc(expectedX, (img.previousElementSibling || img.parentElement)) + '%';
                img.style.height = null;
                img.removeAttribute('height');
            }
            else if (img.style.width !== '') {
                img.style.width = expectedX + 'px';
                img.style.height = expectedX + 'px';
            }
            else {
                img.setAttribute('width', expectedX.toString());
                img.setAttribute('height', expectedX.toString());
            }
        }
    }
    pixToPerc(expected, parentEle) {
        return expected / parseFloat(getComputedStyle(parentEle).width) * 100;
    }
    imgDupMouseMove(width, height, e) {
        const args = { event: e, requestType: 'images' };
        this.parent.trigger(onResize, args, (resizingArgs) => {
            if (resizingArgs.cancel) {
                this.cancelResizeAction();
            }
            else {
                if ((parseInt(this.parent.insertImageSettings.minWidth, 10) >= parseInt(width, 10) ||
                    (parseInt(this.parent.getInsertImgMaxWidth(), 10) <= parseInt(width, 10) &&
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.imgEle.style.width)))) {
                    return;
                }
                if (!this.parent.insertImageSettings.resizeByPercent &&
                    (parseInt(this.parent.insertImageSettings.minHeight, 10) >= parseInt(height, 10) ||
                        parseInt(this.parent.insertImageSettings.maxHeight, 10) <= parseInt(height, 10))) {
                    return;
                }
                this.imgEle.parentElement.style.cursor = 'pointer';
                this.setAspectRatio(this.imgEle, parseInt(width, 10), parseInt(height, 10), args);
                this.resizeImgDupPos(this.imgEle);
                this.imgResizePos(this.imgEle, this.imgResizeDiv);
                this.parent.setContentHeight('', false);
            }
        });
    }
    resizing(e) {
        if (this.imgEle.offsetWidth >= this.parent.getInsertImgMaxWidth()) {
            this.imgEle.style.maxHeight = this.imgEle.offsetHeight + 'px';
        }
        const pageX = this.getPointX(e);
        const pageY = this.getPointY(e);
        const mouseX = (this.resizeBtnStat.botLeft || this.resizeBtnStat.topLeft) ? -(pageX - this.pageX) : (pageX - this.pageX);
        const mouseY = (this.resizeBtnStat.topLeft || this.resizeBtnStat.topRight) ? -(pageY - this.pageY) : (pageY - this.pageY);
        const width = parseInt(this.imgDupPos.width, 10) + mouseX;
        const height = parseInt(this.imgDupPos.height, 10) + mouseY;
        this.pageX = pageX;
        this.pageY = pageY;
        if (this.resizeBtnStat.botRight) {
            this.imgDupMouseMove(width + 'px', height + 'px', e);
        }
        else if (this.resizeBtnStat.botLeft) {
            this.imgDupMouseMove(width + 'px', height + 'px', e);
        }
        else if (this.resizeBtnStat.topRight) {
            this.imgDupMouseMove(width + 'px', height + 'px', e);
        }
        else if (this.resizeBtnStat.topLeft) {
            this.imgDupMouseMove(width + 'px', height + 'px', e);
        }
    }
    cancelResizeAction() {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.contentModule.getDocument(), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, this.resizing);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.contentModule.getDocument(), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, this.resizeEnd);
        if (this.imgEle && this.imgResizeDiv && this.contentModule.getEditPanel().contains(this.imgResizeDiv)) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.imgResizeDiv);
            this.imgEle.style.outline = '';
            this.imgResizeDiv = null;
            this.pageX = null;
            this.pageY = null;
        }
    }
    resizeImgDupPos(e) {
        this.imgDupPos = {
            width: (e.style.width !== '' && (this.parent.insertImageSettings &&
                !this.parent.insertImageSettings.resizeByPercent)) ? this.imgEle.style.width : e.width + 'px',
            height: (e.style.height !== '') ? this.imgEle.style.height : e.height + 'px'
        };
    }
    resizeBtnInit() {
        return this.resizeBtnStat = { botLeft: false, botRight: false, topRight: false, topLeft: false };
    }
    onToolbarAction(args) {
        if (isIDevice$1()) {
            this.parent.notify(selectionRestore, {});
        }
        const item = args.args.item;
        switch (item.subCommand) {
            case 'Replace':
                if (this.parent.fileManagerSettings.enable) {
                    this.parent.notify(renderFileManager, args);
                }
                else {
                    this.parent.notify(insertImage, args);
                }
                break;
            case 'Caption':
                this.parent.notify(imageCaption, args);
                break;
            case 'InsertLink':
                this.parent.notify(imageLink, args);
                break;
            case 'AltText':
                this.parent.notify(imageAlt, args);
                break;
            case 'Remove':
                this.parent.notify(imageDelete, args);
                break;
            case 'Dimension':
                this.parent.notify(imageSize, args);
                break;
            case 'OpenImageLink':
                this.openImgLink(args);
                break;
            case 'EditImageLink':
                this.editImgLink(args);
                break;
            case 'RemoveImageLink':
                this.removeImgLink(args);
                break;
        }
    }
    openImgLink(e) {
        const target = e.selectParent[0].parentNode.target === '' ? '_self' : '_blank';
        this.parent.formatter.process(this.parent, e.args, e.args, {
            url: e.selectParent[0].parentNode.href, target: target, selectNode: e.selectNode,
            subCommand: e.args.item.subCommand
        });
    }
    editImgLink(e) {
        const selectParentEle = e.selectParent[0].parentNode;
        const linkUpdate = this.i10n.getConstant('dialogUpdate');
        const inputDetails = {
            url: selectParentEle.href, target: selectParentEle.target,
            header: 'Edit Link', btnText: linkUpdate
        };
        this.insertImgLink(e, inputDetails);
    }
    removeImgLink(e) {
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE) {
            this.contentModule.getEditPanel().focus();
        }
        e.selection.restore();
        const isCapLink = (this.contentModule.getEditPanel().contains(this.captionEle) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('a', this.captionEle)) ?
            true : false;
        const selectParent = isCapLink ? [this.captionEle] : [e.selectNode[0].parentElement];
        this.parent.formatter.process(this.parent, e.args, e.args, {
            insertElement: e.selectNode[0], selectParent: selectParent, selection: e.selection,
            subCommand: e.args.item.subCommand
        });
        if (this.quickToolObj && document.body.contains(this.quickToolObj.imageQTBar.element)) {
            this.quickToolObj.imageQTBar.hidePopup();
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.selectParent)) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([e.selectParent[0]], 'e-img-focus');
            }
        }
        if (isCapLink) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.e-img-inner', this.captionEle).focus();
        }
    }
    onKeyDown(event) {
        const originalEvent = event.args;
        let range;
        let save;
        let selectNodeEle;
        let selectParentEle;
        this.deletedImg = [];
        let isCursor;
        const keyCodeValues = [27, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
            44, 45, 9, 16, 17, 18, 19, 20, 33, 34, 35, 36, 37, 38, 39, 40, 91, 92, 93, 144, 145, 182, 183];
        if (this.parent.editorMode === 'HTML') {
            range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
            isCursor = range.startContainer === range.endContainer && range.startOffset === range.endOffset;
        }
        if (!isCursor && this.parent.editorMode === 'HTML' && keyCodeValues.indexOf(originalEvent.which) < 0) {
            const nodes = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);
            for (let i = 0; i < nodes.length; i++) {
                if (nodes[i].nodeName === 'IMG') {
                    this.deletedImg.push(nodes[i]);
                }
            }
        }
        if (this.parent.editorMode === 'HTML' && ((originalEvent.which === 8 && originalEvent.code === 'Backspace') ||
            (originalEvent.which === 46 && originalEvent.code === 'Delete'))) {
            const isCursor = range.startContainer === range.endContainer && range.startOffset === range.endOffset;
            if ((originalEvent.which === 8 && originalEvent.code === 'Backspace' && isCursor)) {
                this.checkImageBack(range);
            }
            else if ((originalEvent.which === 46 && originalEvent.code === 'Delete' && isCursor)) {
                this.checkImageDel(range);
            }
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.formatter.editorManager.nodeSelection) &&
            originalEvent.code !== 'KeyK') {
            range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
            save = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument());
            selectNodeEle = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);
            selectParentEle = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
            if (!originalEvent.ctrlKey && originalEvent.key && (originalEvent.key.length === 1 || originalEvent.action === 'enter') &&
                (selectParentEle[0].tagName === 'IMG') && selectParentEle[0].parentElement) {
                const prev = selectParentEle[0].parentElement.childNodes[0];
                if (this.contentModule.getEditPanel().querySelector('.e-img-resize')) {
                    this.removeResizeEle();
                }
                this.parent.formatter.editorManager.nodeSelection.setSelectionText(this.contentModule.getDocument(), prev, prev, prev.textContent.length, prev.textContent.length);
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([selectParentEle[0]], 'e-img-focus');
                this.quickToolObj.imageQTBar.hidePopup();
            }
        }
        if (originalEvent.ctrlKey && (originalEvent.keyCode === 89 || originalEvent.keyCode === 90)) {
            this.undoStack({ subCommand: (originalEvent.keyCode === 90 ? 'undo' : 'redo') });
        }
        if (originalEvent.keyCode === 8 || originalEvent.keyCode === 46) {
            if (selectNodeEle && selectNodeEle[0].nodeName === 'IMG' && selectNodeEle.length < 1) {
                originalEvent.preventDefault();
                const event = {
                    selectNode: selectNodeEle, selection: save, selectParent: selectParentEle,
                    args: {
                        item: { command: 'Images', subCommand: 'Remove' },
                        originalEvent: originalEvent
                    }
                };
                this.deleteImg(event, originalEvent.keyCode);
            }
            if (this.parent.contentModule.getEditPanel().querySelector('.e-img-resize')) {
                this.removeResizeEle();
            }
        }
        if (originalEvent.code === 'Backspace') {
            originalEvent.action = 'backspace';
        }
        switch (originalEvent.action) {
            case 'escape':
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.dialogObj)) {
                    this.dialogObj.close();
                }
                break;
            case 'backspace':
            case 'delete':
                for (let i = 0; i < this.deletedImg.length; i++) {
                    const src = this.deletedImg[i].src;
                    this.imageRemovePost(src);
                }
                if (this.parent.editorMode !== 'Markdown') {
                    if (range.startContainer.nodeType === 3) {
                        if (originalEvent.code === 'Backspace') {
                            if (range.startContainer.previousElementSibling && range.startOffset === 0 &&
                                range.startContainer.previousElementSibling.classList.contains(CLS_CAPTION) &&
                                range.startContainer.previousElementSibling.classList.contains(CLS_CAPINLINE)) {
                                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(range.startContainer.previousElementSibling);
                            }
                        }
                        else {
                            if (range.startContainer.nextElementSibling &&
                                range.endContainer.textContent.length === range.endOffset &&
                                range.startContainer.nextElementSibling.classList.contains(CLS_CAPTION) &&
                                range.startContainer.nextElementSibling.classList.contains(CLS_CAPINLINE)) {
                                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(range.startContainer.nextElementSibling);
                            }
                        }
                    }
                    else if ((range.startContainer.nodeType === 1 &&
                        range.startContainer.querySelector('.' + CLS_CAPTION + '.' + CLS_CAPINLINE))) {
                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(range.startContainer.querySelector('.' + CLS_CAPTION + '.' + CLS_CAPINLINE));
                    }
                }
                break;
            case 'insert-image':
                this.openDialog(true, originalEvent, save, selectNodeEle, selectParentEle);
                originalEvent.preventDefault();
                break;
        }
    }
    openDialog(isInternal, event, selection, ele, parentEle) {
        let range;
        let save;
        let selectNodeEle;
        let selectParentEle;
        if (!isInternal && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.formatter.editorManager.nodeSelection)) {
            range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
            save = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument());
            selectNodeEle = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);
            selectParentEle = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
        }
        else {
            save = selection;
            selectNodeEle = ele;
            selectParentEle = parentEle;
        }
        if (this.parent.editorMode === 'HTML') {
            this.insertImage({
                args: {
                    item: { command: 'Images', subCommand: 'Image' },
                    originalEvent: event
                },
                selectNode: selectNodeEle,
                selection: save,
                selectParent: selectParentEle
            });
        }
        else {
            this.insertImage({
                args: {
                    item: { command: 'Images', subCommand: 'Image' },
                    originalEvent: event
                },
                member: 'image',
                text: this.parent.formatter.editorManager.markdownSelection.getSelectedText(this.parent.contentModule.getEditPanel()),
                module: 'Markdown',
                name: 'insertImage'
            });
        }
    }
    showDialog() {
        this.openDialog(false);
    }
    closeDialog() {
        if (this.dialogObj) {
            this.dialogObj.hide({ returnValue: true });
        }
    }
    // eslint-disable-next-line
    onKeyUp(event) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.deletedImg) && this.deletedImg.length > 0) {
            for (let i = 0; i < this.deletedImg.length; i++) {
                const args = {
                    element: this.deletedImg[i],
                    src: this.deletedImg[i].getAttribute('src')
                };
                this.parent.trigger(afterImageDelete, args);
            }
        }
    }
    checkImageBack(range) {
        if (range.startContainer.nodeName === '#text' && range.startOffset === 0 &&
            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(range.startContainer.previousSibling) && range.startContainer.previousSibling.nodeName === 'IMG') {
            this.deletedImg.push(range.startContainer.previousSibling);
        }
        else if (range.startContainer.nodeName !== '#text' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(range.startContainer.childNodes[range.startOffset - 1]) &&
            range.startContainer.childNodes[range.startOffset - 1].nodeName === 'IMG') {
            this.deletedImg.push(range.startContainer.childNodes[range.startOffset - 1]);
        }
    }
    checkImageDel(range) {
        if (range.startContainer.nodeName === '#text' && range.startOffset === range.startContainer.textContent.length &&
            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(range.startContainer.nextSibling) && range.startContainer.nextSibling.nodeName === 'IMG') {
            this.deletedImg.push(range.startContainer.nextSibling);
        }
        else if (range.startContainer.nodeName !== '#text' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(range.startContainer.childNodes[range.startOffset]) &&
            range.startContainer.childNodes[range.startOffset].nodeName === 'IMG') {
            this.deletedImg.push(range.startContainer.childNodes[range.startOffset]);
        }
    }
    alignmentSelect(e) {
        const item = e.item;
        if (!document.body.contains(document.body.querySelector('.e-rte-quick-toolbar')) || item.command !== 'Images') {
            return;
        }
        const range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
        let selectNodeEle = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);
        selectNodeEle = (selectNodeEle[0].nodeName === 'IMG') ? selectNodeEle : [this.imgEle];
        const args = { args: e, selectNode: selectNodeEle };
        if (this.parent.formatter.getUndoRedoStack().length === 0) {
            this.parent.formatter.saveData();
        }
        switch (item.subCommand) {
            case 'JustifyLeft':
                this.alignImage(args, 'JustifyLeft');
                break;
            case 'JustifyCenter':
                this.alignImage(args, 'JustifyCenter');
                break;
            case 'JustifyRight':
                this.alignImage(args, 'JustifyRight');
                break;
            case 'Inline':
                this.inline(args);
                break;
            case 'Break':
                this.break(args);
                break;
        }
        if (this.quickToolObj && document.body.contains(this.quickToolObj.imageQTBar.element)) {
            this.quickToolObj.imageQTBar.hidePopup();
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([selectNodeEle[0]], 'e-img-focus');
        }
        this.cancelResizeAction();
    }
    imageWithLinkQTBarItemUpdate() {
        let separator;
        const items = this.quickToolObj.imageQTBar.toolbarElement.querySelectorAll('.e-toolbar-item');
        for (let i = 0; i < items.length; i++) {
            if (items[i].getAttribute('title') === this.i10n.getConstant('openLink') ||
                items[i].getAttribute('title') === this.i10n.getConstant('editLink') ||
                items[i].getAttribute('title') === this.i10n.getConstant('removeLink')) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([items[i]], 'e-link-groups');
                items[i].style.display = 'none';
            }
            else if (items[i].getAttribute('title') === 'Insert Link') {
                items[i].style.display = '';
            }
            else if (items[i].classList.contains('e-rte-horizontal-separator')) {
                // eslint-disable-next-line
                separator = items[i];
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(items[i]);
            }
        }
        const newItems = this.quickToolObj.imageQTBar.toolbarElement.querySelectorAll('.e-toolbar-item:not(.e-link-groups)');
        this.quickToolObj.imageQTBar.addQTBarItem(['-'], Math.round(newItems.length / 2));
    }
    showImageQuickToolbar(e) {
        if (e.type !== 'Images' || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.quickToolbarModule)
            || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.quickToolbarModule.imageQTBar) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.args)) {
            return;
        }
        this.quickToolObj = this.parent.quickToolbarModule;
        const args = e.args;
        let target = e.elements;
        [].forEach.call(e.elements, (element, index) => {
            if (index === 0) {
                target = element;
            }
        });
        if (target && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'a')) {
            this.imageWithLinkQTBarItemUpdate();
        }
        if (target.nodeName === 'IMG') {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([target], ['e-img-focus']);
        }
        const pageY = (this.parent.iframeSettings.enable) ? window.pageYOffset +
            this.parent.element.getBoundingClientRect().top + args.clientY : args.pageY;
        if (this.parent.quickToolbarModule.imageQTBar) {
            if (e.isNotify) {
                setTimeout(() => {
                    this.quickToolObj.imageQTBar.showPopup(args.pageX, pageY, target);
                }, 400);
            }
            else {
                this.quickToolObj.imageQTBar.showPopup(args.pageX, pageY, target);
            }
        }
    }
    hideImageQuickToolbar() {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.contentModule.getEditPanel().querySelector('.e-img-focus'))) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.contentModule.getEditPanel().querySelector('.e-img-focus')], 'e-img-focus');
            if (this.quickToolObj && this.quickToolObj.imageQTBar && document.body.contains(this.quickToolObj.imageQTBar.element)) {
                this.quickToolObj.imageQTBar.hidePopup();
            }
        }
    }
    editAreaClickHandler(e) {
        if (this.parent.readonly) {
            this.hideImageQuickToolbar();
            return;
        }
        const args = e.args;
        const showOnRightClick = this.parent.quickToolbarSettings.showOnRightClick;
        if (args.which === 2 || (showOnRightClick && args.which === 1) || (!showOnRightClick && args.which === 3)) {
            if ((showOnRightClick && args.which === 1) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.target) &&
                args.target.tagName === 'IMG') {
                this.parent.formatter.editorManager.nodeSelection.Clear(this.contentModule.getDocument());
                this.parent.formatter.editorManager.nodeSelection.setSelectionContents(this.contentModule.getDocument(), args.target);
            }
            return;
        }
        if (this.parent.editorMode === 'HTML' && this.parent.quickToolbarModule && this.parent.quickToolbarModule.imageQTBar) {
            this.quickToolObj = this.parent.quickToolbarModule;
            const target = args.target;
            this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);
            const isPopupOpen = this.quickToolObj.imageQTBar.element.classList.contains('e-rte-pop');
            if (target.nodeName === 'IMG' && this.parent.quickToolbarModule) {
                if (isPopupOpen) {
                    return;
                }
                this.parent.formatter.editorManager.nodeSelection.Clear(this.contentModule.getDocument());
                this.parent.formatter.editorManager.nodeSelection.setSelectionContents(this.contentModule.getDocument(), target);
                if (isIDevice$1()) {
                    this.parent.notify(selectionSave, e);
                }
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([target], 'e-img-focus');
                const items = this.quickToolObj.imageQTBar.toolbarElement.querySelectorAll('.e-toolbar-item');
                let separator;
                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'a')) {
                    for (let i = 0; i < items.length; i++) {
                        if (items[i].getAttribute('title') === this.i10n.getConstant('openLink') ||
                            items[i].getAttribute('title') === this.i10n.getConstant('editLink') ||
                            items[i].getAttribute('title') === this.i10n.getConstant('removeLink')) {
                            items[i].style.display = '';
                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([items[i]], 'e-link-groups');
                        }
                        else if (items[i].getAttribute('title') === 'Insert Link') {
                            items[i].style.display = 'none';
                        }
                        else if (items[i].classList.contains('e-rte-horizontal-separator')) {
                            // eslint-disable-next-line
                            separator = items[i];
                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(items[i]);
                        }
                    }
                    const newItems = this.quickToolObj.imageQTBar.toolbarElement.querySelectorAll('.e-toolbar-item:not(.e-link-groups)');
                    this.quickToolObj.imageQTBar.addQTBarItem(['-'], Math.round(newItems.length / 2));
                }
                else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'a')) {
                    this.imageWithLinkQTBarItemUpdate();
                }
                this.showImageQuickToolbar({ args: args, type: 'Images', elements: [args.target] });
            }
            else {
                this.hideImageQuickToolbar();
            }
        }
    }
    insertImgLink(e, inputDetails) {
        if (e.selectNode[0].nodeName !== 'IMG') {
            return;
        }
        this.imagDialog(e);
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.dialogObj)) {
            const linkWrap = this.parent.createElement('div', { className: 'e-img-linkwrap' });
            const linkUrl = this.i10n.getConstant('linkurl');
            const content = '<div class="e-rte-field">' +
                '<input type="text" data-role ="none" class="e-input e-img-link" spellcheck="false" placeholder="' + linkUrl + '"/></div>' +
                '<div class="e-rte-label"></div>' + '<div class="e-rte-field">' +
                '<input type="checkbox" class="e-rte-linkTarget"  data-role ="none"></div>';
            const contentElem = parseHtml(content);
            linkWrap.appendChild(contentElem);
            const linkTarget = linkWrap.querySelector('.e-rte-linkTarget');
            const inputLink = linkWrap.querySelector('.e-img-link');
            const linkOpenLabel = this.i10n.getConstant('linkOpenInNewWindow');
            this.checkBoxObj = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_5__.CheckBox({
                label: linkOpenLabel, checked: true, enableRtl: this.parent.enableRtl, change: (e) => {
                    if (e.checked) {
                        target = '_blank';
                    }
                    else {
                        target = null;
                    }
                }
            });
            this.checkBoxObj.isStringTemplate = true;
            this.checkBoxObj.createElement = this.parent.createElement;
            this.checkBoxObj.appendTo(linkTarget);
            let target = this.checkBoxObj.checked ? '_blank' : null;
            const linkUpdate = this.i10n.getConstant('dialogUpdate');
            const linkargs = {
                args: e.args,
                selfImage: this, selection: e.selection,
                selectNode: e.selectNode, selectParent: e.selectParent, link: inputLink, target: target
            };
            this.dialogObj.setProperties({
                height: 'inherit',
                width: '290px',
                header: this.parent.localeObj.getConstant('imageInsertLinkHeader'),
                content: linkWrap,
                position: { X: 'center', Y: 'center' },
                buttons: [{
                        // eslint-disable-next-line
                        click: (e) => {
                            this.insertlink(linkargs);
                        },
                        buttonModel: {
                            content: linkUpdate, cssClass: 'e-flat e-update-link', isPrimary: true
                        }
                    }]
            });
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(inputDetails)) {
                inputLink.value = inputDetails.url;
                // eslint-disable-next-line
                (inputDetails.target) ? this.checkBoxObj.checked = true : this.checkBoxObj.checked = false;
                this.dialogObj.header = inputDetails.header;
            }
            this.dialogObj.element.style.maxHeight = 'inherit';
            this.dialogObj.content.querySelector('input').focus();
        }
    }
    insertAltText(e) {
        if (e.selectNode[0].nodeName !== 'IMG') {
            return;
        }
        this.imagDialog(e);
        const altText = this.i10n.getConstant('altText');
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.dialogObj)) {
            const altWrap = this.parent.createElement('div', { className: 'e-img-altwrap' });
            const altHeader = this.i10n.getConstant('alternateHeader');
            const linkUpdate = this.i10n.getConstant('dialogUpdate');
            const getAlt = (e.selectNode[0].getAttribute('alt') === null) ? '' :
                e.selectNode[0].getAttribute('alt');
            const content = '<div class="e-rte-field">' +
                '<input type="text" spellcheck="false" value="' + getAlt + '" class="e-input e-img-alt" placeholder="' + altText + '"/>' +
                '</div>';
            const contentElem = parseHtml(content);
            altWrap.appendChild(contentElem);
            const inputAlt = altWrap.querySelector('.e-img-alt');
            const altArgs = {
                args: e.args, selfImage: this, selection: e.selection, selectNode: e.selectNode,
                alt: inputAlt
            };
            this.dialogObj.setProperties({
                height: 'inherit', width: '290px', header: altHeader, content: altWrap, position: { X: 'center', Y: 'center' },
                buttons: [{
                        // eslint-disable-next-line
                        click: (e) => {
                            this.insertAlt(altArgs);
                        },
                        buttonModel: {
                            content: linkUpdate, cssClass: 'e-flat e-update-alt', isPrimary: true
                        }
                    }]
            });
            this.dialogObj.element.style.maxHeight = 'inherit';
            this.dialogObj.content.querySelector('input').focus();
        }
    }
    insertAlt(e) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.alt)) {
            e.selection.restore();
            if (this.parent.formatter.getUndoRedoStack().length === 0) {
                this.parent.formatter.saveData();
            }
            const altText = e.alt.value;
            this.parent.formatter.process(this.parent, e.args, e.args, {
                altText: altText, selectNode: e.selectNode,
                subCommand: e.args.item.subCommand
            });
            this.dialogObj.hide({ returnValue: false });
        }
    }
    insertlink(e) {
        if (e.selectNode[0].nodeName !== 'IMG') {
            return;
        }
        let url = e.link.value;
        if (url === '') {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([e.link], 'e-error');
            e.link.setSelectionRange(0, url.length);
            e.link.focus();
            return;
        }
        if (!this.isUrl(url)) {
            url = 'http://' + url;
        }
        else {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([e.link], 'e-error');
        }
        const proxy = e.selfImage;
        if (proxy.parent.editorMode === 'HTML') {
            e.selection.restore();
        }
        if (proxy.parent.formatter.getUndoRedoStack().length === 0) {
            proxy.parent.formatter.saveData();
        }
        if (e.selectNode[0].parentElement.nodeName === 'A') {
            proxy.parent.formatter.process(proxy.parent, e.args, e.args, {
                url: url, target: proxy.checkBoxObj.checked ? '_blank' : null, selectNode: e.selectNode,
                subCommand: e.args.item.subCommand
            });
            proxy.dialogObj.hide({ returnValue: true });
            return;
        }
        proxy.parent.formatter.process(proxy.parent, e.args, e.args, {
            url: url, target: proxy.checkBoxObj.checked ? '_blank' : null, selectNode: e.selectNode,
            subCommand: e.args.item.subCommand, selection: e.selection
        });
        const captionEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.selectNode[0], '.e-img-caption');
        if (captionEle) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.e-img-inner', captionEle).focus();
        }
        if (captionEle) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.e-img-inner', captionEle).focus();
        }
        proxy.dialogObj.hide({ returnValue: false });
    }
    isUrl(url) {
        // eslint-disable-next-line
        const regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/gi;
        return regexp.test(url);
    }
    deleteImg(e, keyCode) {
        if (e.selectNode[0].nodeName !== 'IMG') {
            return;
        }
        const args = {
            element: e.selectNode[0],
            src: e.selectNode[0].getAttribute('src')
        };
        if (this.parent.formatter.getUndoRedoStack().length === 0) {
            this.parent.formatter.saveData();
        }
        e.selection.restore();
        if (this.contentModule.getEditPanel().querySelector('.e-img-resize')) {
            this.removeResizeEle();
        }
        this.parent.formatter.process(this.parent, e.args, e.args, {
            selectNode: e.selectNode,
            captionClass: CLS_CAPTION,
            subCommand: e.args.item.subCommand
        });
        this.imageRemovePost(args.src);
        if (this.quickToolObj && document.body.contains(this.quickToolObj.imageQTBar.element)) {
            this.quickToolObj.imageQTBar.hidePopup();
        }
        this.cancelResizeAction();
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(keyCode)) {
            this.parent.trigger(afterImageDelete, args);
        }
    }
    imageRemovePost(src) {
        const proxy = this;
        let absoluteUrl = '';
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.insertImageSettings.removeUrl) || this.parent.insertImageSettings.removeUrl === '') {
            return;
        }
        if (src.indexOf('http://') > -1 || src.indexOf('https://') > -1) {
            absoluteUrl = src;
        }
        else {
            absoluteUrl = new URL(src, document.baseURI).href;
        }
        this.removingImgName = absoluteUrl.replace(/^.*[\\\/]/, '');
        const xhr = new XMLHttpRequest();
        xhr.addEventListener("readystatechange", function () {
            if (this.readyState == 4 && this.status == 200) {
                proxy.triggerPost(this.response);
            }
        });
        xhr.open('GET', absoluteUrl);
        xhr.responseType = 'blob';
        xhr.send();
    }
    triggerPost(response) {
        const removeUrl = this.parent.insertImageSettings.removeUrl;
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(removeUrl) || removeUrl === '') {
            return;
        }
        const file = new File([response], this.removingImgName);
        const ajax = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Ajax(removeUrl, 'POST', true, null);
        const formData = new FormData();
        formData.append('UploadFiles', file);
        ajax.send(formData);
    }
    caption(e) {
        const selectNode = e.selectNode[0];
        if (selectNode.nodeName !== 'IMG') {
            return;
        }
        e.selection.restore();
        if (this.parent.formatter.getUndoRedoStack().length === 0) {
            this.parent.formatter.saveData();
        }
        this.cancelResizeAction();
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([selectNode], 'e-rte-image');
        const subCommand = (e.args.item) ?
            e.args.item.subCommand : 'Caption';
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectNode, '.' + CLS_CAPTION))) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectNode, '.' + CLS_CAPTION));
            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE) {
                this.contentModule.getEditPanel().focus();
                e.selection.restore();
            }
            if (selectNode.parentElement.tagName === 'A') {
                this.parent.formatter.process(this.parent, e.args, e.args, { insertElement: selectNode.parentElement, selectNode: e.selectNode, subCommand: subCommand });
            }
            else {
                this.parent.formatter.process(this.parent, e.args, e.args, { insertElement: selectNode, selectNode: e.selectNode, subCommand: subCommand });
            }
        }
        else {
            this.captionEle = this.parent.createElement('span', {
                className: CLS_CAPTION + ' ' + CLS_RTE_CAPTION,
                attrs: { contenteditable: 'false', draggable: 'false', style: 'width:' + this.parent.insertImageSettings.width }
            });
            const imgWrap = this.parent.createElement('span', { className: 'e-img-wrap' });
            const imgInner = this.parent.createElement('span', { className: 'e-img-inner',
                attrs: { contenteditable: 'true' } });
            const parent = e.selectNode[0].parentElement;
            if (parent.tagName === 'A') {
                parent.setAttribute('contenteditable', 'true');
            }
            imgWrap.appendChild(parent.tagName === 'A' ? parent : e.selectNode[0]);
            imgWrap.appendChild(imgInner);
            const imgCaption = this.i10n.getConstant('imageCaption');
            imgInner.innerHTML = imgCaption;
            this.captionEle.appendChild(imgWrap);
            if (selectNode.classList.contains(CLS_IMGINLINE)) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.captionEle], CLS_CAPINLINE);
            }
            if (selectNode.classList.contains(CLS_IMGBREAK)) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.captionEle], CLS_IMGBREAK);
            }
            if (selectNode.classList.contains(CLS_IMGLEFT)) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.captionEle], CLS_IMGLEFT);
            }
            if (selectNode.classList.contains(CLS_IMGRIGHT)) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.captionEle], CLS_IMGRIGHT);
            }
            if (selectNode.classList.contains(CLS_IMGCENTER)) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.captionEle], CLS_IMGCENTER);
            }
            this.parent.formatter.process(this.parent, e.args, e.args, { insertElement: this.captionEle, selectNode: e.selectNode, subCommand: subCommand });
            this.parent.formatter.editorManager.nodeSelection.setSelectionText(this.contentModule.getDocument(), imgInner.childNodes[0], imgInner.childNodes[0], 0, imgInner.childNodes[0].textContent.length);
        }
        if (this.quickToolObj && document.body.contains(this.quickToolObj.imageQTBar.element)) {
            this.quickToolObj.imageQTBar.hidePopup();
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([selectNode], 'e-img-focus');
        }
    }
    imageSize(e) {
        if (e.selectNode[0].nodeName !== 'IMG') {
            return;
        }
        this.imagDialog(e);
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.dialogObj)) {
            const imgSizeHeader = this.i10n.getConstant('imageSizeHeader');
            const linkUpdate = this.i10n.getConstant('dialogUpdate');
            const dialogContent = this.imgsizeInput(e);
            const selectObj = { args: e.args, selfImage: this, selection: e.selection, selectNode: e.selectNode };
            this.dialogObj.setProperties({
                height: 'inherit', width: '290px', header: imgSizeHeader, content: dialogContent, position: { X: 'center', Y: 'center' },
                buttons: [{
                        // eslint-disable-next-line
                        click: (e) => {
                            this.insertSize(selectObj);
                        },
                        buttonModel: {
                            content: linkUpdate, cssClass: 'e-flat e-update-size', isPrimary: true
                        }
                    }]
            });
            this.dialogObj.element.style.maxHeight = 'inherit';
            this.dialogObj.content.querySelector('input').focus();
        }
    }
    break(e) {
        if (e.selectNode[0].nodeName !== 'IMG') {
            return;
        }
        const subCommand = (e.args.item) ?
            e.args.item.subCommand : 'Break';
        this.parent.formatter.process(this.parent, e.args, e.args, { selectNode: e.selectNode, subCommand: subCommand });
    }
    inline(e) {
        if (e.selectNode[0].nodeName !== 'IMG') {
            return;
        }
        const subCommand = (e.args.item) ?
            e.args.item.subCommand : 'Inline';
        this.parent.formatter.process(this.parent, e.args, e.args, { selectNode: e.selectNode, subCommand: subCommand });
    }
    alignImage(e, type) {
        const subCommand = (e.args.item) ?
            e.args.item.subCommand : type;
        this.parent.formatter.process(this.parent, e.args, e.args, { selectNode: e.selectNode, subCommand: subCommand });
    }
    clearDialogObj() {
        if (this.dialogObj) {
            this.dialogObj.destroy();
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.dialogObj.element);
            this.dialogObj = null;
        }
    }
    imagDialog(e) {
        if (this.dialogObj) {
            this.dialogObj.hide({ returnValue: true });
            return;
        }
        const imgDialog = this.parent.createElement('div', { className: 'e-rte-img-dialog', id: this.rteID + '_image' });
        this.parent.element.appendChild(imgDialog);
        const imgInsert = this.i10n.getConstant('dialogInsert');
        const imglinkCancel = this.i10n.getConstant('dialogCancel');
        const imgHeader = this.i10n.getConstant('imageHeader');
        const selection = e.selection;
        const selectObj = { selfImage: this, selection: e.selection, args: e.args, selectParent: e.selectParent };
        const dialogModel = {
            header: imgHeader,
            cssClass: CLS_RTE_ELEMENTS,
            enableRtl: this.parent.enableRtl,
            locale: this.parent.locale,
            showCloseIcon: true, closeOnEscape: true, width: (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) ? '290px' : '340px', height: 'inherit',
            position: { X: 'center', Y: (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) ? 'center' : 'top' },
            isModal: _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice,
            buttons: [{
                    click: this.insertImageUrl.bind(selectObj),
                    buttonModel: { content: imgInsert, cssClass: 'e-flat e-insertImage', isPrimary: true, disabled: true }
                },
                {
                    click: (e) => {
                        this.cancelDialog(e);
                    },
                    buttonModel: { cssClass: 'e-flat e-cancel', content: imglinkCancel }
                }],
            target: (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) ? document.body : this.parent.element,
            animationSettings: { effect: 'None' },
            close: (event) => {
                if (this.isImgUploaded) {
                    this.uploadObj.removing();
                }
                this.parent.isBlur = false;
                if (event && event.event.returnValue) {
                    if (this.parent.editorMode === 'HTML') {
                        selection.restore();
                    }
                    else {
                        this.parent.formatter.editorManager.markdownSelection.restore(this.parent.contentModule.getEditPanel());
                    }
                }
                this.dialogObj.destroy();
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.dialogObj.element);
                this.dialogRenderObj.close(event);
                this.dialogObj = null;
            }
        };
        const dialogContent = this.parent.createElement('div', { className: 'e-img-content' });
        if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.insertImageSettings.path) && this.parent.editorMode === 'Markdown')
            || this.parent.editorMode === 'HTML') {
            dialogContent.appendChild(this.imgUpload(e));
        }
        const linkHeader = this.parent.createElement('div', { className: 'e-linkheader' });
        const linkHeaderText = this.i10n.getConstant('imageLinkHeader');
        if (this.parent.editorMode === 'HTML') {
            linkHeader.innerHTML = linkHeaderText;
        }
        else {
            linkHeader.innerHTML = this.i10n.getConstant('mdimageLink');
        }
        dialogContent.appendChild(linkHeader);
        dialogContent.appendChild(this.imageUrlPopup(e));
        if (e.selectNode && e.selectNode[0].nodeName === 'IMG') {
            dialogModel.header = this.parent.localeObj.getConstant('editImageHeader');
            dialogModel.content = dialogContent;
        }
        else {
            dialogModel.content = dialogContent;
        }
        this.dialogObj = this.dialogRenderObj.render(dialogModel);
        this.dialogObj.createElement = this.parent.createElement;
        this.dialogObj.appendTo(imgDialog);
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.dialogObj)) {
            return;
        }
        if (e.selectNode && e.selectNode[0].nodeName === 'IMG' && (e.name === 'insertImage')) {
            this.dialogObj.element.querySelector('.e-insertImage').textContent = this.parent.localeObj.getConstant('dialogUpdate');
        }
        imgDialog.style.maxHeight = 'inherit';
        if (this.quickToolObj) {
            if (this.quickToolObj.imageQTBar && document.body.contains(this.quickToolObj.imageQTBar.element)) {
                this.quickToolObj.imageQTBar.hidePopup();
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.selectParent)) {
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([e.selectParent[0]], 'e-img-focus');
                }
            }
            if (this.quickToolObj.inlineQTBar && document.body.contains(this.quickToolObj.inlineQTBar.element)) {
                this.quickToolObj.inlineQTBar.hidePopup();
            }
        }
    }
    // eslint-disable-next-line
    cancelDialog(e) {
        this.parent.isBlur = false;
        this.dialogObj.hide({ returnValue: true });
        if (this.isImgUploaded) {
            this.uploadObj.removing();
        }
    }
    onDocumentClick(e) {
        const target = e.target;
        if (target.nodeName === 'IMG') {
            this.imgEle = target;
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.dialogObj) && ((
        // eslint-disable-next-line
        !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '[id=' + "'" + this.dialogObj.element.id + "'" + ']') && this.parent.toolbarSettings.enable && this.parent.getToolbarElement() &&
            !this.parent.getToolbarElement().contains(e.target)) ||
            (this.parent.getToolbarElement() && this.parent.getToolbarElement().contains(e.target) &&
                !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '#' + this.parent.getID() + '_toolbar_Image') &&
                !target.querySelector('#' + this.parent.getID() + '_toolbar_Image')))) {
            /* eslint-disable */
            if (e.offsetX > e.target.clientWidth || e.offsetY > e.target.clientHeight) {
            }
            else {
                this.dialogObj.hide({ returnValue: true });
                this.parent.isBlur = true;
                dispatchEvent(this.parent.element, 'focusout');
            }
            /* eslint-enable */
        }
        if (e.target.tagName !== 'IMG' && this.imgResizeDiv && !(this.quickToolObj &&
            this.quickToolObj.imageQTBar && this.quickToolObj.imageQTBar.element.contains(e.target)) &&
            this.contentModule.getEditPanel().contains(this.imgResizeDiv)) {
            this.cancelResizeAction();
        }
        if (this.contentModule.getEditPanel().querySelector('.e-img-resize')) {
            if (target.tagName !== 'IMG') {
                this.removeResizeEle();
            }
            if (target.tagName !== 'IMG' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.imgEle)) {
                this.imgEle.style.outline = '';
            }
            else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.prevSelectedImgEle) && this.prevSelectedImgEle !== target) {
                this.prevSelectedImgEle.style.outline = '';
            }
        }
    }
    removeResizeEle() {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.contentModule.getDocument(), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, this.resizing);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.contentModule.getDocument(), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, this.resizeEnd);
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.contentModule.getEditPanel().querySelector('.e-img-resize'));
    }
    onWindowResize() {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.contentModule) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.contentModule.getEditPanel().querySelector('.e-img-resize'))) {
            this.cancelResizeAction();
        }
    }
    // eslint-disable-next-line
    imageUrlPopup(e) {
        const imgUrl = this.parent.createElement('div', { className: 'imgUrl' });
        const placeUrl = this.i10n.getConstant('imageUrl');
        this.inputUrl = this.parent.createElement('input', {
            className: 'e-input e-img-url',
            attrs: { placeholder: placeUrl, spellcheck: 'false' }
        });
        this.inputUrl.addEventListener('input', () => {
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.inputUrl)) {
                if (this.inputUrl.value.length === 0) {
                    this.dialogObj.getButtons(0).element.disabled = true;
                }
                else {
                    this.dialogObj.getButtons(0).element.removeAttribute('disabled');
                }
            }
        });
        imgUrl.appendChild(this.inputUrl);
        return imgUrl;
    }
    // eslint-disable-next-line
    insertImageUrl(e) {
        const proxy = this.selfImage;
        proxy.isImgUploaded = false;
        const url = proxy.inputUrl.value;
        if (proxy.parent.formatter.getUndoRedoStack().length === 0) {
            proxy.parent.formatter.saveData();
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(proxy.uploadUrl) && proxy.uploadUrl.url !== '') {
            proxy.uploadUrl.cssClass = (proxy.parent.insertImageSettings.display === 'inline' ?
                CLS_IMGINLINE : CLS_IMGBREAK);
            proxy.dialogObj.hide({ returnValue: false });
            proxy.parent.formatter.process(proxy.parent, this.args, this.args.originalEvent, proxy.uploadUrl);
            proxy.uploadUrl.url = '';
            if (proxy.contentModule.getEditPanel().querySelector('.e-img-resize')) {
                proxy.imgEle.style.outline = '';
                proxy.removeResizeEle();
            }
        }
        else if (url !== '') {
            if (proxy.parent.editorMode === 'HTML' && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(
            // eslint-disable-next-line
            this.selection.range.startContainer.parentNode, '[id=' + "'" + proxy.contentModule.getPanel().id + "'" + ']'))) {
                proxy.contentModule.getEditPanel().focus();
                const range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.contentModule.getDocument());
                this.selection = proxy.parent.formatter.editorManager.nodeSelection.save(range, proxy.contentModule.getDocument());
                this.selectParent = proxy.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
            }
            const regex = /[\w-]+.(jpg|png|jpeg|gif)/g;
            const matchUrl = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(url.match(regex)) && proxy.parent.editorMode === 'HTML') ? url.match(regex)[0] : '';
            const value = {
                cssClass: (proxy.parent.insertImageSettings.display === 'inline' ? CLS_IMGINLINE : CLS_IMGBREAK),
                url: url, selection: this.selection, altText: matchUrl,
                selectParent: this.selectParent, width: {
                    width: proxy.parent.insertImageSettings.width, minWidth: proxy.parent.insertImageSettings.minWidth,
                    maxWidth: proxy.parent.getInsertImgMaxWidth()
                },
                height: {
                    height: proxy.parent.insertImageSettings.height, minHeight: proxy.parent.insertImageSettings.minHeight,
                    maxHeight: proxy.parent.insertImageSettings.maxHeight
                }
            };
            proxy.parent.formatter.process(proxy.parent, this.args, this.args.originalEvent, value);
            proxy.dialogObj.hide({ returnValue: false });
        }
    }
    imgsizeInput(e) {
        const selectNode = e.selectNode[0];
        const imgHeight = this.i10n.getConstant('imageHeight');
        const imgWidth = this.i10n.getConstant('imageWidth');
        const imgSizeWrap = this.parent.createElement('div', { className: 'e-img-sizewrap' });
        const widthVal = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.changedWidthValue) && (selectNode.style.width.toString() === 'auto' ||
            selectNode.style.width !== '') ? selectNode.style.width : !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.changedWidthValue) ?
            this.changedWidthValue : (parseInt(selectNode.getClientRects()[0].width.toString(), 10)).toString();
        const heightVal = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.changedHeightValue) && (selectNode.style.height.toString() === 'auto' ||
            selectNode.style.height !== '') ? selectNode.style.height : !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.changedHeightValue) ?
            this.changedHeightValue : (parseInt(selectNode.getClientRects()[0].height.toString(), 10)).toString();
        this.changedWidthValue = null;
        this.changedHeightValue = null;
        const content = '<div class="e-rte-label"><label>' + imgWidth +
            '</label></div><div class="e-rte-field"><input type="text" id="imgwidth" class="e-img-width" value=' +
            widthVal
            + ' /></div>' +
            '<div class="e-rte-label">' + '<label>' + imgHeight + '</label></div><div class="e-rte-field"> ' +
            '<input type="text" id="imgheight" class="e-img-height" value=' +
            heightVal
            + ' /></div>';
        const contentElem = parseHtml(content);
        imgSizeWrap.appendChild(contentElem);
        const widthNum = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_3__.TextBox({
            value: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(widthVal),
            enableRtl: this.parent.enableRtl,
            input: (e) => {
                this.inputWidthValue = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(this.inputValue(e.value));
            }
        });
        widthNum.createElement = this.parent.createElement;
        widthNum.appendTo(imgSizeWrap.querySelector('#imgwidth'));
        const heightNum = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_3__.TextBox({
            value: (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(heightVal),
            enableRtl: this.parent.enableRtl,
            input: (e) => {
                this.inputHeightValue = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(this.inputValue(e.value));
            }
        });
        heightNum.createElement = this.parent.createElement;
        heightNum.appendTo(imgSizeWrap.querySelector('#imgheight'));
        return imgSizeWrap;
    }
    inputValue(value) {
        if (value === 'auto' || value.indexOf('%') !== -1 || value.indexOf('px') !== -1
            || value.match(/(\d+)/)) {
            return value;
        }
        else {
            return 'auto';
        }
    }
    insertSize(e) {
        e.selection.restore();
        const proxy = e.selfImage;
        if (proxy.parent.formatter.getUndoRedoStack().length === 0) {
            proxy.parent.formatter.saveData();
        }
        const dialogEle = proxy.dialogObj.element;
        this.changedWidthValue = this.inputWidthValue;
        this.changedHeightValue = this.inputHeightValue;
        const width = dialogEle.querySelector('.e-img-width').value;
        const height = dialogEle.parentElement.querySelector('.e-img-height').value;
        proxy.parent.formatter.process(this.parent, e.args, e.args, {
            width: width, height: height, selectNode: e.selectNode,
            subCommand: e.args.item.subCommand
        });
        if (this.imgResizeDiv) {
            proxy.imgResizePos(e.selectNode[0], this.imgResizeDiv);
        }
        proxy.dialogObj.hide({ returnValue: true });
    }
    insertImage(e) {
        this.imagDialog(e);
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.dialogObj)) {
            this.dialogObj.element.style.maxHeight = 'inherit';
            const dialogContent = this.dialogObj.element.querySelector('.e-img-content');
            if (((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.insertImageSettings.path) && this.parent.editorMode === 'Markdown')
                || this.parent.editorMode === 'HTML')) {
                document.getElementById(this.rteID + '_insertImage').focus();
            }
            else {
                dialogContent.querySelector('.e-img-url').focus();
            }
        }
    }
    imgUpload(e) {
        let save;
        let selectParent;
        // eslint-disable-next-line
        const proxy = this;
        const iframe = proxy.parent.iframeSettings.enable;
        if (proxy.parent.editorMode === 'HTML' && (!iframe && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.selection.range.startContainer.parentNode, '[id='
            // eslint-disable-next-line
            + "'" + this.parent.contentModule.getPanel().id + "'" + ']'))
            || (iframe && !hasClass(e.selection.range.startContainer.parentNode.ownerDocument.querySelector('body'), 'e-lib')))) {
            this.contentModule.getEditPanel().focus();
            const range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
            save = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument());
            selectParent = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
        }
        else {
            save = e.selection;
            selectParent = e.selectParent;
        }
        const uploadParentEle = this.parent.createElement('div', { className: 'e-img-uploadwrap e-droparea' });
        const deviceImgUpMsg = this.i10n.getConstant('imageDeviceUploadMessage');
        const imgUpMsg = this.i10n.getConstant('imageUploadMessage');
        const span = this.parent.createElement('span', { className: 'e-droptext' });
        const spanMsg = this.parent.createElement('span', {
            className: 'e-rte-upload-text', innerHTML: ((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) ? deviceImgUpMsg : imgUpMsg)
        });
        span.appendChild(spanMsg);
        const btnEle = this.parent.createElement('button', {
            className: 'e-browsebtn', id: this.rteID + '_insertImage', attrs: { autofocus: 'true', type: 'button' }
        });
        span.appendChild(btnEle);
        uploadParentEle.appendChild(span);
        const browserMsg = this.i10n.getConstant('browse');
        const button = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_5__.Button({ content: browserMsg, enableRtl: this.parent.enableRtl });
        button.isStringTemplate = true;
        button.createElement = this.parent.createElement;
        button.appendTo(btnEle);
        const btnClick = (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) ? span : btnEle;
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(btnClick, 'click', this.fileSelect, this);
        const uploadEle = this.parent.createElement('input', {
            id: this.rteID + '_upload', attrs: { type: 'File', name: 'UploadFiles' }
        });
        uploadParentEle.appendChild(uploadEle);
        let altText;
        let rawFile;
        let selectArgs;
        let filesData;
        let beforeUploadArgs;
        this.uploadObj = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_3__.Uploader({
            asyncSettings: { saveUrl: this.parent.insertImageSettings.saveUrl, removeUrl: this.parent.insertImageSettings.removeUrl },
            dropArea: span, multiple: false, enableRtl: this.parent.enableRtl,
            allowedExtensions: this.parent.insertImageSettings.allowedTypes.toString(),
            selected: (e) => {
                proxy.isImgUploaded = true;
                selectArgs = e;
                filesData = e.filesData;
                if (this.parent.isServerRendered) {
                    selectArgs = JSON.parse(JSON.stringify(e));
                    e.cancel = true;
                    rawFile = e.filesData;
                    selectArgs.filesData = rawFile;
                }
                this.parent.trigger(imageSelected, selectArgs, (selectArgs) => {
                    if (!selectArgs.cancel) {
                        this.checkExtension(selectArgs.filesData[0]);
                        altText = selectArgs.filesData[0].name;
                        if (this.parent.editorMode === 'HTML' && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.insertImageSettings.path)) {
                            const reader = new FileReader();
                            // eslint-disable-next-line
                            reader.addEventListener('load', (e) => {
                                const url = this.parent.insertImageSettings.saveFormat === 'Base64' ? reader.result :
                                    URL.createObjectURL(convertToBlob(reader.result));
                                proxy.uploadUrl = {
                                    url: url, selection: save, altText: altText,
                                    selectParent: selectParent,
                                    width: {
                                        width: proxy.parent.insertImageSettings.width, minWidth: proxy.parent.insertImageSettings.minWidth,
                                        maxWidth: proxy.parent.getInsertImgMaxWidth()
                                    }, height: {
                                        height: proxy.parent.insertImageSettings.height,
                                        minHeight: proxy.parent.insertImageSettings.minHeight,
                                        maxHeight: proxy.parent.insertImageSettings.maxHeight
                                    }
                                };
                                proxy.inputUrl.setAttribute('disabled', 'true');
                                if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(proxy.parent.insertImageSettings.saveUrl) && this.isAllowedTypes
                                    && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.dialogObj)) {
                                    this.dialogObj.getButtons(0).element.removeAttribute('disabled');
                                }
                            });
                            reader.readAsDataURL(selectArgs.filesData[0].rawFile);
                        }
                        if (this.parent.isServerRendered) {
                            /* eslint-disable */
                            this.uploadObj._internalRenderSelect(selectArgs, rawFile);
                            /* eslint-enable */
                        }
                    }
                });
            },
            beforeUpload: (args) => {
                if (this.parent.isServerRendered) {
                    beforeUploadArgs = JSON.parse(JSON.stringify(args));
                    beforeUploadArgs.filesData = filesData;
                    args.cancel = true;
                    this.parent.trigger(imageUploading, beforeUploadArgs, (beforeUploadArgs) => {
                        if (beforeUploadArgs.cancel) {
                            return;
                        }
                        /* eslint-disable */
                        this.uploadObj.currentRequestHeader = beforeUploadArgs.currentRequest ?
                            beforeUploadArgs.currentRequest : this.uploadObj.currentRequestHeader;
                        this.uploadObj.customFormDatas = beforeUploadArgs.customFormData && beforeUploadArgs.customFormData.length > 0 ?
                            beforeUploadArgs.customFormData : this.uploadObj.customFormDatas;
                        this.uploadObj.uploadFiles(rawFile, null);
                        /* eslint-enable */
                    });
                }
                else {
                    this.parent.trigger(beforeImageUpload, args);
                }
            },
            uploading: (e) => {
                if (!this.parent.isServerRendered) {
                    this.parent.trigger(imageUploading, e);
                }
            },
            success: (e) => {
                this.parent.trigger(imageUploadSuccess, e, (e) => {
                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.insertImageSettings.path)) {
                        const url = this.parent.insertImageSettings.path + e.file.name;
                        // eslint-disable-next-line
                        proxy.uploadUrl = {
                            url: url, selection: save, altText: altText, selectParent: selectParent,
                            width: {
                                width: proxy.parent.insertImageSettings.width, minWidth: proxy.parent.insertImageSettings.minWidth,
                                maxWidth: proxy.parent.getInsertImgMaxWidth()
                            }, height: {
                                height: proxy.parent.insertImageSettings.height, minHeight: proxy.parent.insertImageSettings.minHeight,
                                maxHeight: proxy.parent.insertImageSettings.maxHeight
                            }
                        };
                        proxy.inputUrl.setAttribute('disabled', 'true');
                    }
                    if (e.operation === 'upload' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.dialogObj)) {
                        this.dialogObj.getButtons(0).element.removeAttribute('disabled');
                    }
                });
            },
            failure: (e) => {
                this.parent.trigger(imageUploadFailed, e);
            },
            removing: () => {
                // eslint-disable-next-line
                this.parent.trigger(imageRemoving, e, (e) => {
                    proxy.isImgUploaded = false;
                    this.dialogObj.getButtons(0).element.disabled = true;
                    proxy.inputUrl.removeAttribute('disabled');
                    if (proxy.uploadUrl) {
                        proxy.uploadUrl.url = '';
                    }
                });
            }
        });
        this.uploadObj.isStringTemplate = true;
        this.uploadObj.createElement = this.parent.createElement;
        this.uploadObj.appendTo(uploadEle);
        return uploadParentEle;
    }
    checkExtension(e) {
        if (this.uploadObj.allowedExtensions) {
            if (this.uploadObj.allowedExtensions.toLocaleLowerCase().indexOf(('.' + e.type).toLocaleLowerCase()) === -1) {
                this.dialogObj.getButtons(0).element.setAttribute('disabled', 'disabled');
                this.isAllowedTypes = false;
            }
            else {
                this.isAllowedTypes = true;
            }
        }
    }
    fileSelect() {
        this.dialogObj.element.getElementsByClassName('e-file-select-wrap')[0].querySelector('button').click();
        return false;
    }
    dragStart(e) {
        if (e.target.nodeName === 'IMG') {
            this.parent.trigger(actionBegin, e, (actionBeginArgs) => {
                if (actionBeginArgs.cancel) {
                    e.preventDefault();
                }
                else {
                    e.dataTransfer.effectAllowed = 'copyMove';
                    e.target.classList.add(CLS_RTE_DRAG_IMAGE);
                }
            });
        }
        else {
            return true;
        }
    }
    dragEnter(e) {
        e.dataTransfer.dropEffect = 'copy';
        e.preventDefault();
    }
    dragOver(e) {
        if ((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'edge' && e.dataTransfer.items[0].type.split('/')[0].indexOf('image') > -1) ||
            (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE && e.dataTransfer.types[0] === 'Files')) {
            e.preventDefault();
        }
        else {
            return true;
        }
    }
    /**
     * Used to set range When drop an image
     *
     * @param {ImageDropEventArgs} args - specifies the image arguments.
     * @returns {void}
     */
    dragDrop(args) {
        this.parent.trigger(beforeImageDrop, args, (e) => {
            const imgElement = this.parent.inputElement.ownerDocument.querySelector('.' + CLS_RTE_DRAG_IMAGE);
            const isImgOrFileDrop = (imgElement && imgElement.tagName === 'IMG') || e.dataTransfer.files.length > 0;
            if (!e.cancel && isImgOrFileDrop) {
                this.parent.trigger(actionBegin, e, (actionBeginArgs) => {
                    if (actionBeginArgs.cancel) {
                        e.preventDefault();
                    }
                    else {
                        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, '#' + this.parent.getID() + '_toolbar') ||
                            this.parent.inputElement.contentEditable === 'false') {
                            e.preventDefault();
                            return;
                        }
                        if (this.parent.element.querySelector('.' + CLS_IMG_RESIZE)) {
                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.imgResizeDiv);
                        }
                        e.preventDefault();
                        let range;
                        if (this.contentModule.getDocument().caretRangeFromPoint) { //For chrome
                            range = this.contentModule.getDocument().caretRangeFromPoint(e.clientX, e.clientY);
                        }
                        else if ((e.rangeParent)) { //For mozilla firefox
                            range = this.contentModule.getDocument().createRange();
                            range.setStart(e.rangeParent, e.rangeOffset);
                        }
                        else {
                            range = this.getDropRange(e.clientX, e.clientY); //For internet explorer
                        }
                        this.parent.notify(selectRange, { range: range });
                        const uploadArea = this.parent.element.querySelector('.' + CLS_DROPAREA);
                        if (uploadArea) {
                            return;
                        }
                        this.insertDragImage(e);
                    }
                });
            }
            else {
                if (isImgOrFileDrop) {
                    e.preventDefault();
                }
            }
        });
    }
    /**
     * Used to calculate range on internet explorer
     *
     * @param {number} x - specifies the x range.
     * @param {number} y - specifies the y range.
     * @returns {void}
     */
    getDropRange(x, y) {
        const startRange = this.contentModule.getDocument().createRange();
        this.parent.formatter.editorManager.nodeSelection.setRange(this.contentModule.getDocument(), startRange);
        const elem = this.contentModule.getDocument().elementFromPoint(x, y);
        const startNode = (elem.childNodes.length > 0 ? elem.childNodes[0] : elem);
        let startCharIndexCharacter = 0;
        if (this.parent.inputElement.firstChild.innerHTML === '<br>') {
            startRange.setStart(startNode, startCharIndexCharacter);
            startRange.setEnd(startNode, startCharIndexCharacter);
        }
        else {
            let rangeRect;
            do {
                startCharIndexCharacter++;
                startRange.setStart(startNode, startCharIndexCharacter);
                startRange.setEnd(startNode, startCharIndexCharacter + 1);
                rangeRect = startRange.getBoundingClientRect();
            } while (rangeRect.left < x && startCharIndexCharacter < startNode.length - 1);
        }
        return startRange;
    }
    insertDragImage(e) {
        e.preventDefault();
        const activePopupElement = this.parent.element.querySelector('' + CLS_POPUP_OPEN);
        this.parent.notify(drop, { args: e });
        if (activePopupElement) {
            activePopupElement.classList.add(CLS_HIDE);
        }
        if (e.dataTransfer.files.length > 0) { //For external image drag and drop
            if (e.dataTransfer.files.length > 1) {
                return;
            }
            const imgFiles = e.dataTransfer.files;
            const fileName = imgFiles[0].name;
            const imgType = fileName.substring(fileName.lastIndexOf('.'));
            const allowedTypes = this.parent.insertImageSettings.allowedTypes;
            for (let i = 0; i < allowedTypes.length; i++) {
                if (imgType.toLocaleLowerCase() === allowedTypes[i].toLowerCase()) {
                    if (this.parent.insertImageSettings.saveUrl) {
                        this.onSelect(e);
                    }
                    else {
                        const args = { args: e, text: '', file: imgFiles[0] };
                        e.preventDefault();
                        this.imagePaste(args);
                    }
                }
            }
        }
        else { //For internal image drag and drop
            const range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
            const imgElement = this.parent.inputElement.ownerDocument.querySelector('.' + CLS_RTE_DRAG_IMAGE);
            if (imgElement && imgElement.tagName === 'IMG') {
                if (imgElement.nextElementSibling) {
                    if (imgElement.nextElementSibling.classList.contains(CLS_IMG_INNER)) {
                        range.insertNode(imgElement.parentElement.parentElement);
                    }
                    else {
                        range.insertNode(imgElement);
                    }
                }
                else {
                    range.insertNode(imgElement);
                }
                imgElement.classList.remove(CLS_RTE_DRAG_IMAGE);
                const imgArgs = { elements: [imgElement] };
                imgElement.addEventListener('load', () => {
                    this.parent.trigger(actionComplete, imgArgs);
                });
                this.parent.formatter.editorManager.nodeSelection.Clear(this.contentModule.getDocument());
                const args = e;
                this.resizeStart(args, imgElement);
                this.hideImageQuickToolbar();
            }
        }
    }
    onSelect(args) {
        // eslint-disable-next-line
        const proxy = this;
        const range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
        const parentElement = this.parent.createElement('ul', { className: CLS_UPLOAD_FILES });
        this.parent.element.appendChild(parentElement);
        const validFiles = {
            name: '',
            size: 0,
            status: '',
            statusCode: '',
            type: '',
            rawFile: args.dataTransfer.files[0],
            validationMessages: {}
        };
        const imageTag = this.parent.createElement('IMG');
        imageTag.style.opacity = '0.5';
        imageTag.classList.add(CLS_RTE_IMAGE);
        imageTag.classList.add(CLS_IMGINLINE);
        imageTag.classList.add(CLS_RESIZE);
        const file = validFiles.rawFile;
        const reader = new FileReader();
        reader.addEventListener('load', () => {
            const url = URL.createObjectURL(convertToBlob(reader.result));
            imageTag.src = proxy.parent.insertImageSettings.saveFormat === 'Blob' ? url : reader.result;
        });
        if (file) {
            reader.readAsDataURL(file);
        }
        range.insertNode(imageTag);
        this.uploadMethod(args, imageTag);
        const e = { elements: [imageTag] };
        imageTag.addEventListener('load', () => {
            this.parent.trigger(actionComplete, e);
        });
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(parentElement);
    }
    /**
     * Rendering uploader and popup for drag and drop
     *
     * @param {DragEvent} dragEvent - specifies the event.
     * @param {HTMLImageElement} imageElement - specifies the element.
     * @returns {void}
     */
    uploadMethod(dragEvent, imageElement) {
        let isUploading = false;
        // eslint-disable-next-line
        const proxy = this;
        const popupEle = this.parent.createElement('div');
        this.parent.element.appendChild(popupEle);
        const uploadEle = this.parent.createElement('input', {
            id: this.rteID + '_upload', attrs: { type: 'File', name: 'UploadFiles' }
        });
        const offsetY = this.parent.iframeSettings.enable ? -50 : -90;
        this.popupObj = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_4__.Popup(popupEle, {
            relateTo: imageElement,
            height: '85px',
            width: '300px',
            offsetY: offsetY,
            content: uploadEle,
            viewPortElement: this.parent.element,
            position: { X: 'center', Y: 'top' },
            enableRtl: this.parent.enableRtl,
            zIndex: 10001,
            // eslint-disable-next-line
            close: (event) => {
                this.parent.isBlur = false;
                this.popupObj.destroy();
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.popupObj.element);
                this.popupObj = null;
                if (!this.parent.inlineMode.enable) {
                    this.parent.toolbarModule.baseToolbar.toolbarObj.disable(false);
                }
            }
        });
        this.popupObj.element.style.display = 'none';
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.popupObj.element], CLS_POPUP_OPEN);
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.popupObj.element], CLS_RTE_UPLOAD_POPUP);
        const range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
        const timeOut = dragEvent.dataTransfer.files[0].size > 1000000 ? 300 : 100;
        setTimeout(() => {
            proxy.refreshPopup(imageElement);
        }, timeOut);
        let rawFile;
        let beforeUploadArgs;
        this.uploadObj = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_3__.Uploader({
            asyncSettings: {
                saveUrl: this.parent.insertImageSettings.saveUrl,
                removeUrl: this.parent.insertImageSettings.removeUrl
            },
            cssClass: CLS_RTE_DIALOG_UPLOAD,
            dropArea: this.parent.element,
            allowedExtensions: this.parent.insertImageSettings.allowedTypes.toString(),
            removing: () => {
                this.parent.inputElement.contentEditable = 'true';
                isUploading = false;
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(imageElement);
                this.popupObj.close();
            },
            canceling: () => {
                this.parent.inputElement.contentEditable = 'true';
                isUploading = false;
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(imageElement);
                this.popupObj.close();
                this.quickToolObj.imageQTBar.hidePopup();
                setTimeout(() => {
                    this.uploadObj.destroy();
                }, 900);
            },
            beforeUpload: (args) => {
                if (this.parent.isServerRendered) {
                    beforeUploadArgs = JSON.parse(JSON.stringify(args));
                    beforeUploadArgs.filesData = rawFile;
                    isUploading = true;
                    args.cancel = true;
                    this.parent.trigger(imageUploading, beforeUploadArgs, (beforeUploadArgs) => {
                        if (beforeUploadArgs.cancel) {
                            return;
                        }
                        if (!this.parent.inlineMode.enable) {
                            this.parent.toolbarModule.baseToolbar.toolbarObj.disable(true);
                        }
                        /* eslint-disable */
                        this.uploadObj.currentRequestHeader = beforeUploadArgs.currentRequest ?
                            beforeUploadArgs.currentRequest : this.uploadObj.currentRequestHeader;
                        this.uploadObj.customFormDatas = beforeUploadArgs.customFormData && beforeUploadArgs.customFormData.length > 0 ?
                            beforeUploadArgs.customFormData : this.uploadObj.customFormDatas;
                        this.uploadObj.uploadFiles(rawFile, null);
                        this.parent.inputElement.contentEditable = 'false';
                        /* eslint-enable */
                    });
                }
                else {
                    this.parent.trigger(beforeImageUpload, args);
                    if (!this.parent.inlineMode.enable) {
                        this.parent.toolbarModule.baseToolbar.toolbarObj.disable(true);
                    }
                }
            },
            uploading: (e) => {
                if (!this.parent.isServerRendered) {
                    isUploading = true;
                    this.parent.trigger(imageUploading, e, (imageUploadingArgs) => {
                        if (imageUploadingArgs.cancel) {
                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(imageElement)) {
                                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(imageElement);
                            }
                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.popupObj.element)) {
                                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.popupObj.element);
                            }
                        }
                        else {
                            this.parent.inputElement.contentEditable = 'false';
                        }
                    });
                }
            },
            selected: (e) => {
                if (isUploading) {
                    e.cancel = true;
                }
                if (this.parent.isServerRendered) {
                    rawFile = e.filesData;
                }
            },
            failure: (e) => {
                isUploading = false;
                this.parent.inputElement.contentEditable = 'true';
                const args = {
                    args: dragEvent,
                    type: 'Images',
                    isNotify: undefined,
                    elements: imageElement
                };
                setTimeout(() => {
                    this.uploadFailure(imageElement, args, e);
                }, 900);
            },
            success: (e) => {
                if (e.operation === "cancel") {
                    return;
                }
                isUploading = false;
                this.parent.inputElement.contentEditable = 'true';
                const args = {
                    args: dragEvent,
                    type: 'Images',
                    isNotify: undefined,
                    elements: imageElement
                };
                setTimeout(() => {
                    this.uploadSuccess(imageElement, dragEvent, args, e);
                }, 900);
            }
        });
        this.uploadObj.appendTo(this.popupObj.element.childNodes[0]);
        this.popupObj.element.querySelector('.e-rte-dialog-upload .e-file-select-wrap').style.display = 'none';
        range.selectNodeContents(imageElement);
        this.parent.formatter.editorManager.nodeSelection.setRange(this.contentModule.getDocument(), range);
    }
    refreshPopup(imageElement) {
        const imgPosition = this.parent.iframeSettings.enable ? this.parent.element.offsetTop +
            imageElement.offsetTop : imageElement.offsetTop;
        const rtePosition = this.parent.element.offsetTop + this.parent.element.offsetHeight;
        if (imgPosition > rtePosition) {
            this.popupObj.relateTo = this.parent.inputElement;
            this.popupObj.offsetY = this.parent.iframeSettings.enable ? -30 : -65;
            this.popupObj.element.style.display = 'block';
        }
        else {
            if (this.popupObj) {
                this.popupObj.refreshPosition(imageElement);
                this.popupObj.element.style.display = 'block';
            }
        }
    }
    /**
     * Called when drop image upload was failed
     *
     * @param {HTMLElement} imgEle - specifies the image element.
     * @param {IShowPopupArgs} args - specifies the arguments.
     * @param {Object} e - specfies the object.
     * @returns {void}
     */
    uploadFailure(imgEle, args, e) {
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(imgEle);
        if (this.popupObj) {
            this.popupObj.close();
        }
        this.parent.trigger(imageUploadFailed, e);
        this.uploadObj.destroy();
    }
    /**
     * Called when drop image upload was successful
     *
     * @param {HTMLElement} imageElement - specifies the image element.
     * @param {DragEvent} dragEvent - specifies the drag event.
     * @param {IShowPopupArgs} args - specifies the arguments.
     * @param {ImageSuccessEventArgs} e - specifies the success event.
     * @returns {void}
     */
    uploadSuccess(imageElement, dragEvent, args, e) {
        imageElement.style.opacity = '1';
        imageElement.classList.add(CLS_IMG_FOCUS);
        e.element = imageElement;
        this.parent.trigger(imageUploadSuccess, e, (e) => {
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.insertImageSettings.path)) {
                const url = this.parent.insertImageSettings.path + e.file.name;
                imageElement.src = url;
                imageElement.setAttribute('alt', e.file.name);
            }
        });
        if (this.popupObj) {
            this.popupObj.close();
            this.uploadObj.destroy();
        }
        this.showImageQuickToolbar(args);
        this.resizeStart(dragEvent, imageElement);
    }
    imagePaste(args) {
        if (args.text.length === 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.file)) {
            // eslint-disable-next-line
            const proxy = this;
            const reader = new FileReader();
            args.args.preventDefault();
            // eslint-disable-next-line
            reader.addEventListener('load', (e) => {
                const url = {
                    cssClass: (proxy.parent.insertImageSettings.display === 'inline' ? CLS_IMGINLINE : CLS_IMGBREAK),
                    url: this.parent.insertImageSettings.saveFormat === 'Base64' || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.callBack) ?
                        reader.result : URL.createObjectURL(convertToBlob(reader.result)),
                    width: {
                        width: proxy.parent.insertImageSettings.width, minWidth: proxy.parent.insertImageSettings.minWidth,
                        maxWidth: proxy.parent.getInsertImgMaxWidth()
                    },
                    height: {
                        height: proxy.parent.insertImageSettings.height, minHeight: proxy.parent.insertImageSettings.minHeight,
                        maxHeight: proxy.parent.insertImageSettings.maxHeight
                    }
                };
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.callBack)) {
                    args.callBack(url);
                    return;
                }
                else {
                    proxy.parent.formatter.process(proxy.parent, { item: { command: 'Images', subCommand: 'Image' } }, args.args, url);
                    this.showPopupToolBar(args, url);
                }
            });
            reader.readAsDataURL(args.file);
        }
    }
    showPopupToolBar(e, url) {
        const imageSrc = 'img[src="' + url.url + '"]';
        const imageElement = this.parent.inputElement.querySelector(imageSrc);
        this.parent.quickToolbarModule.createQTBar('Image', 'MultiRow', this.parent.quickToolbarSettings.image, RenderType.ImageToolbar);
        const args = {
            args: e.args,
            type: 'Images',
            isNotify: undefined,
            elements: imageElement
        };
        if (imageElement) {
            setTimeout(() => {
                this.showImageQuickToolbar(args);
                this.resizeStart(e.args, imageElement);
            }, 0);
        }
    }
    /* eslint-disable */
    /**
     * Destroys the ToolBar.
     *
     * @method destroy
     * @returns {void}
     * @hidden
     * @deprecated
     */
    /* eslint-enable */
    destroy() {
        this.prevSelectedImgEle = undefined;
        this.removeEventListener();
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {void}
     */
    getModuleName() {
        return 'image';
    }
}

/**
 * Content module is used to render Rich Text Editor content
 *
 * @hidden
 * @deprecated
 */
class ViewSource {
    /**
     * Constructor for view source module
     *
     * @param {IRichTextEditor} parent - specifies the parent element.
     * @param {ServiceLocator} locator - specifies the locator.
     * @returns {void}
     */
    constructor(parent, locator) {
        this.parent = parent;
        const serviceLocator = locator;
        this.rendererFactory = serviceLocator.getService('rendererFactory');
        this.addEventListener();
    }
    addEventListener() {
        this.parent.on(sourceCode, this.sourceCode, this);
        this.parent.on(initialEnd, this.onInitialEnd, this);
        this.parent.on(updateSource, this.updateSourceCode, this);
        this.parent.on(destroy, this.destroy, this);
    }
    onInitialEnd() {
        this.parent.formatter.editorManager.observer.on(KEY_DOWN_HANDLER, this.onKeyDown, this);
    }
    removeEventListener() {
        this.unWireEvent();
        this.parent.off(sourceCode, this.sourceCode);
        this.parent.off(updateSource, this.updateSourceCode);
        this.parent.off(initialEnd, this.onInitialEnd);
        this.parent.off(destroy, this.destroy);
        this.parent.formatter.editorManager.observer.off(KEY_DOWN_HANDLER, this.onKeyDown);
    }
    getSourceCode() {
        return this.parent.createElement('textarea', { className: 'e-rte-srctextarea' });
    }
    wireEvent(element) {
        this.keyboardModule = new KeyboardEvents$1(element, {
            keyAction: this.previewKeyDown.bind(this), keyConfigs: this.parent.formatter.keyConfig, eventName: 'keydown'
        });
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.previewElement, 'mousedown', this.mouseDownHandler, this);
    }
    unWireEvent() {
        if (this.keyboardModule) {
            this.keyboardModule.destroy();
        }
        if (this.previewElement) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.previewElement, 'mousedown', this.mouseDownHandler);
        }
    }
    wireBaseKeyDown() {
        this.parent.keyboardModule = new KeyboardEvents$1(this.contentModule.getEditPanel(), {
            keyAction: this.parent.keyDown.bind(this.parent), keyConfigs: this.parent.formatter.keyConfig, eventName: 'keydown'
        });
    }
    unWireBaseKeyDown() {
        this.parent.keyboardModule.destroy();
    }
    mouseDownHandler(e) {
        this.parent.notify(sourceCodeMouseDown, { args: e });
    }
    previewKeyDown(event) {
        switch (event.action) {
            case 'html-source':
                this.updateSourceCode(event);
                event.preventDefault();
                break;
            case 'toolbar-focus':
                if (this.parent.toolbarSettings.enable) {
                    const selector = '.e-toolbar-item[aria-disabled="false"][title] [tabindex]';
                    this.parent.toolbarModule.baseToolbar.toolbarObj.element.querySelector(selector).focus();
                }
                break;
        }
    }
    onKeyDown(e) {
        switch (e.event.action) {
            case 'html-source':
                e.event.preventDefault();
                this.sourceCode(e);
                e.callBack({
                    requestType: 'SourceCode',
                    editorMode: 'HTML',
                    event: e.event
                });
                break;
        }
    }
    /**
     * sourceCode method
     *
     * @param {ClickEventArgs} args - specifies the click event.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    sourceCode(args) {
        this.parent.isBlur = false;
        this.parent.trigger(actionBegin, { requestType: 'SourceCode', targetItem: 'SourceCode', args: args });
        const tbItems = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.selectAll)('.' + CLS_TB_ITEM, this.parent.element);
        this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);
        this.parent.notify(updateToolbarItem, {
            targetItem: 'SourceCode', updateItem: 'Preview',
            baseToolbar: this.parent.getBaseToolbarObject()
        });
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.previewElement)) {
            this.previewElement = this.getSourceCode();
        }
        this.parent.updateValueData();
        if (this.parent.iframeSettings.enable) {
            let rteContent;
            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.element.querySelector('#' + this.parent.element.id + '_source-view'))) {
                rteContent = this.parent.createElement('div', {
                    className: 'e-source-content', id: this.parent.element.id + '_source-view'
                });
            }
            else {
                rteContent = this.parent.element.querySelector('#' + this.parent.element.id + '_source-view');
            }
            rteContent.appendChild(this.previewElement);
            this.parent.element.appendChild(rteContent);
            rteContent.style.height = this.contentModule.getPanel().style.height;
            rteContent.style.marginTop = this.contentModule.getPanel().style.marginTop;
            this.getPanel().value = this.getTextAreaValue();
            this.contentModule.getPanel().style.display = 'none';
            rteContent.style.display = 'block';
            this.getPanel().style.display = 'block';
        }
        else {
            this.contentModule.getPanel().appendChild(this.previewElement);
            this.getPanel().value = this.getTextAreaValue();
            this.contentModule.getEditPanel().style.display = 'none';
            this.previewElement.style.display = 'block';
        }
        this.parent.isBlur = false;
        this.parent.disableToolbarItem(this.parent.toolbarSettings.items);
        this.parent.enableToolbarItem('SourceCode');
        if (this.parent.getToolbar()) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.parent.getToolbar()], [CLS_EXPAND_OPEN]);
        }
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(tbItems, [CLS_ACTIVE]);
        this.parent.setContentHeight('sourceCode', true);
        this.wireEvent(this.previewElement);
        this.unWireBaseKeyDown();
        this.previewElement.focus();
        this.parent.updateValue();
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.placeholder) && !this.parent.iframeSettings.enable) {
            const placeHolderWrapper = this.parent.element.querySelector('.rte-placeholder.e-rte-placeholder');
            placeHolderWrapper.style.display = 'none';
        }
        this.parent.trigger(actionComplete, { requestType: 'SourceCode', targetItem: 'SourceCode', args: args });
        this.parent.invokeChangeEvent();
    }
    /**
     * updateSourceCode method
     *
     * @param {ClickEventArgs} args - specifies the click event.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    updateSourceCode(args) {
        this.parent.isBlur = false;
        this.parent.trigger(actionBegin, { requestType: 'Preview', targetItem: 'Preview', args: args });
        const editHTML = this.getPanel();
        this.parent.notify(updateToolbarItem, {
            targetItem: 'Preview', updateItem: 'SourceCode',
            baseToolbar: this.parent.getBaseToolbarObject()
        });
        const serializeValue = this.parent.serializeValue(editHTML.value);
        let value;
        if (serializeValue === null || serializeValue === '') {
            if (this.parent.enterKey === 'DIV') {
                value = '<div><br/></div>';
            }
            else if (this.parent.enterKey === 'BR') {
                value = '<br/>';
            }
            else {
                value = '<p><br/></p>';
            }
        }
        else {
            value = serializeValue;
        }
        if (this.parent.iframeSettings.enable) {
            editHTML.parentElement.style.display = 'none';
            editHTML.style.display = 'none';
            this.contentModule.getPanel().style.display = 'block';
            this.contentModule.getEditPanel().innerHTML = value;
        }
        else {
            editHTML.style.display = 'none';
            this.contentModule.getEditPanel().style.display = 'block';
            this.contentModule.getEditPanel().innerHTML = value;
        }
        this.parent.isBlur = false;
        this.parent.enableToolbarItem(this.parent.toolbarSettings.items);
        if (this.parent.getToolbar()) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.parent.getToolbar()], [CLS_EXPAND_OPEN]);
        }
        this.parent.setContentHeight('preview', true);
        this.unWireEvent();
        this.wireBaseKeyDown();
        this.contentModule.getEditPanel().focus();
        this.parent.updateValue();
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.placeholder) && this.contentModule.getEditPanel().innerText.length === 0) {
            const placeHolderWrapper = this.parent.element.querySelector('.rte-placeholder.e-rte-placeholder');
            placeHolderWrapper.style.display = 'block';
        }
        this.parent.trigger(actionComplete, { requestType: 'Preview', targetItem: 'Preview', args: args });
        this.parent.formatter.enableUndo(this.parent);
        this.parent.invokeChangeEvent();
    }
    getTextAreaValue() {
        return (this.contentModule.getEditPanel().innerHTML === '<p><br></p>') ||
            (this.contentModule.getEditPanel().innerHTML === '<div><br></div>') ||
            (this.contentModule.getEditPanel().innerHTML === '<br>') ||
            (this.contentModule.getEditPanel().childNodes.length === 1 &&
                (this.contentModule.getEditPanel().childNodes[0].tagName === 'P' &&
                    this.contentModule.getEditPanel().innerHTML.length === 7) ||
                (this.contentModule.getEditPanel().childNodes[0].tagName === 'DIV' &&
                    this.contentModule.getEditPanel().innerHTML.length === 11)) ? '' : this.parent.value;
    }
    /**
     * getPanel method
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getPanel() {
        return this.parent.element && this.parent.element.querySelector('.e-rte-srctextarea');
    }
    /**
     * getViewPanel method
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getViewPanel() {
        return (this.parent.iframeSettings.enable && this.getPanel()) ? this.getPanel().parentElement : this.getPanel();
    }
    /**
     * Destroy the entire RichTextEditor.
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    destroy() {
        this.removeEventListener();
    }
}

/**
 * `Table` module is used to handle table actions.
 */
class Table {
    constructor(parent, serviceLocator) {
        this.ensureInsideTableList = true;
        this.pageX = null;
        this.pageY = null;
        this.moveEle = null;
        this.parent = parent;
        this.rteID = parent.element.id;
        this.l10n = serviceLocator.getService('rteLocale');
        this.rendererFactory = serviceLocator.getService('rendererFactory');
        this.dialogRenderObj = serviceLocator.getService('dialogRenderObject');
        this.addEventListener();
    }
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(createTable, this.renderDlgContent, this);
        this.parent.on(initialEnd, this.afterRender, this);
        this.parent.on(dynamicModule, this.afterRender, this);
        this.parent.on(showTableDialog, this.showDialog, this);
        this.parent.on(closeTableDialog, this.closeDialog, this);
        this.parent.on(docClick, this.docClick, this);
        this.parent.on(editAreaClick, this.editAreaClickHandler, this);
        this.parent.on(clearDialogObj, this.clearDialogObj, this);
        this.parent.on(tableToolbarAction, this.onToolbarAction, this);
        this.parent.on(dropDownSelect, this.dropdownSelect, this);
        this.parent.on(keyDown, this.keyDown, this);
        this.parent.on(mouseUp, this.selectionTable, this);
        this.parent.on(destroy, this.destroy, this);
    }
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(createTable, this.renderDlgContent);
        this.parent.off(initialEnd, this.afterRender);
        this.parent.off(dynamicModule, this.afterRender);
        this.parent.off(docClick, this.docClick);
        this.parent.off(showTableDialog, this.showDialog);
        this.parent.off(closeTableDialog, this.closeDialog);
        this.parent.off(editAreaClick, this.editAreaClickHandler);
        this.parent.off(clearDialogObj, this.clearDialogObj);
        this.parent.off(tableToolbarAction, this.onToolbarAction);
        this.parent.off(dropDownSelect, this.dropdownSelect);
        this.parent.off(mouseDown, this.cellSelect);
        this.parent.off(tableColorPickerChanged, this.setBGColor);
        this.parent.off(keyDown, this.keyDown);
        this.parent.off(mouseUp, this.selectionTable);
        this.parent.off(destroy, this.destroy);
    }
    selectionTable(e) {
        const target = e.args.target;
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'mozilla' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'table')) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'table').tagName === 'TABLE') {
            this.parent.contentModule.getEditPanel().setAttribute('contenteditable', 'true');
        }
    }
    afterRender() {
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.contentModule)) {
            this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);
            this.parent.on(tableColorPickerChanged, this.setBGColor, this);
            this.parent.on(mouseDown, this.cellSelect, this);
            if (this.parent.tableSettings.resize) {
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.parent.contentModule.getEditPanel(), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent, this.resizeStart, this);
            }
            if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && this.parent.tableSettings.resize) {
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.contentModule.getEditPanel(), 'mouseover', this.resizeHelper, this);
            }
        }
    }
    dropdownSelect(e) {
        const item = e.item;
        if (!document.body.contains(document.body.querySelector('.e-rte-quick-toolbar')) || item.command !== 'Table') {
            return;
        }
        const range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
        const args = {
            args: e,
            selection: this.parent.formatter.editorManager.nodeSelection.save(range, this.contentModule.getDocument()),
            selectParent: this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range)
        };
        switch (item.subCommand) {
            case 'InsertRowBefore':
            case 'InsertRowAfter':
                this.addRow(args.selection, e);
                break;
            case 'InsertColumnLeft':
            case 'InsertColumnRight':
                this.addColumn(args.selection, e);
                break;
            case 'DeleteColumn':
            case 'DeleteRow':
                this.removeRowColumn(args.selection, e);
                break;
            case 'AlignTop':
            case 'AlignMiddle':
            case 'AlignBottom':
                this.verticalAlign(args, e);
                break;
            case 'Dashed':
            case 'Alternate':
            case 'Custom':
                this.tableStyles(args, item.subCommand);
                break;
            case 'Merge':
            case 'VerticalSplit':
            case 'HorizontalSplit':
                this.UpdateCells(args.selection, e);
                break;
        }
    }
    UpdateCells(selectCell, e) {
        this.parent.formatter.process(this.parent, e, e, { selection: selectCell, subCommand: e.item.subCommand });
        this.hideTableQuickToolbar();
    }
    keyDown(e) {
        const event = e.args;
        // eslint-disable-next-line
        const proxy = this;
        switch (event.action) {
            case 'escape':
                break;
            case 'insert-table':
                this.openDialog(true, e);
                event.preventDefault();
                break;
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.formatter.editorManager.nodeSelection) && this.contentModule
            && event.code !== 'KeyK') {
            const range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
            const selection = this.parent.formatter.editorManager.
                nodeSelection.save(range, this.contentModule.getDocument());
            let ele = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range)[0];
            ele = (ele && ele.tagName !== 'TD' && ele.tagName !== 'TH') ? ele.parentElement : ele;
            if ((event.keyCode === 8 || event.keyCode === 46) ||
                (event.ctrlKey && event.keyCode === 88)) {
                if (ele && ele.tagName === 'TBODY') {
                    event.preventDefault();
                    proxy.removeTable(selection, event, true);
                }
                else if (ele && ele.querySelectorAll('table').length > 0) {
                    this.removeResizeElement();
                }
            }
            if (ele && ele.tagName !== 'TD' && ele.tagName !== 'TH') {
                const closestTd = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, 'td');
                ele = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(closestTd) && this.parent.inputElement.contains(closestTd) ? closestTd : ele;
            }
            if (ele && (ele.tagName === 'TD' || ele.tagName === 'TH')) {
                switch (event.keyCode) {
                    case 9:
                    case 37:
                    case 39:
                        proxy.tabSelection(event, selection, ele);
                        break;
                    case 40:
                    case 38:
                        proxy.tableArrowNavigation(event, selection, ele);
                        break;
                }
            }
        }
    }
    openDialog(isInternal, e) {
        if (!isInternal) {
            this.parent.contentModule.getEditPanel().focus();
        }
        if (this.parent.editorMode === 'HTML') {
            const docElement = this.parent.contentModule.getDocument();
            const range = this.parent.formatter.editorManager.nodeSelection.getRange(docElement);
            const selection = this.parent.formatter.editorManager.nodeSelection.save(range, docElement);
            const args = {
                originalEvent: e ? e.args : { action: 'insert-table' },
                item: {
                    command: 'Table',
                    subCommand: 'CreateTable'
                }
            };
            this.insertTableDialog({ self: this, args: args, selection: selection });
        }
    }
    showDialog() {
        this.openDialog(false);
    }
    closeDialog() {
        if (this.editdlgObj) {
            this.editdlgObj.hide({ returnValue: true });
        }
    }
    onToolbarAction(args) {
        const item = args.args.item;
        switch (item.subCommand) {
            case 'TableHeader':
                this.tableHeader(args.selection, args.args);
                break;
            case 'TableRemove':
                this.removeTable(args.selection, args.args);
                break;
            case 'TableEditProperties':
                this.editTable(args);
                break;
        }
    }
    verticalAlign(args, e) {
        const tdEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.selectParent[0], 'td') || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.selectParent[0], 'th');
        if (tdEle) {
            this.parent.formatter.process(this.parent, e, e, { tableCell: tdEle, subCommand: e.item.subCommand });
        }
    }
    tableStyles(args, command) {
        const table = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.selectParent[0], 'table');
        if (command === 'Dashed') {
            /* eslint-disable */
            (this.parent.element.classList.contains(CLS_TB_DASH_BOR)) ?
                this.parent.element.classList.remove(CLS_TB_DASH_BOR) : this.parent.element.classList.add(CLS_TB_DASH_BOR);
            (table.classList.contains(CLS_TB_DASH_BOR)) ? table.classList.remove(CLS_TB_DASH_BOR) :
                table.classList.add(CLS_TB_DASH_BOR);
        }
        if (command === 'Alternate') {
            (this.parent.element.classList.contains(CLS_TB_ALT_BOR)) ?
                this.parent.element.classList.remove(CLS_TB_ALT_BOR) : this.parent.element.classList.add(CLS_TB_ALT_BOR);
            (table.classList.contains(CLS_TB_ALT_BOR)) ? table.classList.remove(CLS_TB_ALT_BOR) :
                table.classList.add(CLS_TB_ALT_BOR);
            /* eslint-enable */
        }
        if (args.args && args.args.item.cssClass) {
            const classList = args.args.item.cssClass.split(' ');
            for (let i = 0; i < classList.length; i++) {
                if (table.classList.contains(classList[i])) {
                    table.classList.remove(classList[i]);
                }
                else {
                    table.classList.add(classList[i]);
                }
            }
        }
        this.parent.formatter.saveData();
        this.parent.formatter.editorManager.nodeSelection.restore();
    }
    insideList(range) {
        const blockNodes = this.parent.formatter.editorManager.domNode.blockNodes();
        const nodes = [];
        for (let i = 0; i < blockNodes.length; i++) {
            if (blockNodes[i].parentNode.tagName === 'LI') {
                nodes.push(blockNodes[i].parentNode);
            }
            else if (blockNodes[i].tagName === 'LI' && blockNodes[i].childNodes[0].tagName !== 'P' &&
                (blockNodes[i].childNodes[0].tagName !== 'OL' &&
                    blockNodes[i].childNodes[0].tagName !== 'UL')) {
                nodes.push(blockNodes[i]);
            }
        }
        if (nodes.length > 1 || nodes.length && ((range.startOffset === 0 && range.endOffset === 0))) {
            this.ensureInsideTableList = true;
            return true;
        }
        else {
            this.ensureInsideTableList = false;
            return false;
        }
    }
    tabSelection(event, selection, ele) {
        const insideList = this.insideList(selection.range);
        if ((event.keyCode === 37 || event.keyCode === 39) && selection.range.startContainer.nodeType === 3 ||
            insideList) {
            return;
        }
        event.preventDefault();
        ele.classList.remove(CLS_TABLE_SEL);
        if (!event.shiftKey && event.keyCode !== 37) {
            let nextElement = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ele.nextSibling)) ? ele.nextSibling :
                (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, 'tr').nextSibling) ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, 'tr').nextSibling.childNodes[0] :
                    (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, 'table').nextSibling)) ?
                        ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, 'table').nextSibling.nodeName.toLowerCase() === 'td') ?
                            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, 'table').nextSibling : ele : ele);
            if (ele === nextElement && ele.nodeName === 'TH') {
                nextElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, 'table').rows[1].cells[0];
            }
            if (event.keyCode === 39 && ele === nextElement) {
                nextElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, 'table').nextSibling;
            }
            if (nextElement) {
                // eslint-disable-next-line
                (nextElement.textContent.trim() !== '' && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(nextElement, 'td')) ?
                    selection.setSelectionNode(this.contentModule.getDocument(), nextElement) :
                    selection.setSelectionText(this.contentModule.getDocument(), nextElement, nextElement, 0, 0);
            }
            if (ele === nextElement && event.keyCode !== 39 && nextElement) {
                ele.classList.add(CLS_TABLE_SEL);
                this.addRow(selection, event, true);
                ele.classList.remove(CLS_TABLE_SEL);
                nextElement = nextElement.parentElement.nextSibling.firstChild;
                // eslint-disable-next-line
                (nextElement.textContent.trim() !== '' && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(nextElement, 'td')) ?
                    selection.setSelectionNode(this.contentModule.getDocument(), nextElement) :
                    selection.setSelectionText(this.contentModule.getDocument(), nextElement, nextElement, 0, 0);
            }
        }
        else {
            let prevElement = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(ele.previousSibling)) ? ele.previousSibling :
                (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, 'tr').previousSibling) ?
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, 'tr').previousSibling.childNodes[(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, 'tr').previousSibling.childNodes.length - 1] :
                    (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, 'table').previousSibling)) ?
                        ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, 'table').previousSibling.nodeName.toLowerCase() === 'td') ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, 'table').previousSibling :
                            ele : ele);
            if (ele === prevElement && ele.cellIndex === 0 &&
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, 'table').tHead) {
                const clsTble = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, 'table');
                prevElement = clsTble.rows[0].cells[clsTble.rows[0].cells.length - 1];
            }
            if (event.keyCode === 37 && ele === prevElement) {
                prevElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, 'table').previousSibling;
            }
            if (prevElement) {
                // eslint-disable-next-line
                (prevElement.textContent.trim() !== '' && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(prevElement, 'td')) ?
                    selection.setSelectionNode(this.contentModule.getDocument(), prevElement) :
                    selection.setSelectionText(this.contentModule.getDocument(), prevElement, prevElement, 0, 0);
            }
        }
    }
    tableArrowNavigation(event, selection, ele) {
        const selText = selection.range.startContainer;
        if ((event.keyCode === 40 && selText.nodeType === 3 && (selText.nextSibling && selText.nextSibling.nodeName === 'BR' ||
            selText.parentNode && selText.parentNode.nodeName !== 'TD')) ||
            (event.keyCode === 38 && selText.nodeType === 3 && (selText.previousSibling && selText.previousSibling.nodeName === 'BR' ||
                selText.parentNode && selText.parentNode.nodeName !== 'TD'))) {
            return;
        }
        event.preventDefault();
        ele.classList.remove(CLS_TABLE_SEL);
        if (event.keyCode === 40) {
            ele = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, 'tr').nextElementSibling)) ?
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, 'tr').nextElementSibling.children[ele.cellIndex] :
                ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, 'table').tHead && ele.nodeName === 'TH') ?
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, 'table').rows[1].cells[ele.cellIndex] :
                    (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, 'table').nextSibling)) ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, 'table').nextSibling :
                        ele;
        }
        else {
            ele = (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, 'tr').previousElementSibling)) ?
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, 'tr').previousElementSibling.children[ele.cellIndex] :
                ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, 'table').tHead && ele.nodeName !== 'TH') ?
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, 'table').tHead.rows[0].cells[ele.cellIndex] :
                    (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, 'table').previousSibling)) ? (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(ele, 'table').previousSibling :
                        ele;
        }
        if (ele) {
            selection.setSelectionText(this.contentModule.getDocument(), ele, ele, 0, 0);
        }
    }
    setBGColor(args) {
        const range = this.parent.formatter.editorManager.nodeSelection.getRange(this.contentModule.getDocument());
        // eslint-disable-next-line
        const selection = this.parent.formatter.editorManager.nodeSelection.save(range, this.contentModule.getDocument());
        // eslint-disable-next-line
        const selectedCells = this.curTable.querySelectorAll('.e-cell-select');
        for (let i = 0; i < selectedCells.length; i++) {
            selectedCells[i].style.backgroundColor = args.item.value;
        }
        this.parent.formatter.saveData();
    }
    hideTableQuickToolbar() {
        if (this.quickToolObj && this.quickToolObj.tableQTBar && document.body.contains(this.quickToolObj.tableQTBar.element)) {
            this.quickToolObj.tableQTBar.hidePopup();
        }
    }
    tableHeader(selection, e) {
        this.parent.formatter.process(this.parent, e, e.originalEvent, { selection: selection, subCommand: e.item.subCommand });
    }
    editAreaClickHandler(e) {
        if (this.parent.readonly || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.args.target, '.e-img-caption'))) {
            return;
        }
        const args = e.args;
        const showOnRightClick = this.parent.quickToolbarSettings.showOnRightClick;
        if (args.which === 2 || (showOnRightClick && args.which === 1) || (!showOnRightClick && args.which === 3)) {
            return;
        }
        if (this.parent.editorMode === 'HTML' && this.parent.quickToolbarModule && this.parent.quickToolbarModule.tableQTBar) {
            this.quickToolObj = this.parent.quickToolbarModule;
            const target = args.target;
            this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);
            const isPopupOpen = this.quickToolObj.tableQTBar.element.classList.contains('e-rte-pop');
            if (isPopupOpen) {
                return;
            }
            const range = this.parent.formatter.editorManager.nodeSelection.getRange(this.contentModule.getDocument());
            const closestTable = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'table');
            const startNode = this.parent.getRange().startContainer.parentElement;
            const endNode = this.parent.getRange().endContainer.parentElement;
            if (target && target.nodeName !== 'A' && target.nodeName !== 'IMG' && startNode === endNode && (target.nodeName === 'TD' || target.nodeName === 'TH' ||
                target.nodeName === 'TABLE' || (closestTable && this.parent.contentModule.getEditPanel().contains(closestTable)))
                && !(range.startContainer.nodeType === 3 && !range.collapsed)) {
                const range = this.parent.formatter.editorManager.nodeSelection.getRange(this.contentModule.getDocument());
                this.parent.formatter.editorManager.nodeSelection.save(range, this.contentModule.getDocument());
                this.parent.formatter.editorManager.nodeSelection.Clear(this.contentModule.getDocument());
                const pageY = (this.parent.iframeSettings.enable) ? window.pageYOffset +
                    this.parent.element.getBoundingClientRect().top + args.clientY : args.pageY;
                this.quickToolObj.tableQTBar.showPopup(args.pageX, pageY, target);
                this.parent.formatter.editorManager.nodeSelection.restore();
            }
            else {
                this.hideTableQuickToolbar();
            }
        }
    }
    tableCellSelect(e) {
        const target = e.target;
        const row = Array.prototype.slice.call(target.parentElement.parentElement.children).indexOf(target.parentElement);
        const col = Array.prototype.slice.call(target.parentElement.children).indexOf(target);
        const list = this.dlgDiv.querySelectorAll('.e-rte-tablecell');
        Array.prototype.forEach.call(list, (item) => {
            const parentIndex = Array.prototype.slice.call(item.parentElement.parentElement.children).indexOf(item.parentElement);
            const cellIndex = Array.prototype.slice.call(item.parentElement.children).indexOf(item);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([item], 'e-active');
            if (parentIndex <= row && cellIndex <= col) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([item], 'e-active');
            }
        });
        this.tblHeader.innerHTML = (col + 1) + 'x' + (row + 1);
    }
    // eslint-disable-next-line
    tableMouseUp(e) {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.curTable, 'mousemove', this.tableMove);
    }
    // eslint-disable-next-line
    tableCellLeave(e) {
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(this.dlgDiv.querySelectorAll('.e-rte-tablecell'), 'e-active');
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.dlgDiv.querySelector('.e-rte-tablecell')], 'e-active');
        this.tblHeader.innerHTML = 1 + 'x' + 1;
    }
    tableCellClick(e) {
        const target = e.target;
        const row = Array.prototype.slice.call(target.parentElement.parentElement.children).indexOf(target.parentElement) + 1;
        const col = Array.prototype.slice.call(target.parentElement.children).indexOf(target) + 1;
        this.self.tableInsert(row, col, e, this);
    }
    tableInsert(row, col, e, selectionObj) {
        const proxy = (selectionObj.self) ? selectionObj.self : this;
        const startContainer = selectionObj.selection.range.startContainer;
        if (startContainer.nodeName === 'P' && startContainer.textContent.trim() === '' && !(startContainer.childNodes.length > 0)) {
            startContainer.innerHTML = '<br />';
        }
        const parentNode = startContainer.parentNode;
        if (proxy.parent.editorMode === 'HTML' &&
            ((proxy.parent.iframeSettings.enable && !hasClass(parentNode.ownerDocument.querySelector('body'), 'e-lib')) ||
                // eslint-disable-next-line
                (!proxy.parent.iframeSettings.enable && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(parentNode, '[id=' + "'" + proxy.contentModule.getPanel().id + "'" + ']'))))) {
            proxy.contentModule.getEditPanel().focus();
            const range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.contentModule.getDocument());
            selectionObj.selection = proxy.parent.formatter.editorManager.nodeSelection.save(range, proxy.contentModule.getDocument());
        }
        const value = {
            rows: row, columns: col, width: {
                minWidth: proxy.parent.tableSettings.minWidth,
                maxWidth: proxy.parent.tableSettings.maxWidth,
                width: proxy.parent.tableSettings.width
            },
            selection: selectionObj.selection
        };
        if (proxy.popupObj) {
            proxy.popupObj.hide();
        }
        if (proxy.editdlgObj) {
            proxy.editdlgObj.hide();
        }
        proxy.parent.formatter.process(proxy.parent, selectionObj.args, selectionObj.args.originalEvent, value);
        proxy.contentModule.getEditPanel().focus();
        proxy.parent.on(mouseDown, proxy.cellSelect, proxy);
    }
    cellSelect(e) {
        let target = e.args.target;
        const tdNode = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'td,th');
        target = (target.nodeName !== 'TD' && tdNode && this.parent.contentModule.getEditPanel().contains(tdNode)) ?
            tdNode : target;
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(this.contentModule.getEditPanel().querySelectorAll('table td, table th'), CLS_TABLE_SEL);
        if (target && (target.tagName === 'TD' || target.tagName === 'TH')) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([target], CLS_TABLE_SEL);
            this.activeCell = target;
            this.curTable = (this.curTable) ? this.curTable : (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'table');
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.curTable, 'mousemove', this.tableMove, this);
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.curTable, 'mouseup', this.tableMouseUp, this);
            this.removeResizeElement();
            if (this.helper && this.contentModule.getEditPanel().contains(this.helper)) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.helper);
            }
        }
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'mozilla' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'table')) &&
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'table').tagName === 'TABLE') {
            this.parent.contentModule.getEditPanel().setAttribute('contenteditable', 'false');
        }
    }
    tableMove(event) {
        this.parent.formatter.editorManager.observer.notify('TABLE_MOVE', { event: event, selectNode: [this.activeCell] });
    }
    resizeHelper(e) {
        if (this.parent.readonly) {
            return;
        }
        const target = e.target || e.targetTouches[0].target;
        const closestTable = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'table');
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.curTable) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(closestTable) && closestTable !== this.curTable) {
            this.removeResizeElement();
            this.removeHelper(e);
            this.cancelResizeAction();
        }
        if (target.nodeName === 'TABLE' || target.nodeName === 'TD' || target.nodeName === 'TH') {
            this.curTable = (closestTable && this.parent.contentModule.getEditPanel().contains(closestTable))
                && (target.nodeName === 'TD' || target.nodeName === 'TH') ?
                closestTable : target;
            this.removeResizeElement();
            this.tableResizeEleCreation(this.curTable, e);
        }
    }
    tableResizeEleCreation(table, e) {
        this.parent.preventDefaultResize(e);
        const columns = Array.prototype.slice.call(table.rows[this.calMaxCol(table)].cells, 1);
        const rows = [];
        for (let i = 0; i < table.rows.length; i++) {
            rows.push(Array.prototype.slice.call(table.rows[i].cells, 0, 1)[0]);
        }
        const height = parseInt(getComputedStyle(table).height, 10);
        const width = parseInt(getComputedStyle(table).width, 10);
        const pos = this.calcPos(table);
        for (let i = 0; columns.length > i; i++) {
            const colReEle = this.parent.createElement('span', {
                attrs: {
                    'data-col': (i + 1).toString(), 'unselectable': 'on', 'contenteditable': 'false'
                }
            });
            colReEle.classList.add(CLS_RTE_TABLE_RESIZE, CLS_TB_COL_RES);
            colReEle.style.cssText = 'height: ' + height + 'px; width: 4px; top: ' + pos.top +
                'px; left:' + (pos.left + this.calcPos(columns[i]).left) + 'px;';
            this.contentModule.getEditPanel().appendChild(colReEle);
        }
        for (let i = 0; rows.length > i; i++) {
            const rowReEle = this.parent.createElement('span', {
                attrs: {
                    'data-row': (i).toString(), 'unselectable': 'on', 'contenteditable': 'false'
                }
            });
            rowReEle.classList.add(CLS_RTE_TABLE_RESIZE, CLS_TB_ROW_RES);
            const rowPosLeft = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(table.getAttribute('cellspacing')) || table.getAttribute('cellspacing') !== '' ?
                0 : this.calcPos(rows[i]).left;
            rowReEle.style.cssText = 'width: ' + width + 'px; height: 4px; top: ' +
                (this.calcPos(rows[i]).top + pos.top + rows[i].offsetHeight - 2) +
                'px; left:' + (rowPosLeft + pos.left) + 'px;';
            this.contentModule.getEditPanel().appendChild(rowReEle);
        }
        const tableReBox = this.parent.createElement('span', {
            className: CLS_TB_BOX_RES, attrs: {
                'data-col': columns.length.toString(), 'unselectable': 'on', 'contenteditable': 'false'
            }
        });
        tableReBox.style.cssText = 'top: ' + (pos.top + height - 4) +
            'px; left:' + (pos.left + width - 4) + 'px;';
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {
            tableReBox.classList.add('e-rmob');
        }
        this.contentModule.getEditPanel().appendChild(tableReBox);
    }
    removeResizeElement() {
        const item = this.parent.contentModule.getEditPanel().
            querySelectorAll('.e-column-resize, .e-row-resize, .e-table-box');
        if (item.length > 0) {
            for (let i = 0; i < item.length; i++) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(item[i]);
            }
        }
    }
    calcPos(elem) {
        let parentOffset = {
            top: 0,
            left: 0
        };
        // eslint-disable-next-line
        const offset = elem.getBoundingClientRect();
        const doc = elem.ownerDocument;
        let offsetParent = elem.offsetParent || doc.documentElement;
        while (offsetParent &&
            (offsetParent === doc.body || offsetParent === doc.documentElement) &&
            offsetParent.style.position === 'static') {
            offsetParent = offsetParent.parentNode;
        }
        if (offsetParent.nodeName === 'TD' && elem.nodeName === 'TABLE') {
            offsetParent = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(offsetParent, '.e-rte-content');
        }
        if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
            // eslint-disable-next-line
            parentOffset = offsetParent.getBoundingClientRect();
        }
        return {
            top: elem.offsetTop,
            left: elem.offsetLeft
        };
    }
    getPointX(e) {
        if (e.touches && e.touches.length) {
            return e.touches[0].pageX;
        }
        else {
            return e.pageX;
        }
    }
    getPointY(e) {
        if (e.touches && e.touches.length) {
            return e.touches[0].pageY;
        }
        else {
            return e.pageY;
        }
    }
    resizeStart(e) {
        if (this.parent.readonly) {
            return;
        }
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {
            this.resizeHelper(e);
        }
        const target = e.target;
        if (target.classList.contains(CLS_TB_COL_RES) ||
            target.classList.contains(CLS_TB_ROW_RES) ||
            target.classList.contains(CLS_TB_BOX_RES)) {
            e.preventDefault();
            this.parent.preventDefaultResize(e);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(this.curTable.querySelectorAll('td,th'), CLS_TABLE_SEL);
            this.parent.formatter.editorManager.nodeSelection.Clear(this.contentModule.getDocument());
            this.pageX = this.getPointX(e);
            this.pageY = this.getPointY(e);
            this.resizeBtnInit();
            this.hideTableQuickToolbar();
            if (target.classList.contains(CLS_TB_COL_RES)) {
                this.resizeBtnStat.column = true;
                this.columnEle = this.curTable.rows[this.calMaxCol(this.curTable)].cells[parseInt(target.getAttribute('data-col'), 10)];
                this.colIndex = this.columnEle.cellIndex;
                this.moveEle = e.target;
                this.appendHelper();
            }
            if (target.classList.contains(CLS_TB_ROW_RES)) {
                this.rowEle = this.curTable.rows[parseInt(target.getAttribute('data-row'), 10)];
                this.resizeBtnStat.row = true;
                this.appendHelper();
            }
            if (target.classList.contains(CLS_TB_BOX_RES)) {
                this.resizeBtnStat.tableBox = true;
            }
            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && this.helper && !this.helper.classList.contains('e-reicon')) {
                this.helper.classList.add('e-reicon');
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(document, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent, this.removeHelper, this);
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.helper, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent, this.resizeStart, this);
            }
            else {
                const args = { event: e, requestType: 'Table' };
                this.parent.trigger(resizeStart, args, (resizeStartArgs) => {
                    if (resizeStartArgs.cancel) {
                        this.cancelResizeAction();
                    }
                });
            }
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.contentModule.getDocument(), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, this.resizing, this);
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.contentModule.getDocument(), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, this.resizeEnd, this);
        }
    }
    removeHelper(e) {
        const cls = e.target.classList;
        if (!(cls.contains('e-reicon')) && this.helper) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(document, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent, this.removeHelper);
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.helper, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent, this.resizeStart);
            if (this.helper && this.contentModule.getEditPanel().contains(this.helper)) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.helper);
            }
            this.pageX = null;
            this.helper = null;
        }
    }
    appendHelper() {
        this.helper = this.parent.createElement('div', {
            className: 'e-table-rhelper'
        });
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {
            this.helper.classList.add('e-reicon');
        }
        this.contentModule.getEditPanel().appendChild(this.helper);
        this.setHelperHeight();
    }
    setHelperHeight() {
        const pos = this.calcPos(this.curTable);
        if (this.resizeBtnStat.column) {
            this.helper.classList.add('e-column-helper');
            this.helper.style.cssText = 'height: ' + getComputedStyle(this.curTable).height + '; top: ' +
                pos.top + 'px; left:' + (pos.left + this.calcPos(this.columnEle).left - 1) + 'px;';
        }
        else {
            this.helper.classList.add('e-row-helper');
            this.helper.style.cssText = 'width: ' + getComputedStyle(this.curTable).width + '; top: ' +
                (this.calcPos(this.rowEle).top + pos.top + this.rowEle.offsetHeight) +
                'px; left:' + (this.calcPos(this.rowEle).left + pos.left) + 'px;';
        }
    }
    updateHelper() {
        const pos = this.calcPos(this.curTable);
        if (this.resizeBtnStat.column) {
            const left = pos.left + this.calcPos(this.columnEle).left - 1;
            this.helper.style.left = left + 'px';
        }
        else {
            const top = this.calcPos(this.rowEle).top + pos.top + this.rowEle.offsetHeight;
            this.helper.style.top = top + 'px';
        }
    }
    calMaxCol(element) {
        let max = 0;
        let maxRowIndex;
        for (let i = 0; i < element.rows.length; i++) {
            if (max < element.rows[i].cells.length) {
                maxRowIndex = i;
                max = element.rows[i].cells.length;
            }
        }
        return maxRowIndex;
    }
    resizing(e) {
        const pageX = this.getPointX(e);
        const pageY = this.getPointY(e);
        const mouseX = (this.parent.enableRtl) ? -(pageX - this.pageX) : (pageX - this.pageX);
        const mouseY = (this.parent.enableRtl) ? -(pageY - this.pageY) : (pageY - this.pageY);
        this.pageX = pageX;
        this.pageY = pageY;
        const args = { event: e, requestType: 'table' };
        this.parent.trigger(onResize, args, (resizingArgs) => {
            if (resizingArgs.cancel) {
                this.cancelResizeAction();
            }
            else {
                const tableReBox = this.contentModule.getEditPanel().querySelector('.e-table-box');
                const tableWidth = parseInt(getComputedStyle(this.curTable).width, 10);
                const tableHeight = parseInt(getComputedStyle(this.curTable).height, 10);
                const paddingSize = +getComputedStyle(this.contentModule.getEditPanel()).paddingRight.match(/\d/g).join('');
                const rteWidth = this.contentModule.getEditPanel().offsetWidth - paddingSize * 2;
                if (this.resizeBtnStat.column) {
                    const cellColl = this.curTable.rows[this.calMaxCol(this.curTable)].cells;
                    const width = parseFloat(this.columnEle.offsetWidth.toString());
                    const actualwid = width - mouseX;
                    const totalwid = parseFloat(this.columnEle.offsetWidth.toString()) +
                        parseFloat(cellColl[this.colIndex - 1].offsetWidth.toString());
                    for (let i = 0; i < this.curTable.rows.length; i++) {
                        if ((totalwid - actualwid) > 20 && actualwid > 20) {
                            const leftColumnWidth = totalwid - actualwid;
                            const rightColWidth = actualwid;
                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.curTable.rows[i].cells[this.colIndex - 1])) {
                                this.curTable.rows[i].cells[this.colIndex - 1].style.width =
                                    this.convertPixelToPercentage(leftColumnWidth, tableWidth) + '%';
                            }
                            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.curTable.rows[i].cells[this.colIndex])) {
                                this.curTable.rows[i].cells[this.colIndex].style.width =
                                    this.convertPixelToPercentage(rightColWidth, tableWidth) + '%';
                            }
                        }
                    }
                    this.updateHelper();
                }
                else if (this.resizeBtnStat.row) {
                    this.parent.preventDefaultResize(e);
                    const height = parseFloat(this.rowEle.clientHeight.toString()) + mouseY;
                    if (height > 20) {
                        this.rowEle.style.height = height + 'px';
                    }
                    this.curTable.style.height = '';
                    if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(tableReBox)) {
                        tableReBox.style.cssText = 'top: ' + (this.calcPos(this.curTable).top + tableHeight - 4) +
                            'px; left:' + (this.calcPos(this.curTable).left + tableWidth - 4) + 'px;';
                    }
                    this.updateHelper();
                }
                else if (this.resizeBtnStat.tableBox) {
                    if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {
                        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.contentModule.getEditPanel(), 'mouseover', this.resizeHelper);
                    }
                    const widthType = this.curTable.style.width.indexOf('%') > -1;
                    this.curTable.style.width = widthType ? this.convertPixelToPercentage(tableWidth + mouseX, rteWidth) + '%'
                        : tableWidth + mouseX + 'px';
                    this.curTable.style.height = tableHeight + mouseY + 'px';
                    tableReBox.classList.add('e-rbox-select');
                    tableReBox.style.cssText = 'top: ' + (this.calcPos(this.curTable).top + tableHeight - 4) +
                        'px; left:' + (this.calcPos(this.curTable).left + tableWidth - 4) + 'px;';
                }
            }
        });
    }
    convertPixelToPercentage(value, offsetValue) {
        return (value / offsetValue) * 100;
    }
    cancelResizeAction() {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.contentModule.getDocument(), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, this.resizing);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.contentModule.getDocument(), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, this.resizeEnd);
        this.removeResizeElement();
    }
    resizeEnd(e) {
        this.resizeBtnInit();
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.contentModule.getDocument(), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchMoveEvent, this.resizing);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.contentModule.getDocument(), _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, this.resizeEnd);
        if (this.contentModule.getEditPanel().querySelector('.e-table-box') &&
            this.contentModule.getEditPanel().contains(this.contentModule.getEditPanel().querySelector('.e-table-box'))) {
            if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.contentModule.getEditPanel(), 'mouseover', this.resizeHelper, this);
            }
            this.removeResizeElement();
            if (this.helper && this.contentModule.getEditPanel().contains(this.helper)) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.helper);
                this.helper = null;
            }
            this.pageX = null;
            this.pageY = null;
            this.moveEle = null;
        }
        const args = { event: e, requestType: 'table' };
        this.parent.trigger(resizeStop, args);
        this.parent.formatter.saveData();
    }
    resizeBtnInit() {
        return this.resizeBtnStat = { column: false, row: false, tableBox: false };
    }
    addRow(selectCell, e, tabkey) {
        let cmd;
        if (tabkey) {
            cmd = {
                item: { command: 'Table', subCommand: 'InsertRowAfter' }
            };
        }
        const value = {
            selection: selectCell,
            subCommand: (tabkey) ? cmd.item.subCommand : e.item.subCommand
        };
        this.parent.formatter.process(this.parent, (tabkey) ? cmd : e, e, value);
    }
    addColumn(selectCell, e) {
        this.parent.formatter.process(this.parent, e, e, { selection: selectCell, width: this.parent.tableSettings.width, subCommand: e.item.subCommand });
    }
    removeRowColumn(selectCell, e) {
        this.parent.formatter.process(this.parent, e, e, { selection: selectCell, subCommand: e.item.subCommand });
        this.hideTableQuickToolbar();
    }
    removeTable(selection, args, delKey) {
        let cmd;
        if (delKey) {
            cmd = { item: { command: 'Table', subCommand: 'TableRemove' } };
        }
        const value = {
            selection: selection,
            subCommand: (delKey) ? cmd.item.subCommand : args.item.subCommand
        };
        this.parent.formatter.process(this.parent, (delKey) ? cmd : args, args.originalEvent, value);
        this.contentModule.getEditPanel().focus();
        this.removeResizeElement();
        this.hideTableQuickToolbar();
    }
    renderDlgContent(args) {
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || this.parent.inlineMode.enable) {
            this.insertTableDialog(args);
            return;
        }
        if (this.popupObj) {
            this.popupObj.hide();
            return;
        }
        this.hideTableQuickToolbar();
        const header = '1X1';
        const insertbtn = this.l10n.getConstant('inserttablebtn');
        this.dlgDiv = this.parent.createElement('div', { className: 'e-rte-table-popup', id: this.rteID + '_table' });
        this.tblHeader = this.parent.createElement('div', { className: 'e-rte-popup-header' });
        this.tblHeader.innerHTML = header;
        this.dlgDiv.appendChild(this.tblHeader);
        const tableDiv = this.parent.createElement('div', { className: 'e-rte-table-span' });
        this.drawTable(tableDiv, args);
        this.dlgDiv.appendChild(tableDiv);
        this.dlgDiv.appendChild(this.parent.createElement('span', { className: 'e-span-border' }));
        const btnEle = this.parent.createElement('button', {
            className: 'e-insert-table-btn', id: this.rteID + '_insertTable',
            attrs: { type: 'button', tabindex: '0' }
        });
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.parent.getToolbarElement().querySelector('.e-expended-nav'))) {
            this.parent.getToolbarElement().querySelector('.e-expended-nav').setAttribute('tabindex', '1');
        }
        this.dlgDiv.appendChild(btnEle);
        const button = new _syncfusion_ej2_buttons__WEBPACK_IMPORTED_MODULE_5__.Button({
            iconCss: 'e-icons e-create-table', content: insertbtn, cssClass: 'e-flat',
            enableRtl: this.parent.enableRtl, locale: this.parent.locale
        });
        button.isStringTemplate = true;
        button.appendTo(btnEle);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(btnEle, 'click', this.insertTableDialog, { self: this, args: args.args, selection: args.selection });
        this.parent.getToolbar().appendChild(this.dlgDiv);
        let target = args.args.originalEvent.target;
        target = target.classList.contains('e-toolbar-item') ? target.firstChild : target.parentElement;
        this.popupObj = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_4__.Popup(this.dlgDiv, {
            targetType: 'relative',
            relateTo: target,
            collision: { X: 'fit', Y: 'none' },
            offsetY: 8,
            viewPortElement: this.parent.element,
            position: { X: 'left', Y: 'bottom' },
            enableRtl: this.parent.enableRtl,
            zIndex: 10001,
            // eslint-disable-next-line
            close: (event) => {
                this.parent.isBlur = false;
                this.popupObj.destroy();
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.popupObj.element);
                this.popupObj = null;
            }
        });
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.popupObj.element], 'e-popup-open');
        this.popupObj.refreshPosition(target);
    }
    docClick(e) {
        const target = e.args.target;
        // eslint-disable-next-line
        if (target && target.classList && ((this.popupObj && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '[id=' + "'" + this.popupObj.element.id + "'" + ']') ||
            (this.editdlgObj && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '#' + this.editdlgObj.element.id)))) && !target.classList.contains('e-create-table') &&
            target.offsetParent && !target.offsetParent.classList.contains('e-rte-backgroundcolor-dropdown')) {
            if (this.popupObj) {
                this.popupObj.hide();
            }
            if (this.editdlgObj) {
                this.editdlgObj.hide();
            }
            this.parent.isBlur = true;
            dispatchEvent(this.parent.element, 'focusout');
        }
        const closestEle = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'td');
        const isExist = closestEle && this.parent.contentModule.getEditPanel().contains(closestEle) ? true : false;
        if (target && target.tagName !== 'TD' && target.tagName !== 'TH' && !isExist &&
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.e-rte-quick-popup') === null && target.offsetParent &&
            !target.offsetParent.classList.contains('e-quick-dropdown') &&
            !target.offsetParent.classList.contains('e-rte-backgroundcolor-dropdown') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.e-rte-dropdown-popup')
            && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.e-rte-elements')) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(this.parent.element.querySelectorAll('table td'), CLS_TABLE_SEL);
            if (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isIE) {
                this.hideTableQuickToolbar();
            }
        }
        if (target && target.classList && !target.classList.contains(CLS_TB_COL_RES) &&
            !target.classList.contains(CLS_TB_ROW_RES) && !target.classList.contains(CLS_TB_BOX_RES)) {
            this.removeResizeElement();
        }
    }
    drawTable(tableDiv, args) {
        let rowDiv;
        let tableCell;
        for (let row = 0; row < 3; row++) {
            rowDiv = this.parent.createElement('div', { className: 'e-rte-table-row', attrs: { 'data-column': '' + row } });
            for (let col = 0; col < 10; col++) {
                const display = (row > 2) ? 'none' : 'inline-block';
                tableCell = this.parent.createElement('div', { className: 'e-rte-tablecell e-default', attrs: { 'data-cell': '' + col } });
                rowDiv.appendChild(tableCell);
                tableCell.style.display = display;
                if (col === 0 && row === 0) {
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([tableCell], 'e-active');
                }
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(tableCell, 'mousemove', this.tableCellSelect, this);
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(rowDiv, 'mouseleave', this.tableCellLeave, this);
                _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(tableCell, 'mouseup', this.tableCellClick, { self: this, args: args.args, selection: args.selection });
            }
            tableDiv.appendChild(rowDiv);
        }
    }
    editTable(args) {
        this.createDialog(args);
        const editContent = this.tableDlgContent(args);
        const update = this.l10n.getConstant('dialogUpdate');
        const cancel = this.l10n.getConstant('dialogCancel');
        const editHeader = this.l10n.getConstant('tableEditHeader');
        this.editdlgObj.setProperties({
            height: 'initial', width: '290px', content: editContent, header: editHeader,
            buttons: [{
                    click: this.applyProperties.bind(this, args),
                    buttonModel: { content: update, cssClass: 'e-flat e-size-update', isPrimary: true }
                },
                {
                    click: (e) => {
                        this.cancelDialog(e);
                    },
                    buttonModel: { cssClass: 'e-flat e-cancel', content: cancel }
                }]
        });
        this.editdlgObj.element.style.maxHeight = 'none';
        this.editdlgObj.content.querySelector('input').focus();
        this.hideTableQuickToolbar();
    }
    insertTableDialog(args) {
        const proxy = (this.self) ? this.self : this;
        if (proxy.popupObj) {
            proxy.popupObj.hide();
        }
        proxy.createDialog(args);
        const dlgContent = proxy.tableCellDlgContent();
        const insert = proxy.l10n.getConstant('dialogInsert');
        const cancel = proxy.l10n.getConstant('dialogCancel');
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(proxy.editdlgObj)) {
            return;
        }
        proxy.editdlgObj.setProperties({
            height: 'initial', width: '290px', content: dlgContent,
            buttons: [{
                    click: proxy.customTable.bind(this, args),
                    buttonModel: { content: insert, cssClass: 'e-flat e-insert-table', isPrimary: true }
                },
                {
                    click: (e) => {
                        proxy.cancelDialog(e);
                    },
                    buttonModel: { cssClass: 'e-flat e-cancel', content: cancel }
                }]
        });
        proxy.editdlgObj.element.style.maxHeight = 'none';
        proxy.editdlgObj.content.querySelector('input').focus();
    }
    tableCellDlgContent() {
        const tableColumn = this.l10n.getConstant('columns');
        const tableRow = this.l10n.getConstant('rows');
        const tableWrap = this.parent.createElement('div', { className: 'e-cell-wrap' });
        const content = '<div class="e-rte-field"><input type="text" '
            + ' data-role ="none" id="tableColumn" class="e-table-column"/></div>'
            + '<div class="e-rte-field"><input type="text" data-role ="none" id="tableRow" class="e-table-row" /></div>';
        const contentElem = parseHtml(content);
        tableWrap.appendChild(contentElem);
        this.columnTextBox = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_3__.NumericTextBox({
            format: 'n0',
            min: 1,
            value: 3,
            placeholder: tableColumn,
            floatLabelType: 'Auto',
            max: 50,
            enableRtl: this.parent.enableRtl, locale: this.parent.locale
        });
        this.columnTextBox.isStringTemplate = true;
        this.columnTextBox.appendTo(tableWrap.querySelector('#tableColumn'));
        this.rowTextBox = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_3__.NumericTextBox({
            format: 'n0',
            min: 1,
            value: 3,
            placeholder: tableRow,
            floatLabelType: 'Auto',
            max: 50,
            enableRtl: this.parent.enableRtl, locale: this.parent.locale
        });
        this.rowTextBox.isStringTemplate = true;
        this.rowTextBox.appendTo(tableWrap.querySelector('#tableRow'));
        return tableWrap;
    }
    clearDialogObj() {
        if (this.editdlgObj) {
            this.editdlgObj.destroy();
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.editdlgObj.element);
            this.editdlgObj = null;
        }
    }
    // eslint-disable-next-line
    createDialog(args) {
        if (this.editdlgObj) {
            this.editdlgObj.hide({ returnValue: true });
            return;
        }
        const tableDialog = this.parent.createElement('div', {
            className: 'e-rte-edit-table', id: this.rteID + '_tabledialog'
        });
        this.parent.element.appendChild(tableDialog);
        const insert = this.l10n.getConstant('dialogInsert');
        const cancel = this.l10n.getConstant('dialogCancel');
        const header = this.l10n.getConstant('tabledialogHeader');
        const dialogModel = {
            header: header,
            cssClass: CLS_RTE_ELEMENTS,
            enableRtl: this.parent.enableRtl,
            locale: this.parent.locale,
            showCloseIcon: true, closeOnEscape: true, width: (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) ? '290px' : '340px', height: 'initial',
            position: { X: 'center', Y: (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) ? 'center' : 'top' },
            isModal: _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice,
            buttons: [{
                    buttonModel: { content: insert, cssClass: 'e-flat e-insert-table', isPrimary: true }
                },
                {
                    click: (e) => {
                        this.cancelDialog(e);
                    },
                    buttonModel: { cssClass: 'e-flat e-cancel', content: cancel }
                }],
            target: (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) ? document.body : this.parent.element,
            animationSettings: { effect: 'None' },
            close: (event) => {
                this.parent.isBlur = false;
                this.editdlgObj.destroy();
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.editdlgObj.element);
                this.dialogRenderObj.close(event);
                this.editdlgObj = null;
            }
        };
        this.editdlgObj = this.dialogRenderObj.render(dialogModel);
        this.editdlgObj.appendTo(tableDialog);
        if (this.quickToolObj && this.quickToolObj.inlineQTBar && document.body.contains(this.quickToolObj.inlineQTBar.element)) {
            this.quickToolObj.inlineQTBar.hidePopup();
        }
    }
    customTable(args, e) {
        const proxy = (this.self) ? this.self : this;
        if (proxy.rowTextBox.value && proxy.columnTextBox.value) {
            const argument = ((_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.args)
                && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(args.args.originalEvent) &&
                args.args.originalEvent.action === 'insert-table')
                || proxy.parent.inlineMode.enable) ? args : this);
            proxy.tableInsert(proxy.rowTextBox.value, proxy.columnTextBox.value, e, argument);
        }
    }
    // eslint-disable-next-line
    cancelDialog(e) {
        this.parent.isBlur = false;
        this.editdlgObj.hide({ returnValue: true });
    }
    // eslint-disable-next-line
    applyProperties(args, e) {
        const dialogEle = this.editdlgObj.element;
        const table = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(args.selectNode[0], 'table');
        table.style.width = dialogEle.querySelector('.e-table-width').value + 'px';
        if (dialogEle.querySelector('.e-cell-padding').value !== '') {
            const tdElm = table.querySelectorAll('td');
            for (let i = 0; i < tdElm.length; i++) {
                let padVal = '';
                if (tdElm[i].style.padding === '') {
                    padVal = tdElm[i].getAttribute('style') + ' padding:' +
                        dialogEle.querySelector('.e-cell-padding').value + 'px;';
                }
                else {
                    tdElm[i].style.padding = dialogEle.querySelector('.e-cell-padding').value + 'px';
                    padVal = tdElm[i].getAttribute('style');
                }
                tdElm[i].setAttribute('style', padVal);
            }
        }
        table.cellSpacing = dialogEle.querySelector('.e-cell-spacing').value;
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(table.cellSpacing) || table.cellSpacing !== '0') {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([table], CLS_TABLE_BORDER);
        }
        else {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([table], CLS_TABLE_BORDER);
        }
        this.parent.formatter.saveData();
        this.editdlgObj.hide({ returnValue: true });
    }
    tableDlgContent(e) {
        const selectNode = e.selectParent[0];
        const tableWidth = this.l10n.getConstant('tableWidth');
        const cellPadding = this.l10n.getConstant('cellpadding');
        const cellSpacing = this.l10n.getConstant('cellspacing');
        const tableWrap = this.parent.createElement('div', { className: 'e-table-sizewrap' });
        const widthVal = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectNode, 'table').getClientRects()[0].width;
        const padVal = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectNode, 'td').style.padding;
        const brdSpcVal = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(selectNode, 'table').getAttribute('cellspacing');
        const content = '<div class="e-rte-field"><input type="text" data-role ="none" id="tableWidth" class="e-table-width" '
            + ' /></div>' + '<div class="e-rte-field"><input type="text" data-role ="none" id="cellPadding" class="e-cell-padding" />'
            + ' </div><div class="e-rte-field"><input type="text" data-role ="none" id="cellSpacing" class="e-cell-spacing" /></div>';
        const contentElem = parseHtml(content);
        tableWrap.appendChild(contentElem);
        const widthNum = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_3__.NumericTextBox({
            format: 'n0',
            min: 0,
            value: widthVal,
            placeholder: tableWidth,
            floatLabelType: 'Auto',
            enableRtl: this.parent.enableRtl, locale: this.parent.locale
        });
        widthNum.isStringTemplate = true;
        widthNum.appendTo(tableWrap.querySelector('#tableWidth'));
        const padding = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_3__.NumericTextBox({
            format: 'n0',
            min: 0,
            // eslint-disable-next-line
            value: padVal !== '' ? parseInt(padVal, null) : 0,
            placeholder: cellPadding,
            floatLabelType: 'Auto',
            enableRtl: this.parent.enableRtl, locale: this.parent.locale
        });
        padding.isStringTemplate = true;
        padding.appendTo(tableWrap.querySelector('#cellPadding'));
        const spacing = new _syncfusion_ej2_inputs__WEBPACK_IMPORTED_MODULE_3__.NumericTextBox({
            format: 'n0',
            min: 0,
            // eslint-disable-next-line
            value: brdSpcVal !== '' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(brdSpcVal) ? parseInt(brdSpcVal, null) : 0,
            placeholder: cellSpacing,
            floatLabelType: 'Auto',
            enableRtl: this.parent.enableRtl, locale: this.parent.locale
        });
        spacing.isStringTemplate = true;
        spacing.appendTo(tableWrap.querySelector('#cellSpacing'));
        return tableWrap;
    }
    /**
     * Destroys the ToolBar.
     *
     * @function destroy
     * @returns {void}
     * @hidden
     * @deprecated
     */
    destroy() {
        this.removeEventListener();
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {void}
     */
    getModuleName() {
        return 'table';
    }
}

/**
 * Dialog Renderer
 */
class DialogRenderer {
    constructor(parent) {
        this.parent = parent;
    }
    /**
     * dialog render method
     *
     * @param {DialogModel} e - specifies the dialog model.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    render(e) {
        let dlgObj;
        e.beforeOpen = this.beforeOpen.bind(this);
        e.open = this.open.bind(this);
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.close)) {
            e.close = this.close.bind(this);
        }
        e.beforeClose = this.beforeClose.bind(this);
        // eslint-disable-next-line
        dlgObj = new _syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_4__.Dialog(e);
        dlgObj.isStringTemplate = true;
        return dlgObj;
    }
    beforeOpen(args) {
        this.parent.trigger(beforeDialogOpen, args, this.beforeOpenCallback.bind(this, args));
    }
    beforeOpenCallback(args) {
        if (args.cancel) {
            this.parent.notify(clearDialogObj, null);
        }
    }
    open(args) {
        this.parent.trigger(dialogOpen, args);
    }
    beforeClose(args) {
        this.parent.trigger(beforeDialogClose, args, (closeArgs) => {
            if (!closeArgs.cancel) {
                if (closeArgs.container.classList.contains('e-popup-close')) {
                    closeArgs.cancel = true;
                }
            }
        });
    }
    /**
     * dialog close method
     *
     * @param {Object} args - specifies the arguments.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    close(args) {
        this.parent.trigger(dialogClose, args);
    }
}

/**
 * Renderer
 */

/**
 * @hidden
 * @deprecated
 */
const executeGroup = {
    'bold': {
        command: 'Style',
        subCommand: 'Bold',
        value: 'strong'
    },
    'italic': {
        command: 'Style',
        subCommand: 'Italic',
        value: 'em'
    },
    'underline': {
        command: 'Style',
        subCommand: 'Underline',
        value: 'span'
    },
    'strikeThrough': {
        command: 'Style',
        subCommand: 'StrikeThrough',
        value: 'span'
    },
    'insertCode': {
        command: 'Formats',
        subCommand: 'Pre',
        value: 'pre'
    },
    'superscript': {
        command: 'Effects',
        subCommand: 'SuperScript',
        value: 'sup'
    },
    'subscript': {
        command: 'Effects',
        subCommand: 'SubScript',
        value: 'sub'
    },
    'uppercase': {
        command: 'Casing',
        subCommand: 'UpperCase'
    },
    'lowercase': {
        command: 'Casing',
        subCommand: 'LowerCase'
    },
    'fontColor': {
        command: 'font',
        subCommand: 'fontcolor',
        value: '#ff0000'
    },
    'fontName': {
        command: 'font',
        subCommand: 'fontname',
        value: 'Segoe UI'
    },
    'fontSize': {
        command: 'font',
        subCommand: 'fontsize',
        value: '10pt'
    },
    'backColor': {
        command: 'font',
        subCommand: 'backgroundcolor',
        value: '#ffff00'
    },
    'justifyCenter': {
        command: 'Alignments',
        subCommand: 'JustifyCenter'
    },
    'justifyFull': {
        command: 'Alignments',
        subCommand: 'JustifyFull'
    },
    'justifyLeft': {
        command: 'Alignments',
        subCommand: 'JustifyLeft'
    },
    'justifyRight': {
        command: 'Alignments',
        subCommand: 'JustifyRight'
    },
    'undo': {
        command: 'Actions',
        subCommand: 'Undo'
    },
    'redo': {
        command: 'Actions',
        subCommand: 'Redo'
    },
    'createLink': {
        command: 'Links',
        subCommand: 'createLink'
    },
    'editLink': {
        command: 'Links',
        subCommand: 'createLink'
    },
    'createImage': {
        command: 'Images',
        subCommand: 'Images'
    },
    'formatBlock': {
        command: 'Formats',
        value: 'P'
    },
    'heading': {
        command: 'Formats',
        value: 'H1'
    },
    'indent': {
        command: 'Indents',
        subCommand: 'Indent'
    },
    'outdent': {
        command: 'Indents',
        subCommand: 'Outdent'
    },
    'insertHTML': {
        command: 'InsertHTML',
        subCommand: 'InsertHTML',
        value: ''
    },
    'insertText': {
        command: 'InsertText',
        subCommand: 'InsertText',
        value: ''
    },
    'insertHorizontalRule': {
        command: 'InsertHTML',
        subCommand: 'InsertHTML',
        value: '<hr/>'
    },
    'insertImage': {
        command: 'Images',
        subCommand: 'Image'
    },
    'editImage': {
        command: 'Images',
        subCommand: 'Image'
    },
    'insertTable': {
        command: 'Table',
        subCommand: 'CreateTable'
    },
    'insertBrOnReturn': {
        command: 'InsertHTML',
        subCommand: 'InsertHTML',
        value: '<br/>'
    },
    'insertOrderedList': {
        command: 'Lists',
        value: 'OL'
    },
    'insertUnorderedList': {
        command: 'Lists',
        value: 'UL'
    },
    'insertParagraph': {
        command: 'Formats',
        value: 'P'
    },
    'removeFormat': {
        command: 'Clear',
        subCommand: 'ClearFormat'
    }
};

var __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Configures the toolbar settings of the RichTextEditor.
 */
class ToolbarSettings$1 extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty {
}
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], ToolbarSettings$1.prototype, "enable", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], ToolbarSettings$1.prototype, "enableFloating", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(ToolbarType.Expand)
], ToolbarSettings$1.prototype, "type", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(predefinedItems)
], ToolbarSettings$1.prototype, "items", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)({})
], ToolbarSettings$1.prototype, "itemConfigs", void 0);
/**
 * Configures the image settings of the RichTextEditor.
 */
class ImageSettings extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty {
}
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(['.jpeg', '.jpg', '.png'])
], ImageSettings.prototype, "allowedTypes", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('inline')
], ImageSettings.prototype, "display", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Blob')
], ImageSettings.prototype, "saveFormat", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('auto')
], ImageSettings.prototype, "width", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('auto')
], ImageSettings.prototype, "height", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], ImageSettings.prototype, "saveUrl", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], ImageSettings.prototype, "path", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], ImageSettings.prototype, "resize", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], ImageSettings.prototype, "removeUrl", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)
], ImageSettings.prototype, "minWidth", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], ImageSettings.prototype, "maxWidth", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)
], ImageSettings.prototype, "minHeight", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], ImageSettings.prototype, "maxHeight", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], ImageSettings.prototype, "resizeByPercent", void 0);
/**
 * Configures the file manager settings of the RichTextEditor.
 */
class FileManagerSettings extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty {
}
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ getImageUrl: null, url: null, uploadUrl: null }, _syncfusion_ej2_filemanager__WEBPACK_IMPORTED_MODULE_6__.AjaxSettings)
], FileManagerSettings.prototype, "ajaxSettings", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], FileManagerSettings.prototype, "allowDragAndDrop", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ visible: true, file: ['Open', '|', 'Cut', 'Copy', '|', 'Delete', 'Rename', '|', 'Details'], folder: ['Open', '|', 'Cut', 'Copy', 'Paste', '|', 'Delete', 'Rename', '|', 'Details'], layout: ['SortBy', 'View', 'Refresh', '|', 'Paste', '|', 'NewFolder', 'Upload', '|', 'Details', '|', 'SelectAll'] }, _syncfusion_ej2_filemanager__WEBPACK_IMPORTED_MODULE_6__.ContextMenuSettings)
], FileManagerSettings.prototype, "contextMenuSettings", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('')
], FileManagerSettings.prototype, "cssClass", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _syncfusion_ej2_filemanager__WEBPACK_IMPORTED_MODULE_6__.DetailsViewSettings)
], FileManagerSettings.prototype, "detailsViewSettings", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], FileManagerSettings.prototype, "enable", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ maxWidth: '650px', minWidth: '240px', visible: true }, _syncfusion_ej2_filemanager__WEBPACK_IMPORTED_MODULE_6__.NavigationPaneSettings)
], FileManagerSettings.prototype, "navigationPaneSettings", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('/')
], FileManagerSettings.prototype, "path", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], FileManagerSettings.prototype, "rootAliasName", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, _syncfusion_ej2_filemanager__WEBPACK_IMPORTED_MODULE_6__.SearchSettings)
], FileManagerSettings.prototype, "searchSettings", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], FileManagerSettings.prototype, "showFileExtension", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], FileManagerSettings.prototype, "showHiddenItems", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], FileManagerSettings.prototype, "showThumbnail", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Ascending')
], FileManagerSettings.prototype, "sortOrder", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ visible: true, items: ['NewFolder', 'Upload', 'Cut', 'Copy', 'Paste', 'Delete', 'Download', 'Rename', 'SortBy', 'Refresh', 'Selection', 'View', 'Details'] }, _syncfusion_ej2_filemanager__WEBPACK_IMPORTED_MODULE_6__.ToolbarSettings)
], FileManagerSettings.prototype, "toolbarSettings", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({ autoUpload: true, minFileSize: 0, maxFileSize: 30000000, allowedExtensions: '', autoClose: false }, _syncfusion_ej2_filemanager__WEBPACK_IMPORTED_MODULE_6__.UploadSettings)
], FileManagerSettings.prototype, "uploadSettings", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('LargeIcons')
], FileManagerSettings.prototype, "view", void 0);
class TableSettings extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty {
}
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('100%')
], TableSettings.prototype, "width", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(TableStyleItems)
], TableSettings.prototype, "styles", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], TableSettings.prototype, "resize", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)
], TableSettings.prototype, "minWidth", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], TableSettings.prototype, "maxWidth", void 0);
/**
 * Configures the quick toolbar settings of the RichTextEditor.
 */
class QuickToolbarSettings extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty {
}
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], QuickToolbarSettings.prototype, "enable", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], QuickToolbarSettings.prototype, "showOnRightClick", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('hide')
], QuickToolbarSettings.prototype, "actionOnScroll", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(['Open', 'Edit', 'UnLink'])
], QuickToolbarSettings.prototype, "link", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(['Replace', 'Align', 'Caption', 'Remove', '-', 'InsertLink', 'OpenImageLink', 'EditImageLink', 'RemoveImageLink', 'Display', 'AltText', 'Dimension'])
], QuickToolbarSettings.prototype, "image", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(['Cut', 'Copy', 'Paste'])
], QuickToolbarSettings.prototype, "text", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(['TableHeader', 'TableRows', 'TableColumns', 'BackgroundColor', '-', 'TableRemove', 'Alignments', 'TableCellVerticalAlign', 'Styles'])
], QuickToolbarSettings.prototype, "table", void 0);
/**
 * Configures the Paste Cleanup settings of the RichTextEditor.
 */
class PasteCleanupSettings extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty {
}
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], PasteCleanupSettings.prototype, "prompt", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], PasteCleanupSettings.prototype, "deniedAttrs", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(['background', 'background-color', 'border', 'border-bottom', 'border-left', 'border-radius', 'border-right', 'border-style', 'border-top', 'border-width', 'clear', 'color', 'cursor', 'direction', 'display', 'float', 'font', 'font-family', 'font-size', 'font-weight', 'font-style', 'height', 'left', 'line-height', 'list-style-type', 'margin', 'margin-top', 'margin-left', 'margin-right', 'margin-bottom', 'max-height', 'max-width', 'min-height', 'min-width', 'overflow', 'overflow-x', 'overflow-y', 'padding', 'padding-bottom', 'padding-left', 'padding-right', 'padding-top', 'position', 'right', 'table-layout', 'text-align', 'text-decoration', 'text-indent', 'top', 'vertical-align', 'visibility', 'white-space', 'width'])
], PasteCleanupSettings.prototype, "allowedStyleProps", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], PasteCleanupSettings.prototype, "deniedTags", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], PasteCleanupSettings.prototype, "keepFormat", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], PasteCleanupSettings.prototype, "plainText", void 0);
/**
 * Configures the font family settings of the RichTextEditor.
 */
class FontFamily extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty {
}
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], FontFamily.prototype, "default", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('65px')
], FontFamily.prototype, "width", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(fontFamily)
], FontFamily.prototype, "items", void 0);
/**
 * Configures the font size settings of the RichTextEditor.
 */
class FontSize extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty {
}
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], FontSize.prototype, "default", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('35px')
], FontSize.prototype, "width", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(fontSize)
], FontSize.prototype, "items", void 0);
/**
 * Configures the format settings of the RichTextEditor.
 */
class Format extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty {
}
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], Format.prototype, "default", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('65px')
], Format.prototype, "width", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(formatItems)
], Format.prototype, "types", void 0);
/**
 * Configures the font Color settings of the RichTextEditor.
 */
class FontColor extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty {
}
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('#ff0000')
], FontColor.prototype, "default", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Palette')
], FontColor.prototype, "mode", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(10)
], FontColor.prototype, "columns", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(fontColor)
], FontColor.prototype, "colorCode", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], FontColor.prototype, "modeSwitcher", void 0);
/**
 * Configures the background Color settings of the RichTextEditor.
 */
class BackgroundColor extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty {
}
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('#ffff00')
], BackgroundColor.prototype, "default", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('Palette')
], BackgroundColor.prototype, "mode", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(10)
], BackgroundColor.prototype, "columns", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(backgroundColor)
], BackgroundColor.prototype, "colorCode", void 0);
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], BackgroundColor.prototype, "modeSwitcher", void 0);
/**
 * Configures the numberFormatList settings of the RichTextEditor.
 */
class NumberFormatList extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty {
}
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(numberFormatList)
], NumberFormatList.prototype, "types", void 0);
/**
 * Configures the bulletFormatList settings of the RichTextEditor.
 */
class BulletFormatList extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty {
}
__decorate$2([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(bulletFormatList)
], BulletFormatList.prototype, "types", void 0);

var __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Objects used for configuring the iframe resources properties.
 */
class Resources extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty {
}
__decorate$3([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)([])
], Resources.prototype, "styles", void 0);
__decorate$3([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)([])
], Resources.prototype, "scripts", void 0);
/**
 * Configures the iframe settings of the RTE.
 */
class IFrameSettings extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty {
}
__decorate$3([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], IFrameSettings.prototype, "enable", void 0);
__decorate$3([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], IFrameSettings.prototype, "attributes", void 0);
__decorate$3([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, Resources)
], IFrameSettings.prototype, "resources", void 0);

var __decorate$4 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Configures the inlineMode property of the RTE.
 */
class InlineMode extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.ChildProperty {
}
__decorate$4([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], InlineMode.prototype, "enable", void 0);
__decorate$4([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], InlineMode.prototype, "onSelection", void 0);

/**
 * `EnterKey` module is used to handle enter key press actions.
 */
class EnterKeyAction {
    constructor(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    addEventListener() {
        this.parent.on(enterHandler, this.enterHandler, this);
        this.parent.on(destroy, this.destroy, this);
    }
    destroy() {
        this.removeEventListener();
    }
    removeEventListener() {
        this.parent.off(enterHandler, this.enterHandler);
        this.parent.off(destroy, this.destroy);
    }
    getRangeNode() {
        this.range = this.parent.getRange();
        this.startNode = this.range.startContainer.nodeName === '#text' ? this.range.startContainer.parentElement :
            this.range.startContainer;
        this.endNode = this.range.endContainer.nodeName === '#text' ? this.range.endContainer.parentElement :
            this.range.endContainer;
    }
    enterHandler(e) {
        this.getRangeNode();
        let isTableEnter = true;
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.startNode.closest('TABLE')) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.endNode.closest('TABLE'))) {
            isTableEnter = false;
            let curElement = this.startNode;
            let blockElement = curElement;
            while (!this.parent.formatter.editorManager.domNode.isBlockNode(curElement)) {
                blockElement = curElement;
                curElement = curElement.parentElement;
            }
            isTableEnter = blockElement.tagName === 'TD' ? false : true;
        }
        if (e.args.which === 13 && e.args.code === 'Enter') {
            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.startNode.closest('LI')) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.endNode.closest('LI')) && isTableEnter &&
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.startNode.closest('PRE')) && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.endNode.closest('PRE'))) {
                const shiftKey = e.args.shiftKey;
                const actionBeginArgs = {
                    cancel: false,
                    name: actionBegin,
                    requestType: shiftKey ? 'ShiftEnterAction' : 'EnterAction',
                    originalEvent: e.args
                };
                this.parent.trigger(actionBegin, actionBeginArgs, (actionBeginArgs) => {
                    if (!actionBeginArgs.cancel) {
                        if (!(this.range.startOffset === this.range.endOffset && this.range.startContainer === this.range.endContainer)) {
                            this.range.deleteContents();
                            if (this.range.startContainer.nodeName === '#text' && this.range.startContainer.textContent.length === 0 &&
                                this.range.startContainer.parentElement !== this.parent.inputElement) {
                                if (this.parent.enterKey === 'BR') {
                                    this.range.startContainer.parentElement.innerHTML = '&#8203;';
                                }
                                else {
                                    this.range.startContainer.parentElement.innerHTML = '<br>';
                                }
                            }
                            else if (this.range.startContainer === this.parent.inputElement && this.range.startContainer.innerHTML === '') {
                                this.range.startContainer.innerHTML = '<br>';
                                const focusElem = this.range.startContainer.childNodes[this.range.startOffset];
                                this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), focusElem, 0);
                            }
                            else if (this.parent.inputElement === this.range.startContainer) {
                                const focusElem = this.range.startContainer.childNodes[this.range.startOffset];
                                if (focusElem.nodeName === '#text' && focusElem.textContent.length === 0) {
                                    this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), focusElem, focusElem.previousSibling.textContent.length);
                                }
                                else {
                                    this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), focusElem, focusElem.textContent.length >= 0 ? 0 : 1);
                                    if (focusElem.previousSibling.textContent.length === 0) {
                                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(focusElem.previousSibling);
                                    }
                                    else if (focusElem.textContent.length === 0) {
                                        let currentFocusElem = focusElem.previousSibling.lastChild;
                                        while (currentFocusElem.nodeName !== '#text') {
                                            currentFocusElem = currentFocusElem.lastChild;
                                        }
                                        this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), currentFocusElem, currentFocusElem.textContent.length);
                                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(focusElem);
                                    }
                                    else if (this.parent.enterKey !== 'BR' &&
                                        focusElem.previousSibling.textContent.length !== 0 && focusElem.textContent.length !== 0) {
                                        e.args.preventDefault();
                                        return;
                                    }
                                }
                                this.getRangeNode();
                            }
                        }
                        if (this.range.startContainer === this.range.endContainer &&
                            this.range.startOffset === this.range.endOffset && this.range.startContainer === this.parent.inputElement) {
                            this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), this.range.startContainer.childNodes[this.range.startOffset], 0);
                            this.getRangeNode();
                        }
                        if ((this.parent.enterKey === 'P' && !shiftKey) || (this.parent.enterKey === 'DIV' && !shiftKey) ||
                            (this.parent.shiftEnterKey === 'P' && shiftKey) ||
                            (this.parent.shiftEnterKey === 'DIV' && shiftKey)) {
                            let nearBlockNode;
                            if (isTableEnter && this.parent.formatter.editorManager.domNode.isBlockNode(this.startNode)) {
                                nearBlockNode = this.startNode;
                            }
                            else {
                                nearBlockNode = this.parent.formatter.editorManager.domNode.blockParentNode(this.startNode);
                            }
                            let isImageNode = false;
                            let isFocusedFirst = false;
                            if (this.range.startOffset != 0 && this.range.endOffset != 0 && this.range.startContainer === this.range.endContainer &&
                                !(!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(nearBlockNode.childNodes[0]) && nearBlockNode.childNodes[0].nodeName === 'IMG')) {
                                let startNodeText = this.range.startContainer.textContent;
                                let splitFirstText = startNodeText.substring(0, this.range.startOffset);
                                if (splitFirstText.charCodeAt(this.range.startOffset - 1) != 160 && splitFirstText.trim().length === 0) {
                                    isFocusedFirst = true;
                                }
                            }
                            else if (this.range.startOffset === 0 && this.range.endOffset === 0) {
                                isFocusedFirst = true;
                            }
                            this.removeBRElement(nearBlockNode);
                            if (((this.range.startOffset === 0 && this.range.endOffset === 0) || isFocusedFirst) &&
                                !(!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.range.startContainer.previousSibling) &&
                                    (this.range.startContainer.previousSibling.nodeName === 'IMG' || this.range.startContainer.previousSibling.nodeName === 'BR'))) {
                                let isNearBlockLengthZero;
                                let newElem;
                                if (this.range.startContainer.nodeName === 'IMG') {
                                    newElem = this.createInsertElement(shiftKey);
                                    isImageNode = true;
                                    isNearBlockLengthZero = false;
                                }
                                else {
                                    if (nearBlockNode.textContent.trim().length !== 0) {
                                        newElem = this.parent.formatter.editorManager.nodeCutter.SplitNode(this.range, nearBlockNode, false).cloneNode(true);
                                        isNearBlockLengthZero = false;
                                    }
                                    else {
                                        newElem = this.parent.formatter.editorManager.nodeCutter.SplitNode(this.range, nearBlockNode, true).cloneNode(true);
                                        isNearBlockLengthZero = true;
                                    }
                                }
                                const insertElem = this.createInsertElement(shiftKey);
                                while (newElem.firstChild) {
                                    insertElem.appendChild(newElem.firstChild);
                                }
                                nearBlockNode.parentElement.insertBefore(insertElem, nearBlockNode);
                                if (!isNearBlockLengthZero) {
                                    let currentFocusElem = insertElem;
                                    let finalFocusElem;
                                    while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentFocusElem) && currentFocusElem.nodeName !== '#text') {
                                        finalFocusElem = currentFocusElem;
                                        currentFocusElem = currentFocusElem.lastChild;
                                    }
                                    finalFocusElem.innerHTML = '<br>';
                                    if (!isImageNode) {
                                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(nearBlockNode);
                                    }
                                }
                                this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), insertElem.nextElementSibling, 0);
                            }
                            else if (nearBlockNode.textContent.length === 0 && !(!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(nearBlockNode.childNodes[0]) && nearBlockNode.childNodes[0].nodeName === 'IMG')) {
                                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(nearBlockNode.children[0]) && nearBlockNode.children[0].tagName !== 'BR') {
                                    const newElem = this.parent.formatter.editorManager.nodeCutter.SplitNode(this.range, nearBlockNode, false).cloneNode(true);
                                    this.parent.formatter.editorManager.domNode.insertAfter(newElem, nearBlockNode);
                                    this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), newElem, newElem.textContent.length >= 0 ? 0 : 1);
                                }
                                else {
                                    const insertElem = this.createInsertElement(shiftKey);
                                    insertElem.innerHTML = '<br>';
                                    this.parent.formatter.editorManager.domNode.insertAfter(insertElem, nearBlockNode);
                                    this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), insertElem, 0);
                                }
                            }
                            else {
                                const newElem = this.parent.formatter.editorManager.nodeCutter.SplitNode(this.range, nearBlockNode, true);
                                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(newElem.childNodes[0]) && newElem.childNodes[0].nodeName === '#text' &&
                                    newElem.childNodes[0].textContent.length === 0) {
                                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(newElem.childNodes[0]);
                                }
                                if (newElem.textContent.trim().length === 0) {
                                    const brElm = this.parent.createElement('br');
                                    if (this.startNode.nodeName === 'A') {
                                        let startParentElem = this.startNode.parentElement;
                                        this.startNode.parentElement.insertBefore(brElm, this.startNode);
                                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.startNode);
                                        this.startNode = startParentElem;
                                    }
                                    else {
                                        this.startNode.appendChild(brElm);
                                    }
                                    if (newElem.childNodes[0].textContent === '\n') {
                                        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(newElem.childNodes[0]);
                                    }
                                    this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), this.startNode, 0);
                                }
                                if (((this.parent.enterKey === 'P' || this.parent.enterKey === 'DIV') && !shiftKey) || ((this.parent.shiftEnterKey === 'DIV' ||
                                    this.parent.shiftEnterKey === 'P') && shiftKey)) {
                                    const insertElm = this.createInsertElement(shiftKey);
                                    while (newElem.firstChild) {
                                        insertElm.appendChild(newElem.firstChild);
                                    }
                                    this.parent.formatter.editorManager.domNode.insertAfter(insertElm, newElem);
                                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(newElem);
                                    this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), this.parent.formatter.editorManager.domNode.isBlockNode(this.startNode) ?
                                        insertElm : this.startNode, 0);
                                }
                            }
                            e.args.preventDefault();
                        }
                        if ((this.parent.enterKey === 'BR' && !shiftKey) || (this.parent.shiftEnterKey === 'BR' && shiftKey)) {
                            let currentParent;
                            if (!this.parent.formatter.editorManager.domNode.isBlockNode(this.startNode)) {
                                let currentNode = this.startNode;
                                let previousNode = currentNode;
                                while (!this.parent.formatter.editorManager.domNode.isBlockNode(currentNode)) {
                                    previousNode = currentNode;
                                    currentNode = currentNode.parentElement;
                                }
                                currentParent = currentNode === this.parent.inputElement ?
                                    previousNode : currentNode;
                            }
                            else {
                                currentParent = this.startNode;
                            }
                            this.removeBRElement(currentParent);
                            let currentParentLastChild = currentParent.lastChild;
                            while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentParentLastChild) && !(currentParentLastChild.nodeName === '#text' || currentParentLastChild.nodeName === 'BR')) {
                                currentParentLastChild = currentParentLastChild.lastChild;
                            }
                            const isLastNodeLength = this.range.startContainer === currentParentLastChild ?
                                this.range.startContainer.textContent.length : currentParent.textContent.length;
                            if (currentParent !== this.parent.inputElement &&
                                this.parent.formatter.editorManager.domNode.isBlockNode(currentParent) &&
                                this.range.startOffset === this.range.endOffset &&
                                this.range.startOffset === isLastNodeLength) {
                                const focusBRElem = this.parent.createElement('br');
                                if (currentParentLastChild.nodeName === 'BR' && currentParent.textContent.length === 0) {
                                    this.parent.formatter.editorManager.domNode.insertAfter(focusBRElem, currentParentLastChild);
                                }
                                else {
                                    const lineBreakBRElem = this.parent.createElement('br');
                                    this.parent.formatter.editorManager.domNode.insertAfter(focusBRElem, this.range.startContainer);
                                    this.parent.formatter.editorManager.domNode.insertAfter(lineBreakBRElem, this.range.startContainer);
                                }
                                this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), focusBRElem, 0);
                            }
                            else if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentParent) && currentParent !== this.parent.inputElement && currentParent.nodeName !== 'BR') {
                                if (currentParent.textContent.trim().length === 0 || (currentParent.textContent.trim().length === 1 &&
                                    currentParent.textContent.charCodeAt(0) === 8203)) {
                                    const newElem = this.parent.formatter.editorManager.nodeCutter.SplitNode(this.range, currentParent, true).cloneNode(true);
                                    this.parent.formatter.editorManager.domNode.insertAfter(newElem, currentParent);
                                    const outerBRElem = this.parent.createElement('br');
                                    newElem.parentElement.insertBefore(outerBRElem, newElem);
                                    this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), newElem, 0);
                                }
                                else {
                                    let newElem;
                                    const outerBRElem = this.parent.createElement('br');
                                    if (this.range.startOffset === 0 && this.range.endOffset === 0 &&
                                        !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentParent.previousSibling) && currentParent.previousSibling.nodeName === 'BR') {
                                        newElem = this.parent.formatter.editorManager.nodeCutter.SplitNode(this.range, currentParent, false).cloneNode(true);
                                        this.parent.formatter.editorManager.domNode.insertAfter(outerBRElem, currentParent);
                                        this.insertFocusContent();
                                        let currentFocusElem = outerBRElem.nextSibling;
                                        while (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentFocusElem) && currentFocusElem.nodeName !== '#text') {
                                            currentFocusElem = currentFocusElem.lastChild;
                                        }
                                        this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), currentFocusElem, 0);
                                        
                                    }
                                    else {
                                        this.insertBRElement();
                                    }
                                }
                            }
                            else {
                                this.insertBRElement();
                            }
                            e.args.preventDefault();
                        }
                        this.parent.trigger(actionComplete, { requestType: shiftKey ? 'ShiftEnterAction' : 'EnterAction', args: e.args });
                    }
                });
            }
        }
    }
    removeBRElement(currentElement) {
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.userAgent.indexOf('Firefox') != -1 &&
            this.range.endOffset === currentElement.textContent.length &&
            currentElement.lastChild.nodeName === 'BR') {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(currentElement.lastChild);
        }
    }
    insertBRElement() {
        let isEmptyBrInserted = false;
        const brElm = this.parent.createElement('br');
        if (this.startNode.nodeName === 'BR' && this.endNode.nodeName === 'BR' && this.range.startOffset === 0 && this.range.startOffset === this.range.endOffset) {
            this.parent.formatter.editorManager.domNode.insertAfter(brElm, this.startNode);
            isEmptyBrInserted = true;
        }
        else {
            if (this.startNode === this.parent.inputElement && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.range.startContainer.previousSibling) &&
                this.range.startContainer.previousSibling.nodeName === 'BR' && this.range.startContainer.textContent.length === 0) {
                isEmptyBrInserted = true;
            }
            this.range.insertNode(brElm);
        }
        if (isEmptyBrInserted || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(brElm.nextElementSibling) && brElm.nextElementSibling.tagName === 'BR') || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(brElm.nextSibling) && brElm.nextSibling.textContent.length > 0)) {
            this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(brElm.nextSibling) ? brElm.nextSibling : brElm, 0);
            isEmptyBrInserted = false;
        }
        else {
            const brElm2 = this.parent.createElement('br');
            this.range.insertNode(brElm2);
            this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), brElm, 0);
        }
    }
    insertFocusContent() {
        if (this.range.startContainer.textContent.length === 0) {
            if (this.range.startContainer.nodeName === '#text') {
                this.range.startContainer.parentElement.innerHTML = '&#8203;';
            }
            else {
                this.range.startContainer.innerHTML = '&#8203;';
            }
        }
    }
    createInsertElement(shiftKey) {
        let insertElem;
        if ((this.parent.enterKey === 'DIV' && !shiftKey) || (this.parent.shiftEnterKey === 'DIV' && shiftKey)) {
            insertElem = this.parent.createElement('div');
        }
        else if ((this.parent.enterKey === 'P' && !shiftKey) || (this.parent.shiftEnterKey === 'P' && shiftKey)) {
            insertElem = this.parent.createElement('p');
        }
        return insertElem;
    }
}

var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Represents the Rich Text Editor component.
 * ```html
 * <textarea id="rte"></textarea>
 * <script>
 *  var rteObj = new RichTextEditor();
 *  rteObj.appendTo("#rte");
 * </script>
 * ```
 */
let RichTextEditor = class RichTextEditor extends _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Component {
    constructor(options, element) {
        super(options, element);
        this.defaultResetValue = null;
        this.isResizeInitialized = false;
        /**
         * @hidden
         * @deprecated
         */
        this.isFocusOut = false;
        /**
         * @hidden
         * @deprecated
         */
        this.isRTE = false;
        /**
         * @hidden
         * @deprecated
         */
        this.isBlur = true;
        this.needsID = true;
    }
    /**
     * To provide the array of modules needed for component rendering
     *
     * @returns {ModuleDeclaration[]} - specifies the declaration.
     * @hidden
     * @deprecated
     */
    requiredModules() {
        const modules = [];
        if (this.toolbarSettings.enable) {
            modules.push({ member: 'toolbar', args: [this, this.serviceLocator] });
            modules.push({
                member: 'link',
                args: [this, this.serviceLocator]
            });
            modules.push({
                member: 'table',
                args: [this, this.serviceLocator]
            });
            modules.push({
                member: 'image',
                args: [this, this.serviceLocator]
            });
            if (this.quickToolbarSettings.enable) {
                modules.push({ member: 'quickToolbar', args: [this, this.serviceLocator] });
            }
        }
        if (this.showCharCount) {
            modules.push({ member: 'count', args: [this, this.serviceLocator] });
        }
        if (this.editorMode === 'Markdown') {
            modules.push({ member: 'markdownEditor', args: [this, this.serviceLocator] });
        }
        if (this.editorMode === 'HTML') {
            modules.push({ member: 'htmlEditor', args: [this, this.serviceLocator] });
            modules.push({ member: 'pasteCleanup', args: [this, this.serviceLocator] });
        }
        if (this.fileManagerSettings.enable) {
            modules.push({ member: 'fileManager', args: [this, this.serviceLocator] });
        }
        if (this.enableResize) {
            modules.push({ member: 'resize', args: [this] });
        }
        return modules;
    }
    updateEnable() {
        if (this.enabled) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], CLS_DISABLED);
            this.element.setAttribute('aria-disabled', 'false');
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.htmlAttributes.tabindex)) {
                this.inputElement.setAttribute('tabindex', this.htmlAttributes.tabindex);
            }
            else {
                this.inputElement.setAttribute('tabindex', '0');
            }
        }
        else {
            if (this.getToolbar()) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)(this.getToolbar().querySelectorAll('.' + CLS_ACTIVE), CLS_ACTIVE);
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.getToolbar()], [CLS_TB_FLOAT, CLS_TB_ABS_FLOAT]);
            }
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], CLS_DISABLED);
            this.element.tabIndex = -1;
            this.element.setAttribute('aria-disabled', 'true');
            this.inputElement.setAttribute('tabindex', '-1');
        }
    }
    /**
     * setEnable method
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    setEnable() {
        this.updateEnable();
        // eslint-disable-next-line
        (this.enabled) ? this.eventInitializer() : this.unWireEvents();
    }
    /**
     * For internal use only - Initialize the event handler;
     *
     * @returns {void}
     * @hidden
     * @private
     */
    preRender() {
        this.onBlurHandler = this.blurHandler.bind(this);
        this.onFocusHandler = this.focusHandler.bind(this);
        this.onResizeHandler = this.resizeHandler.bind(this);
        this.clickPoints = { clientX: 0, clientY: 0 };
        this.initialValue = this.value;
        this.serviceLocator = new ServiceLocator;
        this.initializeServices();
        this.setContainer();
        this.persistData();
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(this.element, { 'width': (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(this.width) });
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.attributes)(this.element, { role: 'application' });
    }
    persistData() {
        if (this.enablePersistence && this.originalElement.tagName === 'TEXTAREA') {
            this.element.id = this.originalElement.id + '_wrapper';
            const data = window.localStorage.getItem(this.getModuleName() + this.element.id);
            if (!((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(data) || (data === ''))) {
                this.setProperties(JSON.parse(data), true);
            }
        }
    }
    setContainer() {
        this.originalElement = this.element.cloneNode(true);
        if (this.value === null || this.valueTemplate !== null) {
            this.setValue();
        }
        if (this.element.hasAttribute('tabindex')) {
            this.htmlAttributes = { 'tabindex': this.element.getAttribute('tabindex') };
            this.element.removeAttribute('tabindex');
        }
        this.element.innerHTML = '';
        const invalidAttr = ['class', 'style', 'id', 'ejs-for'];
        const htmlAttr = {};
        for (let a = 0; a < this.element.attributes.length; a++) {
            if (invalidAttr.indexOf(this.element.attributes[a].name) === -1 &&
                !(/^data-val/.test(this.element.attributes[a].name))) { // data-val for asp.net core data annotation validation.
                htmlAttr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);
            }
        }
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.extend)(htmlAttr, this.htmlAttributes, htmlAttr);
        this.setProperties({ htmlAttributes: htmlAttr }, true);
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.htmlAttributes.id)) {
            this.element.id = this.htmlAttributes.id;
        }
        if (this.element.tagName === 'TEXTAREA') {
            const rteOuterWrapper = this.createElement('div', {
                className: this.element.getAttribute('class')
            });
            this.element.innerHTML = '';
            this.element.parentElement.insertBefore(rteOuterWrapper, this.element);
            this.valueContainer = this.element;
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.valueContainer], this.element.getAttribute('class').split(' '));
            this.element = rteOuterWrapper;
        }
        else {
            this.valueContainer = this.createElement('textarea', {
                id: this.getID() + '-value'
            });
        }
        this.valueContainer.name = this.getID();
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.valueContainer], CLS_RTE_HIDDEN);
        this.element.appendChild(this.valueContainer);
    }
    /**
     * getPersistData method
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getPersistData() {
        return this.addOnPersist(['value']);
    }
    /**
     * Focuses the Rich Text Editor component
     *
     * @returns {void}
     * @public
     */
    focusIn() {
        if (this.enabled) {
            this.inputElement.focus();
            this.focusHandler({});
        }
    }
    /**
     * Blurs the Rich Text Editor component
     *
     * @returns {void}
     * @public
     */
    focusOut() {
        if (this.enabled) {
            this.inputElement.blur();
            this.blurHandler({});
        }
    }
    /**
     * Selects all the content in RichTextEditor
     *
     * @returns {void}
     * @public
     */
    selectAll() {
        this.notify(selectAll$1, {});
    }
    /**
     * Selects a content range or an element
     *
     * @param {Range} range - Specify the range which you want to select within the content.
     * The method used to select a particular sentence or word or entire document.
     *
     * @returns {void}
     * @public
     */
    selectRange(range) {
        this.notify(selectRange, { range: range });
    }
    /**
     * Retrieves the HTML markup content from currently selected content of RichTextEditor.
     *
     * @returns {void}
     * @public
     */
    getSelection() {
        let str = '';
        this.notify(getSelectedHtml, {
            callBack: (txt) => {
                str = txt;
            }
        });
        return str;
    }
    /**
     * Executes the commands
     *
     * @returns {void}
     * @param {CommandName} commandName - Specifies the name of the command to be executed.
     * @param {string | HTMLElement | ILinkCommandsArgs | IImageCommandsArgs} value - Specifies the value that you want to execute.
     * @param {ExecuteCommandOption} option - specifies the command option
     * @public
     */
    executeCommand(commandName, value, option) {
        value = this.htmlPurifier(commandName, value);
        if (this.editorMode === 'HTML') {
            const range = this.getRange();
            if (this.iframeSettings.enable) {
                this.formatter.editorManager.nodeSelection.Clear(this.element.ownerDocument);
            }
            const toFocus = (this.iframeSettings.enable &&
                range.startContainer === this.inputElement) ? true : !this.inputElement.contains(range.startContainer);
            if (toFocus) {
                this.focusIn();
            }
        }
        const tool = executeGroup[commandName];
        if (option && option.undo) {
            if (option.undo && this.formatter.getUndoRedoStack().length === 0) {
                this.formatter.saveData();
            }
        }
        this.formatter.editorManager.execCommand(tool.command, tool.subCommand ? tool.subCommand : (value ? value : tool.value), null, null, (value ? value : tool.value), (value ? value : tool.value));
        if (option && option.undo) {
            this.formatter.saveData();
            this.formatter.enableUndo(this);
        }
        this.setPlaceHolder();
        this.notify(contentChanged, {});
    }
    htmlPurifier(command, value) {
        if (this.editorMode === 'HTML') {
            switch (command) {
                case 'insertHTML':
                    if (this.enableHtmlSanitizer) {
                        if (typeof value === 'string') {
                            value = this.htmlEditorModule.sanitizeHelper(value);
                        }
                        else {
                            value = this.htmlEditorModule.sanitizeHelper(value.outerHTML);
                        }
                    }
                    break;
                case 'insertTable':
                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(value.width)) {
                        value.width = { minWidth: this.tableSettings.minWidth,
                            maxWidth: this.tableSettings.maxWidth, width: this.tableSettings.width };
                    }
                    break;
                case 'insertImage': {
                    const temp = this.createElement('img', {
                        attrs: {
                            src: value.url
                        }
                    });
                    let imageValue = temp.outerHTML;
                    if (this.enableHtmlSanitizer) {
                        imageValue = this.htmlEditorModule.sanitizeHelper(temp.outerHTML);
                    }
                    let url = (imageValue !== '' && (this.createElement('div', {
                        innerHTML: imageValue
                    }).firstElementChild).getAttribute('src')) || null;
                    url = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(url) ? url : '';
                    value.url = url;
                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(value.width)) {
                        value.width = { minWidth: this.insertImageSettings.minWidth,
                            maxWidth: this.insertImageSettings.maxWidth, width: this.insertImageSettings.width };
                    }
                    if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(value.height)) {
                        value.height = { minHeight: this.insertImageSettings.minHeight,
                            maxHeight: this.insertImageSettings.maxHeight, height: this.insertImageSettings.height };
                    }
                    break;
                }
                case 'createLink': {
                    const tempNode = this.createElement('a', {
                        attrs: {
                            href: value.url
                        }
                    });
                    let linkValue = tempNode.outerHTML;
                    if (this.enableHtmlSanitizer) {
                        linkValue = this.htmlEditorModule.sanitizeHelper(tempNode.outerHTML);
                    }
                    let href = (linkValue !== '' && (this.createElement('div', {
                        innerHTML: linkValue
                    }).firstElementChild).getAttribute('href')) || null;
                    href = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(href) ? href : '';
                    value.url = href;
                    break;
                }
            }
        }
        return value;
    }
    encode(value) {
        const divNode = this.createElement('div');
        divNode.innerText = value.trim();
        // eslint-disable-next-line
        return divNode.innerHTML.replace(/<br\s*[\/]?>/gi, '\n');
    }
    /**
     * For internal use only - To Initialize the component rendering.
     *
     * @returns {void}
     * @private
     * @deprecated
     */
    render() {
        if (this.value && !this.valueTemplate) {
            this.setProperties({ value: this.serializeValue(this.value) }, true);
        }
        this.renderModule = new Render(this, this.serviceLocator);
        this.sourceCodeModule = new ViewSource(this, this.serviceLocator);
        this.notify(initialLoad, {});
        this.trigger(load);
        this.RTERender();
        // eslint-disable-next-line
        const execCommandCallBack$$1 = new ExecCommandCallBack(this);
        this.notify(initialEnd, {});
        if (this.enableXhtml) {
            this.setProperties({ value: this.getXhtml() }, true);
        }
        if (this.toolbarSettings.enable && this.toolbarSettings.type === 'Expand' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.getToolbar()) &&
            (this.toolbarSettings.items.indexOf('Undo') > -1 && this.toolbarSettings.items.indexOf('Redo') > -1)) {
            this.disableToolbarItem(['Undo', 'Redo']);
        }
        this.setContentHeight();
        if (this.value !== null) {
            this.valueContainer.defaultValue = this.value;
        }
        // eslint-disable-next-line
        (!this.enabled) ? this.unWireEvents() : this.eventInitializer();
        this.renderComplete();
    }
    /**
     * For internal use only - Initialize the event handler
     *
     * @returns {void}
     * @private
     * @deprecated
     * @hidden
     */
    eventInitializer() {
        this.wireEvents();
    }
    cleanList(e) {
        const range = this.getRange();
        const currentStartContainer = range.startContainer;
        const currentEndContainer = range.endContainer;
        let currentStartOffset = range.startOffset;
        let isSameContainer = currentStartContainer === currentEndContainer ? true : false;
        let currentEndOffset;
        const endNode = range.endContainer.nodeName === '#text' ? range.endContainer.parentElement :
            range.endContainer;
        let closestLI = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(endNode, 'LI');
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(closestLI) && endNode.textContent.length === range.endOffset &&
            !range.collapsed) {
            closestLI.textContent = closestLI.textContent.trim();
            currentEndOffset = closestLI.textContent.length - 1;
            let currentLastElem = closestLI;
            while (currentLastElem.nodeName !== '#text') {
                currentLastElem = currentLastElem.lastChild;
            }
            this.formatter.editorManager.nodeSelection.setSelectionText(this.contentModule.getDocument(), isSameContainer ? currentLastElem : currentStartContainer, currentLastElem, currentStartOffset, currentLastElem.textContent.length);
        }
    }
    /**
     * For internal use only - keydown the event handler;
     *
     * @param {KeyboardEvent} e - specifies the event.
     * @returns {void}
     * @private
     * @deprecated
     * @hidden
     */
    keyDown(e) {
        this.notify(keyDown, { member: 'keydown', args: e });
        this.restrict(e);
        if (this.editorMode === 'HTML') {
            this.cleanList(e);
        }
        if (this.editorMode === 'HTML' && ((e.which === 8 && e.code === 'Backspace') || (e.which === 46 && e.code === 'Delete'))) {
            const range = this.getRange();
            const startNode = range.startContainer.nodeName === '#text' ? range.startContainer.parentElement :
                range.startContainer;
            if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(startNode, 'pre') &&
                (e.which === 8 && range.startContainer.textContent.charCodeAt(range.startOffset - 1) === 8203) ||
                (e.which === 46 && range.startContainer.textContent.charCodeAt(range.startOffset) === 8203)) {
                const regEx = new RegExp(String.fromCharCode(8203), 'g');
                const pointer = e.which === 8 ? range.startOffset - 1 : range.startOffset;
                range.startContainer.textContent = range.startContainer.textContent.replace(regEx, '');
                this.formatter.editorManager.nodeSelection.setCursorPoint(this.contentModule.getDocument(), range.startContainer, pointer);
            }
            else if ((e.code === 'Backspace' && e.which === 8) &&
                range.startContainer.textContent.charCodeAt(0) === 8203 && range.collapsed) {
                const parentEle = range.startContainer.parentElement;
                let index;
                let i;
                for (i = 0; i < parentEle.childNodes.length; i++) {
                    if (parentEle.childNodes[i] === range.startContainer) {
                        index = i;
                    }
                }
                let bool = true;
                const removeNodeArray = [];
                for (i = index; i >= 0; i--) {
                    if (parentEle.childNodes[i].nodeType === 3 && parentEle.childNodes[i].textContent.charCodeAt(0) === 8203 && bool) {
                        removeNodeArray.push(i);
                    }
                    else {
                        bool = false;
                    }
                }
                if (removeNodeArray.length > 0) {
                    for (i = removeNodeArray.length - 1; i > 0; i--) {
                        parentEle.childNodes[removeNodeArray[i]].textContent = '';
                    }
                }
                this.formatter.editorManager.nodeSelection.setCursorPoint(this.contentModule.getDocument(), range.startContainer, range.startOffset);
            }
        }
        if (this.formatter.getUndoRedoStack().length === 0) {
            this.formatter.saveData();
        }
        if (e.action !== 'insert-link' &&
            (e.action && e.action !== 'paste' && e.action !== 'space'
                || e.which === 9 || (e.code === 'Backspace' && e.which === 8))) {
            this.formatter.process(this, null, e);
            switch (e.action) {
                case 'toolbar-focus':
                    if (this.toolbarSettings.enable) {
                        // eslint-disable-next-line
                        let selector = '.e-toolbar-item[aria-disabled="false"][title] [tabindex]';
                        this.toolbarModule.baseToolbar.toolbarObj.element.querySelector(selector).focus();
                    }
                    break;
                case 'escape':
                    this.contentModule.getEditPanel().focus();
                    break;
            }
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.placeholder)) {
            if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.placeHolderWrapper)) && (this.inputElement.textContent.length !== 1)) {
                this.placeHolderWrapper.style.display = 'none';
            }
            else {
                this.setPlaceHolder();
            }
        }
        this.autoResize();
    }
    keyUp(e) {
        this.notify(keyUp, { member: 'keyup', args: e });
        if (e.code === 'KeyX' && e.which === 88 && e.keyCode === 88 && e.ctrlKey && (this.inputElement.innerHTML === '' ||
            this.inputElement.innerHTML === '<br>')) {
            this.inputElement.innerHTML = getEditValue(getDefaultValue(this), this);
        }
        const allowedKeys = e.which === 32 || e.which === 13 || e.which === 8 || e.which === 46;
        if (((e.key !== 'shift' && !e.ctrlKey) && e.key && e.key.length === 1 || allowedKeys) || (this.editorMode === 'Markdown'
            && ((e.key !== 'shift' && !e.ctrlKey) && e.key && e.key.length === 1 || allowedKeys)) && !this.inlineMode.enable) {
            this.formatter.onKeyHandler(this, e);
        }
        if (this.inputElement && this.inputElement.textContent.length !== 0
            || this.element.querySelectorAll('.e-toolbar-item.e-active').length > 0) {
            this.notify(toolbarRefresh, { args: e });
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.placeholder)) {
            if (!(e.key === 'Enter' && e.keyCode === 13) && (this.inputElement.innerHTML === '<p><br></p>' || this.inputElement.innerHTML === '<div><br></div>' ||
                this.inputElement.innerHTML === '<br>')) {
                this.setPlaceHolder();
            }
        }
    }
    /**
     * @param {string} value - specifies the value.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    serializeValue(value) {
        if (this.editorMode === 'HTML' && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(value)) {
            if (this.enableHtmlEncode) {
                value = this.htmlEditorModule.sanitizeHelper(decode(value));
                value = this.encode(value);
            }
            else {
                value = this.htmlEditorModule.sanitizeHelper(value);
            }
        }
        return value;
    }
    /**
     * This method will clean up the HTML against cross-site scripting attack and return the HTML as string.
     * It's only applicable to editorMode as `HTML`.
     *
     * @param {string} value - Specifies the value that you want to sanitize.
     * @returns {string} - specifies the the string value
     */
    sanitizeHtml(value) {
        return this.serializeValue(value);
    }
    /**
     * updateValue method
     *
     * @param {string} value - specifies the string value.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    updateValue(value) {
        if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(value)) {
            const inputVal = this.inputElement.innerHTML;
            this.setProperties({ value: isEditableValueEmpty(inputVal) ? null : inputVal });
        }
        else {
            this.setProperties({ value: value });
        }
    }
    triggerEditArea(e) {
        if (!isIDevice()) {
            this.notify(editAreaClick, { member: 'editAreaClick', args: e });
        }
        else {
            const touch = (e.touches ? e.changedTouches[0] : e);
            if (this.clickPoints.clientX === touch.clientX && this.clickPoints.clientY === touch.clientY) {
                this.notify(editAreaClick, { member: 'editAreaClick', args: e });
            }
        }
    }
    notifyMouseUp(e) {
        const touch = (e.touches ? e.changedTouches[0] : e);
        this.notify(mouseUp, { member: 'mouseUp', args: e,
            touchData: { prevClientX: this.clickPoints.clientX, prevClientY: this.clickPoints.clientY,
                clientX: touch.clientX, clientY: touch.clientY }
        });
        if (this.inputElement && ((this.editorMode === 'HTML' && this.inputElement.textContent.length !== 0) ||
            (this.editorMode === 'Markdown' && this.inputElement.value.length !== 0))) {
            this.notify(toolbarRefresh, { args: e });
        }
        this.triggerEditArea(e);
    }
    mouseUp(e) {
        if (this.quickToolbarSettings.showOnRightClick && _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {
            const target = e.target;
            const closestTable = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, 'table');
            if (target && target.nodeName === 'A' || target.nodeName === 'IMG' || (target.nodeName === 'TD' || target.nodeName === 'TH' ||
                target.nodeName === 'TABLE' || (closestTable && this.contentModule.getEditPanel().contains(closestTable)))) {
                return;
            }
        }
        this.notifyMouseUp(e);
        if (e.detail === 3) {
            const range = this.getRange();
            const selection = this.formatter.editorManager.domNode.getSelection();
            if (/\s+$/.test(selection.toString())) {
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(range.startContainer.parentElement) && (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(range.startContainer.parentElement.nextSibling) &&
                    (range.startContainer.parentElement.nextSibling.nodeType !== 3 ||
                        /\s+$/.test(range.startContainer.parentElement.nextSibling.textContent)) || range.startOffset === range.endOffset)
                    || range.startContainer.parentElement.tagName.toLocaleLowerCase() === 'li') {
                    range.setStart(range.startContainer, range.startOffset);
                    range.setEnd(range.startContainer, range.startContainer.textContent.length);
                }
            }
        }
    }
    /**
     * @param {Function} module - specifies the module function.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    ensureModuleInjected(module) {
        return this.getInjectedModules().indexOf(module) >= 0;
    }
    /**
     * @returns {void}
     * @hidden
     * @deprecated
     */
    onCopy() {
        this.contentModule.getDocument().execCommand('copy', false, null);
    }
    /**
     * @returns {void}
     * @hidden
     * @deprecated
     */
    onCut() {
        this.contentModule.getDocument().execCommand('cut', false, null);
    }
    /**
     * @param {KeyboardEvent} e - specifies the keyboard event.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    onPaste(e) {
        const evenArgs = {
            originalEvent: e,
            cancel: false,
            requestType: 'Paste'
        };
        this.trigger(actionBegin, evenArgs, (pasteArgs) => {
            const currentLength = this.getText().trim().length;
            const selectionLength = this.getSelection().length;
            const pastedContentLength = ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e) || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.clipboardData))
                ? 0 : e.clipboardData.getData('text/plain').length;
            const totalLength = (currentLength - selectionLength) + pastedContentLength;
            if (this.editorMode === 'Markdown') {
                if (!(this.maxLength === -1 || totalLength <= this.maxLength)) {
                    e.preventDefault();
                }
                return;
            }
            if (!pasteArgs.cancel && this.inputElement.contentEditable === 'true' &&
                (this.maxLength === -1 || totalLength <= this.maxLength)) {
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.pasteCleanupModule)) {
                    this.notify(pasteClean, { args: e });
                }
                else {
                    const args = { requestType: 'Paste', editorMode: this.editorMode, event: e };
                    let value = null;
                    let htmlValue = false;
                    if (e && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.clipboardData)) {
                        value = e.clipboardData.getData('text/plain');
                        htmlValue = e.clipboardData.getData('text/html').indexOf('MsoNormal') > 0;
                    }
                    const file = e && e.clipboardData && e.clipboardData.items.length > 0 ?
                        e.clipboardData.items[0].getAsFile() : null;
                    if (value !== null) {
                        this.notify(paste, {
                            file: file,
                            args: e,
                            text: value,
                            isWordPaste: htmlValue
                        });
                    }
                    setTimeout(() => {
                        this.formatter.onSuccess(this, args);
                    }, 0);
                }
            }
            else {
                e.preventDefault();
            }
        });
    }
    /**
     * @param {string} action - specifies the string value.
     * @param {MouseEvent} event - specifies the event.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    clipboardAction(action, event) {
        switch (action.toLowerCase()) {
            case 'cut':
                this.onCut();
                this.formatter.onSuccess(this, {
                    requestType: 'Cut',
                    editorMode: this.editorMode,
                    event: event
                });
                break;
            case 'copy':
                this.onCopy();
                this.formatter.onSuccess(this, {
                    requestType: 'Copy',
                    editorMode: this.editorMode,
                    event: event
                });
                break;
            case 'paste':
                this.onPaste(event);
                break;
        }
    }
    /**
     * Destroys the component (detaches/removes all event handlers, attributes, classes, and empties the component element).
     *
     * @returns {void}
     */
    destroy() {
        if (this.isDestroyed || !this.isRendered) {
            return;
        }
        if (this.element.offsetParent === null && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.toolbarModule)) {
            this.toolbarModule.destroy();
            return;
        }
        this.notify(destroy, {});
        this.destroyDependentModules();
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.timeInterval)) {
            clearInterval(this.timeInterval);
            this.timeInterval = null;
        }
        this.unWireEvents();
        if (this.originalElement.tagName === 'TEXTAREA') {
            this.element.parentElement.insertBefore(this.valueContainer, this.element);
            this.valueContainer.id = this.getID();
            this.valueContainer.removeAttribute('name');
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(this.element);
            if (this.originalElement.innerHTML.trim() !== '') {
                this.valueContainer.value = this.originalElement.innerHTML.trim();
                this.setProperties({ value: (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.initialValue) ? this.initialValue : null) }, true);
            }
            else {
                this.valueContainer.value = this.valueContainer.defaultValue;
            }
            this.element = this.valueContainer;
            for (let i = 0; i < this.originalElement.classList.length; i++) {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], this.originalElement.classList[i]);
            }
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], CLS_RTE_HIDDEN);
        }
        else {
            if (this.originalElement.innerHTML.trim() !== '') {
                this.element.innerHTML = this.originalElement.innerHTML.trim();
                this.setProperties({ value: (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.initialValue) ? this.initialValue : null) }, true);
            }
            else {
                this.element.innerHTML = '';
            }
        }
        if (this.placeholder && this.placeHolderWrapper) {
            this.placeHolderWrapper = null;
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.cssClass)) {
            const allClassName = this.cssClass.split(' ');
            for (let i = 0; i < allClassName.length; i++) {
                if (allClassName[i].trim() !== '') {
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], allClassName[i]);
                }
            }
        }
        this.removeHtmlAttributes();
        this.removeAttributes();
        super.destroy();
        this.isRendered = false;
        if (this.enablePersistence) {
            window.localStorage.removeItem(this.getModuleName() + this.element.id);
        }
    }
    removeHtmlAttributes() {
        if (this.htmlAttributes) {
            const keys = Object.keys(this.htmlAttributes);
            for (let i = 0; i < keys.length && this.element.hasAttribute(keys[i]); i++) {
                this.element.removeAttribute(keys[i]);
            }
        }
    }
    removeAttributes() {
        if (!this.enabled) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], CLS_DISABLED);
        }
        if (this.enableRtl) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], CLS_RTL);
        }
        if (this.readonly) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], CLS_RTE_READONLY);
        }
        if (this.element.style.width !== '' && this.originalElement.style.width === '') {
            this.element.style.removeProperty('width');
        }
        if (this.element.style.height !== '' && this.originalElement.style.height === '') {
            this.element.style.removeProperty('height');
        }
        this.element.removeAttribute('aria-disabled');
        this.element.removeAttribute('role');
        this.element.removeAttribute('tabindex');
    }
    destroyDependentModules() {
        /* destroy dependent modules */
        this.renderModule.destroy();
        this.formatter.editorManager.undoRedoManager.destroy();
        this.sourceCodeModule.destroy();
    }
    /**
     * Returns the HTML or Text inside the RichTextEditor.
     *
     * @returns {Element} - specifies the element.
     */
    getContent() {
        return this.contentModule.getPanel();
    }
    /**
     * Returns the text content as string.
     *
     * @returns {string} - specifies the string value.
     */
    getText() {
        return this.contentModule.getText();
    }
    /**
     * Returns the html value of the selected content as string.
     *
     * @returns {string} - specifies the string value.
     */
    getSelectedHtml() {
        let range;
        const wrapperElm = this.createElement('div');
        const selection = this.contentModule.getDocument().getSelection();
        if (selection.rangeCount > 0) {
            range = selection.getRangeAt(0);
            const selectedHtml = range.cloneContents();
            wrapperElm.appendChild(selectedHtml);
        }
        return wrapperElm.innerHTML;
    }
    /**
     * It shows the inline quick toolbar
     *
     * @returns {void}
     */
    showInlineToolbar() {
        if (this.inlineMode.enable) {
            const currentRange = this.getRange();
            const targetElm = currentRange.endContainer.nodeName === '#text' ?
                currentRange.endContainer.parentElement : currentRange.endContainer;
            const x = currentRange.getClientRects()[0].left;
            const y = currentRange.getClientRects()[0].top;
            this.quickToolbarModule.showInlineQTBar(x, y, targetElm);
        }
    }
    /**
     * It hides the inline quick toolbar
     *
     * @returns {void}
     */
    hideInlineToolbar() {
        this.quickToolbarModule.hideInlineQTBar();
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {void}
     * @private
     * @deprecated
     */
    getModuleName() {
        return 'richtexteditor';
    }
    /**
     * Called internally if any of the property value changed.
     *
     * @param {RichTextEditorModel} newProp - specifies the the property.
     * @param {RichTextEditorModel} oldProp - specifies the old property.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    onPropertyChanged(newProp, oldProp) {
        for (const prop of Object.keys(newProp)) {
            switch (prop) {
                case 'enterKey':
                case 'value': {
                    let nVal;
                    if (prop === 'enterKey') {
                        if (this.value === null || this.value === '<div><br></div>' || this.value === '<p><br></p>' ||
                            this.value === '<br>') {
                            nVal = null;
                        }
                        else {
                            nVal = this.value;
                        }
                    }
                    else {
                        nVal = newProp[prop];
                    }
                    const val = this.editorMode === 'HTML' ? getEditValue(nVal, this) : nVal;
                    if ((!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(nVal) && nVal !== '') || prop === 'enterKey') {
                        this.value = this.serializeValue(((this.enableHtmlEncode) ? this.encode(decode(val)) : val));
                    }
                    this.updatePanelValue();
                    this.setPlaceHolder();
                    this.notify(xhtmlValidation, { module: 'XhtmlValidation', newProp: newProp, oldProp: oldProp });
                    if (this.enableXhtml) {
                        this.setProperties({ value: this.getXhtml() }, true);
                    }
                    if (this.showCharCount) {
                        this.countModule.refresh();
                    }
                    break;
                }
                case 'valueTemplate':
                    this.setValue();
                    if (this.showCharCount) {
                        this.countModule.refresh();
                    }
                    break;
                case 'width':
                    this.setWidth(newProp[prop]);
                    if (this.toolbarSettings.enable && !this.inlineMode.enable) {
                        this.toolbarModule.refreshToolbarOverflow();
                        this.resizeHandler();
                    }
                    break;
                case 'height':
                    this.setHeight(newProp[prop]);
                    this.setContentHeight();
                    this.autoResize();
                    break;
                case 'readonly':
                    this.setReadOnly(false);
                    break;
                case 'cssClass':
                    this.element.classList.remove(oldProp[prop]);
                    this.setCssClass(newProp[prop]);
                    break;
                case 'enabled':
                    this.setEnable();
                    break;
                case 'enableRtl':
                    this.updateRTL();
                    break;
                case 'placeholder':
                    this.placeholder = newProp[prop];
                    this.setPlaceHolder();
                    break;
                case 'htmlAttributes':
                    setAttributes(this.htmlAttributes, this, false, false);
                    break;
                case 'iframeSettings': {
                    const frameSetting = oldProp[prop];
                    if (frameSetting.resources) {
                        const iframe = this.contentModule.getDocument();
                        const header = iframe.querySelector('head');
                        let files;
                        if (frameSetting.resources.scripts) {
                            files = header.querySelectorAll('.' + CLS_SCRIPT_SHEET);
                            this.removeSheets(files);
                        }
                        if (frameSetting.resources.styles) {
                            files = header.querySelectorAll('.' + CLS_STYLE_SHEET);
                            this.removeSheets(files);
                        }
                    }
                    this.setIframeSettings();
                    break;
                }
                case 'locale':
                    super.refresh();
                    break;
                case 'inlineMode':
                    this.notify(modelChanged, { module: 'quickToolbar', newProp: newProp, oldProp: oldProp });
                    this.setContentHeight();
                    break;
                case 'toolbarSettings':
                    this.notify(modelChanged, { module: 'toolbar', newProp: newProp, oldProp: oldProp });
                    this.setContentHeight();
                    break;
                case 'maxLength':
                    if (this.showCharCount) {
                        this.countModule.refresh();
                    }
                    break;
                case 'showCharCount':
                    if (newProp[prop] && this.countModule) {
                        this.countModule.renderCount();
                    }
                    else if (newProp[prop] === false && this.countModule) {
                        this.countModule.destroy();
                    }
                    break;
                case 'enableHtmlEncode':
                    this.updateValueData();
                    this.updatePanelValue();
                    this.setPlaceHolder();
                    if (this.showCharCount) {
                        this.countModule.refresh();
                    }
                    break;
                case 'undoRedoSteps':
                case 'undoRedoTimer':
                    this.formatter.editorManager.observer.notify(MODEL_CHANGED, { newProp: newProp, oldProp: oldProp });
                    break;
                case 'enableXhtml':
                    this.notify(xhtmlValidation, { module: 'XhtmlValidation', newProp: newProp, oldProp: oldProp });
                    break;
                case 'quickToolbarSettings':
                    // eslint-disable-next-line
                    newProp.quickToolbarSettings.showOnRightClick ? this.wireContextEvent() : this.unWireContextEvent();
                    this.notify(modelChanged, { newProp: newProp, oldProp: oldProp });
                    break;
                default:
                    this.notify(modelChanged, { newProp: newProp, oldProp: oldProp });
                    break;
            }
        }
    }
    /**
     * @hidden
     * @returns {void}
     * @deprecated
     */
    updateValueData() {
        if (this.enableHtmlEncode) {
            this.setProperties({ value: this.encode(decode(this.inputElement.innerHTML)) }, true);
        }
        else {
            this.setProperties({
                value: /<[a-z][\s\S]*>/i.test(this.inputElement.innerHTML) ? this.inputElement.innerHTML :
                    decode(this.inputElement.innerHTML)
            });
        }
    }
    removeSheets(srcList) {
        let i;
        for (i = 0; i < srcList.length; i++) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.detach)(srcList[i]);
        }
    }
    updatePanelValue() {
        let value = this.value;
        value = (this.enableHtmlEncode && this.value) ? decode(value) : value;
        const getTextArea = this.element.querySelector('.e-rte-srctextarea');
        if (value) {
            if (getTextArea && getTextArea.style.display === 'block') {
                getTextArea.value = this.value;
            }
            if (this.valueContainer) {
                this.valueContainer.value = (this.enableHtmlEncode) ? this.value : value;
            }
            if (this.editorMode === 'HTML' && this.inputElement && this.inputElement.innerHTML.trim() !== value.trim()) {
                this.inputElement.innerHTML = value;
            }
            else if (this.editorMode === 'Markdown' && this.inputElement
                && this.inputElement.value.trim() !== value.trim()) {
                this.inputElement.value = value;
            }
        }
        else {
            if (getTextArea && getTextArea.style.display === 'block') {
                getTextArea.value = '';
            }
            if (this.editorMode === 'HTML') {
                if (this.enterKey === 'DIV') {
                    this.inputElement.innerHTML = '<div><br/></div>';
                }
                else if (this.enterKey === 'BR') {
                    this.inputElement.innerHTML = '<br/>';
                }
                else {
                    this.inputElement.innerHTML = '<p><br/></p>';
                    if (value === '' && this.formatter && this.inputElement) {
                        this.formatter.editorManager.nodeSelection.setCursorPoint(this.contentModule.getDocument(), this.inputElement.firstElementChild, this.inputElement.firstElementChild.childElementCount);
                    }
                }
            }
            else {
                this.inputElement.value = '';
            }
            if (this.valueContainer) {
                this.valueContainer.value = '';
            }
        }
        if (this.showCharCount) {
            this.countModule.refresh();
        }
    }
    setHeight(height) {
        if (height !== 'auto') {
            this.element.style.height = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(height);
        }
        else {
            this.element.style.height = 'auto';
        }
        if (this.toolbarSettings.type === 'Expand' && (typeof (this.height) === 'string' &&
            this.height.indexOf('px') > -1 || typeof (this.height) === 'number')) {
            this.element.classList.add(CLS_RTE_FIXED_TB_EXPAND);
        }
        else {
            this.element.classList.remove(CLS_RTE_FIXED_TB_EXPAND);
        }
    }
    /**
     * setPlaceHolder method
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    setPlaceHolder() {
        if (this.inputElement && this.placeholder && this.iframeSettings.enable !== true) {
            if (this.editorMode !== 'Markdown') {
                if (!this.placeHolderWrapper) {
                    this.placeHolderWrapper = this.createElement('span', { className: 'rte-placeholder e-rte-placeholder' });
                    if (this.inputElement) {
                        this.inputElement.parentElement.insertBefore(this.placeHolderWrapper, this.inputElement);
                    }
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.attributes)(this.placeHolderWrapper, {
                        'style': 'font-size: 14px; padding: 16px; margin-left: 0px; margin-right: 0px;'
                    });
                }
                this.placeHolderWrapper.innerHTML = this.placeholder;
                if (this.inputElement.textContent.length === 0 && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.inputElement.firstChild) && (this.inputElement.firstChild.nodeName === 'BR' ||
                    ((this.inputElement.firstChild.nodeName === 'P' || this.inputElement.firstChild.nodeName === 'DIV') && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.inputElement.firstChild.firstChild) &&
                        this.inputElement.firstChild.firstChild.nodeName === 'BR'))) {
                    this.placeHolderWrapper.style.display = 'block';
                }
                else {
                    this.placeHolderWrapper.style.display = 'none';
                }
            }
            else {
                this.inputElement.setAttribute('placeholder', this.placeholder);
            }
        }
    }
    setWidth(width) {
        if (width !== 'auto') {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(this.element, { 'width': (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.formatUnit)(this.width) });
        }
        else {
            this.element.style.width = 'auto';
        }
    }
    setCssClass(cssClass) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(cssClass)) {
            const allClassName = cssClass.split(' ');
            for (let i = 0; i < allClassName.length; i++) {
                if (allClassName[i].trim() !== '') {
                    this.element.classList.add(allClassName[i]);
                }
            }
        }
    }
    updateRTL() {
        this.notify(rtlMode, { enableRtl: this.enableRtl });
        if (this.enableRtl) {
            this.element.classList.add(CLS_RTL);
        }
        else {
            this.element.classList.remove(CLS_RTL);
        }
    }
    updateReadOnly() {
        this.notify(readOnlyMode, { editPanel: this.inputElement, mode: this.readonly });
    }
    /**
     * setReadOnly method
     *
     * @param {boolean} initial - specifies the boolean value
     * @returns {void}
     * @hidden
     * @deprecated
     */
    setReadOnly(initial) {
        this.updateReadOnly();
        if (!initial) {
            if (this.readonly && this.enabled) {
                this.unbindEvents();
            }
            else if (this.enabled) {
                this.bindEvents();
            }
        }
    }
    /**
     * By default, prints all the pages of the RichTextEditor.
     *
     * @returns {void}
     */
    print() {
        let printWind;
        const printArgs = {
            element: this.inputElement,
            requestType: 'print',
            cancel: false
        };
        this.trigger(actionBegin, printArgs, (printingArgs) => {
            printWind = window.open('', 'print', 'height=' + window.outerHeight + ',width=' + window.outerWidth);
            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie') {
                printWind.resizeTo(screen.availWidth, screen.availHeight);
            }
            printWind = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.print)(this.inputElement, printWind);
            if (!printingArgs.cancel) {
                const actionArgs = {
                    requestType: 'print'
                };
                this.trigger(actionComplete, actionArgs);
            }
        });
    }
    /**
     * Refresh the view of the editor.
     *
     * @returns {void}
     * @public
     */
    refreshUI() {
        this.renderModule.refresh();
    }
    /**
     * Shows the Rich Text Editor component in full-screen mode.
     *
     * @returns {void}
     */
    showFullScreen() {
        this.fullScreenModule.showFullScreen();
    }
    /**
     * Enables the give toolbar items in the Rich Text Editor component.
     *
     * @returns {void}
     * @param {string | string[]} items - Specifies the single or collection of items
     * @param {boolean} muteToolbarUpdate enable/disables the toolbar item status in RichTextEditor.
     * that you want to be enable in Rich Text Editor’s Toolbar.
     *
     * @public
     */
    enableToolbarItem(items, muteToolbarUpdate) {
        this.toolbarModule.enableTBarItems(this.getBaseToolbarObject(), items, true, muteToolbarUpdate);
    }
    /**
     * Disables the given toolbar items in the Rich Text Editor component.
     *
     * @returns {void}
     * @param {string | string[]} items - Specifies the single or collection of items
     * @param {boolean} muteToolbarUpdate enable/disables the toolbar item status in RichTextEditor.
     * that you want to be disable in Rich Text Editor’s Toolbar.
     *
     * @public
     */
    disableToolbarItem(items, muteToolbarUpdate) {
        this.toolbarModule.enableTBarItems(this.getBaseToolbarObject(), items, false, muteToolbarUpdate);
    }
    /**
     * Removes the give toolbar items from the Rich Text Editor component.
     *
     * @returns {void}
     * @param {string | string[]} items - Specifies the single or collection of items
     * that you want to be remove from Rich Text Editor’s Toolbar.
     *
     * @public
     */
    removeToolbarItem(items) {
        this.toolbarModule.removeTBarItems(items);
    }
    /**
     * Get the selected range from the RichTextEditor's content.
     *
     * @returns {void}
     * @public
     * @deprecated
     */
    getRange() {
        return this.formatter.editorManager.nodeSelection.getRange(this.contentModule.getDocument());
    }
    initializeServices() {
        this.serviceLocator.register('rendererFactory', new RendererFactory);
        this.serviceLocator.register('rteLocale', this.localeObj = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.L10n(this.getModuleName(), defaultLocale, this.locale));
        this.serviceLocator.register('dialogRenderObject', new DialogRenderer(this));
    }
    RTERender() {
        const rendererFactory = this.serviceLocator.getService('rendererFactory');
        this.contentModule = rendererFactory.getRenderer(RenderType.Content);
        this.fullScreenModule = new FullScreen(this);
        this.enterKeyModule = new EnterKeyAction(this);
        this.renderModule.render();
        this.inputElement = this.contentModule.getEditPanel();
        this.setHeight(this.height);
        setAttributes(this.htmlAttributes, this, false, true);
        if (this.iframeSettings) {
            this.setIframeSettings();
        }
        this.setCssClass(this.cssClass);
        this.updateEnable();
        this.setPlaceHolder();
        this.updateRTL();
        this.updateReadOnly();
        this.updatePanelValue();
        if (this.enableHtmlEncode && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.value)) {
            this.setProperties({ value: this.encode(decode(this.value)) });
        }
    }
    setIframeSettings() {
        if (this.iframeSettings.resources) {
            const styleSrc = this.iframeSettings.resources.styles;
            const scriptSrc = this.iframeSettings.resources.scripts;
            if (this.iframeSettings.resources.scripts.length > 0) {
                this.InjectSheet(true, scriptSrc);
            }
            if (this.iframeSettings.resources.styles.length > 0) {
                this.InjectSheet(false, styleSrc);
            }
        }
        if (this.iframeSettings.attributes) {
            setAttributes(this.iframeSettings.attributes, this, true, false);
        }
    }
    InjectSheet(scriptSheet, srcList) {
        try {
            if (srcList && srcList.length > 0) {
                const iFrame = this.contentModule.getDocument();
                const target = iFrame.querySelector('head');
                for (let i = 0; i < srcList.length; i++) {
                    if (scriptSheet) {
                        const scriptEle = this.createScriptElement();
                        scriptEle.src = srcList[i];
                        target.appendChild(scriptEle);
                    }
                    else {
                        const styleEle = this.createStyleElement();
                        styleEle.href = srcList[i];
                        target.appendChild(styleEle);
                    }
                }
            }
        }
        catch (e) {
            return;
        }
    }
    createScriptElement() {
        const scriptEle = this.createElement('script', {
            className: CLS_SCRIPT_SHEET
        });
        scriptEle.type = 'text/javascript';
        return scriptEle;
    }
    createStyleElement() {
        const styleEle = this.createElement('link', {
            className: CLS_STYLE_SHEET
        });
        styleEle.rel = 'stylesheet';
        return styleEle;
    }
    setValue() {
        if (this.valueTemplate) {
            if (typeof this.valueTemplate === 'string') {
                this.setProperties({ value: this.valueTemplate });
            }
            else {
                const compiledTemplate = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.compile)(this.valueTemplate)("", this, 'valueTemplate');
                for (let i = 0; i < compiledTemplate.length; i++) {
                    const item = compiledTemplate[i];
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.append)([item], this.element);
                }
                this.setProperties({ value: this.element.innerHTML.trim() });
            }
        }
        else {
            // eslint-disable-next-line
            const innerHtml = !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.element.innerHTML) && this.element.innerHTML.replace(/<(\/?|\!?)(!--!--)>/g, '').trim();
            if (innerHtml !== '') {
                if (this.element.tagName === 'TEXTAREA') {
                    this.setProperties({ value: decode(innerHtml) });
                }
                else {
                    this.setProperties({ value: innerHtml });
                }
            }
        }
    }
    updateResizeFlag() {
        this.isResizeInitialized = true;
    }
    /**
     * Image max width calculation method
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getInsertImgMaxWidth() {
        const maxWidth = this.insertImageSettings.maxWidth;
        // eslint-disable-next-line
        const imgPadding = 12;
        const imgResizeBorder = 2;
        const editEle = this.contentModule.getEditPanel();
        const eleStyle = window.getComputedStyle(editEle);
        const editEleMaxWidth = editEle.offsetWidth - (imgPadding + imgResizeBorder +
            parseFloat(eleStyle.paddingLeft.split('px')[0]) + parseFloat(eleStyle.paddingRight.split('px')[0]) +
            parseFloat(eleStyle.marginLeft.split('px')[0]) + parseFloat(eleStyle.marginRight.split('px')[0]));
        return (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(maxWidth) ? editEleMaxWidth : maxWidth;
    }
    /**
     * setContentHeight method
     *
     * @param {string} target - specifies the target value.
     * @param {boolean} isExpand - specifies  the bollean value.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    setContentHeight(target, isExpand) {
        let heightValue;
        let topValue = 0;
        let rteHeightPercent;
        const heightPercent = typeof (this.height) === 'string' && this.height.indexOf('%') > -1;
        const cntEle = (this.sourceCodeModule.getPanel() &&
            this.sourceCodeModule.getPanel().parentElement.style.display === 'block') ? this.sourceCodeModule.getPanel().parentElement :
            this.contentModule.getPanel();
        let rteHeight = this.element.offsetHeight;
        if (rteHeight === 0 && this.height !== 'auto' && !this.getToolbar()) {
            rteHeight = parseInt(this.height, 10);
            if (heightPercent) {
                rteHeightPercent = this.height;
            }
        }
        const tbHeight = this.getToolbar() ? this.toolbarModule.getToolbarHeight() : 0;
        const rzHandle = this.element.querySelector('.' + CLS_RTE_RES_HANDLE);
        const rzHeight = this.enableResize ? (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(rzHandle) ? (rzHandle.offsetHeight + 8) : 0) : 0;
        const expandPopHeight = this.getToolbar() ? this.toolbarModule.getExpandTBarPopHeight() : 0;
        if (this.toolbarSettings.type === ToolbarType.Expand && isExpand && target !== 'preview') {
            heightValue = (this.height === 'auto' && rzHeight === 0) ? 'auto' : rteHeight - (tbHeight + expandPopHeight + rzHeight) + 'px';
            topValue = (!this.toolbarSettings.enableFloating) ? expandPopHeight : 0;
        }
        else {
            if (this.height === 'auto' && !(this.element.classList.contains('e-rte-full-screen')) && !this.isResizeInitialized) {
                heightValue = 'auto';
            }
            else {
                heightValue = heightPercent && rteHeightPercent ? rteHeightPercent : rteHeight - (tbHeight + rzHeight) + 'px';
            }
        }
        if (target !== 'windowResize') {
            if (this.iframeSettings.enable) {
                if (heightValue !== 'auto') {
                    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(cntEle, { height: heightValue, marginTop: topValue + 'px' });
                }
            }
            else {
                (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(cntEle, { height: heightValue, marginTop: topValue + 'px' });
            }
        }
        if (this.iframeSettings.enable && target === 'sourceCode') {
            const codeElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.select)('.' + CLS_RTE_CONTENT, this.element);
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(codeElement, { height: heightValue, marginTop: topValue + 'px' });
        }
        if (this.toolbarSettings.enableFloating && this.getToolbar() && !this.inlineMode.enable) {
            const tbWrapHeight = (isExpand ? (tbHeight + expandPopHeight) : tbHeight) + 'px';
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.setStyleAttribute)(this.getToolbar().parentElement, { height: tbWrapHeight });
        }
        if (rzHeight === 0) {
            this.autoResize();
        }
    }
    /**
     * Retrieves the HTML from RichTextEditor.
     *
     * @returns {void}
     * @public
     */
    getHtml() {
        return this.serializeValue(this.contentModule.getEditPanel().innerHTML);
    }
    /**
     * Retrieves the Rich Text Editor's XHTML validated HTML content when `enableXhtml` property is enabled.
     *
     * @returns {void}
     * @public
     */
    getXhtml() {
        let currentValue = this.value;
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(currentValue) && this.enableXhtml) {
            currentValue = this.htmlEditorModule.xhtmlValidation.selfEncloseValidation(currentValue);
        }
        return currentValue;
    }
    /**
     * Shows the source HTML/MD markup.
     *
     * @returns {void}
     * @public
     */
    showSourceCode() {
        if (this.readonly) {
            return;
        }
        this.notify(sourceCode, {});
    }
    /**
     * Returns the maximum number of characters in the Rich Text Editor.
     *
     * @returns {void}
     * @public
     */
    getCharCount() {
        const htmlText = this.editorMode === 'Markdown' ? this.inputElement.value.trim() :
            this.inputElement.textContent.trim();
        let htmlLength;
        if (this.editorMode !== 'Markdown' && htmlText.indexOf('\u200B') !== -1) {
            htmlLength = htmlText.replace(/\u200B/g, '').length;
        }
        else {
            htmlLength = htmlText.length;
        }
        return htmlLength;
    }
    /**
     * Show the dialog in the Rich Text Editor.
     *
     * @param {DialogType} type - specifies the dialog type.
     * @returns {void}
     * @public
     */
    showDialog(type) {
        if (type === DialogType.InsertLink) {
            this.notify(showLinkDialog, {});
        }
        else if (type === DialogType.InsertImage) {
            this.notify(showImageDialog, {});
        }
        else if (type === DialogType.InsertTable) {
            this.notify(showTableDialog, {});
        }
    }
    /**
     * Close the dialog in the Rich Text Editor.
     *
     * @param {DialogType} type - specifies the dialog type.
     * @returns {void}
     * @public
     */
    closeDialog(type) {
        if (type === DialogType.InsertLink) {
            this.notify(closeLinkDialog, {});
        }
        else if (type === DialogType.InsertImage) {
            this.notify(closeImageDialog, {});
        }
        else if (type === DialogType.InsertTable) {
            this.notify(closeTableDialog, {});
        }
    }
    /**
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getBaseToolbarObject() {
        let tbObj;
        if (this.inlineMode.enable && (!_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice || isIDevice())) {
            tbObj = this.quickToolbarModule && this.quickToolbarModule.getInlineBaseToolbar();
        }
        else {
            tbObj = this.toolbarModule && this.toolbarModule.getBaseToolbar();
        }
        return tbObj;
    }
    /**
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getToolbar() {
        return this.toolbarModule ? this.toolbarModule.getToolbarElement() : null;
    }
    /**
     * @returns {void}
     * @hidden
     * @deprecated
     */
    getToolbarElement() {
        return this.toolbarModule && this.toolbarModule.getToolbarElement();
    }
    /**
     * @returns {void}
     * getID method
     *
     * @hidden
     * @deprecated
     */
    getID() {
        return (this.originalElement.tagName === 'TEXTAREA' ? this.valueContainer.id : this.element.id);
    }
    mouseDownHandler(e) {
        const touch = (e.touches ? e.changedTouches[0] : e);
        (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], [CLS_FOCUS]);
        this.preventDefaultResize(e);
        this.notify(mouseDown, { args: e });
        this.clickPoints = { clientX: touch.clientX, clientY: touch.clientY };
    }
    preventImgResize(e) {
        if (e.target.nodeName.toLocaleLowerCase() === 'img') {
            e.preventDefault();
        }
    }
    /**
     * preventDefaultResize method
     *
     * @param {FocusEvent} e - specifies the event.
     * @returns {void}
     * @hidden
     * @deprecated
     */
    // eslint-disable-next-line
    preventDefaultResize(e) {
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie') {
            this.contentModule.getEditPanel().addEventListener('mscontrolselect', this.preventImgResize);
        }
        else if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'mozilla') {
            this.contentModule.getDocument().execCommand('enableObjectResizing', false, 'false');
            this.contentModule.getDocument().execCommand('enableInlineTableEditing', false, 'false');
        }
    }
    // eslint-disable-next-line
    defaultResize(e) {
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'msie') {
            this.contentModule.getEditPanel().removeEventListener('mscontrolselect', this.preventImgResize);
        }
        else if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name === 'mozilla') {
            this.contentModule.getDocument().execCommand('enableObjectResizing', true, 'true');
            this.contentModule.getDocument().execCommand('enableInlineTableEditing', true, 'true');
        }
    }
    resizeHandler() {
        let isExpand = false;
        if (!document.body.contains(this.element)) {
            document.defaultView.removeEventListener('resize', this.onResizeHandler, true);
            return;
        }
        if (this.toolbarSettings.enable && !this.inlineMode.enable) {
            this.toolbarModule.refreshToolbarOverflow();
            isExpand = this.toolbarModule.baseToolbar.toolbarObj.element.classList.contains(CLS_EXPAND_OPEN);
        }
        this.setContentHeight('windowResize', isExpand);
        this.notify(windowResize, null);
    }
    scrollHandler(e) {
        this.notify(scroll, { args: e });
    }
    contentScrollHandler(e) {
        this.notify(contentscroll, { args: e });
    }
    focusHandler(e) {
        if ((!this.isRTE || this.isFocusOut)) {
            this.isRTE = this.isFocusOut ? false : true;
            this.isFocusOut = false;
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.addClass)([this.element], [CLS_FOCUS]);
            if (this.editorMode === 'HTML') {
                this.cloneValue = (this.inputElement.innerHTML === '<p><br></p>' || this.inputElement.innerHTML === '<div><br></div>' ||
                    this.inputElement.innerHTML === '<br>') ? null : this.enableHtmlEncode ?
                    this.encode(decode(this.inputElement.innerHTML)) : this.inputElement.innerHTML;
            }
            else {
                this.cloneValue = this.inputElement.value === '' ? null :
                    this.inputElement.value;
            }
            const active = document.activeElement;
            if (active === this.element || active === this.getToolbarElement() || active === this.contentModule.getEditPanel()
                || ((this.iframeSettings.enable && active === this.contentModule.getPanel()) &&
                    e.target && !e.target.classList.contains('e-img-inner')
                    && (e.target && e.target.parentElement
                        && !e.target.parentElement.classList.contains('e-img-wrap')))
                || (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(active, '.e-rte-toolbar') === this.getToolbarElement()) {
                this.contentModule.getEditPanel().focus();
                if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.getToolbarElement())) {
                    this.getToolbarElement().setAttribute('tabindex', '-1');
                    const items = this.getToolbarElement().querySelectorAll('[tabindex="0"]');
                    for (let i = 0; i < items.length; i++) {
                        items[i].setAttribute('tabindex', '-1');
                    }
                }
            }
            this.preventDefaultResize(e);
            this.trigger('focus', { event: e, isInteracted: Object.keys(e).length === 0 ? false : true });
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.saveInterval) && this.saveInterval > 0 && !this.autoSaveOnIdle) {
                this.timeInterval = setInterval(this.updateValueOnIdle.bind(this), this.saveInterval);
            }
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(document, 'mousedown', this.onDocumentClick, this);
        }
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.getToolbarElement())) {
            const toolbarItem = this.getToolbarElement().querySelectorAll('input,select,button,a,[tabindex]');
            for (let i = 0; i < toolbarItem.length; i++) {
                if ((!toolbarItem[i].classList.contains('e-rte-dropdown-btn') &&
                    !toolbarItem[i].classList.contains('e-insert-table-btn')) &&
                    (!toolbarItem[i].hasAttribute('tabindex') ||
                        toolbarItem[i].getAttribute('tabindex') !== '-1')) {
                    toolbarItem[i].setAttribute('tabindex', '-1');
                }
            }
        }
    }
    getUpdatedValue() {
        let value;
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.tableModule)) {
            this.tableModule.removeResizeElement();
        }
        const getTextArea = this.element.querySelector('.e-rte-srctextarea');
        if (this.editorMode === 'HTML') {
            value = (this.inputElement.innerHTML === '<p><br></p>' || this.inputElement.innerHTML === '<div><br></div>' ||
                this.inputElement.innerHTML === '<br>') ? null : this.enableHtmlEncode ?
                this.encode(decode(this.inputElement.innerHTML)) : this.inputElement.innerHTML;
            if (getTextArea && getTextArea.style.display === 'block') {
                value = getTextArea.value;
            }
        }
        else {
            value = this.inputElement.value === '' ? null :
                this.inputElement.value;
        }
        return value;
    }
    updateValueOnIdle() {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.tableModule) && !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.inputElement.querySelector('.e-table-box.e-rbox-select'))) {
            return;
        }
        this.setProperties({ value: this.getUpdatedValue() }, true);
        this.valueContainer.value = this.value;
        this.invokeChangeEvent();
    }
    updateIntervalValue() {
        clearTimeout(this.idleInterval);
        this.idleInterval = setTimeout(this.updateValueOnIdle.bind(this), 0);
    }
    updateStatus(e) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.html) || !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(e.markdown)) {
            const status = this.formatter.editorManager.undoRedoManager.getUndoStatus();
            const eventArgs = {
                undo: status.undo,
                redo: status.redo,
                html: e.html,
                markdown: e.markdown
            };
            this.trigger(updatedToolbarStatus, eventArgs);
        }
    }
    onDocumentClick(e) {
        const target = e.target;
        const rteElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '.' + CLS_RTE);
        if (!this.element.contains(e.target) && document !== e.target && rteElement !== this.element &&
            !(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(target, '[aria-owns="' + this.getID() + '"]')) {
            this.isBlur = true;
            this.isRTE = false;
        }
        this.notify(docClick, { args: e });
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.info.name !== 'msie' && e.detail > 3) {
            e.preventDefault();
        }
    }
    blurHandler(e) {
        let trg = e.relatedTarget;
        if (trg) {
            const rteElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(trg, '.' + CLS_RTE);
            if (rteElement && rteElement === this.element) {
                this.isBlur = false;
                if (trg === this.getToolbarElement()) {
                    trg.setAttribute('tabindex', '-1');
                }
            }
            else if ((0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(trg, '[aria-owns="' + this.getID() + '"]')) {
                this.isBlur = false;
            }
            else {
                this.isBlur = true;
                trg = null;
            }
        }
        if (this.isBlur && (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(trg)) {
            (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.removeClass)([this.element], [CLS_FOCUS]);
            this.notify(focusChange, {});
            const value = this.getUpdatedValue();
            this.setProperties({ value: value });
            this.notify(toolbarRefresh, { args: e, documentNode: document });
            this.invokeChangeEvent();
            this.isFocusOut = true;
            this.isBlur = false;
            dispatchEvent(this.valueContainer, 'focusout');
            this.defaultResize(e);
            this.trigger('blur', { event: e, isInteracted: Object.keys(e).length === 0 ? false : true });
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.timeInterval)) {
                clearInterval(this.timeInterval);
                this.timeInterval = null;
            }
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(document, 'mousedown', this.onDocumentClick);
        }
        else {
            this.isRTE = true;
        }
    }
    /**
     * invokeChangeEvent method
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    contentChanged() {
        if (this.autoSaveOnIdle) {
            if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(this.saveInterval)) {
                clearTimeout(this.timeInterval);
                this.timeInterval = setTimeout(this.updateIntervalValue.bind(this), this.saveInterval);
            }
        }
    }
    /**
     * invokeChangeEvent method
     *
     * @returns {void}
     * @hidden
     * @deprecated
     */
    invokeChangeEvent() {
        let currentValue;
        if (this.enableXhtml) {
            currentValue = this.getXhtml();
        }
        else {
            currentValue = this.value;
        }
        const eventArgs = {
            value: currentValue
        };
        if (this.value !== this.cloneValue) {
            this.trigger('change', eventArgs);
            this.cloneValue = this.value;
        }
    }
    /**
     * @returns {void}
     * @hidden
     * @deprecated
     */
    wireScrollElementsEvents() {
        this.scrollParentElements = (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_4__.getScrollableParent)(this.element);
        for (const element of this.scrollParentElements) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(element, 'scroll', this.scrollHandler, this);
        }
        if (!this.iframeSettings.enable) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.contentModule.getPanel(), 'scroll', this.contentScrollHandler, this);
        }
    }
    wireContextEvent() {
        if (this.quickToolbarSettings.showOnRightClick) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.inputElement, 'contextmenu', this.contextHandler, this);
            if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice) {
                this.touchModule = new _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Touch(this.inputElement, { tapHold: this.touchHandler.bind(this), tapHoldThreshold: 500 });
            }
        }
    }
    unWireContextEvent() {
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.inputElement, 'contextmenu', this.contextHandler);
        if (_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.isDevice && this.touchModule) {
            this.touchModule.destroy();
        }
    }
    /**
     * @returns {void}
     * @hidden
     * @deprecated
     */
    unWireScrollElementsEvents() {
        this.scrollParentElements = (0,_syncfusion_ej2_popups__WEBPACK_IMPORTED_MODULE_4__.getScrollableParent)(this.element);
        for (const element of this.scrollParentElements) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(element, 'scroll', this.scrollHandler);
        }
        if (!this.iframeSettings.enable) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.contentModule.getPanel(), 'scroll', this.contentScrollHandler);
        }
    }
    touchHandler(e) {
        this.notifyMouseUp(e.originalEvent);
        this.triggerEditArea(e.originalEvent);
    }
    contextHandler(e) {
        const closestElem = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(e.target, 'a, table, img');
        if (this.inlineMode.onSelection === false || (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(closestElem) && this.inputElement.contains(closestElem)
            && (closestElem.tagName === 'IMG' || closestElem.tagName === 'TABLE' || closestElem.tagName === 'A'))) {
            e.preventDefault();
        }
    }
    resetHandler() {
        const defaultValue = this.valueContainer.defaultValue.trim();
        this.setProperties({ value: defaultValue === '' ? null : defaultValue });
    }
    /**
     * @returns {void}
     * @hidden
     * @deprecated
     */
    autoResize() {
        if (this.height === 'auto') {
            if (this.editorMode === 'Markdown') {
                setTimeout(() => {
                    this.setAutoHeight(this.inputElement);
                }, 0);
            }
            else if (this.iframeSettings.enable) {
                const iframeElement = this.element.querySelector('#' + this.getID() + '_rte-view');
                setTimeout(() => {
                    this.setAutoHeight(iframeElement);
                }, 100);
                this.inputElement.style.overflow = 'hidden';
            }
        }
        else {
            this.inputElement.style.overflow = null;
        }
    }
    setAutoHeight(element) {
        if (!(0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.isNullOrUndefined)(element)) {
            element.style.height = '';
            element.style.height = this.inputElement.scrollHeight + 'px';
            element.style.overflow = 'hidden';
        }
    }
    wireEvents() {
        this.element.addEventListener('focusin', this.onFocusHandler, true);
        this.element.addEventListener('focusout', this.onBlurHandler, true);
        this.on(contentChanged, this.contentChanged, this);
        this.on(resizeInitialized, this.updateResizeFlag, this);
        this.on(updateTbItemsStatus, this.updateStatus, this);
        if (this.readonly && this.enabled) {
            return;
        }
        this.bindEvents();
    }
    restrict(e) {
        if (this.maxLength >= 0) {
            const element = this.editorMode === 'Markdown' ? this.contentModule.getText() :
                e.currentTarget.textContent.trim();
            const array = [8, 16, 17, 37, 38, 39, 40, 46, 65];
            let arrayKey;
            for (let i = 0; i <= array.length - 1; i++) {
                if (e.which === array[i]) {
                    if (e.ctrlKey && e.which === 65) {
                        return;
                    }
                    else if (e.which !== 65) {
                        arrayKey = array[i];
                        return;
                    }
                }
            }
            if ((element.length >= this.maxLength && this.maxLength !== -1) && e.which !== arrayKey) {
                e.preventDefault();
            }
        }
    }
    bindEvents() {
        this.keyboardModule = new KeyboardEvents$1(this.inputElement, {
            keyAction: this.keyDown.bind(this), keyConfigs: Object.assign({}, this.formatter.keyConfig, this.keyConfig), eventName: 'keydown'
        });
        const formElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.valueContainer, 'form');
        if (formElement) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(formElement, 'reset', this.resetHandler, this);
        }
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.inputElement, 'keyup', this.keyUp, this);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.inputElement, 'paste', this.onPaste, this);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.inputElement, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.debounce)(this.mouseUp, 30), this);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.inputElement, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent, this.mouseDownHandler, this);
        this.wireContextEvent();
        this.formatter.editorManager.observer.on(KEY_DOWN_HANDLER, this.editorKeyDown, this);
        this.element.ownerDocument.defaultView.addEventListener('resize', this.onResizeHandler, true);
        if (this.iframeSettings.enable) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.inputElement, 'focusin', this.focusHandler, this);
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.inputElement, 'focusout', this.blurHandler, this);
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.inputElement.ownerDocument, 'scroll', this.contentScrollHandler, this);
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.add(this.inputElement.ownerDocument, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent, this.onIframeMouseDown, this);
        }
        this.wireScrollElementsEvents();
    }
    onIframeMouseDown(e) {
        this.isBlur = false;
        this.notify(iframeMouseDown, e);
    }
    editorKeyDown(e) {
        switch (e.event.action) {
            case 'copy':
                this.onCopy();
                break;
            case 'cut':
                this.onCut();
                break;
        }
        if (e.callBack && (e.event.action === 'copy' || e.event.action === 'cut' || e.event.action === 'delete')) {
            e.callBack({
                requestType: e.event.action,
                editorMode: 'HTML',
                event: e.event
            });
        }
    }
    unWireEvents() {
        this.element.removeEventListener('focusin', this.onFocusHandler, true);
        this.element.removeEventListener('focusout', this.onBlurHandler, true);
        this.off(contentChanged, this.contentChanged);
        this.off(resizeInitialized, this.updateResizeFlag);
        this.off(updateTbItemsStatus, this.updateStatus);
        if (this.readonly && this.enabled) {
            return;
        }
        this.unbindEvents();
    }
    unbindEvents() {
        if (this.keyboardModule) {
            this.keyboardModule.destroy();
        }
        const formElement = (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.closest)(this.valueContainer, 'form');
        if (formElement) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(formElement, 'reset', this.resetHandler);
        }
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.inputElement, 'keyup', this.keyUp);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.inputElement, 'paste', this.onPaste);
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.inputElement, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchEndEvent, (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.debounce)(this.mouseUp, 30));
        _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.inputElement, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent, this.mouseDownHandler);
        this.unWireContextEvent();
        if (this.formatter) {
            this.formatter.editorManager.observer.off(KEY_DOWN_HANDLER, this.editorKeyDown);
        }
        this.element.ownerDocument.defaultView.removeEventListener('resize', this.onResizeHandler, true);
        if (this.iframeSettings.enable) {
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.inputElement, 'focusin', this.focusHandler);
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.inputElement, 'focusout', this.blurHandler);
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.inputElement.ownerDocument, 'scroll', this.contentScrollHandler);
            _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.EventHandler.remove(this.inputElement.ownerDocument, _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Browser.touchStartEvent, this.onIframeMouseDown);
        }
        this.unWireScrollElementsEvents();
    }
};
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, ToolbarSettings$1)
], RichTextEditor.prototype, "toolbarSettings", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, QuickToolbarSettings)
], RichTextEditor.prototype, "quickToolbarSettings", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, PasteCleanupSettings)
], RichTextEditor.prototype, "pasteCleanupSettings", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, IFrameSettings)
], RichTextEditor.prototype, "iframeSettings", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, ImageSettings)
], RichTextEditor.prototype, "insertImageSettings", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, TableSettings)
], RichTextEditor.prototype, "tableSettings", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(0)
], RichTextEditor.prototype, "floatingToolbarOffset", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, InlineMode)
], RichTextEditor.prototype, "inlineMode", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, FileManagerSettings)
], RichTextEditor.prototype, "fileManagerSettings", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('100%')
], RichTextEditor.prototype, "width", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], RichTextEditor.prototype, "enablePersistence", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], RichTextEditor.prototype, "enableResize", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)({})
], RichTextEditor.prototype, "htmlAttributes", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], RichTextEditor.prototype, "placeholder", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], RichTextEditor.prototype, "autoSaveOnIdle", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], RichTextEditor.prototype, "readonly", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], RichTextEditor.prototype, "enabled", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(true)
], RichTextEditor.prototype, "enableHtmlSanitizer", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], RichTextEditor.prototype, "enableHtmlEncode", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], RichTextEditor.prototype, "enableXhtml", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('auto')
], RichTextEditor.prototype, "height", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], RichTextEditor.prototype, "cssClass", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], RichTextEditor.prototype, "value", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('P')
], RichTextEditor.prototype, "enterKey", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('BR')
], RichTextEditor.prototype, "shiftEnterKey", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(30)
], RichTextEditor.prototype, "undoRedoSteps", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(300)
], RichTextEditor.prototype, "undoRedoTimer", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)('HTML')
], RichTextEditor.prototype, "editorMode", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], RichTextEditor.prototype, "keyConfig", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], RichTextEditor.prototype, "showCharCount", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], RichTextEditor.prototype, "enableTabKey", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(false)
], RichTextEditor.prototype, "enableAutoUrl", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(-1)
], RichTextEditor.prototype, "maxLength", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, Format)
], RichTextEditor.prototype, "format", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, NumberFormatList)
], RichTextEditor.prototype, "numberFormatList", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, BulletFormatList)
], RichTextEditor.prototype, "bulletFormatList", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, FontFamily)
], RichTextEditor.prototype, "fontFamily", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, FontSize)
], RichTextEditor.prototype, "fontSize", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, FontColor)
], RichTextEditor.prototype, "fontColor", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Complex)({}, BackgroundColor)
], RichTextEditor.prototype, "backgroundColor", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], RichTextEditor.prototype, "valueTemplate", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(10000)
], RichTextEditor.prototype, "saveInterval", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "actionBegin", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "actionComplete", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "beforeDialogOpen", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "dialogOpen", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "beforeDialogClose", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "dialogClose", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "beforeQuickToolbarOpen", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "quickToolbarOpen", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "quickToolbarClose", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "toolbarStatusUpdate", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "updatedToolbarStatus", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "imageSelected", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "beforeImageUpload", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "imageUploading", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "imageUploadSuccess", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "imageUploadFailed", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "imageRemoving", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "afterImageDelete", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "created", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "destroyed", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "beforeSanitizeHtml", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "blur", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "toolbarClick", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "focus", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "change", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "resizing", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "resizeStart", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "resizeStop", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "beforePasteCleanup", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "afterPasteCleanup", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Event)()
], RichTextEditor.prototype, "beforeImageDrop", void 0);
__decorate$1([
    (0,_syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.Property)(null)
], RichTextEditor.prototype, "formatter", void 0);
RichTextEditor = __decorate$1([
    _syncfusion_ej2_base__WEBPACK_IMPORTED_MODULE_0__.NotifyPropertyChanges
], RichTextEditor);

/**
 * Base export
 */

/**
 * Services
 */

/**
 * Rich Text Editor component exported items
 */

/**
 * Base export
 */

/**
 * Base export
 */

/**
 * Base export
 */

/**
 * Base export
 */

/**
 * Export all markdown plugins
 */

/**
 * Base export
 */

/**
 * Export the common module
 */

/**
 * Rich Text Editor component exported items
 */


//# sourceMappingURL=ej2-richtexteditor.es2015.js.map


/***/ }),

/***/ 49958:
/*!***********************************************************!*\
  !*** ./src/app/api/OM/HASIL_RADIOLOGI/HASIL_RADIOLOGI.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GET_ALL": () => (/* binding */ GET_ALL),
/* harmony export */   "GET_DETAIL_BY_ID": () => (/* binding */ GET_DETAIL_BY_ID),
/* harmony export */   "POST_SAVE": () => (/* binding */ POST_SAVE),
/* harmony export */   "GET_ALL_RIWAYAT": () => (/* binding */ GET_ALL_RIWAYAT),
/* harmony export */   "POST_UPDATE": () => (/* binding */ POST_UPDATE),
/* harmony export */   "POST_PUBLISH": () => (/* binding */ POST_PUBLISH)
/* harmony export */ });
/* harmony import */ var src_environments_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! src/environments/environment */ 92340);

const GET_ALL = `${src_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.webApiPis}` + 'OrderManagement/GetListOrderHeaderForHasilRad';
const GET_DETAIL_BY_ID = `${src_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.webApiPis}` + 'OrderManagement/GetListOrderDetailForHasilRad/';
const POST_SAVE = `${src_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.webApiPis}` + 'OrderManagement/InsertHasilRAD';
const GET_ALL_RIWAYAT = `${src_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.webApiPis}` + 'OrderManagement/GetRiwayatHasilRAD_ByIdOrderPenunjangDetail/';
const POST_UPDATE = `${src_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.webApiPis}` + 'OrderManagement/UpdateHasilRAD';
const POST_PUBLISH = `${src_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.webApiPis}` + 'OrderManagement/PublishHasilRAD';


/***/ }),

/***/ 10552:
/*!****************************************************!*\
  !*** ./src/app/api/OM/SETUP_DATA/SETUP_PETUGAS.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GET_ALL_BY_DYNAMIC_FILTER": () => (/* binding */ GET_ALL_BY_DYNAMIC_FILTER),
/* harmony export */   "GET_ALL": () => (/* binding */ GET_ALL),
/* harmony export */   "GET_BY_ID": () => (/* binding */ GET_BY_ID),
/* harmony export */   "POST_SAVE": () => (/* binding */ POST_SAVE),
/* harmony export */   "DELETE": () => (/* binding */ DELETE),
/* harmony export */   "UPDATE": () => (/* binding */ UPDATE)
/* harmony export */ });
/* harmony import */ var src_environments_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! src/environments/environment */ 92340);

const GET_ALL_BY_DYNAMIC_FILTER = `${src_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.webApiPis}` + 'OmSetupPetugas/GetAllByDynamicFilter';
const GET_ALL = `${src_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.webApiPis}` + 'OmSetupPetugas/GetAll';
const GET_BY_ID = `${src_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.webApiPis}` + 'OmSetupPetugas/GetById/';
const POST_SAVE = `${src_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.webApiPis}` + 'OmSetupPetugas/Insert';
const DELETE = `${src_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.webApiPis}` + 'OmSetupPetugas/Delete/';
const UPDATE = `${src_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.webApiPis}` + 'OmSetupPetugas/Update';


/***/ }),

/***/ 558:
/*!***********************************************************!*\
  !*** ./src/app/api/OM/SETUP_DATA/VERIFIKASI_ORDER_LAB.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GET_LIST_ORDER_FOR_VERIFIKASI_LAB": () => (/* binding */ GET_LIST_ORDER_FOR_VERIFIKASI_LAB),
/* harmony export */   "GET_DETAIL_ORDER_FOR_VERIFIKASI_LAB": () => (/* binding */ GET_DETAIL_ORDER_FOR_VERIFIKASI_LAB),
/* harmony export */   "POST_VERIFIKASI_ORDER_LAB": () => (/* binding */ POST_VERIFIKASI_ORDER_LAB),
/* harmony export */   "POST_CANCEL_ORDER_LAB": () => (/* binding */ POST_CANCEL_ORDER_LAB),
/* harmony export */   "GET_RESULT_LIS_PDF": () => (/* binding */ GET_RESULT_LIS_PDF)
/* harmony export */ });
/* harmony import */ var src_environments_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! src/environments/environment */ 92340);

const GET_LIST_ORDER_FOR_VERIFIKASI_LAB = `${src_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.webApiPis}` + 'OrderManagement/GetListOrderForVerifikasi';
const GET_DETAIL_ORDER_FOR_VERIFIKASI_LAB = `${src_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.webApiPis}` + 'OrderManagement/GetHeaderDetailsForVerifikasi';
const POST_VERIFIKASI_ORDER_LAB = `${src_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.webApiPis}` + 'OrderManagement/VerifikasiOrderLAB';
const POST_CANCEL_ORDER_LAB = `${src_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.webApiPis}` + 'OrderManagement/CancelOrderAll';
const GET_RESULT_LIS_PDF = `${src_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.webApiPis}` + 'OrderManagement/GetResultLIS_PDF/';


/***/ }),

/***/ 33473:
/*!***********************************************************!*\
  !*** ./src/app/api/OM/SETUP_DATA/VERIFIKASI_ORDER_RAD.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GET_LIST_ORDER_FOR_VERIFIKASI_RAD": () => (/* binding */ GET_LIST_ORDER_FOR_VERIFIKASI_RAD),
/* harmony export */   "GET_DETAIL_ORDER_FOR_VERIFIKASI_RAD": () => (/* binding */ GET_DETAIL_ORDER_FOR_VERIFIKASI_RAD),
/* harmony export */   "POST_VERIFIKASI_ORDER_RAD": () => (/* binding */ POST_VERIFIKASI_ORDER_RAD),
/* harmony export */   "POST_CANCEL_ORDER_RAD": () => (/* binding */ POST_CANCEL_ORDER_RAD)
/* harmony export */ });
/* harmony import */ var src_environments_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! src/environments/environment */ 92340);

const GET_LIST_ORDER_FOR_VERIFIKASI_RAD = `${src_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.webApiPis}` + 'OrderManagement/GetListOrderForVerifikasi';
const GET_DETAIL_ORDER_FOR_VERIFIKASI_RAD = `${src_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.webApiPis}` + 'OrderManagement/GetHeaderDetailsForVerifikasi';
const POST_VERIFIKASI_ORDER_RAD = `${src_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.webApiPis}` + 'OrderManagement/VerifikasiOrderRAD';
const POST_CANCEL_ORDER_RAD = `${src_environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.webApiPis}` + 'OrderManagement/CancelOrderAll';


/***/ }),

/***/ 79751:
/*!********************************************!*\
  !*** ./src/app/api/OM/SETUP_DATA/index.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SETUP_DATA": () => (/* binding */ SETUP_DATA)
/* harmony export */ });
/* harmony import */ var _SETUP_PETUGAS__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SETUP_PETUGAS */ 10552);

const SETUP_DATA = Object.assign({}, {
    SETUP_PETUGAS: _SETUP_PETUGAS__WEBPACK_IMPORTED_MODULE_0__,
});


/***/ }),

/***/ 20721:
/*!*********************************!*\
  !*** ./src/app/api/OM/index.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "API_ORDER_MANAGEMENT": () => (/* binding */ API_ORDER_MANAGEMENT)
/* harmony export */ });
/* harmony import */ var _SETUP_DATA__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SETUP_DATA */ 79751);
/* harmony import */ var _SETUP_DATA_VERIFIKASI_ORDER_LAB__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SETUP_DATA/VERIFIKASI_ORDER_LAB */ 558);
/* harmony import */ var _SETUP_DATA_VERIFIKASI_ORDER_RAD__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SETUP_DATA/VERIFIKASI_ORDER_RAD */ 33473);
/* harmony import */ var _HASIL_RADIOLOGI_HASIL_RADIOLOGI__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./HASIL_RADIOLOGI/HASIL_RADIOLOGI */ 49958);




const API_ORDER_MANAGEMENT = Object.assign({}, {
    SETUP_DATA: _SETUP_DATA__WEBPACK_IMPORTED_MODULE_0__.SETUP_DATA,
    VERIFIKASI_ORDER_LAB: _SETUP_DATA_VERIFIKASI_ORDER_LAB__WEBPACK_IMPORTED_MODULE_1__,
    VERIFIKASI_ORDER_RAD: _SETUP_DATA_VERIFIKASI_ORDER_RAD__WEBPACK_IMPORTED_MODULE_2__,
    HASIL_RADIOLOGI: _HASIL_RADIOLOGI_HASIL_RADIOLOGI__WEBPACK_IMPORTED_MODULE_3__,
});


/***/ }),

/***/ 69870:
/*!*************************************************!*\
  !*** ./src/app/modules/OM/om-routing.module.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OrderManagementRoutingModule": () => (/* binding */ OrderManagementRoutingModule)
/* harmony export */ });
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/router */ 39895);
/* harmony import */ var _pages_input_hasil_radiologi_detail_hasil_radiologi_detail_hasil_radiologi_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pages/input-hasil-radiologi/detail-hasil-radiologi/detail-hasil-radiologi.component */ 79057);
/* harmony import */ var _pages_input_hasil_radiologi_input_hasil_radiologi_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pages/input-hasil-radiologi/input-hasil-radiologi.component */ 15987);
/* harmony import */ var _pages_setup_data_setup_petugas_setup_petugas_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pages/setup-data/setup-petugas/setup-petugas.component */ 76630);
/* harmony import */ var _pages_verifikasi_order_lab_verifikasi_order_lab_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/verifikasi-order-lab/verifikasi-order-lab.component */ 63566);
/* harmony import */ var _pages_verifikasi_order_rad_verifikasi_order_rad_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pages/verifikasi-order-rad/verifikasi-order-rad.component */ 33025);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/core */ 37716);








const orderManagementRoutes = [
    {
        path: "setup-data", component: null, children: [
            {
                path: "setup-petugas", component: _pages_setup_data_setup_petugas_setup_petugas_component__WEBPACK_IMPORTED_MODULE_2__.SetupPetugasComponent, data: { title: 'Setup Petugas' },
            }
        ]
    },
    {
        path: "verifikasi-order-laboratorium", component: _pages_verifikasi_order_lab_verifikasi_order_lab_component__WEBPACK_IMPORTED_MODULE_3__.VerifikasiOrderLabComponent, data: { title: 'Verifikasi Order Laboratorium' },
    },
    {
        path: "verifikasi-order-radiologi", component: _pages_verifikasi_order_rad_verifikasi_order_rad_component__WEBPACK_IMPORTED_MODULE_4__.VerifikasiOrderRadComponent, data: { title: 'Verifikasi Order Radiologi' },
    },
    {
        path: "input-hasil-radiologi", component: _pages_input_hasil_radiologi_input_hasil_radiologi_component__WEBPACK_IMPORTED_MODULE_1__.InputHasilRadiologiComponent, data: { title: 'Input Hasil Order Radiologi' },
    },
    {
        path: "detail-hasil-radiologi/:id/:key", component: _pages_input_hasil_radiologi_detail_hasil_radiologi_detail_hasil_radiologi_component__WEBPACK_IMPORTED_MODULE_0__.DetailHasilRadiologiComponent, data: { title: 'Hasil Order Radiologi' },
    }
];
class OrderManagementRoutingModule {
}
OrderManagementRoutingModule.ɵfac = function OrderManagementRoutingModule_Factory(t) { return new (t || OrderManagementRoutingModule)(); };
OrderManagementRoutingModule.ɵmod = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵdefineNgModule"]({ type: OrderManagementRoutingModule });
OrderManagementRoutingModule.ɵinj = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵdefineInjector"]({ imports: [[_angular_router__WEBPACK_IMPORTED_MODULE_6__.RouterModule.forChild(orderManagementRoutes)], _angular_router__WEBPACK_IMPORTED_MODULE_6__.RouterModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_5__["ɵɵsetNgModuleScope"](OrderManagementRoutingModule, { imports: [_angular_router__WEBPACK_IMPORTED_MODULE_6__.RouterModule], exports: [_angular_router__WEBPACK_IMPORTED_MODULE_6__.RouterModule] }); })();


/***/ }),

/***/ 52528:
/*!*****************************************!*\
  !*** ./src/app/modules/OM/om.module.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OrderManagementModule": () => (/* binding */ OrderManagementModule)
/* harmony export */ });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/common */ 38583);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/forms */ 3679);
/* harmony import */ var _syncfusion_ej2_angular_navigations__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @syncfusion/ej2-angular-navigations */ 93809);
/* harmony import */ var _shared_shared_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/shared.module */ 72271);
/* harmony import */ var _pages_verifikasi_order_lab_verifikasi_order_lab_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pages/verifikasi-order-lab/verifikasi-order-lab.component */ 63566);
/* harmony import */ var _om_routing_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./om-routing.module */ 69870);
/* harmony import */ var _pages_verifikasi_order_rad_verifikasi_order_rad_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/verifikasi-order-rad/verifikasi-order-rad.component */ 33025);
/* harmony import */ var _pages_setup_data_setup_petugas_setup_petugas_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pages/setup-data/setup-petugas/setup-petugas.component */ 76630);
/* harmony import */ var _pages_input_hasil_radiologi_input_hasil_radiologi_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./pages/input-hasil-radiologi/input-hasil-radiologi.component */ 15987);
/* harmony import */ var _pages_input_hasil_radiologi_detail_hasil_radiologi_detail_hasil_radiologi_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./pages/input-hasil-radiologi/detail-hasil-radiologi/detail-hasil-radiologi.component */ 79057);
/* harmony import */ var _syncfusion_ej2_angular_richtexteditor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @syncfusion/ej2-angular-richtexteditor */ 31868);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/core */ 37716);












class OrderManagementModule {
}
OrderManagementModule.ɵfac = function OrderManagementModule_Factory(t) { return new (t || OrderManagementModule)(); };
OrderManagementModule.ɵmod = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineNgModule"]({ type: OrderManagementModule });
OrderManagementModule.ɵinj = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineInjector"]({ providers: [
        _syncfusion_ej2_angular_richtexteditor__WEBPACK_IMPORTED_MODULE_8__.ToolbarService,
        _syncfusion_ej2_angular_richtexteditor__WEBPACK_IMPORTED_MODULE_8__.LinkService,
        _syncfusion_ej2_angular_richtexteditor__WEBPACK_IMPORTED_MODULE_8__.ImageService,
        _syncfusion_ej2_angular_richtexteditor__WEBPACK_IMPORTED_MODULE_8__.HtmlEditorService
    ], imports: [[
            _angular_common__WEBPACK_IMPORTED_MODULE_9__.CommonModule,
            _angular_forms__WEBPACK_IMPORTED_MODULE_10__.FormsModule,
            _angular_forms__WEBPACK_IMPORTED_MODULE_10__.ReactiveFormsModule,
            _shared_shared_module__WEBPACK_IMPORTED_MODULE_0__.SharedModule,
            _syncfusion_ej2_angular_navigations__WEBPACK_IMPORTED_MODULE_11__.ContextMenuModule,
            _om_routing_module__WEBPACK_IMPORTED_MODULE_2__.OrderManagementRoutingModule,
            _syncfusion_ej2_angular_richtexteditor__WEBPACK_IMPORTED_MODULE_8__.RichTextEditorModule,
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵsetNgModuleScope"](OrderManagementModule, { declarations: [_pages_verifikasi_order_lab_verifikasi_order_lab_component__WEBPACK_IMPORTED_MODULE_1__.VerifikasiOrderLabComponent,
        _pages_verifikasi_order_rad_verifikasi_order_rad_component__WEBPACK_IMPORTED_MODULE_3__.VerifikasiOrderRadComponent,
        _pages_setup_data_setup_petugas_setup_petugas_component__WEBPACK_IMPORTED_MODULE_4__.SetupPetugasComponent,
        _pages_input_hasil_radiologi_input_hasil_radiologi_component__WEBPACK_IMPORTED_MODULE_5__.InputHasilRadiologiComponent,
        _pages_input_hasil_radiologi_detail_hasil_radiologi_detail_hasil_radiologi_component__WEBPACK_IMPORTED_MODULE_6__.DetailHasilRadiologiComponent], imports: [_angular_common__WEBPACK_IMPORTED_MODULE_9__.CommonModule,
        _angular_forms__WEBPACK_IMPORTED_MODULE_10__.FormsModule,
        _angular_forms__WEBPACK_IMPORTED_MODULE_10__.ReactiveFormsModule,
        _shared_shared_module__WEBPACK_IMPORTED_MODULE_0__.SharedModule,
        _syncfusion_ej2_angular_navigations__WEBPACK_IMPORTED_MODULE_11__.ContextMenuModule,
        _om_routing_module__WEBPACK_IMPORTED_MODULE_2__.OrderManagementRoutingModule,
        _syncfusion_ej2_angular_richtexteditor__WEBPACK_IMPORTED_MODULE_8__.RichTextEditorModule] }); })();


/***/ }),

/***/ 79057:
/*!*******************************************************************************************************************!*\
  !*** ./src/app/modules/OM/pages/input-hasil-radiologi/detail-hasil-radiologi/detail-hasil-radiologi.component.ts ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DetailHasilRadiologiComponent": () => (/* binding */ DetailHasilRadiologiComponent)
/* harmony export */ });
/* harmony import */ var _api_PIS_SETUP_DATA__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../api/PIS/SETUP_DATA */ 46942);
/* harmony import */ var _json_input_hasil_radiologi_config_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../json/input-hasil-radiologi.config.json */ 59294);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/router */ 39895);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/forms */ 3679);
/* harmony import */ var src_app_modules_shared_services_utility_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/modules/shared/services/utility.service */ 26966);
/* harmony import */ var src_app_modules_shared_services_encryption_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/modules/shared/services/encryption.service */ 26512);
/* harmony import */ var _services_input_hasil_radiologi_input_hasil_radiologi_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../services/input-hasil-radiologi/input-hasil-radiologi.service */ 93565);
/* harmony import */ var _shared_components_organism_card_card_layout_card_layout_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../shared/components/organism/card/card-layout/card-layout.component */ 15380);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/common */ 38583);
/* harmony import */ var _shared_components_organism_loockUp_org_look_up_org_look_up_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../shared/components/organism/loockUp/org-look-up/org-look-up.component */ 35260);
/* harmony import */ var _syncfusion_ej2_angular_richtexteditor__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @syncfusion/ej2-angular-richtexteditor */ 31868);












const _c0 = ["LookupDokter"];
const _c1 = ["DeskripsiRTE"];
const _c2 = ["KesanRTE"];
function DetailHasilRadiologiComponent_li_27_Template(rf, ctx) { if (rf & 1) {
    const _r6 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](0, "li", 48);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵlistener"]("click", function DetailHasilRadiologiComponent_li_27_Template_li_click_0_listener() { const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵrestoreView"](_r6); const item_r4 = restoredCtx.$implicit; const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵnextContext"](); return ctx_r5.handleClickRiwayatDetail(item_r4); });
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](2, "span", 49);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelement"](3, "i");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
} if (rf & 2) {
    const item_r4 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtextInterpolate1"](" ", item_r4.tgl_riwayat, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵclassMap"](item_r4.status == "published" ? "fas fa-check-circle fa-sm text-biru-tua" : "fas fa-check-circle fa-sm text-abu-muda");
} }
class DetailHasilRadiologiComponent {
    constructor(router, formBuilder, activatedRoute, utilityService, encryptionService, inputHasilRadiologiService) {
        this.router = router;
        this.formBuilder = formBuilder;
        this.activatedRoute = activatedRoute;
        this.utilityService = utilityService;
        this.encryptionService = encryptionService;
        this.inputHasilRadiologiService = inputHasilRadiologiService;
        this.Config = _json_input_hasil_radiologi_config_json__WEBPACK_IMPORTED_MODULE_1__;
        this.API_PIS_SETUP_DATA = _api_PIS_SETUP_DATA__WEBPACK_IMPORTED_MODULE_0__;
        this.ButtonNav = [
            { Id: 'Back', Icons1: 'fa-chevron-left fa-sm', Captions: 'Back' },
            { Id: 'New', Icons1: 'fa-file fa-sm', Captions: 'New' },
            { Id: 'Update', Icons1: 'fa-edit fa-sm', Captions: 'Update' },
            { Id: 'Save', Icons1: 'fa-save fa-sm', Captions: 'Simpan & New' },
        ];
        this.RiwayatHasilRadiologi = [];
        this.UrlLookupDokter = this.API_PIS_SETUP_DATA.API_SETUP_DATA.SETUP_DOKTER.POST_GET_ALL_DOKTER_FOR_LOOKUP;
        this.toolbarsRTE = {
            items: [
                'Undo', 'Redo', '|',
                'Bold', 'Italic', 'Underline', '|',
                'FontSize', 'FontColor', '|',
                'LowerCase', 'UpperCase', '|',
                'Alignments', '|',
                'OrderedList', 'UnorderedList', '|',
                'Indent', 'Outdent',
            ]
        };
    }
    onResize(event) {
        this.onDetectScreenSize(event.srcElement.innerWidth);
    }
    ngOnInit() {
        this.onDetectScreenSize(window.innerWidth);
        this.onSetFormDetailRadiologiAttributes();
    }
    ngAfterViewInit() {
        setTimeout(() => {
            this.onGetDataDetail();
        }, 1);
    }
    onSetFormDetailRadiologiAttributes() {
        let date = this.utilityService.onFormatDate(new Date(), "Do/MMM/yyyy HH:mm");
        this.FormDetailHasilRadiologi = this.formBuilder.group({
            id_hasil_radiologi: [0, []],
            tgl_hasil: [date, []],
            id_order_penunjang: [0, []],
            id_order_penunjang_detail: [0, []],
            id_dokter: [0, []],
            dokter_pemeriksa: ["", []],
            nama_asisten: ["", []],
            hasil: ["", []],
            kesan: ["", []],
            status: ["", []],
        });
    }
    onDetectScreenSize(screenWidth) {
        this.screenWidth = screenWidth;
    }
    handleClickButtonNav(ButtonId) {
        switch (ButtonId) {
            case 'Back':
                this.router.navigateByUrl("dashboard/OM/input-hasil-radiologi");
                break;
            case 'New':
                this.onResetFormDetailRadiologi();
                break;
            case 'Update':
                this.onUpdateFormDetailRadiologi(this.FormDetailHasilRadiologi.value);
                break;
            case 'Save':
                this.onSubmitFormDetailRadiologi(this.FormDetailHasilRadiologi.value);
                break;
            default:
                break;
        }
    }
    onGetDataDetail() {
        this.SelectedData = JSON.parse(this.encryptionService.decrypt(this.activatedRoute.snapshot.params["id"]));
        setTimeout(() => {
            this.id_order_penunjang.setValue(this.SelectedData.detail.id_order_penunjang);
            this.id_order_penunjang_detail.setValue(this.SelectedData.detail.id_order_penunjang_detail);
            this.id_dokter.setValue(this.SelectedData.header.id_dokter);
            this.dokter_pemeriksa.setValue(this.SelectedData.header.nama_dokter);
            this.onGetRiwayatHasilRadiologi(this.SelectedData.detail.id_order_penunjang_detail);
        }, 500);
    }
    onGetRiwayatHasilRadiologi(id_order_penunjang_detail) {
        this.inputHasilRadiologiService.onGetRiwayatHasilRadiologi(id_order_penunjang_detail)
            .subscribe((result) => {
            this.RiwayatHasilRadiologi = result.data;
        });
    }
    handleClickRiwayatDetail(item) {
        this.id_hasil_radiologi.setValue(item.id_hasil_radiologi);
        this.tgl_hasil.setValue(item.tgl_riwayat);
        this.id_order_penunjang.setValue(item.id_order_penunjang);
        this.id_order_penunjang_detail.setValue(item.id_order_penunjang_detail);
        this.id_dokter.setValue(item.id_dokter);
        this.dokter_pemeriksa.setValue(item.nama_dokter);
        this.nama_asisten.setValue(item.nama_asisten);
        this.hasil.setValue(item.hasil);
        this.kesan.setValue(item.kesan);
        this.SelectedRiwayatHasilRadiologi = item;
    }
    handleClickPublishHasil(SelectedRiwayatHasilRadiologi) {
        this.inputHasilRadiologiService.onPublish(SelectedRiwayatHasilRadiologi.id_hasil_radiologi, SelectedRiwayatHasilRadiologi.id_order_penunjang_detail)
            .subscribe((result) => {
            if (result) {
                this.utilityService.onShowingCustomAlert('success', 'Success', 'Hasil Radiologi Berhasil Dipublish')
                    .then(() => {
                    this.onResetFormDetailRadiologi();
                    this.onGetRiwayatHasilRadiologi(SelectedRiwayatHasilRadiologi.id_order_penunjang_detail);
                });
            }
        });
    }
    handleClickLookupDokterResident(args) {
        this.LookupDokter.onOpenModal();
    }
    onGetSelectedLookupDokter(args) {
        document.getElementById('nama_asisten').value = args.full_name;
        this.nama_asisten.setValue(args.full_name);
    }
    handleSelectedTabId(args) {
    }
    onSubmitFormDetailRadiologi(FormDetailRadiologi) {
        this.inputHasilRadiologiService.onPostSave(FormDetailRadiologi)
            .subscribe((result) => {
            if (result) {
                this.utilityService.onShowingCustomAlert('success', 'Success', 'Hasil Radiologi Berhasil Disimpan')
                    .then(() => {
                    this.onResetFormDetailRadiologi();
                    this.onGetRiwayatHasilRadiologi(FormDetailRadiologi.id_order_penunjang_detail);
                });
            }
        });
    }
    onUpdateFormDetailRadiologi(FormDetailRadiologi) {
        let parameter = {
            "id_hasil_radiologi": FormDetailRadiologi.id_hasil_radiologi,
            "hasil": FormDetailRadiologi.hasil,
            "kesan": FormDetailRadiologi.kesan,
            "id_dokter": FormDetailRadiologi.id_dokter,
            "nama_asisten": FormDetailRadiologi.nama_asisten
        };
        this.inputHasilRadiologiService.onUpdate(parameter)
            .subscribe((result) => {
            if (result) {
                this.utilityService.onShowingCustomAlert('success', 'Success', 'Hasil Radiologi Berhasil Diupdate')
                    .then(() => {
                    this.onResetFormDetailRadiologi();
                    this.onGetRiwayatHasilRadiologi(FormDetailRadiologi.id_order_penunjang_detail);
                });
            }
        });
    }
    onResetFormDetailRadiologi() {
        let date = this.utilityService.onFormatDate(new Date(), "Do/MMM/yyyy HH:mm");
        this.tgl_hasil.setValue(date);
        this.nama_asisten.setValue("");
        this.hasil.setValue("");
        this.kesan.setValue("");
        this.DeskripsiRTE.value = "";
        this.KesanRTE.value = "";
        this.onGetDataDetail();
    }
    get id_hasil_radiologi() { return this.FormDetailHasilRadiologi.get('id_hasil_radiologi'); }
    get tgl_hasil() { return this.FormDetailHasilRadiologi.get('tgl_hasil'); }
    get id_order_penunjang() { return this.FormDetailHasilRadiologi.get('id_order_penunjang'); }
    get id_order_penunjang_detail() { return this.FormDetailHasilRadiologi.get('id_order_penunjang_detail'); }
    get id_dokter() { return this.FormDetailHasilRadiologi.get('id_dokter'); }
    get dokter_pemeriksa() { return this.FormDetailHasilRadiologi.get('dokter_pemeriksa'); }
    get nama_asisten() { return this.FormDetailHasilRadiologi.get('nama_asisten'); }
    get hasil() { return this.FormDetailHasilRadiologi.get('hasil'); }
    get kesan() { return this.FormDetailHasilRadiologi.get('kesan'); }
}
DetailHasilRadiologiComponent.ɵfac = function DetailHasilRadiologiComponent_Factory(t) { return new (t || DetailHasilRadiologiComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](_angular_router__WEBPACK_IMPORTED_MODULE_8__.Router), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](_angular_forms__WEBPACK_IMPORTED_MODULE_9__.FormBuilder), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](_angular_router__WEBPACK_IMPORTED_MODULE_8__.ActivatedRoute), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](src_app_modules_shared_services_utility_service__WEBPACK_IMPORTED_MODULE_2__.UtilityService), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](src_app_modules_shared_services_encryption_service__WEBPACK_IMPORTED_MODULE_3__.EncryptionService), _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdirectiveInject"](_services_input_hasil_radiologi_input_hasil_radiologi_service__WEBPACK_IMPORTED_MODULE_4__.InputHasilRadiologiService)); };
DetailHasilRadiologiComponent.ɵcmp = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineComponent"]({ type: DetailHasilRadiologiComponent, selectors: [["app-detail-hasil-radiologi"]], viewQuery: function DetailHasilRadiologiComponent_Query(rf, ctx) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵviewQuery"](_c0, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵviewQuery"](_c1, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵviewQuery"](_c2, 5);
    } if (rf & 2) {
        let _t;
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵloadQuery"]()) && (ctx.LookupDokter = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵloadQuery"]()) && (ctx.DeskripsiRTE = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵloadQuery"]()) && (ctx.KesanRTE = _t.first);
    } }, hostBindings: function DetailHasilRadiologiComponent_HostBindings(rf, ctx) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵlistener"]("resize", function DetailHasilRadiologiComponent_resize_HostBindingHandler($event) { return ctx.onResize($event); }, false, _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵresolveWindow"]);
    } }, decls: 74, vars: 16, consts: [[3, "ButtonNav", "onClickButtonNav"], [1, "row"], [1, "col-lg-3", "col-md-3", "col-sm-3", "col-xs-3"], [1, "col-lg-12", "col-md-12", "col-sm-12", "col-sx-12", "mb-2"], [1, "row", "align-items-center"], [1, "col-lg-5", "col-md-5", "col-sm-5", "col-xs-5"], [1, "mb-0", "text-hitam-muda"], [1, "col-lg-7", "col-md-7", "col-sm-7", "col-xs-7", "ps-0"], ["type", "text", 1, "form-control", "form-select-sm", "see-detail", 3, "value"], [1, "col-lg-12", "col-md-12", "col-sm-12", "col-sx-12", "mb-3"], [1, "col-lg-12", "col-md-12", "col-sm-12", "col-xs-12"], [1, "card", "shadow-sm"], [1, "card-header", "px-2", "py-1"], [1, "text-biru-muda", "mb-0"], [1, "card-body", "p-2", 2, "height", "calc(100vh - 18rem)"], [1, "col-lg-12", "col-md-12", "col-sm-12", "col-xs-12", "mb-2"], [1, "list-group"], ["class", "list-group-item", 3, "click", 4, "ngFor", "ngForOf"], [1, "col-lg-9", "col-md-9", "col-sm-3", "col-xs-3"], [3, "formGroup"], ["type", "button", 1, "btn", "btn-primary", "btn-sm", 3, "click"], [1, "fas", "fa-check", "fa-sm"], [1, "col-lg-12", "col-md-12", "col-sm-12", "col-xs-12", "mb-3"], [1, "card", "border", "shadow-sm"], [1, "card-body", "p-2"], [1, "col-lg-2", "col-md-2", "col-sm-2", "col-xs-2", "pe-2"], [1, "mb-1"], ["type", "text", "readonly", "", "formControlName", "tgl_hasil", 1, "form-control", "form-select-sm"], [1, "col-lg-5", "col-md-5", "col-sm-5", "col-xs-5", "px-2"], ["type", "text", "readonly", "", "formControlName", "dokter_pemeriksa", 1, "form-control", "form-select-sm"], [1, "col-lg-5", "col-md-5", "col-sm-5", "col-xs-5", "ps-2"], [1, "input-group"], ["type", "text", "readonly", "", "formControlName", "nama_asisten", 1, "form-control", "form-select-sm", 3, "id"], ["id", "btnInputGroup", "type", "button", 1, "btn", "btn-primary", 2, "padding", ".1rem .8rem", "background-color", "#00afff; border: 0", 3, "click"], [1, "fas", "fa-search"], [3, "modal-title", "filter-lookup", "lookup-url", "columns", "onGetSelectedData"], ["LookupDokter", ""], ["id", "nav-tab", "role", "tablist", 1, "nav", "nav-tabs"], ["id", "nav-deskripsi-tab", "data-bs-toggle", "tab", "data-bs-target", "#nav-deskripsi", "type", "button", "role", "tab", "aria-controls", "nav-deskripsi", "aria-selected", "true", 1, "nav-link", "active"], ["id", "nav-kesan-tab", "data-bs-toggle", "tab", "data-bs-target", "#nav-kesan", "type", "button", "role", "tab", "aria-controls", "nav-kesan", "aria-selected", "false", 1, "nav-link"], ["id", "nav-tabContent", 1, "tab-content"], ["id", "nav-deskripsi", "role", "tabpanel", "aria-labelledby", "nav-deskripsi-tab", 1, "tab-pane", "fade", "show", "active"], [1, "col-lg-12", "col-md-12", "col-sm-12", "col-xs-12", "py-2"], ["formControlName", "hasil", 3, "id", "toolbarSettings", "height"], ["DeskripsiRTE", ""], ["id", "nav-kesan", "role", "tabpanel", "aria-labelledby", "nav-kesan-tab", 1, "tab-pane", "fade"], ["formControlName", "kesan", 3, "id", "toolbarSettings", "height"], ["KesanRTE", ""], [1, "list-group-item", 3, "click"], [1, "float-end"]], template: function DetailHasilRadiologiComponent_Template(rf, ctx) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](0, "org-card-layout", 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵlistener"]("onClickButtonNav", function DetailHasilRadiologiComponent_Template_org_card_layout_onClickButtonNav_0_listener($event) { return ctx.handleClickButtonNav($event); });
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](1, "div", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](2, "div", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](3, "div", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](4, "div", 3);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](5, "div", 4);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](6, "div", 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](7, "p", 6);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](8, "Nama Pasien :");
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](9, "div", 7);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelement"](10, "input", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](11, "div", 9);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](12, "div", 4);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](13, "div", 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](14, "p", 6);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](15, "Pemeriksaan :");
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](16, "div", 7);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelement"](17, "input", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](18, "div", 10);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](19, "div", 11);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](20, "div", 12);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](21, "p", 13);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](22, "Riwayat");
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](23, "div", 14);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](24, "div", 4);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](25, "div", 15);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](26, "ul", 16);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtemplate"](27, DetailHasilRadiologiComponent_li_27_Template, 4, 3, "li", 17);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](28, "div", 18);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](29, "form", 19);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](30, "div", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](31, "div", 15);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](32, "button", 20);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵlistener"]("click", function DetailHasilRadiologiComponent_Template_button_click_32_listener() { return ctx.handleClickPublishHasil(ctx.SelectedRiwayatHasilRadiologi); });
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelement"](33, "i", 21);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](34, " Publish Hasil ");
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](35, "div", 22);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](36, "div", 23);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](37, "div", 24);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](38, "div", 4);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](39, "div", 25);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](40, "p", 26);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](41, "Tanggal");
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelement"](42, "input", 27);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](43, "div", 28);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](44, "p", 26);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](45, "Dokter Pemeriksa");
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelement"](46, "input", 29);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](47, "div", 30);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](48, "p", 26);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](49, "Dokter Resident");
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](50, "div", 31);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelement"](51, "input", 32);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](52, "button", 33);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵlistener"]("click", function DetailHasilRadiologiComponent_Template_button_click_52_listener($event) { return ctx.handleClickLookupDokterResident($event); });
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelement"](53, "i", 34);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](54, "org-look-up", 35, 36);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵlistener"]("onGetSelectedData", function DetailHasilRadiologiComponent_Template_org_look_up_onGetSelectedData_54_listener($event) { return ctx.onGetSelectedLookupDokter($event); });
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](56, "div", 10);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](57, "nav");
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](58, "div", 37);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](59, "button", 38);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](60, " Deskripsi ");
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](61, "button", 39);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵtext"](62, " Kesan ");
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](63, "div", 40);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](64, "div", 41);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](65, "div", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](66, "div", 42);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelement"](67, "ejs-richtexteditor", 43, 44);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](69, "div", 45);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](70, "div", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementStart"](71, "div", 42);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelement"](72, "ejs-richtexteditor", 46, 47);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵelementEnd"]();
    } if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵproperty"]("ButtonNav", ctx.ButtonNav);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"](10);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵpropertyInterpolate"]("value", ctx.SelectedData ? ctx.SelectedData.header.nama_pasien : "");
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"](7);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵpropertyInterpolate"]("value", ctx.SelectedData ? ctx.SelectedData.detail.nama_tindakan_penunjang : "");
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"](10);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵproperty"]("ngForOf", ctx.RiwayatHasilRadiologi);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵproperty"]("formGroup", ctx.FormDetailHasilRadiologi);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"](22);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵproperty"]("id", "nama_asisten");
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵproperty"]("modal-title", "Pilih Dokter")("filter-lookup", ctx.Config.LookupDokter.filter)("lookup-url", ctx.UrlLookupDokter)("columns", ctx.Config.LookupDokter.columns);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"](13);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵproperty"]("id", "Deskripsi")("toolbarSettings", ctx.toolbarsRTE)("height", ctx.screenWidth >= 1920 ? 620 : 300);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵadvance"](5);
        _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵproperty"]("id", "Kesan")("toolbarSettings", ctx.toolbarsRTE)("height", ctx.screenWidth >= 1920 ? 620 : 300);
    } }, directives: [_shared_components_organism_card_card_layout_card_layout_component__WEBPACK_IMPORTED_MODULE_5__.OrgCardLayoutComponent, _angular_common__WEBPACK_IMPORTED_MODULE_10__.NgForOf, _angular_forms__WEBPACK_IMPORTED_MODULE_9__["ɵNgNoValidate"], _angular_forms__WEBPACK_IMPORTED_MODULE_9__.NgControlStatusGroup, _angular_forms__WEBPACK_IMPORTED_MODULE_9__.FormGroupDirective, _angular_forms__WEBPACK_IMPORTED_MODULE_9__.DefaultValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_9__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_9__.FormControlName, _shared_components_organism_loockUp_org_look_up_org_look_up_component__WEBPACK_IMPORTED_MODULE_6__.OrgLookUpComponent, _syncfusion_ej2_angular_richtexteditor__WEBPACK_IMPORTED_MODULE_11__.RichTextEditorComponent], styles: ["#Kesan_toolbar_wrapper[_ngcontent-%COMP%] {\r\n  height: 40px !important;\r\n}\r\n\r\n#Kesanrte-view[_ngcontent-%COMP%] {\r\n  height: 260px !important;\r\n}\r\n\r\nli.list-group-item[_ngcontent-%COMP%]:hover {\r\n  background-color: var(--biru-muda);\r\n  color: white;\r\n}"] });


/***/ }),

/***/ 15987:
/*!*******************************************************************************************!*\
  !*** ./src/app/modules/OM/pages/input-hasil-radiologi/input-hasil-radiologi.component.ts ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InputHasilRadiologiComponent": () => (/* binding */ InputHasilRadiologiComponent)
/* harmony export */ });
/* harmony import */ var _json_input_hasil_radiologi_config_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./json/input-hasil-radiologi.config.json */ 59294);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/router */ 39895);
/* harmony import */ var src_app_modules_shared_services_utility_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/app/modules/shared/services/utility.service */ 26966);
/* harmony import */ var src_app_modules_shared_services_encryption_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/modules/shared/services/encryption.service */ 26512);
/* harmony import */ var _services_input_hasil_radiologi_input_hasil_radiologi_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/input-hasil-radiologi/input-hasil-radiologi.service */ 93565);
/* harmony import */ var _shared_components_organism_card_card_layout_card_layout_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../shared/components/organism/card/card-layout/card-layout.component */ 15380);
/* harmony import */ var _shared_components_molecules_filter_mol_offcanvas_filter_mol_offcanvas_filter_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../shared/components/molecules/filter/mol-offcanvas-filter/mol-offcanvas-filter.component */ 55682);
/* harmony import */ var _syncfusion_ej2_angular_grids__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @syncfusion/ej2-angular-grids */ 46555);
/* harmony import */ var _syncfusion_ej2_angular_navigations__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @syncfusion/ej2-angular-navigations */ 93809);










const _c0 = ["GridData"];
const _c1 = ["GridDataDetail"];
class InputHasilRadiologiComponent {
    constructor(router, utilityService, encryptionService, inputHasilRadiologiService) {
        this.router = router;
        this.utilityService = utilityService;
        this.encryptionService = encryptionService;
        this.inputHasilRadiologiService = inputHasilRadiologiService;
        this.Config = _json_input_hasil_radiologi_config_json__WEBPACK_IMPORTED_MODULE_0__;
        this.FilterColumnDatasource = [
            { text: 'No. Order', value: "otop.nomor_order_penunjang" },
            { text: 'Tgl. Order', value: 'otop.tanggal_order_penunjang' },
            { text: 'Nama Pasien', value: "concat(p.nama_depan, ' ',p.nama_belakang)" },
            { text: 'No. Register', value: 'tp.no_register' },
            { text: 'No. Rekam Medis', value: 'tp.no_rekam_medis' },
        ];
        this.GridDatasource = [];
        this.GridToolbar = ["Search"];
        this.GridDetailDatasource = [];
        this.GridDetailToolbar = ["Search"];
        this.GridDetailOrderContextMenuItems = [
            { id: 'hasil_radiologi', text: 'Hasil Radiologi', iconCss: 'fas fa-binoculars fa-sm' }
        ];
    }
    onResize(event) {
        this.onDetectScreenSize(event.srcElement.innerWidth);
    }
    ngOnInit() {
        this.onDetectScreenSize(window.innerWidth);
        this.handlePencarianFilter([]);
    }
    onDetectScreenSize(screenWidth) {
        this.screenWidth = screenWidth;
    }
    handlePencarianFilter(args) {
        this.inputHasilRadiologiService.onGetAll(args)
            .subscribe((result) => {
            if (result) {
                this.GridDatasource = result.data;
            }
        });
    }
    handleSelectedRow(args) {
        this.GridDataOrderSelectedRecords = args.data;
        this.inputHasilRadiologiService.onGetDetailById(args.data.id_order_penunjang)
            .subscribe((result) => {
            this.GridDetailDatasource = result.data;
        });
    }
    handleSelectedRowDetail(args) {
        this.GridDetailOrderSelectedRecords = args.data;
    }
    handleSelectGridContextMenu(args) {
        let id = args.item.id;
        switch (id) {
            case "hasil_radiologi":
                let data = {
                    header: this.GridDataOrderSelectedRecords,
                    detail: this.GridDetailOrderSelectedRecords,
                };
                let data_encrypted = this.encryptionService.encrypt(JSON.stringify(data));
                this.router.navigate(['dashboard/OM/detail-hasil-radiologi/', data_encrypted, "GRAHCIS"]);
                break;
            default:
                break;
        }
    }
}
InputHasilRadiologiComponent.ɵfac = function InputHasilRadiologiComponent_Factory(t) { return new (t || InputHasilRadiologiComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_angular_router__WEBPACK_IMPORTED_MODULE_7__.Router), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](src_app_modules_shared_services_utility_service__WEBPACK_IMPORTED_MODULE_1__.UtilityService), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](src_app_modules_shared_services_encryption_service__WEBPACK_IMPORTED_MODULE_2__.EncryptionService), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdirectiveInject"](_services_input_hasil_radiologi_input_hasil_radiologi_service__WEBPACK_IMPORTED_MODULE_3__.InputHasilRadiologiService)); };
InputHasilRadiologiComponent.ɵcmp = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineComponent"]({ type: InputHasilRadiologiComponent, selectors: [["app-input-hasil-radiologi"]], viewQuery: function InputHasilRadiologiComponent_Query(rf, ctx) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵviewQuery"](_c0, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵviewQuery"](_c1, 5);
    } if (rf & 2) {
        let _t;
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵloadQuery"]()) && (ctx.GridData = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵloadQuery"]()) && (ctx.GridDetail = _t.first);
    } }, hostBindings: function InputHasilRadiologiComponent_HostBindings(rf, ctx) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("resize", function InputHasilRadiologiComponent_resize_HostBindingHandler($event) { return ctx.onResize($event); }, false, _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵresolveWindow"]);
    } }, decls: 41, vars: 143, consts: [[1, "row", "mb-2"], [1, "col-lg-12", "col-md-12", "col-sm-12", "col-xs-12"], [3, "FilterColumnDatasource", "handle-pencarian"], [1, "card", "shadow-sm"], [1, "card-header"], [1, "mb-0", "text-biru-muda"], [1, "card-body", "p-0"], [3, "id", "height", "dataSource", "rowHeight", "gridLines", "allowPaging", "allowResizing", "allowFiltering", "toolbar", "rowSelected"], ["GridData", ""], [3, "width", "field", "headerText", "visible", "type", "allowEditing", "allowSorting", "format", "textAlign"], [3, "width", "field", "headerText", "visible", "allowEditing", "allowSorting", "textAlign"], [3, "width", "field", "headerText", "visible", "allowEditing", "allowSorting", "textAlign", "type", "format"], [3, "width", "field", "headerText", "visible", "allowEditing", "allowSorting", "textAlign", "text"], [1, "row"], ["target", "#GridDetailOrder", 3, "items", "select"], [3, "id", "height", "dataSource", "rowHeight", "gridLines", "allowPaging", "allowResizing", "allowFiltering", "toolbar", "contextMenuItems", "rowSelected"], ["GridDetail", ""]], template: function InputHasilRadiologiComponent_Template(rf, ctx) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](0, "org-card-layout");
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](1, "div", 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](2, "div", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](3, "mol-offcanvas-filter", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("handle-pencarian", function InputHasilRadiologiComponent_Template_mol_offcanvas_filter_handle_pencarian_3_listener($event) { return ctx.handlePencarianFilter($event); });
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](4, "div", 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](5, "div", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](6, "div", 3);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](7, "div", 4);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](8, "p", 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](9, "Daftar Order");
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](10, "div", 6);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](11, "ejs-grid", 7, 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("rowSelected", function InputHasilRadiologiComponent_Template_ejs_grid_rowSelected_11_listener($event) { return ctx.handleSelectedRow($event); });
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](13, "e-columns");
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](14, "e-column", 9);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](15, "e-column", 10);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](16, "e-column", 11);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](17, "e-column", 10);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](18, "e-column", 10);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](19, "e-column", 10);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](20, "e-column", 12);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](21, "e-column", 12);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](22, "div", 13);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](23, "div", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](24, "div", 3);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](25, "div", 4);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](26, "p", 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵtext"](27, "Detail Order");
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](28, "div", 6);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](29, "ejs-contextmenu", 14);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("select", function InputHasilRadiologiComponent_Template_ejs_contextmenu_select_29_listener($event) { return ctx.handleSelectGridContextMenu($event); });
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](30, "ejs-grid", 15, 16);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵlistener"]("rowSelected", function InputHasilRadiologiComponent_Template_ejs_grid_rowSelected_30_listener($event) { return ctx.handleSelectedRowDetail($event); });
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementStart"](32, "e-columns");
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](33, "e-column", 9);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](34, "e-column", 9);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](35, "e-column", 10);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](36, "e-column", 10);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](37, "e-column", 10);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](38, "e-column", 10);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](39, "e-column", 10);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelement"](40, "e-column", 11);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵelementEnd"]();
    } if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("FilterColumnDatasource", ctx.FilterColumnDatasource);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](8);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("id", "GridDaftarOrder")("height", ctx.screenWidth >= 1920 ? "calc(100vh - 44rem)" : "calc(100vh - 34rem)")("dataSource", ctx.GridDatasource)("rowHeight", 30)("gridLines", "Both")("allowPaging", false)("allowResizing", true)("allowFiltering", true)("toolbar", ctx.GridToolbar);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("width", 50)("field", "id_order_penunjang")("headerText", "ID")("visible", false)("type", "number")("allowEditing", false)("allowSorting", false)("format", "N")("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("width", 100)("field", "tgl_order")("headerText", "TGL ORDER")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("width", 100)("field", "tanggal_hasil_order_penunjang")("headerText", "TGL HASIL")("visible", false)("allowEditing", false)("allowSorting", false)("textAlign", "Left")("type", "Date")("format", "dd/MM/yyyy");
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("width", 150)("field", "nama_pasien")("headerText", "NAMA PASIEN")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("width", 90)("field", "gender")("headerText", "GENDER")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("width", 120)("field", "nama_dokter")("headerText", "DOKTER")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("width", 100)("field", "nama_poli")("headerText", "POLIKLINIK")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("width", 100)("field", "nama_kelas")("headerText", "KELAS")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](8);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("items", ctx.GridDetailOrderContextMenuItems);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("id", "GridDetailOrder")("height", ctx.screenWidth >= 1920 ? "calc(100vh - 45rem)" : "calc(100vh - 35rem)")("dataSource", ctx.GridDetailDatasource)("rowHeight", 30)("gridLines", "Both")("allowPaging", false)("allowResizing", true)("allowFiltering", true)("toolbar", ctx.GridDetailToolbar)("contextMenuItems", ctx.GridDetailOrderContextMenuItems);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("width", 50)("field", "id_order_penunjang")("headerText", "ID")("visible", false)("type", "number")("allowEditing", false)("allowSorting", false)("format", "N")("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("width", 50)("field", "id_order_penunjang_detail")("headerText", "ID")("visible", false)("type", "number")("allowEditing", false)("allowSorting", false)("format", "N")("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("width", 150)("field", "nama_tindakan_penunjang")("headerText", "NAMA PEMERIKSAAN")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("width", 70)("field", "rad_posisi")("headerText", "L/R")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("width", 70)("field", "rad_pk")("headerText", "P/K")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("width", 100)("field", "kode_setup_tarif")("headerText", "KODE TARIF")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("width", 150)("field", "nama_setup_tarif")("headerText", "NAMA TARIF")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵproperty"]("width", 100)("field", "tgl_hasil")("headerText", "TGL HASIL")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left")("type", "Date")("format", "dd/MM/yyyy");
    } }, directives: [_shared_components_organism_card_card_layout_card_layout_component__WEBPACK_IMPORTED_MODULE_4__.OrgCardLayoutComponent, _shared_components_molecules_filter_mol_offcanvas_filter_mol_offcanvas_filter_component__WEBPACK_IMPORTED_MODULE_5__.MolOffcanvasFilterComponent, _syncfusion_ej2_angular_grids__WEBPACK_IMPORTED_MODULE_8__.GridComponent, _syncfusion_ej2_angular_grids__WEBPACK_IMPORTED_MODULE_8__.ColumnsDirective, _syncfusion_ej2_angular_grids__WEBPACK_IMPORTED_MODULE_8__.AggregateColumnsDirective, _syncfusion_ej2_angular_grids__WEBPACK_IMPORTED_MODULE_8__.ColumnDirective, _syncfusion_ej2_angular_grids__WEBPACK_IMPORTED_MODULE_8__.AggregateColumnDirective, _syncfusion_ej2_angular_navigations__WEBPACK_IMPORTED_MODULE_9__.ContextMenuComponent], styles: [".e-toolbar[_ngcontent-%COMP%]   .e-toolbar-item[_ngcontent-%COMP%]   .e-tbar-btn.e-btn[_ngcontent-%COMP%]   .e-icons.e-btn-icon[_ngcontent-%COMP%] {\r\n  min-height: 14px !important;\r\n}\r\n\r\nth.e-headercell[_ngcontent-%COMP%] {\r\n  background-color: rgba(0, 0, 0, 0.03);\r\n  color: black;\r\n  border: 1px solid rgba(0, 0, 0, 0.125);\r\n  padding: 10px !important;\r\n  height: 30px !important;\r\n}\r\n\r\nspan.e-headertext[_ngcontent-%COMP%] {\r\n  font-size: 13px !important;\r\n}\r\n\r\ntd.e-rowcell[_ngcontent-%COMP%] {\r\n  padding: 5px !important;\r\n}\r\n\r\n.modal-content-xxl[_ngcontent-%COMP%] {\r\n  width: 60rem !important;\r\n  max-width: 60rem !important;\r\n}"] });


/***/ }),

/***/ 76630:
/*!**************************************************************************************!*\
  !*** ./src/app/modules/OM/pages/setup-data/setup-petugas/setup-petugas.component.ts ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
var _json_setup_petugas_config_json__WEBPACK_IMPORTED_MODULE_0___namespace_cache;
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SetupPetugasComponent": () => (/* binding */ SetupPetugasComponent)
/* harmony export */ });
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/forms */ 3679);
/* harmony import */ var _json_setup_petugas_config_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./json/setup-petugas.config.json */ 24100);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var src_app_modules_shared_services_utility_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/app/modules/shared/services/utility.service */ 26966);
/* harmony import */ var _services_setup_data_setup_petugas_setup_petugas_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/setup-data/setup-petugas/setup-petugas.service */ 47529);
/* harmony import */ var _shared_components_organism_card_card_layout_card_layout_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../shared/components/organism/card/card-layout/card-layout.component */ 15380);
/* harmony import */ var _shared_components_organism_tabs_org_tabs_component_org_tabs_component_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../shared/components/organism/tabs/org-tabs-component/org-tabs-component.component */ 23021);
/* harmony import */ var _shared_components_organism_tabs_org_tabs_item_component_org_tabs_item_component_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../shared/components/organism/tabs/org-tabs-item-component/org-tabs-item-component.component */ 38499);
/* harmony import */ var _shared_components_organism_tabs_org_tabs_label_component_org_tabs_label_component_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../shared/components/organism/tabs/org-tabs-label-component/org-tabs-label-component.component */ 9212);
/* harmony import */ var _shared_components_organism_tabs_org_tabs_body_component_org_tabs_body_component_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../shared/components/organism/tabs/org-tabs-body-component/org-tabs-body-component.component */ 62751);
/* harmony import */ var _shared_components_molecules_grid_grid_grid_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../shared/components/molecules/grid/grid/grid.component */ 88594);
/* harmony import */ var _shared_components_molecules_form_mol_input_text_mol_input_text_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../shared/components/molecules/form/mol-input-text/mol-input-text.component */ 27034);
/* harmony import */ var _shared_components_atoms_form_atm_label_atm_label_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../shared/components/atoms/form/atm-label/atm-label.component */ 49130);
/* harmony import */ var _syncfusion_ej2_angular_dropdowns__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @syncfusion/ej2-angular-dropdowns */ 8210);
/* harmony import */ var _shared_components_atoms_form_atm_validators_atm_validators_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../shared/components/atoms/form/atm-validators/atm-validators.component */ 77513);
















const _c0 = ["OrgTabsRef"];
const _c1 = function () { return []; };
class SetupPetugasComponent {
    constructor(formBuilder, utilityService, setupPetugasService) {
        this.formBuilder = formBuilder;
        this.utilityService = utilityService;
        this.setupPetugasService = setupPetugasService;
        /**
         * Variable untuk menyimpan Configurasi Grid
         * @Json Config
        */
        this.GridConfig = /*#__PURE__*/ (_json_setup_petugas_config_json__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (_json_setup_petugas_config_json__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(_json_setup_petugas_config_json__WEBPACK_IMPORTED_MODULE_0__, 2)));
        /**
         * Variable untuk menentukan component input
         * @val normal,edit,detail
        */
        this.inputFieldState = 'normal';
        /**
         * Variable untuk menentukan tap berada di posisi mana
         * @valur data | input
        */
        this.TabId = 'Data';
        this.GridData = null;
        this.GridDataEditSettings = { allowAdding: true, allowDeleting: true, allowEditing: true };
        this.KodeGrupPenunjangDatasource = [
            { text: 'LABORATORIUM', value: 'LAB' },
            { text: 'RADIOLOGI', value: 'RAD' },
        ];
        this.KodeGrupPenunjangFiels = { text: 'text', value: 'value' };
        this.FormInputData = this.formBuilder.group({
            id_petugas: [0, [_angular_forms__WEBPACK_IMPORTED_MODULE_12__.Validators.required]],
            nama_petugas: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_12__.Validators.required]],
            kode_grup_penunjang: ['', [_angular_forms__WEBPACK_IMPORTED_MODULE_12__.Validators.required]],
        });
    }
    ngOnInit() {
        this.GridDataToolbar = [
            { text: 'Add', tooltipText: 'Add', prefixIcon: 'fas fa-plus fa-sm', id: 'add' },
            { text: 'Edit', tooltipText: 'Edit', prefixIcon: 'fas fa-edit fa-sm', id: 'edit' },
            { text: 'Detail', tooltipText: 'Detail', prefixIcon: 'fas fa-info-circle fa-sm', id: 'detail' },
            { text: 'Delete', tooltipText: 'Delete', prefixIcon: 'fas fa-trash-alt fa-sm', id: 'delete' },
            'Search'
        ];
        this.GetAllData();
    }
    handleSelectedTabId(TabId) {
        this.TabId = TabId;
        if (TabId == 'Data') {
            this.GetAllData();
        }
        else {
            // this.setNewForm();
        }
    }
    InitalizedGrid(component) {
        this.GridData = component;
    }
    handleSelectedRow(args) {
        this.SelectedData = args.data;
    }
    handleActionComplete(event) {
        // console.log(event);
    }
    handleToolbarClick(args) {
        const item = args.item.id;
        switch (item) {
            case 'add':
                this.setNewForm();
                break;
            case 'edit':
                this.setEditForm();
                break;
            case 'detail':
                this.setViewForm();
                break;
            case 'delete':
                this.DeleteData();
                break;
            default:
                break;
        }
    }
    handleClickCommandGrid(args) {
        console.log(args);
    }
    handleClickButtonNav(ButtonId) {
        switch (ButtonId) {
            case 'SaveAndNew':
                this.SaveAndNew();
                break;
            case 'Clear':
                this.Clear();
                break;
            case 'Cancel':
                this.Cancel();
                break;
            default:
                break;
        }
    }
    /** untuk identifikasi keyboard down pada grid */
    handleLoadGrid(args) {
        document.getElementsByClassName('e-grid')[0].addEventListener('keydown', this.KeyDownHandler.bind(this));
    }
    /** method setting input new data */
    setNewForm() {
        this.OrgTabsRef.onNavigateTabUsingTabId(1, 'Input');
        this.inputFieldState = 'normal';
        this.FormInputData.reset();
        this.StatusFormNew = true;
        this.ButtonNav = [
            { Id: 'Cancel', Captions: 'Back', Icons1: 'fa-arrow-left' },
            { Id: 'Clear', Captions: 'Clear', Icons1: 'fa-redo-alt' },
            { Id: 'SaveAndNew', Captions: 'Save', Icons1: 'fa-save' },
        ];
    }
    ;
    /** method setting edit data */
    setEditForm() {
        this.inputFieldState = 'edit';
        this.SetFrom(this.SelectedData);
        this.StatusFormNew = false;
        this.OrgTabsRef.onNavigateTabUsingTabId(1, 'Input');
        this.ButtonNav = [
            { Id: 'Cancel', Captions: 'Back', Icons1: 'fa-arrow-left' },
            { Id: 'SaveAndNew', Captions: 'Save', Icons1: 'fa-save' },
        ];
    }
    ;
    /** method setting lihat data detail */
    setViewForm() {
        this.OrgTabsRef.onNavigateTabUsingTabId(1, 'Input');
        this.inputFieldState = 'detail';
        this.SetFrom(this.SelectedData);
        this.ButtonNav = [
            { Id: 'Cancel', Captions: 'Back', Icons1: 'fa-arrow-left' },
        ];
    }
    /* Method untuk mengkosongkan data yang ada di form */
    ResetFrom() {
        this.FormInputData.reset();
        this.id_petugas.setValue(0);
        this.nama_petugas.setValue('');
        this.kode_grup_penunjang.setValue('');
    }
    /** Method Untuk Mereload Data Grid */
    GetAllData() {
        this.setupPetugasService.onGetAll()
            .subscribe((result) => {
            this.GridDatasource = result.data;
        });
    }
    /** Method Untuk Mengisikan data yang ada di form */
    SetFrom(Data) {
        this.FormInputData.reset();
        this.FormInputData.setValue(Data);
    }
    /** Method menyimpan | menubah data */
    SaveAndNew() {
        const Data = this.FormInputData.value;
        if (this.inputFieldState == 'normal') {
            Data.id_petugas = 0;
            this.setupPetugasService.onPostSave(Data)
                .subscribe((result) => {
                this.utilityService.onShowingCustomAlert('success', 'Berhasil Tambah Data Baru', result.message)
                    .then(() => {
                    this.Cancel();
                });
            });
        }
        else {
            this.setupPetugasService.onPutEdit(Data)
                .subscribe((result) => {
                this.utilityService.onShowingCustomAlert('success', 'Berhasil Ubah Data', result.message)
                    .then(() => {
                    this.Cancel();
                });
            });
        }
    }
    /** Method untuk Menghapus data yang ada di grid */
    DeleteData() {
        const Data = this.SelectedData;
        this.setupPetugasService.onDelete(Data.id_petugas)
            .subscribe((result) => {
            this.utilityService.onShowingCustomAlert('success', 'Berhasil Hapus Data', result.message)
                .then(() => {
                this.Cancel();
            });
        });
    }
    Clear() {
        this.ResetFrom();
    }
    Cancel() {
        this.ResetFrom();
        this.OrgTabsRef.onNavigateTabUsingTabId(0, 'Data');
        this.GetAllData();
    }
    KeyDownHandler(event) {
        if (event.keyCode === 13) {
            console.log('Enter Has Been Pressed');
        }
        ;
        if (event.keyCode === 46) {
            console.log('Delete Key Has Been Pressed');
        }
        ;
        if (event.keyCode === 40) {
            console.log('Delete Key Has Been Pressed');
        }
    }
    get id_petugas() { return this.FormInputData.get('id_petugas'); }
    get nama_petugas() { return this.FormInputData.get('nama_petugas'); }
    get kode_grup_penunjang() { return this.FormInputData.get('kode_grup_penunjang'); }
}
SetupPetugasComponent.ɵfac = function SetupPetugasComponent_Factory(t) { return new (t || SetupPetugasComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵdirectiveInject"](_angular_forms__WEBPACK_IMPORTED_MODULE_12__.FormBuilder), _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵdirectiveInject"](src_app_modules_shared_services_utility_service__WEBPACK_IMPORTED_MODULE_1__.UtilityService), _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵdirectiveInject"](_services_setup_data_setup_petugas_setup_petugas_service__WEBPACK_IMPORTED_MODULE_2__.SetupPetugasService)); };
SetupPetugasComponent.ɵcmp = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵdefineComponent"]({ type: SetupPetugasComponent, selectors: [["app-setup-petugas"]], viewQuery: function SetupPetugasComponent_Query(rf, ctx) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵviewQuery"](_c0, 7);
    } if (rf & 2) {
        let _t;
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵloadQuery"]()) && (ctx.OrgTabsRef = _t.first);
    } }, decls: 23, vars: 24, consts: [[3, "ButtonNav", "onClickButtonNav"], [3, "showHeader", "onGetSelectedTabId"], ["OrgTabsRef", ""], [3, "Id"], [3, "grid-height", "grid-DataSource", "grid-paging", "grid-editSettings", "grid-lines", "grid-toolbar", "columns", "row-selected", "toolbar-click", "load-grid", "initialized", "command-click", "action-complete"], ["GridData", ""], [1, "p-2", 3, "formGroup"], [1, "row", "mb-2"], [1, "col-lg-6", "col-md-6", "col-sm-6", "col-xs-6", "mb-2"], ["formControlName", "nama_petugas", 3, "label", "IsFormControlInvalid", "ValidatorsCaption", "inputFieldState"], [1, "row"], [1, "col-lg-4", "col-md-4", "col-sm-4", "col-xs-4"], [3, "LabelCaption"], [1, "col-lg-8", "col-md-8", "col-sm-8", "col-xs-8"], ["formControlName", "kode_grup_penunjang", 3, "dataSource", "fields", "enabled"], [3, "IsFormControlTouched", "IsFormControlInvalid", "ValidatorsCaption"]], template: function SetupPetugasComponent_Template(rf, ctx) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](0, "org-card-layout", 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵlistener"]("onClickButtonNav", function SetupPetugasComponent_Template_org_card_layout_onClickButtonNav_0_listener($event) { return ctx.handleClickButtonNav($event); });
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](1, "org-tabs", 1, 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵlistener"]("onGetSelectedTabId", function SetupPetugasComponent_Template_org_tabs_onGetSelectedTabId_1_listener($event) { return ctx.handleSelectedTabId($event); });
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](3, "org-tabs-item");
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](4, "org-tabs-label", 3);
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵtext"](5, "Data Petugas");
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](6, "org-tabs-body");
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](7, "mol-grid", 4, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵlistener"]("row-selected", function SetupPetugasComponent_Template_mol_grid_row_selected_7_listener($event) { return ctx.handleSelectedRow($event); })("toolbar-click", function SetupPetugasComponent_Template_mol_grid_toolbar_click_7_listener($event) { return ctx.handleToolbarClick($event); })("load-grid", function SetupPetugasComponent_Template_mol_grid_load_grid_7_listener($event) { return ctx.handleLoadGrid($event); })("initialized", function SetupPetugasComponent_Template_mol_grid_initialized_7_listener($event) { return ctx.InitalizedGrid($event); })("command-click", function SetupPetugasComponent_Template_mol_grid_command_click_7_listener($event) { return ctx.handleClickCommandGrid($event); })("action-complete", function SetupPetugasComponent_Template_mol_grid_action_complete_7_listener($event) { return ctx.handleActionComplete($event); });
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](9, "org-tabs-item");
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](10, "org-tabs-label", 3);
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵtext"](11, "Input Education");
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](12, "org-tabs-body");
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](13, "form", 6);
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](14, "div", 7);
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](15, "div", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelement"](16, "mol-input-text", 9);
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](17, "div", 10);
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](18, "div", 11);
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelement"](19, "atm-label", 12);
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementStart"](20, "div", 13);
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelement"](21, "ejs-dropdownlist", 14);
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelement"](22, "atm-validators", 15);
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵelementEnd"]();
    } if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵproperty"]("ButtonNav", ctx.TabId == "Input" ? ctx.ButtonNav : _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵpureFunction0"](23, _c1));
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵproperty"]("showHeader", false);
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵproperty"]("Id", "Data");
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵproperty"]("grid-height", "calc(100vh - 16rem)")("grid-DataSource", ctx.GridDatasource)("grid-paging", false)("grid-editSettings", ctx.GridDataEditSettings)("grid-lines", "Both")("grid-toolbar", ctx.GridDataToolbar)("columns", ctx.GridConfig.GridSetupPetugasColumns);
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵproperty"]("Id", "Input");
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵproperty"]("formGroup", ctx.FormInputData);
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵproperty"]("label", "Nama Petugas")("IsFormControlInvalid", ctx.nama_petugas.invalid)("ValidatorsCaption", "Nama Petugas Tidak Boleh Kosong")("inputFieldState", ctx.inputFieldState);
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵproperty"]("LabelCaption", "Kode Grup Penunjang");
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵproperty"]("dataSource", ctx.KodeGrupPenunjangDatasource)("fields", ctx.KodeGrupPenunjangFiels)("enabled", ctx.inputFieldState == "normal" || ctx.inputFieldState == "edit");
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵproperty"]("IsFormControlTouched", ctx.kode_grup_penunjang.touched)("IsFormControlInvalid", ctx.kode_grup_penunjang.invalid)("ValidatorsCaption", "Kode Grup Penunjang Tidak Boleh Kosong");
    } }, directives: [_shared_components_organism_card_card_layout_card_layout_component__WEBPACK_IMPORTED_MODULE_3__.OrgCardLayoutComponent, _shared_components_organism_tabs_org_tabs_component_org_tabs_component_component__WEBPACK_IMPORTED_MODULE_4__.OrgTabsComponentComponent, _shared_components_organism_tabs_org_tabs_item_component_org_tabs_item_component_component__WEBPACK_IMPORTED_MODULE_5__.OrgTabsItemComponentComponent, _shared_components_organism_tabs_org_tabs_label_component_org_tabs_label_component_component__WEBPACK_IMPORTED_MODULE_6__.OrgTabsLabelComponentComponent, _shared_components_organism_tabs_org_tabs_body_component_org_tabs_body_component_component__WEBPACK_IMPORTED_MODULE_7__.OrgTabsBodyComponentComponent, _shared_components_molecules_grid_grid_grid_component__WEBPACK_IMPORTED_MODULE_8__.MolGridComponent, _angular_forms__WEBPACK_IMPORTED_MODULE_12__["ɵNgNoValidate"], _angular_forms__WEBPACK_IMPORTED_MODULE_12__.NgControlStatusGroup, _angular_forms__WEBPACK_IMPORTED_MODULE_12__.FormGroupDirective, _shared_components_molecules_form_mol_input_text_mol_input_text_component__WEBPACK_IMPORTED_MODULE_9__.MolInputTextComponent, _angular_forms__WEBPACK_IMPORTED_MODULE_12__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_12__.FormControlName, _shared_components_atoms_form_atm_label_atm_label_component__WEBPACK_IMPORTED_MODULE_10__.AtmLabelComponent, _syncfusion_ej2_angular_dropdowns__WEBPACK_IMPORTED_MODULE_14__.DropDownListComponent, _shared_components_atoms_form_atm_validators_atm_validators_component__WEBPACK_IMPORTED_MODULE_11__.AtmValidatorsComponent], styles: [""] });


/***/ }),

/***/ 63566:
/*!*****************************************************************************************!*\
  !*** ./src/app/modules/OM/pages/verifikasi-order-lab/verifikasi-order-lab.component.ts ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VerifikasiOrderLabComponent": () => (/* binding */ VerifikasiOrderLabComponent)
/* harmony export */ });
/* harmony import */ var _api_PIS_SETUP_DATA__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../api/PIS/SETUP_DATA */ 46942);
/* harmony import */ var _json_verifikasi_order_lab_config_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./json/verifikasi-order-lab.config.json */ 29337);
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! sweetalert2 */ 88259);
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/forms */ 3679);
/* harmony import */ var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ngx-bootstrap/modal */ 63301);
/* harmony import */ var src_app_modules_shared_services_utility_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/modules/shared/services/utility.service */ 26966);
/* harmony import */ var _services_setup_data_setup_petugas_setup_petugas_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../services/setup-data/setup-petugas/setup-petugas.service */ 47529);
/* harmony import */ var _services_verifikasi_order_lab_verifikasi_order_lab_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../services/verifikasi-order-lab/verifikasi-order-lab.service */ 43984);
/* harmony import */ var _shared_components_organism_card_card_layout_card_layout_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../shared/components/organism/card/card-layout/card-layout.component */ 15380);
/* harmony import */ var _shared_components_molecules_filter_mol_offcanvas_filter_mol_offcanvas_filter_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../shared/components/molecules/filter/mol-offcanvas-filter/mol-offcanvas-filter.component */ 55682);
/* harmony import */ var _syncfusion_ej2_angular_grids__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @syncfusion/ej2-angular-grids */ 46555);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @angular/common */ 38583);
/* harmony import */ var _shared_components_atoms_form_atm_label_atm_label_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../shared/components/atoms/form/atm-label/atm-label.component */ 49130);
/* harmony import */ var _syncfusion_ej2_angular_calendars__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @syncfusion/ej2-angular-calendars */ 28219);
/* harmony import */ var _syncfusion_ej2_angular_dropdowns__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @syncfusion/ej2-angular-dropdowns */ 8210);
/* harmony import */ var _shared_components_organism_tabs_org_tabs_component_org_tabs_component_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../shared/components/organism/tabs/org-tabs-component/org-tabs-component.component */ 23021);
/* harmony import */ var _shared_components_organism_tabs_org_tabs_item_component_org_tabs_item_component_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../shared/components/organism/tabs/org-tabs-item-component/org-tabs-item-component.component */ 38499);
/* harmony import */ var _shared_components_organism_tabs_org_tabs_label_component_org_tabs_label_component_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../shared/components/organism/tabs/org-tabs-label-component/org-tabs-label-component.component */ 9212);
/* harmony import */ var _shared_components_organism_tabs_org_tabs_body_component_org_tabs_body_component_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../shared/components/organism/tabs/org-tabs-body-component/org-tabs-body-component.component */ 62751);
/* harmony import */ var _syncfusion_ej2_angular_navigations__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @syncfusion/ej2-angular-navigations */ 93809);
/* harmony import */ var _shared_components_organism_loockUp_org_look_up_org_look_up_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../shared/components/organism/loockUp/org-look-up/org-look-up.component */ 35260);






















const _c0 = ["GridData"];
const _c1 = ["modalDialogVerifikasiOrderLab"];
const _c2 = ["GridDataDetail"];
const _c3 = ["LookupDokter"];
const _c4 = ["GridDataBHAP"];
const _c5 = ["GridDataBHAPHistory"];
const _c6 = ["GridDataDiagnosa"];
const _c7 = ["modalPembatalanOrderLab"];
function VerifikasiOrderLabComponent_ng_template_18_div_0_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](0, "div", 80);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](1, "span", 81);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](2, " OPEN ");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
} }
function VerifikasiOrderLabComponent_ng_template_18_div_1_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](0, "div", 82);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](1, "span", 83);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](2, " CANCELED ");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
} }
function VerifikasiOrderLabComponent_ng_template_18_div_2_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](0, "div", 84);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](1, "span", 85);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](2, " VERIFIED ");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
} }
function VerifikasiOrderLabComponent_ng_template_18_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](0, VerifikasiOrderLabComponent_ng_template_18_div_0_Template, 3, 0, "div", 77);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](1, VerifikasiOrderLabComponent_ng_template_18_div_1_Template, 3, 0, "div", 78);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](2, VerifikasiOrderLabComponent_ng_template_18_div_2_Template, 3, 0, "div", 79);
} if (rf & 2) {
    const data_r17 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("ngIf", data_r17.status === "open");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("ngIf", data_r17.status === "canceled");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("ngIf", data_r17.status === "posted");
} }
function VerifikasiOrderLabComponent_ng_template_21_div_0_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](0, "div", 88);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](1, "span", 89);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
} if (rf & 2) {
    const data_r21 = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtextInterpolate1"](" ", data_r21.lis === "sent" ? "SENT" : "UN SENT", " ");
} }
function VerifikasiOrderLabComponent_ng_template_21_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](0, "div", 90);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](1, "span", 91);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
} if (rf & 2) {
    const data_r21 = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtextInterpolate1"](" ", data_r21.lis === "sent" ? "SENT" : "UN SENT", " ");
} }
function VerifikasiOrderLabComponent_ng_template_21_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](0, VerifikasiOrderLabComponent_ng_template_21_div_0_Template, 3, 1, "div", 86);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](1, VerifikasiOrderLabComponent_ng_template_21_ng_template_1_Template, 3, 1, "ng-template", null, 87, _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplateRefExtractor"]);
} if (rf & 2) {
    const data_r21 = ctx.$implicit;
    const _r23 = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵreference"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("ngIf", data_r21.lis === "sent")("ngIfElse", _r23);
} }
function VerifikasiOrderLabComponent_div_47_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](0, "div", 35);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](1, "div", 92);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](2, "atm-label", 37);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](3, "input", 93);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](4, "div", 92);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](5, "atm-label", 37);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](6, "input", 94);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](7, "div", 92);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](8, "atm-label", 37);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](9, "input", 95);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
} if (rf & 2) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "OM No");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "No. Reg");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "No. RM");
} }
function VerifikasiOrderLabComponent_div_48_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](0, "div", 35);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](1, "div", 40);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](2, "atm-label", 37);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](3, "input", 96);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](4, "div", 40);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](5, "atm-label", 37);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](6, "input", 97);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
} if (rf & 2) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "Nama Pasien");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "Tgl Lahir");
} }
function VerifikasiOrderLabComponent_div_49_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](0, "div", 35);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](1, "div", 40);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](2, "atm-label", 37);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](3, "input", 98);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](4, "div", 40);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](5, "atm-label", 37);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](6, "input", 99);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
} if (rf & 2) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "Kelas / Debitur");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "Alamat");
} }
function VerifikasiOrderLabComponent_ng_template_83_div_0_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](0, "div", 88);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](1, "span", 89);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](2, " OPEN ");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
} }
function VerifikasiOrderLabComponent_ng_template_83_div_1_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](0, "div", 103);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](1, "span", 104);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](2, " REMOVED ");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
} }
function VerifikasiOrderLabComponent_ng_template_83_div_2_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](0, "div", 105);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](1, "span", 106);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](2, " POSTED ");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
} }
function VerifikasiOrderLabComponent_ng_template_83_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](0, VerifikasiOrderLabComponent_ng_template_83_div_0_Template, 3, 0, "div", 100);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](1, VerifikasiOrderLabComponent_ng_template_83_div_1_Template, 3, 0, "div", 101);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](2, VerifikasiOrderLabComponent_ng_template_83_div_2_Template, 3, 0, "div", 102);
} if (rf & 2) {
    const data_r27 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("ngIf", data_r27.status === "open");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("ngIf", data_r27.status === "canceled");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("ngIf", data_r27.status === "posted");
} }
function VerifikasiOrderLabComponent_ng_template_171_Template(rf, ctx) { if (rf & 1) {
    const _r32 = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](0, "div", 107);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](1, "h5", 21);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](2, " Pembatalan Order Laboratorium ");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](3, "button", 108);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("click", function VerifikasiOrderLabComponent_ng_template_171_Template_button_click_3_listener() { _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵrestoreView"](_r32); const ctx_r31 = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵnextContext"](); return ctx_r31.handleCloseModalPembatalanOrderLab(); });
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](4, "i", 109);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](5, "div", 110);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](6, "div", 111);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](7, "div", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](8, "form", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](9, "div", 56);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](10, "div", 112);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](11, "atm-label", 37);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](12, "textarea", 113);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](13, "                                ");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](14, "div", 114);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](15, "button", 115);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("click", function VerifikasiOrderLabComponent_ng_template_171_Template_button_click_15_listener() { _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵrestoreView"](_r32); const ctx_r33 = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵnextContext"](); return ctx_r33.handleCloseModalPembatalanOrderLab(); });
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](16, "i", 116);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](17, "\u00A0 Tutup ");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](18, "button", 117);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("click", function VerifikasiOrderLabComponent_ng_template_171_Template_button_click_18_listener() { _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵrestoreView"](_r32); const ctx_r34 = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵnextContext"](); return ctx_r34.onCancelFormVerifikasiOrderLab(ctx_r34.FormPembatalanOrder); });
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](19, "i", 118);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](20, "\u00A0 Save Pembatalan ");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
} if (rf & 2) {
    const ctx_r16 = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](8);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("formGroup", ctx_r16.FormPembatalanOrder);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "Mohon Isikan Alasan Pembatalan");
} }
class VerifikasiOrderLabComponent {
    constructor(formBuilder, bsModalService, utilityService, setupPetugasService, verifikasiOrderLabService) {
        this.formBuilder = formBuilder;
        this.bsModalService = bsModalService;
        this.utilityService = utilityService;
        this.setupPetugasService = setupPetugasService;
        this.verifikasiOrderLabService = verifikasiOrderLabService;
        this.Config = _json_verifikasi_order_lab_config_json__WEBPACK_IMPORTED_MODULE_1__;
        this.API_PIS_SETUP_DATA = _api_PIS_SETUP_DATA__WEBPACK_IMPORTED_MODULE_0__;
        this.FilterColumnDatasource = [
            { text: 'Pilih Jenis Rawat', value: "jenis_rawat" },
            { text: 'No. Order', value: "otop.nomor_order_penunjang" },
            { text: 'Tgl. Order', value: 'otop.tanggal_order_penunjang' },
            { text: 'Nama Pasien', value: "concat(p.nama_depan, ' ',p.nama_belakang)" },
            { text: 'No. Register', value: 'tp.no_register' },
            { text: 'No. Rekam Medis', value: 'tp.no_rekam_medis' },
        ];
        this.JenisRawatDatasource = [
            { text: 'Rawat Jalan', value: 'J' },
            { text: 'Rawat Inap', value: 'I' },
            { text: 'Rawat Darurat', value: 'D' },
        ];
        this.JenisRawatFields = { text: 'text', value: 'value' };
        this.GridDatasource = [];
        this.GridToolbar = ["Search"];
        this.GridDataEditSettings = { allowAdding: false, allowDeleting: false, allowEditing: false, allowEditOnDblClick: false };
        this.GridPageSettings = { pageSizes: true, pageSize: 20 };
        this.CommandLihatHasil = [
            { buttonOption: { iconCss: 'fas fa-search fa-sm' }, title: 'Lihat Hasil LIS' }
        ];
        this.GridWrapSettings = { wrapMode: 'Header' };
        this.ShowDataPasien = true;
        this.PetugasDatasource = [];
        this.PetugasFields = { text: 'nama_petugas', value: 'id_petugas' };
        this.GridDetailOrderDatasource = [];
        this.GridDetailOrderContextMenuItems = [];
        this.UrlLookupDokter = this.API_PIS_SETUP_DATA.API_SETUP_DATA.SETUP_DOKTER.POST_GET_ALL_DOKTER_FOR_LOOKUP;
        this.LookupDokterState = "One";
        this.GridBHAPDatasource = [];
        this.GridBHAPToolbar = [];
        this.GridBHAPHistoryDatasource = [];
        this.GridBHAPHistoryToolbar = [];
        this.GridDiagnosaDatasource = [];
        this.DisabledButtonBatalOrder = false;
        this.DisabledButtonVerifikasiOrder = false;
    }
    ngOnInit() {
        this.onSetFormVerifikasiOrderLab();
        this.handlePencarianFilter([]);
        this.onGetPetugasLab();
    }
    onSetFormVerifikasiOrderLab() {
        this.FormVerifikasiDetailOrderLab = this.formBuilder.group({
            "id_order_penunjang": [0, []],
            "id_register": [0, []],
            "nomor_order_penunjang": ["", []],
            "tanggal_order_penunjang": ["", []],
            "no_register": ["", []],
            "no_rekam_medis": ["", []],
            "nama_pasien": ["", []],
            "jenis_rawat": ["", []],
            "tanggal_lahir": ["", []],
            "tgl_lahir": ["", []],
            "umur": ["", []],
            "hand_phone": ["", []],
            "gender": [0, []],
            "id_poli": ["", []],
            "kode_poli": ["", []],
            "nama_poli": ["", []],
            "id_kelas": ["", []],
            "nama_kelas": ["", []],
            "nama_debitur": ["", []],
            "alamat_lengkap": ["", []],
            "jam_periksa": ["", []],
            "kode_icd": ["", []],
            "nama_icd": ["", []],
            "keterangan_diagnosa": ["", []],
            "keterangan": ["", []],
            "nama_dokter": ["", []],
            "no_sample": ["", []],
            "date_estimate": ["", []],
            "id_petugas": [0, []],
            "kode_dokter_pengirim": ["", []],
            "nama_dokter_pengirim": ["", []],
            "tipe_pasien": ["", []],
            "is_rujukan": ["", []],
        });
        this.FormPembatalanOrder = this.formBuilder.group({
            id_order_penunjang: [0, []],
            reason_canceled: ["", []]
        });
    }
    onGetPetugasLab() {
        let parameter = [
            {
                "columnName": "osp.kode_grup_penunjang",
                "filter": "like",
                "searchText": "LAB",
                "searchText2": ""
            }
        ];
        this.setupPetugasService.onGetAllByDynamicFilter(parameter)
            .subscribe((result) => {
            this.PetugasDatasource = result.data;
        });
    }
    handleClickButtonNav(ButtonId) {
    }
    handlePencarianFilter(args) {
        let indexJenisRawat = args.map((item) => { return item.columnName; }).indexOf('jenis_rawat');
        let parameter = {};
        if (indexJenisRawat > -1) {
            let filters = args.filter((item) => { return item.columnName !== 'jenis_rawat'; });
            parameter = {
                kode_grup_penunjang: "LAB",
                jenis_rawat: args[indexJenisRawat].searchText,
                filters: filters
            };
        }
        else {
            parameter = {
                kode_grup_penunjang: "LAB",
                jenis_rawat: "J",
                filters: args.length > 0 ? [...args] : []
            };
        }
        ;
        this.CurrentFilter = parameter;
        this.verifikasiOrderLabService.onGetListOrderForVerifikasi(parameter)
            .subscribe((result) => {
            this.GridDatasource = result.data;
        });
    }
    handleSelectedRow(args) {
        this.GridSelectedRow = args.data;
        // this.onFillFormVerifikasiDetailOrderLab(this.GridSelectedRow);
    }
    handleRecordDoubleClick(args) {
        this.onFillFormVerifikasiDetailOrderLab(this.GridSelectedRow);
    }
    handleCommandClick(args) {
        let nomor_order_penunjang = args.rowData.nomor_order_penunjang;
        this.verifikasiOrderLabService.onGetHasilLisPdf(nomor_order_penunjang);
    }
    onFillFormVerifikasiDetailOrderLab(Data) {
        this.onOpenModalVerifikasiOrderLab();
        this.GridDetailOrderDatasource = [];
        this.GridDiagnosaDatasource = [];
        setTimeout(() => {
            this.verifikasiOrderLabService.onGetDetailOrderForVerifikasi(Data.id_order_penunjang)
                .subscribe((result) => {
                this.id_order_penunjang.setValue(result.data.header.id_order_penunjang);
                this.nomor_order_penunjang.setValue(result.data.header.nomor_order_penunjang);
                this.tanggal_order_penunjang.setValue(result.data.header.tanggal_order_penunjang);
                this.id_register.setValue(result.data.header.id_register);
                this.no_register.setValue(result.data.header.no_register);
                this.no_rekam_medis.setValue(result.data.header.no_rekam_medis);
                this.nama_pasien.setValue(result.data.header.nama_pasien);
                this.jenis_rawat.setValue(result.data.header.jenis_rawat);
                this.jenis_rawat.setValue(result.data.header.jenis_rawat);
                let tgl_lahir = this.utilityService.onFormatDate(result.data.header.tanggal_lahir, 'Do MMMM yyyy');
                this.tanggal_lahir.setValue(`${tgl_lahir} (${result.data.header.umur})`);
                this.tgl_lahir.setValue(result.data.header.tanggal_lahir);
                this.umur.setValue(result.data.header.umur);
                this.hand_phone.setValue(result.data.header.hand_phone);
                this.gender.setValue(result.data.header.gender);
                this.id_poli.setValue(result.data.header.id_poli);
                this.kode_poli.setValue(result.data.header.kode_poli);
                this.nama_poli.setValue(result.data.header.nama_poli);
                this.id_kelas.setValue(result.data.header.id_kelas);
                this.nama_kelas.setValue(result.data.header.nama_kelas);
                this.nama_debitur.setValue(`${result.data.header.nama_kelas} - ${result.data.header.nama_debitur}`);
                this.alamat_lengkap.setValue(result.data.header.alamat_lengkap);
                this.nama_dokter.setValue(this.GridSelectedRow.nama_dokter);
                this.kode_dokter_pengirim.setValue(this.GridSelectedRow.kode_dokter);
                this.nama_dokter_pengirim.setValue(this.GridSelectedRow.nama_dokter);
                this.GridDetailOrderDatasource = result.data.details;
                this.GridDiagnosaDatasource = result.data.diagnosa;
                this.kode_icd.setValue(result.data.header.kode_icd);
                this.nama_icd.setValue(result.data.header.nama_icd);
                this.keterangan_diagnosa.setValue(result.data.diagnosa[0]['nama_icd']);
                this.tipe_pasien.setValue(result.data.header.tipe_pasien);
                this.is_rujukan.setValue(result.data.header.is_rujukan);
                this.onCheckIsPostedAll(result.data.details);
            });
        }, 500);
    }
    onOpenModalVerifikasiOrderLab() {
        this.onResetFormVerifikasiOrderDetailLab();
        let btnVerifikasiOrder = document.getElementById('btnVerifikasiOrder');
        btnVerifikasiOrder.click();
    }
    handleButtonTogglingDataPasien() {
        let btnToggleIcon = document.getElementById('btnToggleIcon');
        if (btnToggleIcon.classList.contains('fa-window-minimize')) {
            btnToggleIcon.classList.remove('fa-window-minimize');
            btnToggleIcon.classList.add('fa-window-maximize');
        }
        else {
            btnToggleIcon.classList.add('fa-window-minimize');
            btnToggleIcon.classList.remove('fa-window-maximize');
        }
        ;
        this.ShowDataPasien = !this.ShowDataPasien;
    }
    onGetSelectedTabId(args) {
        // console.log(args);
    }
    // ** ============ GRID DETAIL ORDER SECTION ===============
    handleSelectedRowGridDetailOrder(args) {
        this.GridDetailOrderSelectedRecords = args.data;
        this.GridDetailOrderSelectedRowIndex = args.rowIndex;
        if (args.data.status === "posted") {
            this.GridDetailOrderContextMenuItems = [];
            this.GridDataDetail.contextMenuItems = null;
        }
        else {
            this.GridDetailOrderContextMenuItems = [
                {
                    id: 'drop_order',
                    text: 'Drop Order',
                    iconCss: 'fas fa-trash-alt'
                },
                {
                    id: 'restore_order',
                    text: 'Restore Order',
                    iconCss: 'fas fa-trash-restore'
                },
                {
                    id: 'dokter_dpjp',
                    text: 'Dokter DPJP',
                    iconCss: 'fas fa-user-md'
                },
                {
                    id: 'dokter_dpjp_semua',
                    text: 'Semua Dokter DPJP',
                    iconCss: 'fas fa-user-md'
                }
            ];
            this.GridDataDetail.contextMenuItems = this.GridDetailOrderContextMenuItems;
        }
    }
    handleToolbarClickGridDetailOrder(args) {
    }
    handleActionCompleteGridDetailOrder(args) {
    }
    handleSelectGridDetailOrderContextMenu(args) {
        let selected_row_index = this.GridDetailOrderSelectedRowIndex;
        let id = args.item.id;
        let btnCloseModal = document.getElementById('btnCloseModal');
        switch (id) {
            case "drop_order":
                this.onChangeStatusOrder(selected_row_index, "canceled");
                break;
            case "restore_order":
                this.onChangeStatusOrder(selected_row_index, "open");
                break;
            case "dokter_dpjp":
                btnCloseModal.click();
                this.LookupDokterState = "One";
                this.LookupDokter.onOpenModal();
                break;
            case "dokter_dpjp_semua":
                btnCloseModal.click();
                this.LookupDokterState = "All";
                this.LookupDokter.onOpenModal();
                break;
            default:
                break;
        }
    }
    onChangeStatusOrder(Index, ChangeTo) {
        this.GridDetailOrderDatasource[Index]['status'] = ChangeTo;
        this.GridDataDetail.refresh();
        this.onCheckIsRemovedAll();
    }
    onCheckIsRemovedAll() {
        let isRemovedAll = this.GridDetailOrderDatasource.find(item => item.status === 'open');
        if (isRemovedAll) {
            this.DisabledButtonBatalOrder = false;
            this.DisabledButtonVerifikasiOrder = false;
        }
        else {
            this.DisabledButtonBatalOrder = false;
            this.DisabledButtonVerifikasiOrder = true;
        }
    }
    onCheckIsPostedAll(Data) {
        let isPostedAll = Data.find(item => item.status === 'posted');
        if (isPostedAll) {
            this.DisabledButtonBatalOrder = true;
            this.DisabledButtonVerifikasiOrder = true;
        }
        else {
            this.DisabledButtonBatalOrder = false;
            this.DisabledButtonVerifikasiOrder = false;
        }
    }
    onGetSelectedLookupDokter(args) {
        this.SelectedLookupDokterData = args;
        setTimeout(() => {
            this.onHandlingDataLookupDokter(this.SelectedLookupDokterData);
        }, 1000);
    }
    onHandlingDataLookupDokter(args) {
        let btnVerifikasiOrder = document.getElementById('btnVerifikasiOrder');
        btnVerifikasiOrder.click();
        this.GridDetailOrderDatasource = [];
        this.GridDiagnosaDatasource = [];
        setTimeout(() => {
            this.verifikasiOrderLabService.onGetDetailOrderForVerifikasi(this.GridSelectedRow.id_order_penunjang)
                .subscribe((result) => {
                this.id_order_penunjang.setValue(result.data.header.id_order_penunjang);
                this.nomor_order_penunjang.setValue(result.data.header.nomor_order_penunjang);
                this.tanggal_order_penunjang.setValue(result.data.header.tanggal_order_penunjang);
                this.id_register.setValue(result.data.header.id_register);
                this.no_register.setValue(result.data.header.no_register);
                this.no_rekam_medis.setValue(result.data.header.no_rekam_medis);
                this.nama_pasien.setValue(result.data.header.nama_pasien);
                this.jenis_rawat.setValue(result.data.header.jenis_rawat);
                this.jenis_rawat.setValue(result.data.header.jenis_rawat);
                let tgl_lahir = this.utilityService.onFormatDate(result.data.header.tanggal_lahir, 'Do MMMM yyyy');
                this.tanggal_lahir.setValue(`${tgl_lahir} (${result.data.header.umur})`);
                this.tgl_lahir.setValue(result.data.header.tanggal_lahir);
                this.umur.setValue(result.data.header.umur);
                this.hand_phone.setValue(result.data.header.hand_phone);
                this.gender.setValue(result.data.header.gender);
                this.id_poli.setValue(result.data.header.id_poli);
                this.kode_poli.setValue(result.data.header.kode_poli);
                this.nama_poli.setValue(result.data.header.nama_poli);
                this.id_kelas.setValue(result.data.header.id_kelas);
                this.nama_kelas.setValue(result.data.header.nama_kelas);
                this.nama_debitur.setValue(`${result.data.header.nama_kelas} - ${result.data.header.nama_debitur}`);
                this.alamat_lengkap.setValue(result.data.header.alamat_lengkap);
                this.nama_dokter.setValue(this.GridSelectedRow.nama_dokter);
                this.kode_dokter_pengirim.setValue(this.GridSelectedRow.kode_dokter);
                this.nama_dokter_pengirim.setValue(this.GridSelectedRow.nama_dokter);
                this.GridDetailOrderDatasource = result.data.details;
                this.GridDiagnosaDatasource = result.data.diagnosa;
                switch (this.LookupDokterState) {
                    case "One":
                        this.GridDetailOrderDatasource[this.GridDetailOrderSelectedRowIndex]['id_dokter'] = args.id_dokter;
                        this.GridDetailOrderDatasource[this.GridDetailOrderSelectedRowIndex]['kode_dokter'] = args.kode_dokter;
                        this.GridDetailOrderDatasource[this.GridDetailOrderSelectedRowIndex]['nama_dokter'] = args.full_name;
                        this.GridDataDetail.refresh();
                        break;
                    case "All":
                        this.GridDetailOrderDatasource.forEach((item) => {
                            item['id_dokter'] = args.id_dokter;
                            item['kode_dokter'] = args.kode_dokter;
                            item['nama_dokter'] = args.full_name;
                        });
                        setTimeout(() => {
                            this.GridDataDetail.refresh();
                        }, 1500);
                        break;
                    default:
                        break;
                }
                ;
                this.kode_icd.setValue(result.data.header.kode_icd);
                this.nama_icd.setValue(result.data.header.nama_icd);
                this.keterangan_diagnosa.setValue(result.data.diagnosa[0]['nama_icd']);
                this.tipe_pasien.setValue(result.data.header.tipe_pasien);
                this.is_rujukan.setValue(result.data.header.is_rujukan);
                this.onCheckIsPostedAll(result.data.details);
            });
        }, 500);
    }
    // ** ============ GRID DETAIL BHAP SECTION ===============
    handleSelectedRowGridBHAP(args) {
    }
    handleToolbarClickGridBHAP(args) {
    }
    handleActionCompleteGridBHAP(args) {
    }
    // ** ============ GRID DETAIL BHAP HISTORY SECTION ===============
    handleSelectedRowGridBHAPHistory(args) {
    }
    handleToolbarClickGridBHAPHistory(args) {
    }
    handleActionCompleteGridBHAPHistory(args) {
    }
    // ** ============ GRID DETAIL DIAGNOSA SECTION ===============
    handleSelectedRowGridDiagnosa(args) {
    }
    handleActionCompleteGridDiagnosa(args) {
    }
    onSubmitFormVerifikasiOrderLab(FormVerifikasiOrderLab) {
        this.GridDetailOrderDatasource.forEach((item) => {
            item['id_petugas'] = FormVerifikasiOrderLab.id_petugas;
            item['qty'] = item['qty_order'];
            item['kode_dokter_dpjp'] = item['kode_dokter'];
            item['nama_dokter_dpjp'] = item['nama_dokter'];
        });
        setTimeout(() => {
            FormVerifikasiOrderLab.diagnosa = FormVerifikasiOrderLab.kode_icd;
            FormVerifikasiOrderLab.item_verifikasi = this.GridDetailOrderDatasource;
            this.verifikasiOrderLabService.onPostVerifikasiOrderLab(FormVerifikasiOrderLab)
                .subscribe((result) => {
                if (result) {
                    this.utilityService.onShowingCustomAlert('success', 'Success', 'Order Laboratorium Berhasil Diverifikasi')
                        .then(() => {
                        this.onResetFormVerifikasiOrderDetailLab();
                        let btnCloseModal = document.getElementById('btnCloseModal');
                        btnCloseModal.click();
                        setTimeout(() => {
                            this.verifikasiOrderLabService.onGetListOrderForVerifikasi(this.CurrentFilter)
                                .subscribe((result) => {
                                this.GridDatasource = result.data;
                            });
                        }, 500);
                    });
                }
            });
        }, 500);
    }
    onResetFormVerifikasiOrderDetailLab() {
        this.FormVerifikasiDetailOrderLab.reset();
        this.id_order_penunjang.setValue(0);
        this.nomor_order_penunjang.setValue("");
        this.id_register.setValue(0);
        this.no_register.setValue("");
        this.no_rekam_medis.setValue("");
        this.nama_pasien.setValue("");
        this.tanggal_lahir.setValue("");
        this.umur.setValue("");
        this.nama_kelas.setValue("");
        this.nama_debitur.setValue("");
        this.alamat_lengkap.setValue("");
        this.jam_periksa.setValue("");
        this.kode_icd.setValue("");
        this.nama_icd.setValue("");
        this.keterangan_diagnosa.setValue("");
        this.keterangan.setValue("");
        this.no_sample.setValue("");
        this.date_estimate.setValue(new Date());
        this.id_petugas.setValue(0);
    }
    onCancelFormVerifikasiOrderLab(FormVerifikasiDetailOrderLab) {
        sweetalert2__WEBPACK_IMPORTED_MODULE_2___default().fire({
            title: 'Apakah Anda Yakin?',
            text: "Data yang Telah Dibatalkan Tidak Dapat Diubah",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Iya, Saya Yakin',
            focusCancel: true,
        }).then((result) => {
            if (result.isConfirmed) {
                this.verifikasiOrderLabService.onPostCancelOrderLab(this.id_order_penunjang.value, FormVerifikasiDetailOrderLab.value.reason_canceled)
                    .subscribe((result) => {
                    if (result) {
                        this.utilityService.onShowingCustomAlert('success', "Success", `Pembatalan Order Laboratorium Berhasil`)
                            .then(() => {
                            this.handleCloseModalPembatalanOrderLab();
                            let btnCloseModal = document.getElementById('btnCloseModal');
                            btnCloseModal.click();
                            setTimeout(() => {
                                this.verifikasiOrderLabService.onGetListOrderForVerifikasi(this.CurrentFilter)
                                    .subscribe((result) => {
                                    this.GridDatasource = result.data;
                                });
                            }, 500);
                        });
                    }
                });
            }
        });
    }
    handleOpenModalPembatalanOrderLab() {
        this.onResetFormPembatalanOrderLab();
        let btnCloseModal = document.getElementById('btnCloseModal');
        btnCloseModal.click();
        setTimeout(() => {
            this.modalCancelOrderRef = this.bsModalService.show(this.modalPembatalanOrderLab);
        }, 500);
    }
    handleCloseModalPembatalanOrderLab() {
        this.modalCancelOrderRef.hide();
        setTimeout(() => {
            this.onFillFormVerifikasiDetailOrderLab(this.GridSelectedRow);
        }, 500);
    }
    onResetFormPembatalanOrderLab() {
        this.FormPembatalanOrder.reset();
        this.reason_canceled.setValue("");
    }
    get id_order_penunjang() { return this.FormVerifikasiDetailOrderLab.get('id_order_penunjang'); }
    get id_register() { return this.FormVerifikasiDetailOrderLab.get('id_register'); }
    get nomor_order_penunjang() { return this.FormVerifikasiDetailOrderLab.get('nomor_order_penunjang'); }
    get tanggal_order_penunjang() { return this.FormVerifikasiDetailOrderLab.get('tanggal_order_penunjang'); }
    get no_register() { return this.FormVerifikasiDetailOrderLab.get('no_register'); }
    get no_rekam_medis() { return this.FormVerifikasiDetailOrderLab.get('no_rekam_medis'); }
    get nama_pasien() { return this.FormVerifikasiDetailOrderLab.get('nama_pasien'); }
    get jenis_rawat() { return this.FormVerifikasiDetailOrderLab.get('jenis_rawat'); }
    get tanggal_lahir() { return this.FormVerifikasiDetailOrderLab.get('tanggal_lahir'); }
    get tgl_lahir() { return this.FormVerifikasiDetailOrderLab.get('tgl_lahir'); }
    get umur() { return this.FormVerifikasiDetailOrderLab.get('umur'); }
    get hand_phone() { return this.FormVerifikasiDetailOrderLab.get('hand_phone'); }
    get gender() { return this.FormVerifikasiDetailOrderLab.get('gender'); }
    get id_poli() { return this.FormVerifikasiDetailOrderLab.get('id_poli'); }
    get kode_poli() { return this.FormVerifikasiDetailOrderLab.get('kode_poli'); }
    get nama_poli() { return this.FormVerifikasiDetailOrderLab.get('nama_poli'); }
    get id_kelas() { return this.FormVerifikasiDetailOrderLab.get('id_kelas'); }
    get nama_kelas() { return this.FormVerifikasiDetailOrderLab.get('nama_kelas'); }
    get nama_debitur() { return this.FormVerifikasiDetailOrderLab.get('nama_debitur'); }
    get alamat_lengkap() { return this.FormVerifikasiDetailOrderLab.get('alamat_lengkap'); }
    get jam_periksa() { return this.FormVerifikasiDetailOrderLab.get('jam_periksa'); }
    get kode_icd() { return this.FormVerifikasiDetailOrderLab.get('kode_icd'); }
    get nama_icd() { return this.FormVerifikasiDetailOrderLab.get('nama_icd'); }
    get keterangan_diagnosa() { return this.FormVerifikasiDetailOrderLab.get('keterangan_diagnosa'); }
    get keterangan() { return this.FormVerifikasiDetailOrderLab.get('keterangan'); }
    get nama_dokter() { return this.FormVerifikasiDetailOrderLab.get('nama_dokter'); }
    get no_sample() { return this.FormVerifikasiDetailOrderLab.get('no_sample'); }
    get date_estimate() { return this.FormVerifikasiDetailOrderLab.get('date_estimate'); }
    get id_petugas() { return this.FormVerifikasiDetailOrderLab.get('id_petugas'); }
    get kode_dokter_pengirim() { return this.FormVerifikasiDetailOrderLab.get('kode_dokter_pengirim'); }
    get nama_dokter_pengirim() { return this.FormVerifikasiDetailOrderLab.get('nama_dokter_pengirim'); }
    get tipe_pasien() { return this.FormVerifikasiDetailOrderLab.get('tipe_pasien'); }
    get is_rujukan() { return this.FormVerifikasiDetailOrderLab.get('is_rujukan'); }
    get reason_canceled() { return this.FormPembatalanOrder.get('reason_canceled'); }
}
VerifikasiOrderLabComponent.ɵfac = function VerifikasiOrderLabComponent_Factory(t) { return new (t || VerifikasiOrderLabComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵdirectiveInject"](_angular_forms__WEBPACK_IMPORTED_MODULE_16__.FormBuilder), _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵdirectiveInject"](ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_3__.BsModalService), _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵdirectiveInject"](src_app_modules_shared_services_utility_service__WEBPACK_IMPORTED_MODULE_4__.UtilityService), _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵdirectiveInject"](_services_setup_data_setup_petugas_setup_petugas_service__WEBPACK_IMPORTED_MODULE_5__.SetupPetugasService), _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵdirectiveInject"](_services_verifikasi_order_lab_verifikasi_order_lab_service__WEBPACK_IMPORTED_MODULE_6__.VerifikasiOrderLabService)); };
VerifikasiOrderLabComponent.ɵcmp = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵdefineComponent"]({ type: VerifikasiOrderLabComponent, selectors: [["app-verifikasi-order-lab"]], viewQuery: function VerifikasiOrderLabComponent_Query(rf, ctx) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵviewQuery"](_c0, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵviewQuery"](_c1, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵviewQuery"](_c2, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵviewQuery"](_c3, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵviewQuery"](_c4, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵviewQuery"](_c5, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵviewQuery"](_c6, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵviewQuery"](_c7, 5);
    } if (rf & 2) {
        let _t;
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵloadQuery"]()) && (ctx.GridData = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵloadQuery"]()) && (ctx.modalDialogVerifikasiOrderLab = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵloadQuery"]()) && (ctx.GridDataDetail = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵloadQuery"]()) && (ctx.LookupDokter = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵloadQuery"]()) && (ctx.GridDataBHAP = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵloadQuery"]()) && (ctx.GridDataBHAPHistory = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵloadQuery"]()) && (ctx.GridDataDiagnosa = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵloadQuery"]()) && (ctx.modalPembatalanOrderLab = _t.first);
    } }, decls: 173, vars: 256, consts: [[3, "ButtonNav", "onClickButtonNav"], [1, "row", "pt-2"], [1, "col-lg-12", "col-md-12", "col-sm-12", "col-xs-12"], [3, "FilterColumnDatasource", "FilterDropdownDatasource", "FilterDropdownFields", "handle-pencarian"], [3, "id", "height", "dataSource", "rowHeight", "gridLines", "allowPaging", "allowResizing", "allowTextWrap", "textWrapSettings", "allowFiltering", "pageSettings", "toolbar", "editSettings", "rowSelected", "recordDoubleClick", "commandClick"], ["GridData", ""], [3, "width", "field", "headerText", "visible", "type", "allowEditing", "allowSorting", "format", "textAlign"], [3, "width", "field", "headerText", "visible", "allowEditing", "allowSorting", "textAlign", "type", "format"], [3, "width", "field", "headerText", "visible", "allowEditing", "allowSorting", "textAlign"], [3, "width", "field", "headerText", "visible", "allowEditing", "allowSorting", "textAlign", "text"], ["field", "status", "headerText", "STATUS ORDER HIS", "width", "120", "textAlign", "Center", "headerTextAlign", "Center"], ["template", ""], ["field", "lis", "headerText", "STATUS LIS", "width", "120", "textAlign", "Center"], [3, "width", "headerText", "visible", "allowEditing", "allowSorting", "textAlign", "headerTextAlign", "commands"], ["type", "button", "id", "btnVerifikasiOrder", "data-bs-toggle", "modal", "data-bs-target", "#modalDialogVerifikasiOrder", "hidden", "", 1, "btn", "btn-primary"], ["id", "modalDialogVerifikasiOrder", "aria-labelledby", "modalDialogVerifikasiOrder", "data-bs-backdrop", "static", "data-bs-keyboard", "false", 1, "modal", "fade"], ["modalDialogVerifikasiOrderLab", ""], [1, "modal-dialog", "modal-xl"], [1, "modal-content"], [3, "formGroup"], [1, "modal-header", "px-2", "py-1", "background-biru-muda", "text-white"], [1, "modal-title", "pull-left"], ["id", "btnCloseModal", "type", "button", "data-bs-dismiss", "modal", "aria-label", "Close", 1, "btn-close"], [1, "modal-body", "p-2"], [1, "row", "mb-2"], [1, "card", "shadow-sm"], [1, "card-header", "py-1"], [1, "row", "align-items-center"], [1, "col-lg-11", "col-md-11", "col-sm-11", "col-xs-11"], [1, "mb-0", "text-biru-muda", "pull-left"], [1, "col-lg-1", "col-md-1", "col-sm-1", "col-xs-1", "text-end"], ["type", "button", 1, "btn", "btn-light", "text-biru-muda", "btn-sm", 3, "click"], ["id", "btnToggleIcon", 1, "fas", "fa-window-minimize", "fa-sm"], [1, "card-body", "px-2", "pt-0", "pb-2"], ["class", "row justify-content-start mb-1 px-0 mx-0", 4, "ngIf"], [1, "row", "justify-content-start", "mb-1", "px-0", "mx-0"], [1, "col-lg-3", "col-md-3", "col-sm-3", "col-xs-3", "px-1"], [3, "LabelCaption"], ["type", "text", "formControlName", "no_sample", 1, "form-control", "form-select-sm", "mt-1"], ["formControlName", "date_estimate", 3, "format", "cssClass"], [1, "col-lg-6", "col-md-6", "col-sm-6", "col-xs-6", "px-1"], ["formControlName", "id_petugas", 3, "dataSource", "fields", "allowFiltering", "cssClass"], [1, "row"], [3, "onGetSelectedTabId"], ["OrgTabsRef", ""], [1, "tab-heading", "mb-0"], ["target", "#GridDetailOrder", 3, "items", "select"], [3, "id", "height", "dataSource", "contextMenuItems", "rowHeight", "gridLines", "allowPaging", "allowResizing", "allowFiltering", "rowSelected", "actionComplete"], ["GridDataDetail", ""], [3, "width", "field", "headerText", "visible", "allowEditing", "allowSorting", "headerTextAlign", "textAlign", "format"], ["field", "status", "headerText", "STATUS", "width", "100", "textAlign", "Center"], [3, "id", "height", "dataSource", "rowHeight", "gridLines", "allowPaging", "allowResizing", "allowFiltering", "rowSelected", "actionComplete"], ["GridDataDiagnosa", ""], ["name", "keterangan_diagnosa", "id", "keterangan_diagnosa", "rows", "9", "formControlName", "keterangan_diagnosa", 1, "form-control"], [1, "row", "px-0", "mx-0"], [1, "col-lg-6", "col-md-6", "col-sm-12", "col-xs-6"], [1, "row", "mb-2", "align-items-center"], [1, "col-lg-4", "col-md-4", "col-sm-4", "col-xs-4"], [1, "col-lg-8", "col-md-8", "col-sm-8", "col-xs-8"], [1, "form-check", "form-check-inline"], ["type", "radio", "name", "transfusi_sebelumnya", "id", "transfusi_sebelumnya_pernah", "value", "pernah", 1, "form-check-input"], ["for", "transfusi_sebelumnya_pernah", 1, "form-check-label"], ["type", "radio", "name", "transfusi_sebelumnya", "id", "transfusi_sebelumnya_tidak", "value", "tidak", 1, "form-check-input"], ["for", "transfusi_sebelumnya_tidak", 1, "form-check-label"], ["type", "radio", "name", "untuk_wanita", "id", "untuk_wanita_hamil", "value", "hamil", 1, "form-check-input"], ["for", "untuk_wanita_hamil", 1, "form-check-label"], ["type", "radio", "name", "untuk_wanita", "id", "hamil_wanita_tidak", "value", "tidak", 1, "form-check-input"], ["for", "hamil_wanita_tidak", 1, "form-check-label"], ["id", "catatan_order_darah", "rows", "3", 1, "form-control"], [3, "format"], [1, "modal-footer", "p-2", "background-abu-muda"], [1, "col-lg-12", "col-md-12", "col-sm-12", "col-xs-123"], ["type", "button", 1, "btn", "btn-danger", "btn-sm", "mx-2", 3, "disabled", "click"], ["type", "button", 1, "btn", "btn-primary", "btn-sm", 3, "disabled", "click"], [3, "modal-title", "filter-lookup", "lookup-url", "columns", "onGetSelectedData"], ["LookupDokter", ""], ["modalPembatalanOrderLab", ""], ["class", "statustemp e_is_new_color", 4, "ngIf"], ["class", "statustemp e_is_fill_color", 4, "ngIf"], ["class", "statustemp e_is_ready_color", 4, "ngIf"], [1, "statustemp", "e_is_new_color"], [1, "statustxt", "e_is_new_color"], [1, "statustemp", "e_is_fill_color"], [1, "statustxt", "e_is_fill_color"], [1, "statustemp", "e_is_ready_color"], [1, "statustxt", "e_is_ready_color"], ["class", "statustemp e-activecolor", 4, "ngIf", "ngIfElse"], ["inactive", ""], [1, "statustemp", "e-activecolor"], [1, "statustxt", "e-activecolor"], [1, "statustemp", "e_not_operational_color"], [1, "statustxt", "e_not_operational_color"], [1, "col-lg-4", "col-md-4", "col-sm-4", "col-xs-4", "px-1"], ["type", "text", "readonly", "", "formControlName", "nomor_order_penunjang", 1, "form-control", "form-select-sm", "mt-1"], ["type", "text", "readonly", "", "formControlName", "no_register", 1, "form-control", "form-select-sm", "mt-1"], ["type", "text", "readonly", "", "formControlName", "no_rekam_medis", 1, "form-control", "form-select-sm", "mt-1"], ["type", "text", "readonly", "", "formControlName", "nama_pasien", 1, "form-control", "form-select-sm", "mt-1"], ["type", "text", "readonly", "", "formControlName", "tanggal_lahir", 1, "form-control", "form-select-sm", "mt-1"], ["type", "text", "readonly", "", "formControlName", "nama_debitur", 1, "form-control", "form-select-sm", "mt-1"], ["type", "text", "readonly", "", "formControlName", "alamat_lengkap", 1, "form-control", "form-select-sm", "mt-1"], ["class", "statustemp e-activecolor", 4, "ngIf"], ["class", "statustemp e-inactivecolor", 4, "ngIf"], ["class", "statustemp e-postedcolor", 4, "ngIf"], [1, "statustemp", "e-inactivecolor"], [1, "statustxt", "e-inactivecolor"], [1, "statustemp", "e-postedcolor"], [1, "statustxt", "e-postedcolor"], [1, "modal-header", "px-2", "py-1"], ["type", "button", "aria-label", "Close", 1, "btn", "pull-right", 3, "click"], [1, "fas", "fa-window-close"], [1, "modal-body", "pt-0", "pb-2", "px-2"], [1, "row", "mx-0", "my-1"], [1, "col-lg-12", "col-md-12", "col-sm-12", "col-xs-12", "mb-3", "px-0"], ["rows", "3", "formControlName", "reason_canceled", 1, "form-control", "mt-2"], [1, "col-lg-12", "col-md-12", "col-sm-12", "col-xs-12", "px-0", "text-end"], ["type", "button", 1, "btn", "btn-secondary", "btn-sm", "mx-2", 3, "click"], [1, "fas", "fa-times", "fa-sm"], ["type", "button", 1, "btn", "btn-primary", "btn-sm", 3, "click"], [1, "fas", "fa-save", "fa-sm"]], template: function VerifikasiOrderLabComponent_Template(rf, ctx) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](0, "org-card-layout", 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("onClickButtonNav", function VerifikasiOrderLabComponent_Template_org_card_layout_onClickButtonNav_0_listener($event) { return ctx.handleClickButtonNav($event); });
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](1, "div", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](2, "div", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](3, "mol-offcanvas-filter", 3);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("handle-pencarian", function VerifikasiOrderLabComponent_Template_mol_offcanvas_filter_handle_pencarian_3_listener($event) { return ctx.handlePencarianFilter($event); });
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](4, "div", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](5, "div", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](6, "ejs-grid", 4, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("rowSelected", function VerifikasiOrderLabComponent_Template_ejs_grid_rowSelected_6_listener($event) { return ctx.handleSelectedRow($event); })("recordDoubleClick", function VerifikasiOrderLabComponent_Template_ejs_grid_recordDoubleClick_6_listener($event) { return ctx.handleRecordDoubleClick($event); })("commandClick", function VerifikasiOrderLabComponent_Template_ejs_grid_commandClick_6_listener($event) { return ctx.handleCommandClick($event); });
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](8, "e-columns");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](9, "e-column", 6);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](10, "e-column", 7);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](11, "e-column", 7);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](12, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](13, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](14, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](15, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](16, "e-column", 9);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](17, "e-column", 10);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](18, VerifikasiOrderLabComponent_ng_template_18_Template, 3, 3, "ng-template", null, 11, _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplateRefExtractor"]);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](20, "e-column", 12);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](21, VerifikasiOrderLabComponent_ng_template_21_Template, 3, 2, "ng-template", null, 11, _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplateRefExtractor"]);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](23, "e-column", 13);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](24, "button", 14);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](25, "div", 15, 16);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](27, "div", 17);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](28, "div", 18);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](29, "form", 19);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](30, "div", 20);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](31, "h5", 21);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](32, "Verifikasi Order");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](33, "button", 22);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](34, "div", 23);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](35, "div", 24);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](36, "div", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](37, "div", 25);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](38, "div", 26);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](39, "div", 27);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](40, "div", 28);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](41, "p", 29);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](42, "Data Pasien");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](43, "div", 30);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](44, "button", 31);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("click", function VerifikasiOrderLabComponent_Template_button_click_44_listener() { return ctx.handleButtonTogglingDataPasien(); });
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](45, "i", 32);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](46, "div", 33);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](47, VerifikasiOrderLabComponent_div_47_Template, 10, 3, "div", 34);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](48, VerifikasiOrderLabComponent_div_48_Template, 7, 2, "div", 34);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](49, VerifikasiOrderLabComponent_div_49_Template, 7, 2, "div", 34);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](50, "div", 35);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](51, "div", 36);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](52, "atm-label", 37);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](53, "input", 38);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](54, "div", 36);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](55, "atm-label", 37);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](56, "ejs-datepicker", 39);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](57, "div", 40);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](58, "atm-label", 37);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](59, "ejs-dropdownlist", 41);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](60, "div", 42);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](61, "div", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](62, "org-tabs", 43, 44);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("onGetSelectedTabId", function VerifikasiOrderLabComponent_Template_org_tabs_onGetSelectedTabId_62_listener($event) { return ctx.onGetSelectedTabId($event); });
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](64, "org-tabs-item");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](65, "org-tabs-label");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](66, "p", 45);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](67, " Detail ");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](68, "org-tabs-body");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](69, "ejs-contextmenu", 46);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("select", function VerifikasiOrderLabComponent_Template_ejs_contextmenu_select_69_listener($event) { return ctx.handleSelectGridDetailOrderContextMenu($event); });
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](70, "ejs-grid", 47, 48);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("rowSelected", function VerifikasiOrderLabComponent_Template_ejs_grid_rowSelected_70_listener($event) { return ctx.handleSelectedRowGridDetailOrder($event); })("actionComplete", function VerifikasiOrderLabComponent_Template_ejs_grid_actionComplete_70_listener($event) { return ctx.handleActionCompleteGridDetailOrder($event); });
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](72, "e-columns");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](73, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](74, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](75, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](76, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](77, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](78, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](79, "e-column", 49);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](80, "e-column", 49);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](81, "e-column", 49);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](82, "e-column", 50);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](83, VerifikasiOrderLabComponent_ng_template_83_Template, 3, 3, "ng-template", null, 11, _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplateRefExtractor"]);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](85, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](86, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](87, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](88, "org-tabs-item");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](89, "org-tabs-label");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](90, "p", 45);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](91, " Diagnosa ");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](92, "org-tabs-body");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](93, "ejs-grid", 51, 52);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("rowSelected", function VerifikasiOrderLabComponent_Template_ejs_grid_rowSelected_93_listener($event) { return ctx.handleSelectedRowGridDiagnosa($event); })("actionComplete", function VerifikasiOrderLabComponent_Template_ejs_grid_actionComplete_93_listener($event) { return ctx.handleActionCompleteGridDiagnosa($event); });
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](95, "e-columns");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](96, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](97, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](98, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](99, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](100, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](101, "org-tabs-item");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](102, "org-tabs-label");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](103, "p", 45);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](104, " Catatan ");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](105, "org-tabs-body");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](106, "div", 42);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](107, "div", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](108, "textarea", 53);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](109, "                                                    ");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](110, "org-tabs-item");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](111, "org-tabs-label");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](112, "p", 45);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](113, " Darah ");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](114, "org-tabs-body");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](115, "div", 54);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](116, "div", 55);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](117, "div", 56);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](118, "div", 57);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](119, "atm-label", 37);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](120, "div", 58);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](121, "div", 59);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](122, "input", 60);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](123, "label", 61);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](124, " Pernah ");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](125, "div", 59);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](126, "input", 62);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](127, "label", 63);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](128, " Tidak ");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](129, "div", 56);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](130, "div", 57);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](131, "atm-label", 37);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](132, "div", 58);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](133, "div", 59);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](134, "input", 64);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](135, "label", 65);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](136, " Hamil ");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](137, "div", 59);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](138, "input", 66);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](139, "label", 67);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](140, " Tidak ");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](141, "div", 24);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](142, "div", 57);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](143, "atm-label", 37);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](144, "div", 58);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](145, "textarea", 68);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](146, "div", 55);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](147, "div", 56);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](148, "div", 57);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](149, "atm-label", 37);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](150, "div", 58);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](151, "ejs-dropdownlist");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](152, "div", 56);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](153, "div", 57);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](154, "atm-label", 37);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](155, "div", 58);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](156, "ejs-datepicker", 69);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](157, "div", 24);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](158, "div", 57);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](159, "atm-label", 37);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](160, "div", 58);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](161, "textarea", 68);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](162, "div", 70);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](163, "div", 42);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](164, "div", 71);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](165, "button", 72);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("click", function VerifikasiOrderLabComponent_Template_button_click_165_listener() { return ctx.handleOpenModalPembatalanOrderLab(); });
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](166, " Batal Transaksi ");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](167, "button", 73);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("click", function VerifikasiOrderLabComponent_Template_button_click_167_listener() { return ctx.onSubmitFormVerifikasiOrderLab(ctx.FormVerifikasiDetailOrderLab.value); });
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](168, " Verifikasi ");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](169, "org-look-up", 74, 75);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("onGetSelectedData", function VerifikasiOrderLabComponent_Template_org_look_up_onGetSelectedData_169_listener($event) { return ctx.onGetSelectedLookupDokter($event); });
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](171, VerifikasiOrderLabComponent_ng_template_171_Template, 21, 2, "ng-template", null, 76, _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplateRefExtractor"]);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    } if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("ButtonNav", ctx.ButtonNav);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("FilterColumnDatasource", ctx.FilterColumnDatasource)("FilterDropdownDatasource", ctx.JenisRawatDatasource)("FilterDropdownFields", ctx.JenisRawatFields);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("id", "GridDaftarPasien")("height", "calc(100vh - 21rem)")("dataSource", ctx.GridDatasource)("rowHeight", 30)("gridLines", "Both")("allowPaging", true)("allowResizing", true)("allowTextWrap", true)("textWrapSettings", ctx.GridWrapSettings)("allowFiltering", true)("pageSettings", ctx.GridPageSettings)("toolbar", ctx.GridToolbar)("editSettings", ctx.GridDataEditSettings);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 50)("field", "id_order_penunjang")("headerText", "ID")("visible", false)("type", "number")("allowEditing", false)("allowSorting", false)("format", "N")("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 80)("field", "tanggal_order_penunjang")("headerText", "TGL ORDER")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left")("type", "Date")("format", "dd/MM/yyyy");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 80)("field", "time_inputed")("headerText", "JAM MASUK")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left")("type", "Date")("format", "HH:mm:ss");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 80)("field", "no_rekam_medis")("headerText", "NO. RM")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 80)("field", "no_register")("headerText", "NO. REG")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 150)("field", "nama_pasien")("headerText", "NAMA PASIEN")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 150)("field", "nama_dokter")("headerText", "DOKTER")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 150)("field", "nama_debitur")("headerText", "DEBITUR")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](7);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 100)("headerText", "LIHAT HASIL")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Center")("headerTextAlign", "Center")("commands", ctx.CommandLihatHasil);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](6);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("formGroup", ctx.FormVerifikasiDetailOrderLab);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](18);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("ngIf", ctx.ShowDataPasien);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("ngIf", ctx.ShowDataPasien);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("ngIf", ctx.ShowDataPasien);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "No. Sample");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "Tgl. Estimasi");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("format", "dd/MM/yyyy")("cssClass", "mt-1");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "Petugas");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("dataSource", ctx.PetugasDatasource)("fields", ctx.PetugasFields)("allowFiltering", true)("cssClass", "mt-1");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](10);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("items", ctx.GridDetailOrderContextMenuItems);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("id", "GridDetailOrder")("height", 140)("dataSource", ctx.GridDetailOrderDatasource)("contextMenuItems", ctx.GridDetailOrderContextMenuItems)("rowHeight", 30)("gridLines", "Both")("allowPaging", true)("allowResizing", true)("allowFiltering", true);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 50)("field", "id_order_penunjang")("headerText", "ID")("visible", false)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 50)("field", "id_order_penunjang_detail")("headerText", "ID ORDER PENUNJANG DETAIL")("visible", false)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 50)("field", "id_tarif_berlaku")("headerText", "ID TARIF BERLAKU")("visible", false)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 50)("field", "kode_setup_tarif")("headerText", "KODE SETUP TARIF")("visible", false)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 50)("field", "id_mapping_tarif_penunjang")("headerText", "ID MAPPING TARIF PENUNJANG")("visible", false)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 200)("field", "nama_tindakan_penunjang")("headerText", "NAMA PEMERIKSAAN")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 60)("field", "qty_order")("headerText", "QTY")("visible", true)("allowEditing", false)("allowSorting", false)("headerTextAlign", "Right")("textAlign", "Right")("format", "N2");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 70)("field", "unit_amount")("headerText", "TARIF RS")("visible", true)("allowEditing", false)("allowSorting", false)("headerTextAlign", "Right")("textAlign", "Right")("format", "N2");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 100)("field", "total_amount")("headerText", "TOTAL TARIF RS")("visible", true)("allowEditing", false)("allowSorting", false)("headerTextAlign", "Right")("textAlign", "Right")("format", "N2");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](4);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 150)("field", "id_dokter")("headerText", "ID DOKTER")("visible", false)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 150)("field", "kode_dokter")("headerText", "KODE DOKTER")("visible", false)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 200)("field", "nama_dokter")("headerText", "DOKTER")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](6);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("id", "GridDetailDiagnosa")("height", 140)("dataSource", ctx.GridDiagnosaDatasource)("rowHeight", 30)("gridLines", "Both")("allowPaging", true)("allowResizing", true)("allowFiltering", true);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 100)("field", "jam_periksa")("headerText", "JAM PERIKSA")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 100)("field", "kode_icd")("headerText", "ICD CODE")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 150)("field", "nama_icd")("headerText", "DIAGNOSA ")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 100)("field", "keterangan_diagnosa")("headerText", "CATATAN")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 100)("field", "nama_dokter")("headerText", "DOKTER")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](19);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "Transfusi Sebelumnya");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](12);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "Untuk Wanita");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](12);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "Catatan");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](6);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "Gol. Darah");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](5);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "Tgl. Diperlukan");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("format", "dd/MM/yyyy");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "Indikasi Transfusi");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](6);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("disabled", ctx.DisabledButtonBatalOrder);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("disabled", ctx.DisabledButtonVerifikasiOrder);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("modal-title", "Pilih Dokter")("filter-lookup", ctx.Config.LookupDokter.filter)("lookup-url", ctx.UrlLookupDokter)("columns", ctx.Config.LookupDokter.columns);
    } }, directives: [_shared_components_organism_card_card_layout_card_layout_component__WEBPACK_IMPORTED_MODULE_7__.OrgCardLayoutComponent, _shared_components_molecules_filter_mol_offcanvas_filter_mol_offcanvas_filter_component__WEBPACK_IMPORTED_MODULE_8__.MolOffcanvasFilterComponent, _syncfusion_ej2_angular_grids__WEBPACK_IMPORTED_MODULE_17__.GridComponent, _syncfusion_ej2_angular_grids__WEBPACK_IMPORTED_MODULE_17__.ColumnsDirective, _syncfusion_ej2_angular_grids__WEBPACK_IMPORTED_MODULE_17__.AggregateColumnsDirective, _syncfusion_ej2_angular_grids__WEBPACK_IMPORTED_MODULE_17__.ColumnDirective, _syncfusion_ej2_angular_grids__WEBPACK_IMPORTED_MODULE_17__.AggregateColumnDirective, _angular_forms__WEBPACK_IMPORTED_MODULE_16__["ɵNgNoValidate"], _angular_forms__WEBPACK_IMPORTED_MODULE_16__.NgControlStatusGroup, _angular_forms__WEBPACK_IMPORTED_MODULE_16__.FormGroupDirective, _angular_common__WEBPACK_IMPORTED_MODULE_18__.NgIf, _shared_components_atoms_form_atm_label_atm_label_component__WEBPACK_IMPORTED_MODULE_9__.AtmLabelComponent, _angular_forms__WEBPACK_IMPORTED_MODULE_16__.DefaultValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_16__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_16__.FormControlName, _syncfusion_ej2_angular_calendars__WEBPACK_IMPORTED_MODULE_19__.DatePickerComponent, _syncfusion_ej2_angular_dropdowns__WEBPACK_IMPORTED_MODULE_20__.DropDownListComponent, _shared_components_organism_tabs_org_tabs_component_org_tabs_component_component__WEBPACK_IMPORTED_MODULE_10__.OrgTabsComponentComponent, _shared_components_organism_tabs_org_tabs_item_component_org_tabs_item_component_component__WEBPACK_IMPORTED_MODULE_11__.OrgTabsItemComponentComponent, _shared_components_organism_tabs_org_tabs_label_component_org_tabs_label_component_component__WEBPACK_IMPORTED_MODULE_12__.OrgTabsLabelComponentComponent, _shared_components_organism_tabs_org_tabs_body_component_org_tabs_body_component_component__WEBPACK_IMPORTED_MODULE_13__.OrgTabsBodyComponentComponent, _syncfusion_ej2_angular_navigations__WEBPACK_IMPORTED_MODULE_21__.ContextMenuComponent, _shared_components_organism_loockUp_org_look_up_org_look_up_component__WEBPACK_IMPORTED_MODULE_14__.OrgLookUpComponent], styles: [".e-toolbar[_ngcontent-%COMP%]   .e-toolbar-item[_ngcontent-%COMP%]   .e-tbar-btn.e-btn[_ngcontent-%COMP%]   .e-icons.e-btn-icon[_ngcontent-%COMP%] {\r\n  min-height: 14px !important;\r\n}\r\n\r\nth.e-headercell[_ngcontent-%COMP%] {\r\n  background-color: rgba(0, 0, 0, 0.03);\r\n  color: black;\r\n  border: 1px solid rgba(0, 0, 0, 0.125);\r\n  padding: 10px !important;\r\n  height: 30px !important;\r\n}\r\n\r\nspan.e-headertext[_ngcontent-%COMP%] {\r\n  font-size: 13px !important;\r\n}\r\n\r\ntd.e-rowcell[_ngcontent-%COMP%] {\r\n  padding: 5px !important;\r\n}\r\n\r\n.modal-content-xxl[_ngcontent-%COMP%] {\r\n  width: 60rem !important;\r\n  max-width: 60rem !important;\r\n}"] });


/***/ }),

/***/ 33025:
/*!*****************************************************************************************!*\
  !*** ./src/app/modules/OM/pages/verifikasi-order-rad/verifikasi-order-rad.component.ts ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VerifikasiOrderRadComponent": () => (/* binding */ VerifikasiOrderRadComponent)
/* harmony export */ });
/* harmony import */ var _api_PIS_SETUP_DATA__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../api/PIS/SETUP_DATA */ 46942);
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sweetalert2 */ 88259);
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _json_verifikasi_order_rad_config_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./json/verifikasi-order-rad.config.json */ 16414);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/forms */ 3679);
/* harmony import */ var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ngx-bootstrap/modal */ 63301);
/* harmony import */ var src_app_modules_shared_services_utility_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/modules/shared/services/utility.service */ 26966);
/* harmony import */ var _services_setup_data_setup_petugas_setup_petugas_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../services/setup-data/setup-petugas/setup-petugas.service */ 47529);
/* harmony import */ var _services_verifikasi_order_rad_verifikasi_order_rad_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../services/verifikasi-order-rad/verifikasi-order-rad.service */ 34495);
/* harmony import */ var _shared_components_organism_card_card_layout_card_layout_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../shared/components/organism/card/card-layout/card-layout.component */ 15380);
/* harmony import */ var _shared_components_molecules_filter_mol_offcanvas_filter_mol_offcanvas_filter_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../shared/components/molecules/filter/mol-offcanvas-filter/mol-offcanvas-filter.component */ 55682);
/* harmony import */ var _syncfusion_ej2_angular_grids__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @syncfusion/ej2-angular-grids */ 46555);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @angular/common */ 38583);
/* harmony import */ var _shared_components_atoms_form_atm_label_atm_label_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../shared/components/atoms/form/atm-label/atm-label.component */ 49130);
/* harmony import */ var _syncfusion_ej2_angular_calendars__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @syncfusion/ej2-angular-calendars */ 28219);
/* harmony import */ var _syncfusion_ej2_angular_dropdowns__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @syncfusion/ej2-angular-dropdowns */ 8210);
/* harmony import */ var _shared_components_organism_tabs_org_tabs_component_org_tabs_component_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../shared/components/organism/tabs/org-tabs-component/org-tabs-component.component */ 23021);
/* harmony import */ var _shared_components_organism_tabs_org_tabs_item_component_org_tabs_item_component_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../shared/components/organism/tabs/org-tabs-item-component/org-tabs-item-component.component */ 38499);
/* harmony import */ var _shared_components_organism_tabs_org_tabs_label_component_org_tabs_label_component_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../shared/components/organism/tabs/org-tabs-label-component/org-tabs-label-component.component */ 9212);
/* harmony import */ var _shared_components_organism_tabs_org_tabs_body_component_org_tabs_body_component_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../shared/components/organism/tabs/org-tabs-body-component/org-tabs-body-component.component */ 62751);
/* harmony import */ var _syncfusion_ej2_angular_navigations__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @syncfusion/ej2-angular-navigations */ 93809);
/* harmony import */ var _shared_components_organism_loockUp_org_look_up_org_look_up_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../shared/components/organism/loockUp/org-look-up/org-look-up.component */ 35260);






















const _c0 = ["GridData"];
const _c1 = ["modalDialogVerifikasiOrderLab"];
const _c2 = ["GridDataDetail"];
const _c3 = ["LookupDokter"];
const _c4 = ["GridDataBHAP"];
const _c5 = ["GridDataBHAPHistory"];
const _c6 = ["GridDataDiagnosa"];
const _c7 = ["modalPembatalanOrderRad"];
function VerifikasiOrderRadComponent_ng_template_18_div_0_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](0, "div", 79);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](1, "span", 80);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](2, " OPEN ");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
} }
function VerifikasiOrderRadComponent_ng_template_18_div_1_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](0, "div", 81);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](1, "span", 82);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](2, " CANCELED ");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
} }
function VerifikasiOrderRadComponent_ng_template_18_div_2_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](0, "div", 83);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](1, "span", 84);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](2, " VERIFIED ");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
} }
function VerifikasiOrderRadComponent_ng_template_18_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](0, VerifikasiOrderRadComponent_ng_template_18_div_0_Template, 3, 0, "div", 76);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](1, VerifikasiOrderRadComponent_ng_template_18_div_1_Template, 3, 0, "div", 77);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](2, VerifikasiOrderRadComponent_ng_template_18_div_2_Template, 3, 0, "div", 78);
} if (rf & 2) {
    const data_r17 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("ngIf", data_r17.status === "open");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("ngIf", data_r17.status === "canceled");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("ngIf", data_r17.status === "posted");
} }
function VerifikasiOrderRadComponent_ng_template_21_div_0_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](0, "div", 87);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](1, "span", 88);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
} if (rf & 2) {
    const data_r21 = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtextInterpolate1"](" ", data_r21.lis === "sent" ? "SENT" : "UN SENT", " ");
} }
function VerifikasiOrderRadComponent_ng_template_21_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](0, "div", 89);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](1, "span", 90);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
} if (rf & 2) {
    const data_r21 = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtextInterpolate1"](" ", data_r21.lis === "sent" ? "SENT" : "UN SENT", " ");
} }
function VerifikasiOrderRadComponent_ng_template_21_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](0, VerifikasiOrderRadComponent_ng_template_21_div_0_Template, 3, 1, "div", 85);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](1, VerifikasiOrderRadComponent_ng_template_21_ng_template_1_Template, 3, 1, "ng-template", null, 86, _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplateRefExtractor"]);
} if (rf & 2) {
    const data_r21 = ctx.$implicit;
    const _r23 = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵreference"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("ngIf", data_r21.lis === "sent")("ngIfElse", _r23);
} }
function VerifikasiOrderRadComponent_div_46_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](0, "div", 34);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](1, "div", 91);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](2, "atm-label", 36);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](3, "input", 92);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](4, "div", 91);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](5, "atm-label", 36);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](6, "input", 93);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](7, "div", 91);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](8, "atm-label", 36);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](9, "input", 94);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
} if (rf & 2) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "OM No");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "No. Reg");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "No. RM");
} }
function VerifikasiOrderRadComponent_div_47_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](0, "div", 34);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](1, "div", 39);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](2, "atm-label", 36);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](3, "input", 95);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](4, "div", 39);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](5, "atm-label", 36);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](6, "input", 96);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
} if (rf & 2) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "Nama Pasien");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "Tgl Lahir");
} }
function VerifikasiOrderRadComponent_div_48_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](0, "div", 34);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](1, "div", 39);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](2, "atm-label", 36);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](3, "input", 97);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](4, "div", 39);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](5, "atm-label", 36);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](6, "input", 98);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
} if (rf & 2) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "Kelas / Debitur");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "Alamat");
} }
function VerifikasiOrderRadComponent_ng_template_80_div_0_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](0, "div", 87);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](1, "span", 88);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](2, " OPEN ");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
} }
function VerifikasiOrderRadComponent_ng_template_80_div_1_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](0, "div", 102);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](1, "span", 103);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](2, " REMOVED ");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
} }
function VerifikasiOrderRadComponent_ng_template_80_div_2_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](0, "div", 104);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](1, "span", 105);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](2, " POSTED ");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
} }
function VerifikasiOrderRadComponent_ng_template_80_Template(rf, ctx) { if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](0, VerifikasiOrderRadComponent_ng_template_80_div_0_Template, 3, 0, "div", 99);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](1, VerifikasiOrderRadComponent_ng_template_80_div_1_Template, 3, 0, "div", 100);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](2, VerifikasiOrderRadComponent_ng_template_80_div_2_Template, 3, 0, "div", 101);
} if (rf & 2) {
    const data_r27 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("ngIf", data_r27.status === "open");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("ngIf", data_r27.status === "canceled");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("ngIf", data_r27.status === "posted");
} }
function VerifikasiOrderRadComponent_ng_template_167_Template(rf, ctx) { if (rf & 1) {
    const _r32 = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](0, "div", 106);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](1, "h5", 20);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](2, " Pembatalan Order Radiologi ");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](3, "button", 107);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("click", function VerifikasiOrderRadComponent_ng_template_167_Template_button_click_3_listener() { _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵrestoreView"](_r32); const ctx_r31 = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵnextContext"](); return ctx_r31.handleCloseModalPembatalanOrderRad(); });
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](4, "i", 108);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](5, "div", 109);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](6, "div", 110);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](7, "div", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](8, "form", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](9, "div", 55);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](10, "div", 111);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](11, "atm-label", 36);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](12, "textarea", 112);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](13, "                                ");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](14, "div", 113);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](15, "button", 114);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("click", function VerifikasiOrderRadComponent_ng_template_167_Template_button_click_15_listener() { _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵrestoreView"](_r32); const ctx_r33 = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵnextContext"](); return ctx_r33.handleCloseModalPembatalanOrderRad(); });
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](16, "i", 115);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](17, "\u00A0 Tutup ");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](18, "button", 116);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("click", function VerifikasiOrderRadComponent_ng_template_167_Template_button_click_18_listener() { _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵrestoreView"](_r32); const ctx_r34 = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵnextContext"](); return ctx_r34.onCancelFormVerifikasiOrderRad(ctx_r34.FormPembatalanOrder); });
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](19, "i", 117);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](20, "\u00A0 Save Pembatalan ");
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
} if (rf & 2) {
    const ctx_r16 = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](8);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("formGroup", ctx_r16.FormPembatalanOrder);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "Mohon Isikan Alasan Pembatalan");
} }
class VerifikasiOrderRadComponent {
    constructor(formBuilder, bsModalService, utilityService, setupPetugasService, verifikasiOrderRadService) {
        this.formBuilder = formBuilder;
        this.bsModalService = bsModalService;
        this.utilityService = utilityService;
        this.setupPetugasService = setupPetugasService;
        this.verifikasiOrderRadService = verifikasiOrderRadService;
        this.Config = _json_verifikasi_order_rad_config_json__WEBPACK_IMPORTED_MODULE_2__;
        this.API_PIS_SETUP_DATA = _api_PIS_SETUP_DATA__WEBPACK_IMPORTED_MODULE_0__;
        this.FilterColumnDatasource = [
            { text: 'Pilih Jenis Rawat', value: "jenis_rawat" },
            { text: 'No. Order', value: "otop.nomor_order_penunjang" },
            { text: 'Tgl. Order', value: 'otop.tanggal_order_penunjang' },
            { text: 'Nama Pasien', value: "concat(p.nama_depan, ' ',p.nama_belakang)" },
            { text: 'No. Register', value: 'tp.no_register' },
            { text: 'No. Rekam Medis', value: 'tp.no_rekam_medis' },
        ];
        this.JenisRawatDatasource = [
            { text: 'Rawat Jalan', value: 'J' },
            { text: 'Rawat Inap', value: 'I' },
            { text: 'Rawat Darurat', value: 'D' },
        ];
        this.JenisRawatFields = { text: 'text', value: 'value' };
        this.GridDatasource = [];
        this.GridToolbar = ["Search"];
        this.GridDataEditSettings = { allowAdding: true, allowDeleting: true, allowEditing: true };
        this.GridPageSettings = { pageSizes: false, pageSize: 12 };
        this.ShowDataPasien = true;
        this.PetugasDatasource = [];
        this.PetugasFields = { text: 'nama_petugas', value: 'id_petugas' };
        this.GridDetailOrderDatasource = [];
        this.GridDetailOrderContextMenuItems = [];
        this.UrlLookupDokter = this.API_PIS_SETUP_DATA.API_SETUP_DATA.SETUP_DOKTER.POST_GET_ALL_DOKTER_FOR_LOOKUP;
        this.LookupDokterState = "One";
        this.GridBHAPDatasource = [];
        this.GridBHAPToolbar = [];
        this.GridBHAPHistoryDatasource = [];
        this.GridBHAPHistoryToolbar = [];
        this.GridDiagnosaDatasource = [];
        this.DisabledButtonBatalOrder = false;
        this.DisabledButtonVerifikasiOrder = false;
        this.GridWrapSettings = { wrapMode: 'Header' };
    }
    ngOnInit() {
        this.onSetFormVerifikasiOrderLab();
        this.handlePencarianFilter([]);
        this.onGetPetugasLab();
    }
    onSetFormVerifikasiOrderLab() {
        this.FormVerifikasiDetailOrderRad = this.formBuilder.group({
            "id_order_penunjang": [0, []],
            "id_register": [0, []],
            "nomor_order_penunjang": ["", []],
            "no_register": ["", []],
            "no_rekam_medis": ["", []],
            "nama_pasien": ["", []],
            "tanggal_lahir": ["", []],
            "umur": ["", []],
            "id_poli": ["", []],
            "id_kelas": ["", []],
            "nama_kelas": ["", []],
            "nama_debitur": ["", []],
            "alamat_lengkap": ["", []],
            "jam_periksa": ["", []],
            "kode_icd": ["", []],
            "nama_icd": ["", []],
            "keterangan_diagnosa": ["", []],
            "keterangan": ["", []],
            "nama_dokter": ["", []],
            "no_sample": ["", []],
            "date_estimate": ["", []],
            "id_petugas": [0, []]
        });
        this.FormPembatalanOrder = this.formBuilder.group({
            id_order_penunjang: [0, []],
            reason_canceled: ["", []]
        });
    }
    onGetPetugasLab() {
        let parameter = [
            {
                "columnName": "osp.kode_grup_penunjang",
                "filter": "like",
                "searchText": "RAD",
                "searchText2": ""
            }
        ];
        this.setupPetugasService.onGetAllByDynamicFilter(parameter)
            .subscribe((result) => {
            this.PetugasDatasource = result.data;
        });
    }
    handleClickButtonNav(ButtonId) {
    }
    handlePencarianFilter(args) {
        let indexJenisRawat = args.map((item) => { return item.columnName; }).indexOf('jenis_rawat');
        let parameter = {};
        if (indexJenisRawat > -1) {
            let filters = args.filter((item) => { return item.columnName !== 'jenis_rawat'; });
            parameter = {
                kode_grup_penunjang: "RAD",
                jenis_rawat: args[indexJenisRawat].searchText,
                filters: filters
            };
        }
        else {
            parameter = {
                kode_grup_penunjang: "RAD",
                jenis_rawat: "J",
                filters: args.length > 0 ? [...args] : []
            };
        }
        ;
        this.CurrentFilter = parameter;
        this.verifikasiOrderRadService.onGetListOrderForVerifikasi(parameter)
            .subscribe((result) => {
            this.GridDatasource = result.data;
        });
    }
    handleSelectedRow(args) {
        this.GridSelectedRow = args.data;
        this.onFillFormVerifikasiDetailOrderRad(this.GridSelectedRow);
    }
    handleToolbarClick(args) {
    }
    handleActionComplete(args) {
    }
    onFillFormVerifikasiDetailOrderRad(Data) {
        this.onOpenModalVerifikasiOrderLab();
        this.GridDetailOrderDatasource = [];
        this.GridDiagnosaDatasource = [];
        setTimeout(() => {
            this.verifikasiOrderRadService.onGetDetailOrderForVerifikasi(Data.id_order_penunjang)
                .subscribe((result) => {
                this.id_order_penunjang.setValue(result.data.header.id_order_penunjang);
                this.nomor_order_penunjang.setValue(result.data.header.nomor_order_penunjang);
                this.id_register.setValue(result.data.header.id_register);
                this.no_register.setValue(result.data.header.no_register);
                this.no_rekam_medis.setValue(result.data.header.no_rekam_medis);
                this.nama_pasien.setValue(result.data.header.nama_pasien);
                let tgl_lahir = this.utilityService.onFormatDate(result.data.header.tanggal_lahir, 'Do MMMM yyyy');
                this.tanggal_lahir.setValue(`${tgl_lahir} (${result.data.header.umur})`);
                this.id_poli.setValue(result.data.header.id_poli);
                this.id_kelas.setValue(result.data.header.id_kelas);
                this.nama_debitur.setValue(`${result.data.header.nama_kelas} - ${result.data.header.nama_debitur}`);
                this.alamat_lengkap.setValue(result.data.header.alamat_lengkap);
                this.GridDetailOrderDatasource = result.data.details;
                this.GridDiagnosaDatasource = result.data.diagnosa;
                this.keterangan_diagnosa.setValue(result.data.diagnosa[0]['nama_icd']);
                this.onCheckIsPostedAll(result.data.details);
            });
        }, 500);
    }
    onOpenModalVerifikasiOrderLab() {
        this.onResetFormVerifikasiOrderDetailRad();
        let btnVerifikasiOrder = document.getElementById('btnVerifikasiOrder');
        btnVerifikasiOrder.click();
    }
    handleButtonTogglingDataPasien() {
        let btnToggleIcon = document.getElementById('btnToggleIcon');
        if (btnToggleIcon.classList.contains('fa-window-minimize')) {
            btnToggleIcon.classList.remove('fa-window-minimize');
            btnToggleIcon.classList.add('fa-window-maximize');
        }
        else {
            btnToggleIcon.classList.add('fa-window-minimize');
            btnToggleIcon.classList.remove('fa-window-maximize');
        }
        ;
        this.ShowDataPasien = !this.ShowDataPasien;
    }
    onGetSelectedTabId(args) {
        // console.log(args);
    }
    // ** ============ GRID DETAIL ORDER SECTION ===============
    handleSelectedRowGridDetailOrder(args) {
        this.GridDetailOrderSelectedRecords = args.data;
        this.GridDetailOrderSelectedRowIndex = args.rowIndex;
        if (args.data.status === "posted") {
            this.GridDetailOrderContextMenuItems = [];
            this.GridDataDetail.contextMenuItems = null;
        }
        else {
            this.GridDetailOrderContextMenuItems = [
                {
                    id: 'drop_order',
                    text: 'Drop Order',
                    iconCss: 'fas fa-trash-alt'
                },
                {
                    id: 'restore_order',
                    text: 'Restore Order',
                    iconCss: 'fas fa-trash-restore'
                },
                {
                    id: 'dokter_dpjp',
                    text: 'Dokter DPJP',
                    iconCss: 'fas fa-user-md'
                },
                {
                    id: 'dokter_dpjp_semua',
                    text: 'Semua Dokter DPJP',
                    iconCss: 'fas fa-user-md'
                }
            ];
            this.GridDataDetail.contextMenuItems = this.GridDetailOrderContextMenuItems;
        }
    }
    handleToolbarClickGridDetailOrder(args) {
    }
    handleActionCompleteGridDetailOrder(args) {
    }
    handleSelectGridDetailOrderContextMenu(args) {
        let selected_row_index = this.GridDetailOrderSelectedRowIndex;
        let id = args.item.id;
        let btnCloseModal = document.getElementById('btnCloseModal');
        switch (id) {
            case "drop_order":
                this.onChangeStatusOrder(selected_row_index, "canceled");
                break;
            case "restore_order":
                this.onChangeStatusOrder(selected_row_index, "open");
                break;
            case "dokter_dpjp":
                btnCloseModal.click();
                this.LookupDokterState = "One";
                this.LookupDokter.onOpenModal();
                break;
            case "dokter_dpjp_semua":
                btnCloseModal.click();
                this.LookupDokterState = "All";
                this.LookupDokter.onOpenModal();
                break;
            default:
                break;
        }
    }
    onChangeStatusOrder(Index, ChangeTo) {
        this.GridDetailOrderDatasource[Index]['status'] = ChangeTo;
        this.GridDataDetail.refresh();
        this.onCheckIsRemovedAll();
    }
    onCheckIsRemovedAll() {
        let isRemovedAll = this.GridDetailOrderDatasource.find(item => item.status === 'open');
        if (isRemovedAll) {
            this.DisabledButtonBatalOrder = false;
            this.DisabledButtonVerifikasiOrder = false;
        }
        else {
            this.DisabledButtonBatalOrder = false;
            this.DisabledButtonVerifikasiOrder = true;
        }
    }
    onCheckIsPostedAll(Data) {
        let isPostedAll = Data.find(item => item.status === 'posted');
        if (isPostedAll) {
            this.DisabledButtonBatalOrder = true;
            this.DisabledButtonVerifikasiOrder = true;
        }
        else {
            this.DisabledButtonBatalOrder = false;
            this.DisabledButtonVerifikasiOrder = false;
        }
    }
    onGetSelectedLookupDokter(args) {
        this.SelectedLookupDokterData = args;
        setTimeout(() => {
            this.onHandlingDataLookupDokter(this.SelectedLookupDokterData);
        }, 1000);
    }
    onHandlingDataLookupDokter(args) {
        let btnVerifikasiOrder = document.getElementById('btnVerifikasiOrder');
        btnVerifikasiOrder.click();
        this.GridDetailOrderDatasource = [];
        this.GridDiagnosaDatasource = [];
        setTimeout(() => {
            this.verifikasiOrderRadService.onGetDetailOrderForVerifikasi(this.GridSelectedRow.id_order_penunjang)
                .subscribe((result) => {
                this.id_order_penunjang.setValue(result.data.header.id_order_penunjang);
                this.nomor_order_penunjang.setValue(result.data.header.nomor_order_penunjang);
                this.id_register.setValue(result.data.header.id_register);
                this.no_register.setValue(result.data.header.no_register);
                this.no_rekam_medis.setValue(result.data.header.no_rekam_medis);
                this.nama_pasien.setValue(result.data.header.nama_pasien);
                let tgl_lahir = this.utilityService.onFormatDate(result.data.header.tanggal_lahir, 'Do MMMM yyyy');
                this.tanggal_lahir.setValue(`${tgl_lahir} (${result.data.header.umur})`);
                this.id_poli.setValue(result.data.header.id_poli);
                this.id_kelas.setValue(result.data.header.id_kelas);
                this.nama_debitur.setValue(`${result.data.header.nama_kelas} - ${result.data.header.nama_debitur}`);
                this.alamat_lengkap.setValue(result.data.header.alamat_lengkap);
                this.GridDetailOrderDatasource = result.data.details;
                this.GridDiagnosaDatasource = result.data.diagnosa;
                switch (this.LookupDokterState) {
                    case "One":
                        this.GridDetailOrderDatasource[this.GridDetailOrderSelectedRowIndex]['id_dokter'] = args.id_dokter;
                        this.GridDetailOrderDatasource[this.GridDetailOrderSelectedRowIndex]['nama_dokter'] = args.full_name;
                        this.GridDataDetail.refresh();
                        break;
                    case "All":
                        this.GridDetailOrderDatasource.forEach((item) => {
                            item['id_dokter'] = args.id_dokter;
                            item['nama_dokter'] = args.full_name;
                        });
                        setTimeout(() => {
                            this.GridDataDetail.refresh();
                        }, 1500);
                        break;
                    default:
                        break;
                }
                ;
                this.keterangan_diagnosa.setValue(result.data.diagnosa[0]['nama_icd']);
                this.onCheckIsPostedAll(result.data.details);
            });
        }, 500);
    }
    // ** ============ GRID DETAIL BHAP SECTION ===============
    handleSelectedRowGridBHAP(args) {
    }
    handleToolbarClickGridBHAP(args) {
    }
    handleActionCompleteGridBHAP(args) {
    }
    // ** ============ GRID DETAIL BHAP HISTORY SECTION ===============
    handleSelectedRowGridBHAPHistory(args) {
    }
    handleToolbarClickGridBHAPHistory(args) {
    }
    handleActionCompleteGridBHAPHistory(args) {
    }
    // ** ============ GRID DETAIL DIAGNOSA SECTION ===============
    handleSelectedRowGridDiagnosa(args) {
    }
    handleActionCompleteGridDiagnosa(args) {
    }
    onSubmitFormVerifikasiOrderRad(FormVerifikasiOrderRad) {
        this.GridDetailOrderDatasource.forEach((item) => {
            item['id_petugas'] = FormVerifikasiOrderRad.id_petugas;
            item['qty'] = item['qty_order'];
            item['is_cancel'] = item['status'] == 'canceled' ? true : false;
        });
        setTimeout(() => {
            FormVerifikasiOrderRad.item_verifikasi = this.GridDetailOrderDatasource;
            this.verifikasiOrderRadService.onPostVerifikasiOrderRAD(FormVerifikasiOrderRad)
                .subscribe((result) => {
                if (result) {
                    this.utilityService.onShowingCustomAlert('success', 'Success', 'Order Radiologi Berhasil Diverifikasi')
                        .then(() => {
                        this.onResetFormVerifikasiOrderDetailRad();
                        let btnCloseModal = document.getElementById('btnCloseModal');
                        btnCloseModal.click();
                        setTimeout(() => {
                            this.verifikasiOrderRadService.onGetListOrderForVerifikasi(this.CurrentFilter)
                                .subscribe((result) => {
                                this.GridDatasource = result.data;
                            });
                        }, 500);
                    });
                }
            });
        }, 500);
    }
    onResetFormVerifikasiOrderDetailRad() {
        this.FormVerifikasiDetailOrderRad.reset();
        this.id_order_penunjang.setValue(0);
        this.nomor_order_penunjang.setValue("");
        this.id_register.setValue(0);
        this.no_register.setValue("");
        this.no_rekam_medis.setValue("");
        this.nama_pasien.setValue("");
        this.tanggal_lahir.setValue("");
        this.umur.setValue("");
        this.nama_kelas.setValue("");
        this.nama_debitur.setValue("");
        this.alamat_lengkap.setValue("");
        this.jam_periksa.setValue("");
        this.kode_icd.setValue("");
        this.nama_icd.setValue("");
        this.keterangan_diagnosa.setValue("");
        this.keterangan.setValue("");
        this.no_sample.setValue("");
        this.date_estimate.setValue(new Date());
        this.id_petugas.setValue(0);
    }
    onCancelFormVerifikasiOrderRad(FormVerifikasiDetailOrderRad) {
        sweetalert2__WEBPACK_IMPORTED_MODULE_1___default().fire({
            title: 'Apakah Anda Yakin?',
            text: "Data yang Telah Dibatalkan Tidak Dapat Diubah",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Iya, Saya Yakin',
            focusCancel: true,
        }).then((result) => {
            if (result.isConfirmed) {
                this.verifikasiOrderRadService.onPostCancelOrderRAD(this.id_order_penunjang.value, FormVerifikasiDetailOrderRad.value.reason_canceled)
                    .subscribe((result) => {
                    if (result) {
                        this.utilityService.onShowingCustomAlert('success', "Success", `Pembatalan Order Radiologi Berhasil`)
                            .then(() => {
                            this.handleCloseModalPembatalanOrderRad();
                            let btnCloseModal = document.getElementById('btnCloseModal');
                            btnCloseModal.click();
                            setTimeout(() => {
                                this.verifikasiOrderRadService.onGetListOrderForVerifikasi(this.CurrentFilter)
                                    .subscribe((result) => {
                                    this.GridDatasource = result.data;
                                });
                            }, 500);
                        });
                    }
                });
            }
        });
    }
    handleOpenModalPembatalanOrderRad() {
        this.onResetFormPembatalanOrderRad();
        let btnCloseModal = document.getElementById('btnCloseModal');
        btnCloseModal.click();
        setTimeout(() => {
            this.modalCancelOrderRef = this.bsModalService.show(this.modalPembatalanOrderRad);
        }, 500);
    }
    handleCloseModalPembatalanOrderRad() {
        this.modalCancelOrderRef.hide();
        setTimeout(() => {
            this.onFillFormVerifikasiDetailOrderRad(this.GridSelectedRow);
        }, 500);
    }
    onResetFormPembatalanOrderRad() {
        this.FormPembatalanOrder.reset();
        this.reason_canceled.setValue("");
    }
    get id_order_penunjang() { return this.FormVerifikasiDetailOrderRad.get('id_order_penunjang'); }
    get nomor_order_penunjang() { return this.FormVerifikasiDetailOrderRad.get('nomor_order_penunjang'); }
    get id_register() { return this.FormVerifikasiDetailOrderRad.get('id_register'); }
    get no_register() { return this.FormVerifikasiDetailOrderRad.get('no_register'); }
    get no_rekam_medis() { return this.FormVerifikasiDetailOrderRad.get('no_rekam_medis'); }
    get nama_pasien() { return this.FormVerifikasiDetailOrderRad.get('nama_pasien'); }
    get tanggal_lahir() { return this.FormVerifikasiDetailOrderRad.get('tanggal_lahir'); }
    get umur() { return this.FormVerifikasiDetailOrderRad.get('umur'); }
    get id_poli() { return this.FormVerifikasiDetailOrderRad.get('id_poli'); }
    get id_kelas() { return this.FormVerifikasiDetailOrderRad.get('id_kelas'); }
    get nama_kelas() { return this.FormVerifikasiDetailOrderRad.get('nama_kelas'); }
    get nama_debitur() { return this.FormVerifikasiDetailOrderRad.get('nama_debitur'); }
    get alamat_lengkap() { return this.FormVerifikasiDetailOrderRad.get('alamat_lengkap'); }
    get jam_periksa() { return this.FormVerifikasiDetailOrderRad.get('jam_periksa'); }
    get kode_icd() { return this.FormVerifikasiDetailOrderRad.get('kode_icd'); }
    get nama_icd() { return this.FormVerifikasiDetailOrderRad.get('nama_icd'); }
    get keterangan_diagnosa() { return this.FormVerifikasiDetailOrderRad.get('keterangan_diagnosa'); }
    get keterangan() { return this.FormVerifikasiDetailOrderRad.get('keterangan'); }
    get nama_dokter() { return this.FormVerifikasiDetailOrderRad.get('nama_dokter'); }
    get no_sample() { return this.FormVerifikasiDetailOrderRad.get('no_sample'); }
    get date_estimate() { return this.FormVerifikasiDetailOrderRad.get('date_estimate'); }
    get id_petugas() { return this.FormVerifikasiDetailOrderRad.get('id_petugas'); }
    get reason_canceled() { return this.FormPembatalanOrder.get('reason_canceled'); }
}
VerifikasiOrderRadComponent.ɵfac = function VerifikasiOrderRadComponent_Factory(t) { return new (t || VerifikasiOrderRadComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵdirectiveInject"](_angular_forms__WEBPACK_IMPORTED_MODULE_16__.FormBuilder), _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵdirectiveInject"](ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_3__.BsModalService), _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵdirectiveInject"](src_app_modules_shared_services_utility_service__WEBPACK_IMPORTED_MODULE_4__.UtilityService), _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵdirectiveInject"](_services_setup_data_setup_petugas_setup_petugas_service__WEBPACK_IMPORTED_MODULE_5__.SetupPetugasService), _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵdirectiveInject"](_services_verifikasi_order_rad_verifikasi_order_rad_service__WEBPACK_IMPORTED_MODULE_6__.VerifikasiOrderRadService)); };
VerifikasiOrderRadComponent.ɵcmp = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵdefineComponent"]({ type: VerifikasiOrderRadComponent, selectors: [["app-verifikasi-order-rad"]], viewQuery: function VerifikasiOrderRadComponent_Query(rf, ctx) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵviewQuery"](_c0, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵviewQuery"](_c1, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵviewQuery"](_c2, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵviewQuery"](_c3, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵviewQuery"](_c4, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵviewQuery"](_c5, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵviewQuery"](_c6, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵviewQuery"](_c7, 5);
    } if (rf & 2) {
        let _t;
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵloadQuery"]()) && (ctx.GridData = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵloadQuery"]()) && (ctx.modalDialogVerifikasiOrderLab = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵloadQuery"]()) && (ctx.GridDataDetail = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵloadQuery"]()) && (ctx.LookupDokter = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵloadQuery"]()) && (ctx.GridDataBHAP = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵloadQuery"]()) && (ctx.GridDataBHAPHistory = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵloadQuery"]()) && (ctx.GridDataDiagnosa = _t.first);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵloadQuery"]()) && (ctx.modalPembatalanOrderRad = _t.first);
    } }, decls: 169, vars: 227, consts: [[3, "ButtonNav", "onClickButtonNav"], [1, "row", "pt-2"], [1, "col-lg-12", "col-md-12", "col-sm-12", "col-xs-12"], [3, "FilterColumnDatasource", "FilterDropdownDatasource", "FilterDropdownFields", "handle-pencarian"], [3, "id", "height", "dataSource", "rowHeight", "gridLines", "allowPaging", "allowResizing", "allowFiltering", "pageSettings", "toolbar", "allowTextWrap", "textWrapSettings", "editSettings", "rowSelected", "toolbarClick", "actionComplete"], ["GridData", ""], [3, "width", "field", "headerText", "visible", "type", "allowEditing", "allowSorting", "format", "textAlign"], [3, "width", "field", "headerText", "visible", "allowEditing", "allowSorting", "textAlign", "type", "format"], [3, "width", "field", "headerText", "visible", "allowEditing", "allowSorting", "textAlign"], [3, "width", "field", "headerText", "visible", "allowEditing", "allowSorting", "textAlign", "text"], ["field", "status", "headerText", "STATUS ORDER HIS", "width", "120", "textAlign", "Center"], ["template", ""], ["field", "lis", "headerText", "STATUS LIS", "width", "120", "textAlign", "Center"], ["type", "button", "id", "btnVerifikasiOrder", "data-bs-toggle", "modal", "data-bs-target", "#modalDialogVerifikasiOrder", "hidden", "", 1, "btn", "btn-primary"], ["id", "modalDialogVerifikasiOrder", "aria-labelledby", "modalDialogVerifikasiOrder", "aria-hidden", "true", 1, "modal", "fade"], ["modalDialogVerifikasiOrderLab", ""], [1, "modal-dialog", "modal-xl"], [1, "modal-content"], [3, "formGroup"], [1, "modal-header", "px-2", "py-1", "background-biru-muda", "text-white"], [1, "modal-title", "pull-left"], ["id", "btnCloseModal", "type", "button", "data-bs-dismiss", "modal", "aria-label", "Close", 1, "btn-close"], [1, "modal-body", "p-2"], [1, "row", "mb-2"], [1, "card", "shadow-sm"], [1, "card-header", "py-1"], [1, "row", "align-items-center"], [1, "col-lg-11", "col-md-11", "col-sm-11", "col-xs-11"], [1, "mb-0", "text-biru-muda", "pull-left"], [1, "col-lg-1", "col-md-1", "col-sm-1", "col-xs-1", "text-end"], ["type", "button", 1, "btn", "btn-light", "text-biru-muda", "btn-sm", 3, "click"], ["id", "btnToggleIcon", 1, "fas", "fa-window-minimize", "fa-sm"], [1, "card-body", "px-2", "pt-0", "pb-2"], ["class", "row justify-content-start mb-1 px-0 mx-0", 4, "ngIf"], [1, "row", "justify-content-start", "mb-1", "px-0", "mx-0"], [1, "col-lg-3", "col-md-3", "col-sm-3", "col-xs-3", "px-1"], [3, "LabelCaption"], ["type", "text", "formControlName", "no_sample", 1, "form-control", "form-select-sm", "mt-1"], ["formControlName", "date_estimate", 3, "format", "cssClass"], [1, "col-lg-6", "col-md-6", "col-sm-6", "col-xs-6", "px-1"], ["formControlName", "id_petugas", 3, "dataSource", "fields", "allowFiltering", "cssClass"], [1, "row"], [3, "onGetSelectedTabId"], ["OrgTabsRef", ""], [1, "tab-heading", "mb-0"], ["target", "#GridDetailOrder", 3, "items", "select"], [3, "id", "height", "dataSource", "contextMenuItems", "rowHeight", "gridLines", "allowPaging", "allowResizing", "allowFiltering", "rowSelected", "actionComplete"], ["GridDataDetail", ""], [3, "width", "field", "headerText", "visible", "allowEditing", "allowSorting", "headerTextAlign", "textAlign", "format"], ["field", "status", "headerText", "STATUS", "width", "100", "textAlign", "Center"], [3, "id", "height", "dataSource", "rowHeight", "gridLines", "allowPaging", "allowResizing", "allowFiltering", "rowSelected", "actionComplete"], ["GridDataDiagnosa", ""], ["name", "keterangan_diagnosa", "id", "keterangan_diagnosa", "rows", "9", "formControlName", "keterangan_diagnosa", 1, "form-control"], [1, "row", "px-0", "mx-0"], [1, "col-lg-6", "col-md-6", "col-sm-12", "col-xs-6"], [1, "row", "mb-2", "align-items-center"], [1, "col-lg-4", "col-md-4", "col-sm-4", "col-xs-4"], [1, "col-lg-8", "col-md-8", "col-sm-8", "col-xs-8"], [1, "form-check", "form-check-inline"], ["type", "radio", "name", "transfusi_sebelumnya", "id", "transfusi_sebelumnya_pernah", "value", "pernah", 1, "form-check-input"], ["for", "transfusi_sebelumnya_pernah", 1, "form-check-label"], ["type", "radio", "name", "transfusi_sebelumnya", "id", "transfusi_sebelumnya_tidak", "value", "tidak", 1, "form-check-input"], ["for", "transfusi_sebelumnya_tidak", 1, "form-check-label"], ["type", "radio", "name", "untuk_wanita", "id", "untuk_wanita_hamil", "value", "hamil", 1, "form-check-input"], ["for", "untuk_wanita_hamil", 1, "form-check-label"], ["type", "radio", "name", "untuk_wanita", "id", "hamil_wanita_tidak", "value", "tidak", 1, "form-check-input"], ["for", "hamil_wanita_tidak", 1, "form-check-label"], ["id", "catatan_order_darah", "rows", "3", 1, "form-control"], [3, "format"], [1, "modal-footer", "p-2", "background-abu-muda"], [1, "col-lg-12", "col-md-12", "col-sm-12", "col-xs-123"], ["type", "button", 1, "btn", "btn-danger", "btn-sm", "mx-2", 3, "disabled", "click"], ["type", "button", 1, "btn", "btn-primary", "btn-sm", 3, "disabled", "click"], [3, "modal-title", "filter-lookup", "lookup-url", "columns", "onGetSelectedData"], ["LookupDokter", ""], ["modalPembatalanOrderRad", ""], ["class", "statustemp e_is_new_color", 4, "ngIf"], ["class", "statustemp e_is_fill_color", 4, "ngIf"], ["class", "statustemp e_is_ready_color", 4, "ngIf"], [1, "statustemp", "e_is_new_color"], [1, "statustxt", "e_is_new_color"], [1, "statustemp", "e_is_fill_color"], [1, "statustxt", "e_is_fill_color"], [1, "statustemp", "e_is_ready_color"], [1, "statustxt", "e_is_ready_color"], ["class", "statustemp e-activecolor", 4, "ngIf", "ngIfElse"], ["inactive", ""], [1, "statustemp", "e-activecolor"], [1, "statustxt", "e-activecolor"], [1, "statustemp", "e_not_operational_color"], [1, "statustxt", "e_not_operational_color"], [1, "col-lg-4", "col-md-4", "col-sm-4", "col-xs-4", "px-1"], ["type", "text", "readonly", "", "formControlName", "nomor_order_penunjang", 1, "form-control", "form-select-sm", "mt-1"], ["type", "text", "readonly", "", "formControlName", "no_register", 1, "form-control", "form-select-sm", "mt-1"], ["type", "text", "readonly", "", "formControlName", "no_rekam_medis", 1, "form-control", "form-select-sm", "mt-1"], ["type", "text", "readonly", "", "formControlName", "nama_pasien", 1, "form-control", "form-select-sm", "mt-1"], ["type", "text", "readonly", "", "formControlName", "tanggal_lahir", 1, "form-control", "form-select-sm", "mt-1"], ["type", "text", "readonly", "", "formControlName", "nama_debitur", 1, "form-control", "form-select-sm", "mt-1"], ["type", "text", "readonly", "", "formControlName", "alamat_lengkap", 1, "form-control", "form-select-sm", "mt-1"], ["class", "statustemp e-activecolor", 4, "ngIf"], ["class", "statustemp e-inactivecolor", 4, "ngIf"], ["class", "statustemp e-postedcolor", 4, "ngIf"], [1, "statustemp", "e-inactivecolor"], [1, "statustxt", "e-inactivecolor"], [1, "statustemp", "e-postedcolor"], [1, "statustxt", "e-postedcolor"], [1, "modal-header", "px-2", "py-1"], ["type", "button", "aria-label", "Close", 1, "btn", "pull-right", 3, "click"], [1, "fas", "fa-window-close"], [1, "modal-body", "pt-0", "pb-2", "px-2"], [1, "row", "mx-0", "my-1"], [1, "col-lg-12", "col-md-12", "col-sm-12", "col-xs-12", "mb-3", "px-0"], ["rows", "3", "formControlName", "reason_canceled", 1, "form-control", "mt-2"], [1, "col-lg-12", "col-md-12", "col-sm-12", "col-xs-12", "px-0", "text-end"], ["type", "button", 1, "btn", "btn-secondary", "btn-sm", "mx-2", 3, "click"], [1, "fas", "fa-times", "fa-sm"], ["type", "button", 1, "btn", "btn-primary", "btn-sm", 3, "click"], [1, "fas", "fa-save", "fa-sm"]], template: function VerifikasiOrderRadComponent_Template(rf, ctx) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](0, "org-card-layout", 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("onClickButtonNav", function VerifikasiOrderRadComponent_Template_org_card_layout_onClickButtonNav_0_listener($event) { return ctx.handleClickButtonNav($event); });
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](1, "div", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](2, "div", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](3, "mol-offcanvas-filter", 3);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("handle-pencarian", function VerifikasiOrderRadComponent_Template_mol_offcanvas_filter_handle_pencarian_3_listener($event) { return ctx.handlePencarianFilter($event); });
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](4, "div", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](5, "div", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](6, "ejs-grid", 4, 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("rowSelected", function VerifikasiOrderRadComponent_Template_ejs_grid_rowSelected_6_listener($event) { return ctx.handleSelectedRow($event); })("toolbarClick", function VerifikasiOrderRadComponent_Template_ejs_grid_toolbarClick_6_listener($event) { return ctx.handleToolbarClick($event); })("actionComplete", function VerifikasiOrderRadComponent_Template_ejs_grid_actionComplete_6_listener($event) { return ctx.handleActionComplete($event); });
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](8, "e-columns");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](9, "e-column", 6);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](10, "e-column", 7);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](11, "e-column", 7);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](12, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](13, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](14, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](15, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](16, "e-column", 9);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](17, "e-column", 10);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](18, VerifikasiOrderRadComponent_ng_template_18_Template, 3, 3, "ng-template", null, 11, _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplateRefExtractor"]);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](20, "e-column", 12);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](21, VerifikasiOrderRadComponent_ng_template_21_Template, 3, 2, "ng-template", null, 11, _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplateRefExtractor"]);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](23, "button", 13);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](24, "div", 14, 15);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](26, "div", 16);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](27, "div", 17);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](28, "form", 18);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](29, "div", 19);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](30, "h5", 20);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](31, "Verifikasi Order");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](32, "button", 21);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](33, "div", 22);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](34, "div", 23);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](35, "div", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](36, "div", 24);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](37, "div", 25);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](38, "div", 26);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](39, "div", 27);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](40, "p", 28);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](41, "Data Pasien");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](42, "div", 29);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](43, "button", 30);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("click", function VerifikasiOrderRadComponent_Template_button_click_43_listener() { return ctx.handleButtonTogglingDataPasien(); });
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](44, "i", 31);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](45, "div", 32);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](46, VerifikasiOrderRadComponent_div_46_Template, 10, 3, "div", 33);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](47, VerifikasiOrderRadComponent_div_47_Template, 7, 2, "div", 33);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](48, VerifikasiOrderRadComponent_div_48_Template, 7, 2, "div", 33);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](49, "div", 34);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](50, "div", 35);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](51, "atm-label", 36);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](52, "input", 37);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](53, "div", 35);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](54, "atm-label", 36);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](55, "ejs-datepicker", 38);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](56, "div", 39);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](57, "atm-label", 36);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](58, "ejs-dropdownlist", 40);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](59, "div", 41);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](60, "div", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](61, "org-tabs", 42, 43);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("onGetSelectedTabId", function VerifikasiOrderRadComponent_Template_org_tabs_onGetSelectedTabId_61_listener($event) { return ctx.onGetSelectedTabId($event); });
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](63, "org-tabs-item");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](64, "org-tabs-label");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](65, "p", 44);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](66, " Detail ");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](67, "org-tabs-body");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](68, "ejs-contextmenu", 45);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("select", function VerifikasiOrderRadComponent_Template_ejs_contextmenu_select_68_listener($event) { return ctx.handleSelectGridDetailOrderContextMenu($event); });
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](69, "ejs-grid", 46, 47);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("rowSelected", function VerifikasiOrderRadComponent_Template_ejs_grid_rowSelected_69_listener($event) { return ctx.handleSelectedRowGridDetailOrder($event); })("actionComplete", function VerifikasiOrderRadComponent_Template_ejs_grid_actionComplete_69_listener($event) { return ctx.handleActionCompleteGridDetailOrder($event); });
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](71, "e-columns");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](72, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](73, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](74, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](75, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](76, "e-column", 48);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](77, "e-column", 48);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](78, "e-column", 48);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](79, "e-column", 49);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](80, VerifikasiOrderRadComponent_ng_template_80_Template, 3, 3, "ng-template", null, 11, _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplateRefExtractor"]);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](82, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](83, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](84, "org-tabs-item");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](85, "org-tabs-label");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](86, "p", 44);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](87, " Diagnosa ");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](88, "org-tabs-body");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](89, "ejs-grid", 50, 51);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("rowSelected", function VerifikasiOrderRadComponent_Template_ejs_grid_rowSelected_89_listener($event) { return ctx.handleSelectedRowGridDiagnosa($event); })("actionComplete", function VerifikasiOrderRadComponent_Template_ejs_grid_actionComplete_89_listener($event) { return ctx.handleActionCompleteGridDiagnosa($event); });
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](91, "e-columns");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](92, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](93, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](94, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](95, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](96, "e-column", 8);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](97, "org-tabs-item");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](98, "org-tabs-label");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](99, "p", 44);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](100, " Catatan ");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](101, "org-tabs-body");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](102, "div", 41);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](103, "div", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](104, "textarea", 52);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](105, "                                                    ");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](106, "org-tabs-item");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](107, "org-tabs-label");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](108, "p", 44);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](109, " Darah ");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](110, "org-tabs-body");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](111, "div", 53);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](112, "div", 54);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](113, "div", 55);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](114, "div", 56);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](115, "atm-label", 36);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](116, "div", 57);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](117, "div", 58);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](118, "input", 59);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](119, "label", 60);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](120, " Pernah ");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](121, "div", 58);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](122, "input", 61);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](123, "label", 62);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](124, " Tidak ");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](125, "div", 55);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](126, "div", 56);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](127, "atm-label", 36);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](128, "div", 57);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](129, "div", 58);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](130, "input", 63);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](131, "label", 64);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](132, " Hamil ");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](133, "div", 58);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](134, "input", 65);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](135, "label", 66);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](136, " Tidak ");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](137, "div", 23);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](138, "div", 56);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](139, "atm-label", 36);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](140, "div", 57);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](141, "textarea", 67);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](142, "div", 54);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](143, "div", 55);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](144, "div", 56);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](145, "atm-label", 36);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](146, "div", 57);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](147, "ejs-dropdownlist");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](148, "div", 55);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](149, "div", 56);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](150, "atm-label", 36);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](151, "div", 57);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](152, "ejs-datepicker", 68);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](153, "div", 23);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](154, "div", 56);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](155, "atm-label", 36);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](156, "div", 57);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelement"](157, "textarea", 67);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](158, "div", 69);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](159, "div", 41);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](160, "div", 70);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](161, "button", 71);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("click", function VerifikasiOrderRadComponent_Template_button_click_161_listener() { return ctx.handleOpenModalPembatalanOrderRad(); });
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](162, " Batal Transaksi ");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](163, "button", 72);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("click", function VerifikasiOrderRadComponent_Template_button_click_163_listener() { return ctx.onSubmitFormVerifikasiOrderRad(ctx.FormVerifikasiDetailOrderRad.value); });
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtext"](164, " Verifikasi ");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementStart"](165, "org-look-up", 73, 74);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵlistener"]("onGetSelectedData", function VerifikasiOrderRadComponent_Template_org_look_up_onGetSelectedData_165_listener($event) { return ctx.onGetSelectedLookupDokter($event); });
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplate"](167, VerifikasiOrderRadComponent_ng_template_167_Template, 21, 2, "ng-template", null, 75, _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵtemplateRefExtractor"]);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵelementEnd"]();
    } if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("ButtonNav", ctx.ButtonNav);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("FilterColumnDatasource", ctx.FilterColumnDatasource)("FilterDropdownDatasource", ctx.JenisRawatDatasource)("FilterDropdownFields", ctx.JenisRawatFields);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("id", "GridDaftarPasien")("height", "calc(100vh - 21rem)")("dataSource", ctx.GridDatasource)("rowHeight", 30)("gridLines", "Both")("allowPaging", true)("allowResizing", true)("allowFiltering", true)("pageSettings", ctx.GridPageSettings)("toolbar", ctx.GridToolbar)("allowTextWrap", true)("textWrapSettings", ctx.GridWrapSettings)("editSettings", ctx.GridDataEditSettings);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 50)("field", "id_order_penunjang")("headerText", "ID")("visible", false)("type", "number")("allowEditing", false)("allowSorting", false)("format", "N")("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 80)("field", "tanggal_order_penunjang")("headerText", "TGL ORDER")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left")("type", "Date")("format", "dd/MM/yyyy");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 80)("field", "time_inputed")("headerText", "JAM MASUK")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left")("type", "Date")("format", "HH:mm:ss");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 80)("field", "no_rekam_medis")("headerText", "NO. RM")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 80)("field", "no_register")("headerText", "NO. REG")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 150)("field", "nama_pasien")("headerText", "NAMA PASIEN")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 150)("field", "nama_dokter")("headerText", "DOKTER")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 150)("field", "nama_debitur")("headerText", "DEBITUR")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](12);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("formGroup", ctx.FormVerifikasiDetailOrderRad);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](18);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("ngIf", ctx.ShowDataPasien);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("ngIf", ctx.ShowDataPasien);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("ngIf", ctx.ShowDataPasien);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "No. Sample");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "Tgl. Estimasi");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("format", "dd/MM/yyyy")("cssClass", "mt-1");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "Petugas");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("dataSource", ctx.PetugasDatasource)("fields", ctx.PetugasFields)("allowFiltering", true)("cssClass", "mt-1");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](10);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("items", ctx.GridDetailOrderContextMenuItems);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("id", "GridDetailOrder")("height", 140)("dataSource", ctx.GridDetailOrderDatasource)("contextMenuItems", ctx.GridDetailOrderContextMenuItems)("rowHeight", 30)("gridLines", "Both")("allowPaging", true)("allowResizing", true)("allowFiltering", true);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 50)("field", "id_order_penunjang")("headerText", "ID")("visible", false)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 50)("field", "id_order_penunjang_detail")("headerText", "ID ORDER PENUNJANG DETAIL")("visible", false)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 50)("field", "id_mapping_tarif_penunjang")("headerText", "ID MAPPING TARIF PENUNJANG")("visible", false)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 200)("field", "nama_tindakan_penunjang")("headerText", "NAMA PEMERIKSAAN")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 60)("field", "qty_order")("headerText", "QTY")("visible", true)("allowEditing", false)("allowSorting", false)("headerTextAlign", "Right")("textAlign", "Right")("format", "N2");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 70)("field", "unit_amount")("headerText", "TARIF RS")("visible", true)("allowEditing", false)("allowSorting", false)("headerTextAlign", "Right")("textAlign", "Right")("format", "N2");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 100)("field", "total_amount")("headerText", "TOTAL TARIF RS")("visible", true)("allowEditing", false)("allowSorting", false)("headerTextAlign", "Right")("textAlign", "Right")("format", "N2");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](4);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 150)("field", "id_dokter")("headerText", "ID DOKTER")("visible", false)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 200)("field", "nama_dokter")("headerText", "DOKTER")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](6);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("id", "GridDetailDiagnosa")("height", 140)("dataSource", ctx.GridDiagnosaDatasource)("rowHeight", 30)("gridLines", "Both")("allowPaging", true)("allowResizing", true)("allowFiltering", true);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 100)("field", "jam_periksa")("headerText", "JAM PERIKSA")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 100)("field", "kode_icd")("headerText", "ICD CODE")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 150)("field", "nama_icd")("headerText", "DIAGNOSA ")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 100)("field", "keterangan_diagnosa")("headerText", "CATATAN")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("width", 100)("field", "nama_dokter")("headerText", "DOKTER")("visible", true)("allowEditing", false)("allowSorting", false)("textAlign", "Left");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](19);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "Transfusi Sebelumnya");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](12);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "Untuk Wanita");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](12);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "Catatan");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](6);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "Gol. Darah");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](5);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "Tgl. Diperlukan");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("format", "dd/MM/yyyy");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("LabelCaption", "Indikasi Transfusi");
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](6);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("disabled", ctx.DisabledButtonBatalOrder);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("disabled", ctx.DisabledButtonVerifikasiOrder);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_15__["ɵɵproperty"]("modal-title", "Pilih Dokter")("filter-lookup", ctx.Config.LookupDokter.filter)("lookup-url", ctx.UrlLookupDokter)("columns", ctx.Config.LookupDokter.columns);
    } }, directives: [_shared_components_organism_card_card_layout_card_layout_component__WEBPACK_IMPORTED_MODULE_7__.OrgCardLayoutComponent, _shared_components_molecules_filter_mol_offcanvas_filter_mol_offcanvas_filter_component__WEBPACK_IMPORTED_MODULE_8__.MolOffcanvasFilterComponent, _syncfusion_ej2_angular_grids__WEBPACK_IMPORTED_MODULE_17__.GridComponent, _syncfusion_ej2_angular_grids__WEBPACK_IMPORTED_MODULE_17__.ColumnsDirective, _syncfusion_ej2_angular_grids__WEBPACK_IMPORTED_MODULE_17__.AggregateColumnsDirective, _syncfusion_ej2_angular_grids__WEBPACK_IMPORTED_MODULE_17__.ColumnDirective, _syncfusion_ej2_angular_grids__WEBPACK_IMPORTED_MODULE_17__.AggregateColumnDirective, _angular_forms__WEBPACK_IMPORTED_MODULE_16__["ɵNgNoValidate"], _angular_forms__WEBPACK_IMPORTED_MODULE_16__.NgControlStatusGroup, _angular_forms__WEBPACK_IMPORTED_MODULE_16__.FormGroupDirective, _angular_common__WEBPACK_IMPORTED_MODULE_18__.NgIf, _shared_components_atoms_form_atm_label_atm_label_component__WEBPACK_IMPORTED_MODULE_9__.AtmLabelComponent, _angular_forms__WEBPACK_IMPORTED_MODULE_16__.DefaultValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_16__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_16__.FormControlName, _syncfusion_ej2_angular_calendars__WEBPACK_IMPORTED_MODULE_19__.DatePickerComponent, _syncfusion_ej2_angular_dropdowns__WEBPACK_IMPORTED_MODULE_20__.DropDownListComponent, _shared_components_organism_tabs_org_tabs_component_org_tabs_component_component__WEBPACK_IMPORTED_MODULE_10__.OrgTabsComponentComponent, _shared_components_organism_tabs_org_tabs_item_component_org_tabs_item_component_component__WEBPACK_IMPORTED_MODULE_11__.OrgTabsItemComponentComponent, _shared_components_organism_tabs_org_tabs_label_component_org_tabs_label_component_component__WEBPACK_IMPORTED_MODULE_12__.OrgTabsLabelComponentComponent, _shared_components_organism_tabs_org_tabs_body_component_org_tabs_body_component_component__WEBPACK_IMPORTED_MODULE_13__.OrgTabsBodyComponentComponent, _syncfusion_ej2_angular_navigations__WEBPACK_IMPORTED_MODULE_21__.ContextMenuComponent, _shared_components_organism_loockUp_org_look_up_org_look_up_component__WEBPACK_IMPORTED_MODULE_14__.OrgLookUpComponent], styles: [".e-toolbar[_ngcontent-%COMP%]   .e-toolbar-item[_ngcontent-%COMP%]   .e-tbar-btn.e-btn[_ngcontent-%COMP%]   .e-icons.e-btn-icon[_ngcontent-%COMP%] {\r\n  min-height: 14px !important;\r\n}\r\n\r\nth.e-headercell[_ngcontent-%COMP%] {\r\n  background-color: rgba(0, 0, 0, 0.03);\r\n  color: black;\r\n  border: 1px solid rgba(0, 0, 0, 0.125);\r\n  padding: 10px !important;\r\n  height: 30px !important;\r\n}\r\n\r\nspan.e-headertext[_ngcontent-%COMP%] {\r\n  font-size: 13px !important;\r\n}\r\n\r\ntd.e-rowcell[_ngcontent-%COMP%] {\r\n  padding: 5px !important;\r\n}\r\n\r\n.modal-content-xxl[_ngcontent-%COMP%] {\r\n  width: 60rem !important;\r\n  max-width: 60rem !important;\r\n}"] });


/***/ }),

/***/ 93565:
/*!********************************************************************************************!*\
  !*** ./src/app/modules/OM/services/input-hasil-radiologi/input-hasil-radiologi.service.ts ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InputHasilRadiologiService": () => (/* binding */ InputHasilRadiologiService)
/* harmony export */ });
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ 5304);
/* harmony import */ var _api_OM__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../api/OM */ 20721);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var src_app_modules_shared_services_notification_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/app/modules/shared/services/notification.service */ 49086);
/* harmony import */ var src_app_modules_shared_services_http_operation_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/modules/shared/services/http-operation.service */ 24317);





class InputHasilRadiologiService {
    constructor(notificationService, httpOperationService) {
        this.notificationService = notificationService;
        this.httpOperationService = httpOperationService;
        this.API_CONFIG = _api_OM__WEBPACK_IMPORTED_MODULE_0__.API_ORDER_MANAGEMENT.HASIL_RADIOLOGI;
    }
    onGetAll(Data) {
        return this.httpOperationService.defaultPostRequest(this.API_CONFIG.GET_ALL, Data)
            .pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.catchError)((error) => {
            this.notificationService.onShowToast(error.statusText, error.status + ' ' + error.statusText, {}, true);
        }));
    }
    onGetDetailById(OrderPenunjangId) {
        return this.httpOperationService.defaultGetRequest(this.API_CONFIG.GET_DETAIL_BY_ID + OrderPenunjangId);
    }
    onPostSave(Data) {
        return this.httpOperationService.defaultPostRequest(this.API_CONFIG.POST_SAVE, Data)
            .pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.catchError)((error) => {
            this.notificationService.onShowToast(error.statusText, error.status + ' ' + error.statusText, {}, true);
        }));
    }
    onGetRiwayatHasilRadiologi(id_order_penunjang_detail) {
        return this.httpOperationService.defaultGetRequest(this.API_CONFIG.GET_ALL_RIWAYAT + id_order_penunjang_detail);
    }
    onUpdate(Data) {
        return this.httpOperationService.defaultPostRequest(this.API_CONFIG.POST_UPDATE, Data)
            .pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.catchError)((error) => {
            this.notificationService.onShowToast(error.statusText, error.status + ' ' + error.statusText, {}, true);
        }));
    }
    onPublish(id_hasil_radiologi, id_order_penunjang_detail) {
        return this.httpOperationService.defaultPostRequest(this.API_CONFIG.POST_PUBLISH, {
            id_hasil_radiologi: id_hasil_radiologi,
            id_order_penunjang_detail: id_order_penunjang_detail
        }).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.catchError)((error) => {
            this.notificationService.onShowToast(error.statusText, error.status + ' ' + error.statusText, {}, true);
        }));
    }
}
InputHasilRadiologiService.ɵfac = function InputHasilRadiologiService_Factory(t) { return new (t || InputHasilRadiologiService)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](src_app_modules_shared_services_notification_service__WEBPACK_IMPORTED_MODULE_1__.NotificationService), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](src_app_modules_shared_services_http_operation_service__WEBPACK_IMPORTED_MODULE_2__.HttpOperationService)); };
InputHasilRadiologiService.ɵprov = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({ token: InputHasilRadiologiService, factory: InputHasilRadiologiService.ɵfac, providedIn: 'root' });


/***/ }),

/***/ 47529:
/*!***************************************************************************************!*\
  !*** ./src/app/modules/OM/services/setup-data/setup-petugas/setup-petugas.service.ts ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SetupPetugasService": () => (/* binding */ SetupPetugasService)
/* harmony export */ });
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ 5304);
/* harmony import */ var _api_OM__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../api/OM */ 20721);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var src_app_modules_shared_services_notification_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/app/modules/shared/services/notification.service */ 49086);
/* harmony import */ var src_app_modules_shared_services_http_operation_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/modules/shared/services/http-operation.service */ 24317);





class SetupPetugasService {
    constructor(notificationService, httpOperationService) {
        this.notificationService = notificationService;
        this.httpOperationService = httpOperationService;
        this.API_EDUCATION = _api_OM__WEBPACK_IMPORTED_MODULE_0__.API_ORDER_MANAGEMENT.SETUP_DATA.SETUP_PETUGAS;
    }
    /**
     * Service Untuk Menampilkan Semua data by dynamic filter
     * @onGetAllByDynamicFilter Observable<GetAllPetugasModel>
    */
    onGetAllByDynamicFilter(Data) {
        return this.httpOperationService.defaultPostRequestByDynamicFilter(this.API_EDUCATION.GET_ALL_BY_DYNAMIC_FILTER, Data);
    }
    /**
     * Service Untuk Menampilkan Semua data
     * @onGetAll Observable<GetAllPetugasModel>
    */
    onGetAll() {
        return this.httpOperationService.defaultGetRequest(this.API_EDUCATION.GET_ALL);
    }
    /**
     * Service Untuk Manyimpan data baru
     * @onPostSave Observable<PostSavePetugasModel>
     * @param PetugasModel
    */
    onPostSave(Data) {
        return this.httpOperationService.defaultPostRequest(this.API_EDUCATION.POST_SAVE, Data)
            .pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.catchError)((error) => {
            this.notificationService.onShowToast(error.statusText, error.status + ' ' + error.statusText, {}, true);
        }));
    }
    /**
     * Service Untuk Manyimpan data baru
     * @onPutEdit Observable<PutUpdatePetugasModel>
     * @param PetugasModel
    */
    onPutEdit(Data) {
        return this.httpOperationService.defaultPutRequest(this.API_EDUCATION.UPDATE, Data)
            .pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.catchError)((error) => {
            this.notificationService.onShowToast(error.statusText, error.status + ' ' + error.statusText, {}, true);
        }));
    }
    /**
     * Service Untuk Manyimpan data baru
     * @onDelete Observable<DeletePetugasModel>
     * @param PetugasId
    */
    onDelete(PetugasId) {
        return this.httpOperationService.defaultDeleteRequest(this.API_EDUCATION.DELETE + PetugasId)
            .pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.catchError)((error) => {
            this.notificationService.onShowToast(error.statusText, error.error.title || error.message, {}, true);
        }));
    }
}
SetupPetugasService.ɵfac = function SetupPetugasService_Factory(t) { return new (t || SetupPetugasService)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](src_app_modules_shared_services_notification_service__WEBPACK_IMPORTED_MODULE_1__.NotificationService), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](src_app_modules_shared_services_http_operation_service__WEBPACK_IMPORTED_MODULE_2__.HttpOperationService)); };
SetupPetugasService.ɵprov = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({ token: SetupPetugasService, factory: SetupPetugasService.ɵfac, providedIn: 'root' });


/***/ }),

/***/ 43984:
/*!******************************************************************************************!*\
  !*** ./src/app/modules/OM/services/verifikasi-order-lab/verifikasi-order-lab.service.ts ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VerifikasiOrderLabService": () => (/* binding */ VerifikasiOrderLabService)
/* harmony export */ });
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ 5304);
/* harmony import */ var _api_OM__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../api/OM */ 20721);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var src_app_modules_shared_services_notification_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/app/modules/shared/services/notification.service */ 49086);
/* harmony import */ var src_app_modules_shared_services_http_operation_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/modules/shared/services/http-operation.service */ 24317);





class VerifikasiOrderLabService {
    constructor(notificationService, httpOperationService) {
        this.notificationService = notificationService;
        this.httpOperationService = httpOperationService;
        this.API_CONFIG = _api_OM__WEBPACK_IMPORTED_MODULE_0__.API_ORDER_MANAGEMENT.VERIFIKASI_ORDER_LAB;
    }
    onGetListOrderForVerifikasi(Data) {
        return this.httpOperationService.defaultPostRequest(this.API_CONFIG.GET_LIST_ORDER_FOR_VERIFIKASI_LAB, Data)
            .pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.catchError)((error) => {
            this.notificationService.onShowToast(error.statusText, error.status + ' ' + error.statusText, {}, true);
        }));
    }
    onGetDetailOrderForVerifikasi(id_order_penunjang) {
        return this.httpOperationService.defaultPostRequest(this.API_CONFIG.GET_DETAIL_ORDER_FOR_VERIFIKASI_LAB, {
            id_order_penunjang: id_order_penunjang,
            kode_grup_penunjang: "LAB"
        }).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.catchError)((error) => {
            this.notificationService.onShowToast(error.statusText, error.status + ' ' + error.statusText, {}, true);
        }));
    }
    onPostVerifikasiOrderLab(Data) {
        return this.httpOperationService.defaultPostRequest(this.API_CONFIG.POST_VERIFIKASI_ORDER_LAB, Data)
            .pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.catchError)((error) => {
            this.notificationService.onShowToast(error.statusText, error.status + ' ' + error.statusText, {}, true);
        }));
    }
    onPostCancelOrderLab(id_order_penunjang, reason_canceled) {
        return this.httpOperationService.defaultPostRequest(this.API_CONFIG.POST_CANCEL_ORDER_LAB, {
            id_order_penunjang: id_order_penunjang,
            reason_canceled: reason_canceled
        }).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.catchError)((error) => {
            this.notificationService.onShowToast(error.statusText, error.status + ' ' + error.statusText, {}, true);
        }));
    }
    onGetHasilLisPdf(nomor_order_penunjang) {
        return this.httpOperationService.defaultGetPrintHasilLis(`${this.API_CONFIG.GET_RESULT_LIS_PDF}${nomor_order_penunjang}`);
    }
}
VerifikasiOrderLabService.ɵfac = function VerifikasiOrderLabService_Factory(t) { return new (t || VerifikasiOrderLabService)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](src_app_modules_shared_services_notification_service__WEBPACK_IMPORTED_MODULE_1__.NotificationService), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](src_app_modules_shared_services_http_operation_service__WEBPACK_IMPORTED_MODULE_2__.HttpOperationService)); };
VerifikasiOrderLabService.ɵprov = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({ token: VerifikasiOrderLabService, factory: VerifikasiOrderLabService.ɵfac, providedIn: 'root' });


/***/ }),

/***/ 34495:
/*!******************************************************************************************!*\
  !*** ./src/app/modules/OM/services/verifikasi-order-rad/verifikasi-order-rad.service.ts ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VerifikasiOrderRadService": () => (/* binding */ VerifikasiOrderRadService)
/* harmony export */ });
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ 5304);
/* harmony import */ var _api_OM__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../api/OM */ 20721);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 37716);
/* harmony import */ var src_app_modules_shared_services_notification_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/app/modules/shared/services/notification.service */ 49086);
/* harmony import */ var src_app_modules_shared_services_http_operation_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/modules/shared/services/http-operation.service */ 24317);





class VerifikasiOrderRadService {
    constructor(notificationService, httpOperationService) {
        this.notificationService = notificationService;
        this.httpOperationService = httpOperationService;
        this.API_CONFIG = _api_OM__WEBPACK_IMPORTED_MODULE_0__.API_ORDER_MANAGEMENT.VERIFIKASI_ORDER_RAD;
    }
    onGetListOrderForVerifikasi(Data) {
        return this.httpOperationService.defaultPostRequest(this.API_CONFIG.GET_LIST_ORDER_FOR_VERIFIKASI_RAD, Data)
            .pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.catchError)((error) => {
            this.notificationService.onShowToast(error.statusText, error.status + ' ' + error.statusText, {}, true);
        }));
    }
    onGetDetailOrderForVerifikasi(id_order_penunjang) {
        return this.httpOperationService.defaultPostRequest(this.API_CONFIG.GET_DETAIL_ORDER_FOR_VERIFIKASI_RAD, {
            id_order_penunjang: id_order_penunjang,
            kode_grup_penunjang: "RAD"
        }).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.catchError)((error) => {
            this.notificationService.onShowToast(error.statusText, error.status + ' ' + error.statusText, {}, true);
        }));
    }
    onPostVerifikasiOrderRAD(Data) {
        return this.httpOperationService.defaultPostRequest(this.API_CONFIG.POST_VERIFIKASI_ORDER_RAD, Data)
            .pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.catchError)((error) => {
            this.notificationService.onShowToast(error.statusText, error.status + ' ' + error.statusText, {}, true);
        }));
    }
    onPostCancelOrderRAD(id_order_penunjang, reason_canceled) {
        return this.httpOperationService.defaultPostRequest(this.API_CONFIG.POST_CANCEL_ORDER_RAD, {
            id_order_penunjang: id_order_penunjang,
            reason_canceled: reason_canceled
        }).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.catchError)((error) => {
            this.notificationService.onShowToast(error.statusText, error.status + ' ' + error.statusText, {}, true);
        }));
    }
}
VerifikasiOrderRadService.ɵfac = function VerifikasiOrderRadService_Factory(t) { return new (t || VerifikasiOrderRadService)(_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](src_app_modules_shared_services_notification_service__WEBPACK_IMPORTED_MODULE_1__.NotificationService), _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵinject"](src_app_modules_shared_services_http_operation_service__WEBPACK_IMPORTED_MODULE_2__.HttpOperationService)); };
VerifikasiOrderRadService.ɵprov = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjectable"]({ token: VerifikasiOrderRadService, factory: VerifikasiOrderRadService.ɵfac, providedIn: 'root' });


/***/ }),

/***/ 59294:
/*!***********************************************************************************************!*\
  !*** ./src/app/modules/OM/pages/input-hasil-radiologi/json/input-hasil-radiologi.config.json ***!
  \***********************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"DummyDatasource":[{"id_order_penunjang":1,"tanggal_order_penunjang":"10/03/2021","tanggal_hasil_order_penunjang":null,"nama_pasien":"Soetomo","gender":"L","nama_dokter":"Lalisa Manoban","nama_poli":"DALAM","kelas_perawatan":"III","detail":[{"id_order_penunjang":1,"id_order_penunjang_detail":1,"nama_pemeriksaan":"MRI 1,5 T - Cervical","left_or_right":"LR","polos_or_kontras":"P","no_order":"01","kode_tarif":"TRF.AC0001","nama_tarif":"Pemeriksaan Tes","tgl_hasil":null}]}],"LookupDokter":{"columns":[{"allowEditing":true,"allowSorting":true,"displayAsCheckBox":true,"editType":"booleanEdit","field":"cek","headerText":"CEK","visible":false,"width":150},{"allowEditing":true,"allowSorting":true,"editType":"numericEdit","field":"id_person","format":"N2","headerText":"PERSON ID","type":"number","visible":false,"width":150},{"allowEditing":true,"allowSorting":true,"editType":"defaultEdit","field":"kode_dokter","headerText":"KODE DOKTER","type":"string","visible":true,"width":90},{"allowEditing":true,"allowSorting":true,"editType":"defaultEdit","field":"full_name","headerText":"NAMA DOKTER","type":"string","visible":true,"width":200},{"allowEditing":true,"allowSorting":true,"editType":"defaultEdit","field":"spesialisasi_dokter","headerText":"SPESIALISASI","type":"string","visible":true,"width":110}],"filter":[{"field":"d.kode_dokter","filter":"like","title":"KODE DOKTER"},{"field":"concat(p.nama_depan, \' \',p.nama_belakang)","filter":"like","title":"NAMA DOKTER"}]}}');

/***/ }),

/***/ 24100:
/*!******************************************************************************************!*\
  !*** ./src/app/modules/OM/pages/setup-data/setup-petugas/json/setup-petugas.config.json ***!
  \******************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"GridSetupPetugasColumns":[{"allowEditing":true,"allowSorting":true,"editType":"numericEdit","field":"id_petugas","format":"N","headerText":"ID","type":"number","visible":false,"width":50},{"allowEditing":false,"allowSorting":true,"editType":"defaultEdit","field":"nama_petugas","headerText":"NAMA PETUGAS","visible":true,"width":200},{"allowEditing":false,"allowSorting":true,"editType":"defaultEdit","field":"kode_grup_penunjang","headerText":"KODE GRUP PENUNJANG","visible":true,"width":100}]}');

/***/ }),

/***/ 29337:
/*!*********************************************************************************************!*\
  !*** ./src/app/modules/OM/pages/verifikasi-order-lab/json/verifikasi-order-lab.config.json ***!
  \*********************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"GridConfig":[{"allowEditing":false,"allowSorting":false,"editType":"numericEdit","field":"no_order","headerText":"NO.ORDER","visible":true,"width":50},{"allowEditing":false,"allowSorting":false,"editType":"defaultEdit","field":"waktu_order","headerText":"WAKTU ORDER","visible":true,"type":"DateTime","format":"dd/MM/yyyy - HH:mm","width":120},{"allowEditing":false,"allowSorting":false,"editType":"defaultEdit","field":"no_register","headerText":"NO. REGISTER","visible":true,"width":100},{"allowEditing":false,"allowSorting":false,"editType":"defaultEdit","field":"no_rekam_medis","headerText":"NO. RM","visible":true,"width":100},{"allowEditing":false,"allowSorting":false,"editType":"defaultEdit","field":"nama_pasien","headerText":"NAMA PASIEN","visible":true,"width":150},{"allowEditing":false,"allowSorting":false,"editType":"defaultEdit","field":"nama_dokter","headerText":"NAMA DOKTER","visible":true,"width":150},{"allowEditing":false,"allowSorting":false,"editType":"defaultEdit","field":"nama_debitur","headerText":"DEBITUR","visible":true,"width":150}],"LookupDokter":{"columns":[{"allowEditing":true,"allowSorting":true,"displayAsCheckBox":true,"editType":"booleanEdit","field":"cek","headerText":"CEK","visible":false,"width":150},{"allowEditing":true,"allowSorting":true,"editType":"numericEdit","field":"id_person","format":"N2","headerText":"PERSON ID","type":"number","visible":false,"width":150},{"allowEditing":true,"allowSorting":true,"editType":"defaultEdit","field":"kode_dokter","headerText":"KODE DOKTER","type":"string","visible":true,"width":90},{"allowEditing":true,"allowSorting":true,"editType":"defaultEdit","field":"full_name","headerText":"NAMA DOKTER","type":"string","visible":true,"width":200},{"allowEditing":true,"allowSorting":true,"editType":"defaultEdit","field":"spesialisasi_dokter","headerText":"SPESIALISASI","type":"string","visible":true,"width":110}],"filter":[{"field":"d.kode_dokter","filter":"like","title":"KODE DOKTER"},{"field":"concat(p.nama_depan, \' \',p.nama_belakang)","filter":"like","title":"NAMA DOKTER"}]}}');

/***/ }),

/***/ 16414:
/*!*********************************************************************************************!*\
  !*** ./src/app/modules/OM/pages/verifikasi-order-rad/json/verifikasi-order-rad.config.json ***!
  \*********************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"GridConfig":[{"allowEditing":false,"allowSorting":false,"editType":"numericEdit","field":"no_order","headerText":"NO.ORDER","visible":true,"width":50},{"allowEditing":false,"allowSorting":false,"editType":"defaultEdit","field":"waktu_order","headerText":"WAKTU ORDER","visible":true,"type":"DateTime","format":"dd/MM/yyyy - HH:mm","width":120},{"allowEditing":false,"allowSorting":false,"editType":"defaultEdit","field":"no_register","headerText":"NO. REGISTER","visible":true,"width":100},{"allowEditing":false,"allowSorting":false,"editType":"defaultEdit","field":"no_rekam_medis","headerText":"NO. RM","visible":true,"width":100},{"allowEditing":false,"allowSorting":false,"editType":"defaultEdit","field":"nama_pasien","headerText":"NAMA PASIEN","visible":true,"width":150},{"allowEditing":false,"allowSorting":false,"editType":"defaultEdit","field":"nama_dokter","headerText":"NAMA DOKTER","visible":true,"width":150},{"allowEditing":false,"allowSorting":false,"editType":"defaultEdit","field":"nama_debitur","headerText":"DEBITUR","visible":true,"width":150}],"LookupDokter":{"columns":[{"allowEditing":true,"allowSorting":true,"displayAsCheckBox":true,"editType":"booleanEdit","field":"cek","headerText":"CEK","visible":false,"width":150},{"allowEditing":true,"allowSorting":true,"editType":"numericEdit","field":"id_person","format":"N2","headerText":"PERSON ID","type":"number","visible":false,"width":150},{"allowEditing":true,"allowSorting":true,"editType":"defaultEdit","field":"kode_dokter","headerText":"KODE DOKTER","type":"string","visible":true,"width":90},{"allowEditing":true,"allowSorting":true,"editType":"defaultEdit","field":"full_name","headerText":"NAMA DOKTER","type":"string","visible":true,"width":200},{"allowEditing":true,"allowSorting":true,"editType":"defaultEdit","field":"spesialisasi_dokter","headerText":"SPESIALISASI","type":"string","visible":true,"width":110}],"filter":[{"field":"d.kode_dokter","filter":"like","title":"KODE DOKTER"},{"field":"concat(p.nama_depan, \' \',p.nama_belakang)","filter":"like","title":"NAMA DOKTER"}]}}');

/***/ })

}]);