{
	"HIS TRANSAKSI Variable ": {
		"prefix": "histrv",
		"body": [
		  "ButtonNav: ButtonNavModel[] = [",
		  "    { Id: \"add\", Captions: \"Tambah\", Icons1: \"fas fa-plus fa-sm\" },",
		  "    { Id: \"edit\", Captions: \"Edit\", Icons1: \"fas fa-edit fa-sm\" },",
		  "    { Id: \"delete\", Captions: \"Hapus\", Icons1: \"fas fa-trash-alt fa-sm\" },",
		  "  ];",
		  "// import * as GridConfig from './json/grid.config.json';",
		  "public GridConfig = GridConfig;",
		  "GridDetailToolbar = [",
		  "  { text: 'Add', tooltipText: 'Add', prefixIcon: 'fas fa-plus fa-sm', id: 'add' },",
		  "];",
		  "modalRef: BsModalRef;"
		],
		"description": "HIS TRANSAKSI Variable "
	},
	"HIS TRANSAKSI Method ": {
		"prefix": "histrm",
		"body": [
		  "    onClickButtonNav(ButtonId: string): void {",
		  "        switch (ButtonId) {",
		  "            case 'add':",
		  "                break;",
		  "            case 'edit':",
		  "                break;",
		  "            case 'delete':",
		  "                break;",
		  "            default:",
		  "                break;",
		  "        }",
		  "    }       ",
		  "",
		  "    onToolbarClick(args: any): void {",
		  "        const item = args.item.id;",
		  "        switch (item) {",
		  "            case 'add':",
		  "               ",
		  "                break;",
		  "            case 'edit':",
		  "               ",
		  "                break;",
		  "            case 'detail':",
		  "         ",
		  "                break;",
		  "            default:",
		  "                break;",
		  "        }",
		  "    }",
		  "",
		  ""
		],
		"description": "HIS TRANSAKSI Method "
	},
	"HIS Form Builder": {
		"prefix": "hisformbuilder",
		"body": [
		  "this.form${1:nama} = this.formBuilder.group({",
		  "\t${2:entitas}: [\"\", Validators.required],${3}",
		  "});"
		],
		"description": "HIS From Builder"
	},
	"HIS MASTER DATA CONTROLLER TYPESCRIPT": {
		"prefix": "hismscontroller",
		"body": [
		 "\t/**",
		 "\t * Variable untuk Menympan Navigasi halaman",
		 "\t * @ButtonNavModel Array",
		 "\t*/",
		 "\tButtonNav: ButtonNavModel[];",
		 "",
		 "\t/**",
		 "\t * Form Group untuk mengatur Form Data",
		 "\t * @FormGroup ",
		 "\t*/",
		 "\tFormInputData: FormGroup;",
		 "",
		 "\t/**",
		 "\t * Variable untuk menentukan apakah form dalam posisi input data atau edit data",
		 "\t * @Boolean ",
		 "\t*/",
		 "\tStatusFormNew: Boolean;",
		 "",
		 "\t/**",
		 "\t * Variable untuk menyimpan Configurasi Grid",
		 "\t * @Json Config",
		 "\t*/",
		 "\tGridConfig = Config;",
		 "",
		 "\t/**",
		 "\t * Variable untuk menentukan component input ",
		 "\t * @val normal,edit,detail",
		 "\t*/",
		 "\tinputFieldState = 'normal';",
		 "",
		 "\t/**",
		 "\t * Variable untuk menentukan tap berada di posisi mana ",
		 "\t * @valur data | input",
		 "\t*/",
		 "\tTabId: string = 'Data';",
		 "",
		 "\t@ViewChild('OrgTabsRef', { static: true }) OrgTabsRef: OrgTabsComponentComponent;",
		 "",
		 "\tGridDatasource: any[];",
		 "\tprivate GridData: MolGridComponent = null;",
		 "\tGridDataEditSettings: EditSettingsModel = { allowAdding: true, allowDeleting: true, allowEditing: true };",
		 "\tGridDataToolbar: any[];",
		 "",
		 "\t/**",
		 "\t * Berisi Data Yang selected dari dalam grid",
		 "\t * @Object Single Object",
		 "\t*/",
		 "\tSelectedData: Object;",
		 "",
		 "\tconstructor(",
		 "\t\tprivate formBuilder: FormBuilder,",
		 "\t\tprivate utilityService: UtilityService,",
		 "\t\tprivate setup${1:Nama}Service: Setup${1:Nama}Service",
		 "\t) {",
		 "\t\tthis.FormInputData = this.formBuilder.group({",
		 "\t\t\tkode_${2:field}: ['', [Validators.required]],",
		 "\t\t\tnama_${2:field}: ['', [Validators.required]],",
		 "\t\t\tis_active: [false, []]",
		 "\t\t});",
		 "\t}",
		 "",
		 "\tngOnInit(): void {",
		 "",
		 "\t\tthis.GridDataToolbar = [",
		 "\t\t\t{ text: 'Add', tooltipText: 'Add', prefixIcon: 'fas fa-plus fa-sm', id: 'add' },",
		 "\t\t\t{ text: 'Edit', tooltipText: 'Edit', prefixIcon: 'fas fa-edit fa-sm', id: 'edit' },",
		 "\t\t\t{ text: 'Detail', tooltipText: 'Detail', prefixIcon: 'fas fa-info-circle fa-sm', id: 'detail' },",
		 "\t\t\t'Search'",
		 "\t\t];",
		 "",
		 "\t\tthis.GetAllData();",
		 "",
		 "\t}",
		 "",
		 "",
		 "\thandleSelectedTabId(TabId: string): void {",
		 "\t\tthis.TabId = TabId;",
		 "\t\tif (TabId == 'Input') {",
		 "\t\t\tthis.setNewForm;",
		 "\t\t} else {",
		 "\t\t\tthis.GetAllData",
		 "\t\t}",
		 "\t}",
		 "",
		 "\tInitalizedGrid(component: MolGridComponent) {",
		 "\t\tthis.GridData = component;",
		 "\t}",
		 "",
		 "\thandleSelectedRow(args: any): void {",
		 "\t\tthis.SelectedData = args.data;",
		 "\t}",
		 "",
		 "\thandleActionComplete($event: any): void {",
		 "\t\tconsole.log($event);",
		 "\t\tif ($event.requestType == \"save\") {",
		 "\t\t\tif ($event.data.is_active != $event.rowData.is_active) {",
		 "\t\t\t\tthis.SetActive($event.data.is_active, $event.data.kode_${2:field})",
		 "\t\t\t}",
		 "\t\t}",
		 "\t}",
		 "",
		 "\thandleToolbarClick(args: any): void {",
		 "\t\tconst item = args.item.id;",
		 "",
		 "\t\tswitch (item) {",
		 "\t\t\tcase 'add':",
		 "\t\t\t\tthis.setNewForm();",
		 "\t\t\t\tbreak;",
		 "\t\t\tcase 'edit':",
		 "\t\t\t\tthis.setEditForm();",
		 "\t\t\t\tbreak;",
		 "\t\t\tcase 'detail':",
		 "\t\t\t\tthis.setViewForm();",
		 "\t\t\t\tbreak;",
		 "\t\t\tdefault:",
		 "\t\t\t\tbreak;",
		 "\t\t}",
		 "\t}",
		 "",
		 "\thandleClickCommandGrid(args: any): void {",
		 "\t\tconsole.log(args);",
		 "\t}",
		 "",
		 "\thandleClickButtonNav(ButtonId: string): void {",
		 "\t\tswitch (ButtonId) {",
		 "\t\t\tcase 'SaveAndNew':",
		 "\t\t\t\tthis.SaveAndNew();",
		 "\t\t\t\tbreak;",
		 "\t\t\tcase 'Clear':",
		 "\t\t\t\tthis.Clear();",
		 "\t\t\t\tbreak;",
		 "\t\t\tcase 'Cancel':",
		 "\t\t\t\tthis.Cancel();",
		 "\t\t\t\tbreak;",
		 "\t\t\tdefault:",
		 "\t\t\t\tbreak;",
		 "\t\t}",
		 "\t}",
		 "",
		 "\t/** untuk identifikasi keyboard down pada grid */",
		 "\thandleLoadGrid(args: any): void {",
		 "\t\tdocument.getElementsByClassName('e-grid')[0].addEventListener('keydown', this.KeyDownHandler.bind(this));",
		 "\t}",
		 "",
		 "\t/** method setting input new data */",
		 "\tsetNewForm(): void {",
		 "\t\tthis.OrgTabsRef.onNavigateTabUsingTabId(1, 'Input');",
		 "\t\tthis.inputFieldState = 'normal';",
		 "\t\tthis.FormInputData.reset();",
		 "\t\tthis.StatusFormNew = true;",
		 "\t\tthis.ButtonNav = [",
		 "\t\t\t{ Id: 'SaveAndNew', Captions: 'Save', Icons1: 'fa-save' },",
		 "\t\t\t{ Id: 'Clear', Captions: 'Clear', Icons1: 'fa-redo-alt' },",
		 "\t\t\t{ Id: 'Cancel', Captions: 'Back', Icons1: 'fa-arrow-left' },",
		 "\t\t];",
		 "\t};",
		 "",
		 "\t/** method setting edit data */",
		 "\tsetEditForm(): void {",
		 "\t\tthis.inputFieldState = 'edit';",
		 "\t\tthis.SetFrom(this.SelectedData);",
		 "\t\tthis.StatusFormNew = false;",
		 "\t\tthis.OrgTabsRef.onNavigateTabUsingTabId(1, 'Input');",
		 "\t\tthis.ButtonNav = [",
		 "\t\t\t{ Id: 'SaveAndNew', Captions: 'Save', Icons1: 'fa-save' },",
		 "\t\t\t{ Id: 'Cancel', Captions: 'Back', Icons1: 'fa-arrow-left' },",
		 "\t\t];",
		 "",
		 "\t};",
		 "",
		 "\t/** method setting lihat data detail */",
		 "\tsetViewForm(): void {",
		 "\t\tthis.OrgTabsRef.onNavigateTabUsingTabId(1, 'Input');",
		 "\t\tthis.inputFieldState = 'detail';",
		 "\t\tthis.SetFrom(this.SelectedData);",
		 "\t\tthis.ButtonNav = [",
		 "\t\t\t{ Id: 'Cancel', Captions: 'Back', Icons1: 'fa-arrow-left' },",
		 "\t\t];",
		 "\t}",
		 "",
		 "\t/** Method untuk mengkosongkan data yang ada di form*/",
		 "\tResetFrom(): void {",
		 "\t\tthis.FormInputData.reset();",
		 "\t\tthis.kode_${2:field}.setValue('');",
		 "\t\tthis.nama_${2:field}.setValue('');",
		 "\t}",
		 "",
		 "\t/** Method Untuk Mereload Data Grid */",
		 "\tGetAllData(): void {",
		 "\t\tthis.setup${1:Nama}Service.onGetAll()",
		 "\t\t\t.subscribe((result) => {",
		 "\t\t\t\tthis.GridDatasource = result.data;",
		 "\t\t\t});",
		 "\t}",
		 "",
		 "\tAddData${1:Nama}(): void {",
		 "\t\tconsole.log('Add');",
		 "\t}",
		 "",
		 "\t/** Method Untuk Mengisikan data yang ada di form */",
		 "\tSetFrom(Data): void {",
		 "\t\tthis.FormInputData.reset();",
		 "\t\tthis.FormInputData.setValue(Data);",
		 "\t}",
		 "",
		 "\t/** Method menyimpan | menubah data */",
		 "\tSaveAndNew(): void {",
		 "\t\tconst Data = this.FormInputData.value;",
		 "\t\tif (this.inputFieldState=='normal') {",
		 "\t\t\tthis.setup${1:Nama}Service.onPostSave(Data)",
		 "\t\t\t\t.subscribe((result: Setup${1:Nama}Model) => {",
		 "\t\t\t\t\tthis.utilityService.onShowingCustomAlert('success', 'Berhasil Tambah Data Baru', result.message)",
		 "\t\t\t\t\t\t.then(() => {",
		 "\t\t\t\t\t\t\tthis.ResetFrom();",
		 "\t\t\t\t\t\t});",
		 "\t\t\t\t});",
		 "\t\t} else {",
		 "\t\t\tthis.setup${1:Nama}Service.onPutEdit(Data)",
		 "\t\t\t\t.subscribe((result: Setup${1:Nama}Model) => {",
		 "\t\t\t\t\tthis.utilityService.onShowingCustomAlert('success', 'Berhasil Ubah Data', result.message)",
		 "\t\t\t\t\t\t.then(() => {",
		 "",
		 "\t\t\t\t\t\t});",
		 "\t\t\t\t});",
		 "\t\t}",
		 "\t}",
		 "",
		 "\t/** Method untuk mengubah status aktif | Non Active ",
		 "\t * @param is_active,kode_${2:field}",
		 "\t*/",
		 "\tSetActive(is_active: boolean, kode_${2:field}: string): void {",
		 "\t\tlet data = {",
		 "\t\t\tkode_${2:field}: kode_${2:field}",
		 "\t\t}",
		 "\t\tconsole.log('data', data)",
		 "\t\tconsole.log('is_active', is_active)",
		 "\t\tif (is_active) {",
		 "\t\t\tthis.setup${1:Nama}Service.onPutToActive(data)",
		 "\t\t\t\t.subscribe((result) => {",
		 "\t\t\t\t\tthis.utilityService.onShowingCustomAlert('success', 'Berhasil Di Aktifkan', result.message)",
		 "\t\t\t\t\t\t.then(() => {",
		 "",
		 "\t\t\t\t\t\t});",
		 "\t\t\t\t})",
		 "\t\t} else {",
		 "\t\t\tthis.setup${1:Nama}Service.onPutToDeActive(data)",
		 "\t\t\t\t.subscribe((result) => {",
		 "\t\t\t\t\tthis.utilityService.onShowingCustomAlert('success', 'Berhasil Di Non Aktifkan', result.message)",
		 "\t\t\t\t\t\t.then(() => {",
		 "",
		 "\t\t\t\t\t\t});",
		 "\t\t\t\t})",
		 "\t\t}",
		 "\t}",
		 "",
		 "\tClear(): void {",
		 "\t\tthis.ResetFrom();",
		 "\t}",
		 "",
		 "\tCancel(): void {",
		 "\t\tthis.ResetFrom();",
		 "\t\tthis.OrgTabsRef.onNavigateTabUsingTabId(0, 'Data');",
		 "\t\tthis.GetAllData();",
		 "\t}",
		 "",
		 "\tKeyDownHandler(event: KeyboardEvent) {",
		 "\t\tif (event.keyCode === 13) {",
		 "\t\t\tconsole.log('Enter Has Been Pressed');",
		 "\t\t};",
		 "\t\tif (event.keyCode === 46) {",
		 "\t\t\tconsole.log('Delete Key Has Been Pressed');",
		 "\t\t};",
		 "\t\tif (event.keyCode === 40) {",
		 "\t\t\tconsole.log('Delete Key Has Been Pressed');",
		 "\t\t}",
		 "\t}",
		 "",
		 "\tget kode_${2:field}(): AbstractControl { return this.FormInputData.get('kode_${2:field}'); }",
		 "\tget nama_${2:field}(): AbstractControl { return this.FormInputData.get('nama_${2:field}'); }"
		],
		"description": "HIS MASTER DATA CONTROLLER TYPESCRIPT"
	},
	"HIS MASTER DATA SERVICE TYPESCRIPT": {
		"prefix": "hismsservice",
		"body": [
		  "\tAPI = API_MM.SETUP_DATA.SETUP_${1:Nama}",
		  "",
		  "\tconstructor(",
		  "\t\tprivate notificationService: NotificationService,",
		  "\t\tprivate httpOperationService: HttpOperationService) { }",
		  "",
		  "\t/**",
		  "\t * Service Untuk Menampilkan Semua data",
		  "\t * @onGetAll Observable<SetupPabrikModel>",
		  "\t*/",
		  "\tonGetAll(): Observable<Setup${1:Nama}Model> {",
		  "\t\treturn this.httpOperationService.defaultGetRequest(this.API.GET_ALL);",
		  "\t}",
		  "",
		  "\t/**",
		  "\t * Service Untuk Manyimpan data baru",
		  "\t * @onPostSave Observable<any>",
		  "\t * @param ISetupPabrikModel",
		  "\t*/",
		  "\tonPostSave(Data: ISetup${1:Nama}Model): Observable<any> {",
		  "\t\treturn this.httpOperationService.defaultPostRequest(this.API.INSERT, Data)",
		  "\t\t\t.pipe(",
		  "\t\t\t\tcatchError((error: HttpErrorResponse): any => {",
		  "\t\t\t\t\tthis.notificationService.onShowToast(error.statusText, error.status + ' ' + error.statusText, {}, true);",
		  "\t\t\t\t})",
		  "\t\t\t);",
		  "\t}",
		  "",
		  "\t/**",
		  "\t * Service Untuk Manyimpan data baru",
		  "\t * @onPutEdit Observable<any>",
		  "\t * @param ISetupPabrikModel",
		  "\t*/",
		  "\tonPutEdit(Data: ISetup${1:Nama}Model): Observable<any> {",
		  "\t\treturn this.httpOperationService.defaultPutRequest(this.API.UPDATE, Data)",
		  "\t\t\t.pipe(",
		  "\t\t\t\tcatchError((error: HttpErrorResponse): any => {",
		  "\t\t\t\t\tthis.notificationService.onShowToast(error.statusText, error.status + ' ' + error.statusText, {}, true);",
		  "\t\t\t\t})",
		  "\t\t\t);",
		  "\t}",
		  "",
		  "\t/**",
		  "\t * Service menubah data menjadi active",
		  "\t * @onPutToActive Observable<any>",
		  "\t * @param ISetupPabrikModel",
		  "\t*/",
		  "\tonPutToActive(Data: SetActiveModel): Observable<any> {",
		  "\t\treturn this.httpOperationService.defaultPutRequest(this.API.UPDATETOACTIVE, Data)",
		  "\t\t\t.pipe(",
		  "\t\t\t\tcatchError((error: HttpErrorResponse): any => {",
		  "\t\t\t\t\tthis.notificationService.onShowToast(error.statusText, error.status + ' ' + error.statusText, {}, true);",
		  "\t\t\t\t})",
		  "\t\t\t);",
		  "\t}",
		  "",
		  "\t/**",
		  "\t * Service Untuk mwngubah data menjadi tidak aktif",
		  "\t * @onPutToDeActive Observable<any>",
		  "\t * @param ISetupPabrikModel",
		  "\t*/",
		  "\tonPutToDeActive(Data: SetActiveModel): Observable<any> {",
		  "\t\treturn this.httpOperationService.defaultPutRequest(this.API.UPDATETODEACTIVE, Data)",
		  "\t\t\t.pipe(",
		  "\t\t\t\tcatchError((error: HttpErrorResponse): any => {",
		  "\t\t\t\t\tthis.notificationService.onShowToast(error.statusText, error.status + ' ' + error.statusText, {}, true);",
		  "\t\t\t\t})",
		  "\t\t\t);",
		  "\t}"
		],
		"description": "HIS MASTER DATA SERVICE TYPESCRIPT"
	}
}